<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-05T07:49:08.175Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小远</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dubbo源码配置文件解析</title>
    <link href="http://yoursite.com/2020/01/13/dubbo%E6%BA%90%E7%A0%81/dubbo%E6%BA%90%E7%A0%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/01/13/dubbo源码/dubbo源码配置文件解析/</id>
    <published>2020-01-13T14:32:38.170Z</published>
    <updated>2018-08-05T07:49:08.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>服务方配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">     xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</span><br><span class="line">     xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">         http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span><br><span class="line">         http://code.alibabatech.com/schema/dubbo </span><br><span class="line">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span><br><span class="line">    &lt;dubbo:application name=&quot;demo-provider&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 使用zookeeper注册中心，并使用curator客户端 --&gt;</span><br><span class="line">    &lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;10.211.55.5:2181&quot; client=&quot;curator&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 使用dubbo协议在20880端口暴露服务 --&gt;</span><br><span class="line">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 和本地bean一样实现服务 --&gt;</span><br><span class="line">    &lt;bean id=&quot;demoService&quot; class=&quot;com.alibaba.dubbo.demo.provider.DemoServiceImpl&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 声明需要暴露的服务接口 --&gt;</span><br><span class="line">    &lt;dubbo:service interface=&quot;com.alibaba.dubbo.demo.DemoService&quot; ref=&quot;demoService&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>消费方配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">     xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</span><br><span class="line">     xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">     http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span><br><span class="line">     http://code.alibabatech.com/schema/dubbo </span><br><span class="line">     http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span><br><span class="line">    &lt;dubbo:application name=&quot;demo-consumer&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 使用zookeeper注册中心，并使用curator客户端 --&gt;     </span><br><span class="line">    &lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;10.211.55.5:2181&quot; client=&quot;curator&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span><br><span class="line">    &lt;dubbo:reference id=&quot;demoService&quot; check=&quot;false&quot; interface=&quot;com.alibaba.dubbo.demo.DemoService&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、解析配置文件"><a href="#一、解析配置文件" class="headerlink" title="一、解析配置文件"></a>一、解析配置文件</h3><h4 id="1、DubboNamespaceHandler的init方法"><a href="#1、DubboNamespaceHandler的init方法" class="headerlink" title="1、DubboNamespaceHandler的init方法"></a>1、DubboNamespaceHandler的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void init() &#123;</span><br><span class="line">    registerBeanDefinitionParser(&quot;application&quot;, new DubboBeanDefinitionParser(ApplicationConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;module&quot;, new DubboBeanDefinitionParser(ModuleConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;registry&quot;, new DubboBeanDefinitionParser(RegistryConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;monitor&quot;, new DubboBeanDefinitionParser(MonitorConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;provider&quot;, new DubboBeanDefinitionParser(ProviderConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;consumer&quot;, new DubboBeanDefinitionParser(ConsumerConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;protocol&quot;, new DubboBeanDefinitionParser(ProtocolConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;service&quot;, new DubboBeanDefinitionParser(ServiceBean.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;reference&quot;, new DubboBeanDefinitionParser(ReferenceBean.class, false));</span><br><span class="line">    registerBeanDefinitionParser(&quot;annotation&quot;, new DubboBeanDefinitionParser(AnnotationBean.class, true));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DubboBeanDefinitionParser的parse方法"><a href="#2、DubboBeanDefinitionParser的parse方法" class="headerlink" title="2、DubboBeanDefinitionParser的parse方法"></a>2、DubboBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private static BeanDefinition parse(Element element, ParserContext parserContext, Class&lt;?&gt; beanClass, boolean required) &#123;</span><br><span class="line">    //创建beanDefinition</span><br><span class="line">    RootBeanDefinition beanDefinition = new RootBeanDefinition();</span><br><span class="line">    //设置bean的class</span><br><span class="line">    beanDefinition.setBeanClass(beanClass);</span><br><span class="line">    //懒加载</span><br><span class="line">    beanDefinition.setLazyInit(false);</span><br><span class="line">    //获取id属性</span><br><span class="line">    String id = element.getAttribute(&quot;id&quot;);</span><br><span class="line">    //未获取到id属性</span><br><span class="line">    if ((id == null || id.length() == 0) &amp;&amp; required) &#123;</span><br><span class="line">        //获取name属性</span><br><span class="line">        String generatedBeanName = element.getAttribute(&quot;name&quot;);</span><br><span class="line">        //未获取到name属性</span><br><span class="line">        if (generatedBeanName == null || generatedBeanName.length() == 0) &#123;</span><br><span class="line">            //ProtocolConfig类的bean默认&quot;dubbo&quot;,其余用interface属性作为generatedBeanName</span><br><span class="line">            if (ProtocolConfig.class.equals(beanClass)) &#123;</span><br><span class="line">                generatedBeanName = &quot;dubbo&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                generatedBeanName = element.getAttribute(&quot;interface&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //任未获取到generatedBeanName，用全类名作为generatedBeanName</span><br><span class="line">        if (generatedBeanName == null || generatedBeanName.length() == 0) &#123;</span><br><span class="line">            generatedBeanName = beanClass.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        //id默认使用generatedBeanName</span><br><span class="line">        id = generatedBeanName; </span><br><span class="line">        int counter = 2;</span><br><span class="line">        //防止id重复</span><br><span class="line">        while(parserContext.getRegistry().containsBeanDefinition(id)) &#123;</span><br><span class="line">            id = generatedBeanName + (counter ++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (id != null &amp;&amp; id.length() &gt; 0) &#123;</span><br><span class="line">        if (parserContext.getRegistry().containsBeanDefinition(id))  &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;Duplicate spring bean id &quot; + id);</span><br><span class="line">        &#125;</span><br><span class="line">        //注册beanDefinition</span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(&quot;id&quot;, id);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析的为ProtocolConfig</span><br><span class="line">    if (ProtocolConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        //获取依赖ProtocolConfig的bean，将ProtocolConfig设置为该bean的属性</span><br><span class="line">        for (String name : parserContext.getRegistry().getBeanDefinitionNames()) &#123;</span><br><span class="line">            BeanDefinition definition = parserContext.getRegistry().getBeanDefinition(name);</span><br><span class="line">            PropertyValue property = definition.getPropertyValues().getPropertyValue(&quot;protocol&quot;);</span><br><span class="line">            if (property != null) &#123;</span><br><span class="line">                Object value = property.getValue();</span><br><span class="line">                if (value instanceof ProtocolConfig &amp;&amp; id.equals(((ProtocolConfig) value).getName())) &#123;</span><br><span class="line">                    definition.getPropertyValues().addPropertyValue(&quot;protocol&quot;, new RuntimeBeanReference(id));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    //解析的为ServiceBean</span><br><span class="line">    &#125; else if (ServiceBean.class.equals(beanClass)) &#123;</span><br><span class="line">        //获取class属性</span><br><span class="line">        String className = element.getAttribute(&quot;class&quot;);</span><br><span class="line">        //创建className的beanDefinition，并设置为ServiceBean的属性</span><br><span class="line">        if(className != null &amp;&amp; className.length() &gt; 0) &#123;</span><br><span class="line">            RootBeanDefinition classDefinition = new RootBeanDefinition();</span><br><span class="line">            classDefinition.setBeanClass(ReflectUtils.forName(className));</span><br><span class="line">            classDefinition.setLazyInit(false);</span><br><span class="line">            parseProperties(element.getChildNodes(), classDefinition);</span><br><span class="line">            beanDefinition.getPropertyValues().addPropertyValue(&quot;ref&quot;, new BeanDefinitionHolder(classDefinition, id + &quot;Impl&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    //解析的为ProviderConfig</span><br><span class="line">    &#125; else if (ProviderConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        //解析子属性</span><br><span class="line">        parseNested(element, parserContext, ServiceBean.class, true, &quot;service&quot;, &quot;provider&quot;, id, beanDefinition);</span><br><span class="line">    //解析的为ConsumerConfig</span><br><span class="line">    &#125; else if (ConsumerConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        //解析子属性</span><br><span class="line">        parseNested(element, parserContext, ReferenceBean.class, false, &quot;reference&quot;, &quot;consumer&quot;, id, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; props = new HashSet&lt;String&gt;();</span><br><span class="line">    ManagedMap parameters = null;</span><br><span class="line">    //遍历setter方法，解析并设置属性值</span><br><span class="line">    for (Method setter : beanClass.getMethods()) &#123;</span><br><span class="line">        String name = setter.getName();</span><br><span class="line">        if (name.length() &gt; 3 &amp;&amp; name.startsWith(&quot;set&quot;)</span><br><span class="line">                &amp;&amp; Modifier.isPublic(setter.getModifiers())</span><br><span class="line">                &amp;&amp; setter.getParameterTypes().length == 1) &#123;</span><br><span class="line">            Class&lt;?&gt; type = setter.getParameterTypes()[0];</span><br><span class="line">            String property = StringUtils.camelToSplitName(name.substring(3, 4).toLowerCase() + name.substring(4), &quot;-&quot;);</span><br><span class="line">            props.add(property);</span><br><span class="line">            Method getter = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                getter = beanClass.getMethod(&quot;get&quot; + name.substring(3), new Class&lt;?&gt;[0]);</span><br><span class="line">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    getter = beanClass.getMethod(&quot;is&quot; + name.substring(3), new Class&lt;?&gt;[0]);</span><br><span class="line">                &#125; catch (NoSuchMethodException e2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (getter == null </span><br><span class="line">                    || ! Modifier.isPublic(getter.getModifiers())</span><br><span class="line">                    || ! type.equals(getter.getReturnType())) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (&quot;parameters&quot;.equals(property)) &#123;</span><br><span class="line">                parameters = parseParameters(element.getChildNodes(), beanDefinition);</span><br><span class="line">            &#125; else if (&quot;methods&quot;.equals(property)) &#123;</span><br><span class="line">                parseMethods(id, element.getChildNodes(), beanDefinition, parserContext);</span><br><span class="line">            &#125; else if (&quot;arguments&quot;.equals(property)) &#123;</span><br><span class="line">                parseArguments(id, element.getChildNodes(), beanDefinition, parserContext);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                String value = element.getAttribute(property);</span><br><span class="line">                if (value != null) &#123;</span><br><span class="line">                    value = value.trim();</span><br><span class="line">                    if (value.length() &gt; 0) &#123;</span><br><span class="line">                        if (&quot;registry&quot;.equals(property) &amp;&amp; RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(value)) &#123;</span><br><span class="line">                            RegistryConfig registryConfig = new RegistryConfig();</span><br><span class="line">                            registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);</span><br><span class="line">                            beanDefinition.getPropertyValues().addPropertyValue(property, registryConfig);</span><br><span class="line">                        &#125; else if (&quot;registry&quot;.equals(property) &amp;&amp; value.indexOf(&apos;,&apos;) != -1) &#123;</span><br><span class="line">                            parseMultiRef(&quot;registries&quot;, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; else if (&quot;provider&quot;.equals(property) &amp;&amp; value.indexOf(&apos;,&apos;) != -1) &#123;</span><br><span class="line">                            parseMultiRef(&quot;providers&quot;, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; else if (&quot;protocol&quot;.equals(property) &amp;&amp; value.indexOf(&apos;,&apos;) != -1) &#123;</span><br><span class="line">                            parseMultiRef(&quot;protocols&quot;, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            Object reference;</span><br><span class="line">                            if (isPrimitive(type)) &#123;</span><br><span class="line">                                if (&quot;async&quot;.equals(property) &amp;&amp; &quot;false&quot;.equals(value)</span><br><span class="line">                                        || &quot;timeout&quot;.equals(property) &amp;&amp; &quot;0&quot;.equals(value)</span><br><span class="line">                                        || &quot;delay&quot;.equals(property) &amp;&amp; &quot;0&quot;.equals(value)</span><br><span class="line">                                        || &quot;version&quot;.equals(property) &amp;&amp; &quot;0.0.0&quot;.equals(value)</span><br><span class="line">                                        || &quot;stat&quot;.equals(property) &amp;&amp; &quot;-1&quot;.equals(value)</span><br><span class="line">                                        || &quot;reliable&quot;.equals(property) &amp;&amp; &quot;false&quot;.equals(value)) &#123;</span><br><span class="line">                                    // 兼容旧版本xsd中的default值</span><br><span class="line">                                    value = null;</span><br><span class="line">                                &#125;</span><br><span class="line">                                reference = value;</span><br><span class="line">                            &#125; else if (&quot;protocol&quot;.equals(property) </span><br><span class="line">                                    &amp;&amp; ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(value)</span><br><span class="line">                                    &amp;&amp; (! parserContext.getRegistry().containsBeanDefinition(value)</span><br><span class="line">                                            || ! ProtocolConfig.class.getName().equals(parserContext.getRegistry().getBeanDefinition(value).getBeanClassName()))) &#123;</span><br><span class="line">                                if (&quot;dubbo:provider&quot;.equals(element.getTagName())) &#123;</span><br><span class="line">                                    logger.warn(&quot;Recommended replace &lt;dubbo:provider protocol=\&quot;&quot; + value + &quot;\&quot; ... /&gt; to &lt;dubbo:protocol name=\&quot;&quot; + value + &quot;\&quot; ... /&gt;&quot;);</span><br><span class="line">                                &#125;</span><br><span class="line">                                // 兼容旧版本配置</span><br><span class="line">                                ProtocolConfig protocol = new ProtocolConfig();</span><br><span class="line">                                protocol.setName(value);</span><br><span class="line">                                reference = protocol;</span><br><span class="line">                            &#125; else if (&quot;monitor&quot;.equals(property) </span><br><span class="line">                                    &amp;&amp; (! parserContext.getRegistry().containsBeanDefinition(value)</span><br><span class="line">                                            || ! MonitorConfig.class.getName().equals(parserContext.getRegistry().getBeanDefinition(value).getBeanClassName()))) &#123;</span><br><span class="line">                                // 兼容旧版本配置</span><br><span class="line">                                reference = convertMonitor(value);</span><br><span class="line">                            &#125; else if (&quot;onreturn&quot;.equals(property)) &#123;</span><br><span class="line">                                int index = value.lastIndexOf(&quot;.&quot;);</span><br><span class="line">                                String returnRef = value.substring(0, index);</span><br><span class="line">                                String returnMethod = value.substring(index + 1);</span><br><span class="line">                                reference = new RuntimeBeanReference(returnRef);</span><br><span class="line">                                beanDefinition.getPropertyValues().addPropertyValue(&quot;onreturnMethod&quot;, returnMethod);</span><br><span class="line">                            &#125; else if (&quot;onthrow&quot;.equals(property)) &#123;</span><br><span class="line">                                int index = value.lastIndexOf(&quot;.&quot;);</span><br><span class="line">                                String throwRef = value.substring(0, index);</span><br><span class="line">                                String throwMethod = value.substring(index + 1);</span><br><span class="line">                                reference = new RuntimeBeanReference(throwRef);</span><br><span class="line">                                beanDefinition.getPropertyValues().addPropertyValue(&quot;onthrowMethod&quot;, throwMethod);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                if (&quot;ref&quot;.equals(property) &amp;&amp; parserContext.getRegistry().containsBeanDefinition(value)) &#123;</span><br><span class="line">                                    BeanDefinition refBean = parserContext.getRegistry().getBeanDefinition(value);</span><br><span class="line">                                    if (! refBean.isSingleton()) &#123;</span><br><span class="line">                                        throw new IllegalStateException(&quot;The exported service ref &quot; + value + &quot; must be singleton! Please set the &quot; + value + &quot; bean scope to singleton, eg: &lt;bean id=\&quot;&quot; + value+ &quot;\&quot; scope=\&quot;singleton\&quot; ...&gt;&quot;);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                reference = new RuntimeBeanReference(value);</span><br><span class="line">                            &#125;</span><br><span class="line">                            beanDefinition.getPropertyValues().addPropertyValue(property, reference);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将element的attribute加入parameters</span><br><span class="line">    NamedNodeMap attributes = element.getAttributes();</span><br><span class="line">    int len = attributes.getLength();</span><br><span class="line">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        Node node = attributes.item(i);</span><br><span class="line">        String name = node.getLocalName();</span><br><span class="line">        if (! props.contains(name)) &#123;</span><br><span class="line">            if (parameters == null) &#123;</span><br><span class="line">                parameters = new ManagedMap();</span><br><span class="line">            &#125;</span><br><span class="line">            String value = node.getNodeValue();</span><br><span class="line">            parameters.put(name, new TypedStringValue(value, String.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (parameters != null) &#123;</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(&quot;parameters&quot;, parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文参考博客<a href="http://www.cnblogs.com/java-zhao/category/1090034.html" target="_blank" rel="noopener">http://www.cnblogs.com/java-zhao/category/1090034.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;服务方配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>dubbo源码服务调用</title>
    <link href="http://yoursite.com/2020/01/13/dubbo%E6%BA%90%E7%A0%81/dubbo%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2020/01/13/dubbo源码/dubbo源码服务调用/</id>
    <published>2020-01-13T14:32:38.165Z</published>
    <updated>2018-08-05T07:49:05.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建客户端"><a href="#一、创建客户端" class="headerlink" title="一、创建客户端"></a>一、创建客户端</h3><h4 id="1、ReferenceBean的afterPropertiesSet方法"><a href="#1、ReferenceBean的afterPropertiesSet方法" class="headerlink" title="1、ReferenceBean的afterPropertiesSet方法"></a>1、ReferenceBean的afterPropertiesSet方法</h4><p>ServiceBean实现了InitializingBean接口，创建bean时会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;&#125;)</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    //设置consumerConfig</span><br><span class="line">    if (getConsumer() == null) &#123;</span><br><span class="line">        Map&lt;String, ConsumerConfig&gt; consumerConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ConsumerConfig.class, false, false);</span><br><span class="line">        if (consumerConfigMap != null &amp;&amp; consumerConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ConsumerConfig consumerConfig = null;</span><br><span class="line">            for (ConsumerConfig config : consumerConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (consumerConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate consumer configs: &quot; + consumerConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    consumerConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (consumerConfig != null) &#123;</span><br><span class="line">                setConsumer(consumerConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置applicationConfig</span><br><span class="line">    if (getApplication() == null</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getApplication() == null)) &#123;</span><br><span class="line">        Map&lt;String, ApplicationConfig&gt; applicationConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ApplicationConfig.class, false, false);</span><br><span class="line">        if (applicationConfigMap != null &amp;&amp; applicationConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ApplicationConfig applicationConfig = null;</span><br><span class="line">            for (ApplicationConfig config : applicationConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (applicationConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate application configs: &quot; + applicationConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    applicationConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (applicationConfig != null) &#123;</span><br><span class="line">                setApplication(applicationConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置moduleConfig</span><br><span class="line">    if (getModule() == null</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getModule() == null)) &#123;</span><br><span class="line">        Map&lt;String, ModuleConfig&gt; moduleConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ModuleConfig.class, false, false);</span><br><span class="line">        if (moduleConfigMap != null &amp;&amp; moduleConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ModuleConfig moduleConfig = null;</span><br><span class="line">            for (ModuleConfig config : moduleConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (moduleConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate module configs: &quot; + moduleConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    moduleConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (moduleConfig != null) &#123;</span><br><span class="line">                setModule(moduleConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置registryConfigs</span><br><span class="line">    if ((getRegistries() == null || getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getRegistries() == null || getConsumer().getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getRegistries() == null || getApplication().getRegistries().size() == 0)) &#123;</span><br><span class="line">        Map&lt;String, RegistryConfig&gt; registryConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, RegistryConfig.class, false, false);</span><br><span class="line">        if (registryConfigMap != null &amp;&amp; registryConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            List&lt;RegistryConfig&gt; registryConfigs = new ArrayList&lt;RegistryConfig&gt;();</span><br><span class="line">            for (RegistryConfig config : registryConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    registryConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (registryConfigs != null &amp;&amp; registryConfigs.size() &gt; 0) &#123;</span><br><span class="line">                super.setRegistries(registryConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置monitorConfig</span><br><span class="line">    if (getMonitor() == null</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getMonitor() == null)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getMonitor() == null)) &#123;</span><br><span class="line">        Map&lt;String, MonitorConfig&gt; monitorConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, MonitorConfig.class, false, false);</span><br><span class="line">        if (monitorConfigMap != null &amp;&amp; monitorConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            MonitorConfig monitorConfig = null;</span><br><span class="line">            for (MonitorConfig config : monitorConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (monitorConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate monitor configs: &quot; + monitorConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    monitorConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (monitorConfig != null) &#123;</span><br><span class="line">                setMonitor(monitorConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean b = isInit();</span><br><span class="line">    if (b == null &amp;&amp; getConsumer() != null) &#123;</span><br><span class="line">        b = getConsumer().isInit();</span><br><span class="line">    &#125;</span><br><span class="line">    if (b != null &amp;&amp; b.booleanValue()) &#123;</span><br><span class="line">        //获取服务</span><br><span class="line">        getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ReferenceBean的getObject方法"><a href="#2、ReferenceBean的getObject方法" class="headerlink" title="2、ReferenceBean的getObject方法"></a>2、ReferenceBean的getObject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Object getObject() throws Exception &#123;</span><br><span class="line">    //获取服务</span><br><span class="line">    return get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ReferenceBean的get方法"><a href="#3、ReferenceBean的get方法" class="headerlink" title="3、ReferenceBean的get方法"></a>3、ReferenceBean的get方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public synchronized T get() &#123;</span><br><span class="line">    if (destroyed)&#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Already destroyed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (ref == null) &#123;</span><br><span class="line">        //初始化</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    return ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、ReferenceBean的init方法"><a href="#4、ReferenceBean的init方法" class="headerlink" title="4、ReferenceBean的init方法"></a>4、ReferenceBean的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">private void init() &#123;</span><br><span class="line">    //已初始化</span><br><span class="line">    if (initialized) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    initialized = true;</span><br><span class="line">    if (interfaceName == null || interfaceName.length() == 0) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;&lt;dubbo:reference interface=\&quot;\&quot; /&gt; interface not allow null!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取消费者全局配置</span><br><span class="line">    checkDefault();</span><br><span class="line">    appendProperties(this);</span><br><span class="line">    if (getGeneric() == null &amp;&amp; getConsumer() != null) &#123;</span><br><span class="line">        setGeneric(getConsumer().getGeneric());</span><br><span class="line">    &#125;</span><br><span class="line">    if (ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">        interfaceClass = GenericService.class;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            interfaceClass = Class.forName(interfaceName, true, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">    &#125;</span><br><span class="line">    String resolve = System.getProperty(interfaceName);</span><br><span class="line">    String resolveFile = null;</span><br><span class="line">    if (resolve == null || resolve.length() == 0) &#123;</span><br><span class="line">        resolveFile = System.getProperty(&quot;dubbo.resolve.file&quot;);</span><br><span class="line">        if (resolveFile == null || resolveFile.length() == 0) &#123;</span><br><span class="line">            File userResolveFile = new File(new File(System.getProperty(&quot;user.home&quot;)), &quot;dubbo-resolve.properties&quot;);</span><br><span class="line">            if (userResolveFile.exists()) &#123;</span><br><span class="line">                resolveFile = userResolveFile.getAbsolutePath();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (resolveFile != null &amp;&amp; resolveFile.length() &gt; 0) &#123;</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            FileInputStream fis = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                fis = new FileInputStream(new File(resolveFile));</span><br><span class="line">                properties.load(fis);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;Unload &quot; + resolveFile + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if(null != fis) fis.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            resolve = properties.getProperty(interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (resolve != null &amp;&amp; resolve.length() &gt; 0) &#123;</span><br><span class="line">        url = resolve;</span><br><span class="line">        if (logger.isWarnEnabled()) &#123;</span><br><span class="line">            if (resolveFile != null &amp;&amp; resolveFile.length() &gt; 0) &#123;</span><br><span class="line">                logger.warn(&quot;Using default dubbo resolve file &quot; + resolveFile + &quot; replace &quot; + interfaceName + &quot;&quot; + resolve + &quot; to p2p invoke remote service.&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                logger.warn(&quot;Using -D&quot; + interfaceName + &quot;=&quot; + resolve + &quot; to p2p invoke remote service.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (consumer != null) &#123;</span><br><span class="line">        if (application == null) &#123;</span><br><span class="line">            application = consumer.getApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        if (module == null) &#123;</span><br><span class="line">            module = consumer.getModule();</span><br><span class="line">        &#125;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = consumer.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = consumer.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (module != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = module.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = module.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (application != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = application.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = application.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    checkApplication();</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line">    Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">    Map&lt;Object, Object&gt; attributes = new HashMap&lt;Object, Object&gt;();</span><br><span class="line">    map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);</span><br><span class="line">    map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());</span><br><span class="line">    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    if (ConfigUtils.getPid() &gt; 0) &#123;</span><br><span class="line">        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">    &#125;</span><br><span class="line">    if (! isGeneric()) &#123;</span><br><span class="line">        String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">        if (revision != null &amp;&amp; revision.length() &gt; 0) &#123;</span><br><span class="line">            map.put(&quot;revision&quot;, revision);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">        if(methods.length == 0) &#123;</span><br><span class="line">            logger.warn(&quot;NO method found in service interface &quot; + interfaceClass.getName());</span><br><span class="line">            map.put(&quot;methods&quot;, Constants.ANY_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            map.put(&quot;methods&quot;, StringUtils.join(new HashSet&lt;String&gt;(Arrays.asList(methods)), &quot;,&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(Constants.INTERFACE_KEY, interfaceName);</span><br><span class="line">    appendParameters(map, application);</span><br><span class="line">    appendParameters(map, module);</span><br><span class="line">    appendParameters(map, consumer, Constants.DEFAULT_KEY);</span><br><span class="line">    appendParameters(map, this);</span><br><span class="line">    String prifix = StringUtils.getServiceKey(map);</span><br><span class="line">    if (methods != null &amp;&amp; methods.size() &gt; 0) &#123;</span><br><span class="line">        for (MethodConfig method : methods) &#123;</span><br><span class="line">            appendParameters(map, method, method.getName());</span><br><span class="line">            String retryKey = method.getName() + &quot;.retry&quot;;</span><br><span class="line">            if (map.containsKey(retryKey)) &#123;</span><br><span class="line">                String retryValue = map.remove(retryKey);</span><br><span class="line">                if (&quot;false&quot;.equals(retryValue)) &#123;</span><br><span class="line">                    map.put(method.getName() + &quot;.retries&quot;, &quot;0&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            appendAttributes(attributes, method, prifix + &quot;.&quot; + method.getName());</span><br><span class="line">            checkAndConvertImplicitConfig(method, map, attributes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //attributes通过系统context进行存储.</span><br><span class="line">    StaticContext.getSystemContext().putAll(attributes);</span><br><span class="line">    //创建服务代理</span><br><span class="line">    ref = createProxy(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ReferenceConfig的createProxy方法"><a href="#5、ReferenceConfig的createProxy方法" class="headerlink" title="5、ReferenceConfig的createProxy方法"></a>5、ReferenceConfig的createProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot;, &quot;deprecation&quot; &#125;)</span><br><span class="line">private T createProxy(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    URL tmpUrl = new URL(&quot;temp&quot;, &quot;localhost&quot;, 0, map);</span><br><span class="line">    final boolean isJvmRefer;</span><br><span class="line">    if (isInjvm() == null) &#123;</span><br><span class="line">        if (url != null &amp;&amp; url.length() &gt; 0) &#123; //指定URL的情况下，不做本地引用</span><br><span class="line">            isJvmRefer = false;</span><br><span class="line">        &#125; else if (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) &#123;</span><br><span class="line">            //默认情况下如果本地有服务暴露，则引用本地服务.</span><br><span class="line">            isJvmRefer = true;  </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            isJvmRefer = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        isJvmRefer = isInjvm().booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line">    //本地服务</span><br><span class="line">    if (isJvmRefer) &#123;</span><br><span class="line">        URL url = new URL(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, 0, interfaceClass.getName()).addParameters(map);</span><br><span class="line">        //refprotocol为Protocol$Adaptive,经过ProtocolListenerWrapper.refer、ProtocolFilterWrapper.refer、InjvmProtocol.refer</span><br><span class="line">        //获取InjvmInvoker</span><br><span class="line">        invoker = refprotocol.refer(interfaceClass, url);</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Using injvm service &quot; + interfaceClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (url != null &amp;&amp; url.length() &gt; 0) &#123; // 用户指定URL，指定的URL可能是对点对直连地址，也可能是注册中心URL</span><br><span class="line">            String[] us = Constants.SEMICOLON_SPLIT_PATTERN.split(url);</span><br><span class="line">            if (us != null &amp;&amp; us.length &gt; 0) &#123;</span><br><span class="line">                for (String u : us) &#123;</span><br><span class="line">                    URL url = URL.valueOf(u);</span><br><span class="line">                    if (url.getPath() == null || url.getPath().length() == 0) &#123;</span><br><span class="line">                        url = url.setPath(interfaceName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                        urls.add(url.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        urls.add(ClusterUtils.mergeUrl(url, map));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123; // 通过注册中心配置拼装URL</span><br><span class="line">            List&lt;URL&gt; us = loadRegistries(false);</span><br><span class="line">            if (us != null &amp;&amp; us.size() &gt; 0) &#123;</span><br><span class="line">                for (URL u : us) &#123;</span><br><span class="line">                    URL monitorUrl = loadMonitor(u);</span><br><span class="line">                    if (monitorUrl != null) &#123;</span><br><span class="line">                        map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    urls.add(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (urls == null || urls.size() == 0) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;No such any registry to reference &quot; + interfaceName  + &quot; on the consumer &quot; + NetUtils.getLocalHost() + &quot; use dubbo version &quot; + Version.getVersion() + &quot;, please config &lt;dubbo:registry address=\&quot;...\&quot; /&gt; to your spring config.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (urls.size() == 1) &#123;</span><br><span class="line">            //将interfaceClass转化为Invoker</span><br><span class="line">            //refprotocol为Protocol$Adaptive,经过ProtocolListenerWrapper.refer、ProtocolFilterWrapper.refer、InjvmProtocol.refer</span><br><span class="line">            invoker = refprotocol.refer(interfaceClass, urls.get(0));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            List&lt;Invoker&lt;?&gt;&gt; invokers = new ArrayList&lt;Invoker&lt;?&gt;&gt;();</span><br><span class="line">            URL registryURL = null;</span><br><span class="line">            for (URL url : urls) &#123;</span><br><span class="line">                invokers.add(refprotocol.refer(interfaceClass, url));</span><br><span class="line">                if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                    registryURL = url; // 用了最后一个registry url</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (registryURL != null) &#123; // 有 注册中心协议的URL</span><br><span class="line">                // 对有注册中心的Cluster 只用 AvailableCluster</span><br><span class="line">                URL u = registryURL.addParameter(Constants.CLUSTER_KEY, AvailableCluster.NAME); </span><br><span class="line">                // cluster是Cluster$Adaptive,返回MockClusterInvoker</span><br><span class="line">                invoker = cluster.join(new StaticDirectory(u, invokers));</span><br><span class="line">            &#125;  else &#123; // 不是 注册中心的URL</span><br><span class="line">                invoker = cluster.join(new StaticDirectory(invokers));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean c = check;</span><br><span class="line">    if (c == null &amp;&amp; consumer != null) &#123;</span><br><span class="line">        c = consumer.isCheck();</span><br><span class="line">    &#125;</span><br><span class="line">    if (c == null) &#123;</span><br><span class="line">        c = true; // default true</span><br><span class="line">    &#125;</span><br><span class="line">    if (c &amp;&amp; ! invoker.isAvailable()) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Failed to check the status of the service &quot; + interfaceName + &quot;. No provider available for the service &quot; + (group == null ? &quot;&quot; : group + &quot;/&quot;) + interfaceName + (version == null ? &quot;&quot; : &quot;:&quot; + version) + &quot; from the url &quot; + invoker.getUrl() + &quot; to the consumer &quot; + NetUtils.getLocalHost() + &quot; use dubbo version &quot; + Version.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Refer dubbo service &quot; + interfaceClass.getName() + &quot; from url &quot; + invoker.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">    // 创建服务代理</span><br><span class="line">    //proxyFactory为ProxyFactory$Adaptive最终执行JavassistProxyFactory的getProxy方法</span><br><span class="line">    return (T) proxyFactory.getProxy(invoker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、RegistryProtocol的refer方法"><a href="#6、RegistryProtocol的refer方法" class="headerlink" title="6、RegistryProtocol的refer方法"></a>6、RegistryProtocol的refer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public &lt;T&gt; Invoker&lt;T&gt; refer(Class&lt;T&gt; type, URL url) throws RpcException &#123;</span><br><span class="line">    //替换协议</span><br><span class="line">    url = url.setProtocol(url.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_REGISTRY)).removeParameter(Constants.REGISTRY_KEY);</span><br><span class="line">    //registryFactory为RegistryFactory$Adaptive，最终执行ZookeeperRegistryFactory的getRegistry获取ZookeeperRegistry</span><br><span class="line">    Registry registry = registryFactory.getRegistry(url);</span><br><span class="line">    if (RegistryService.class.equals(type)) &#123;</span><br><span class="line">        return proxyFactory.getInvoker((T) registry, type, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // group=&quot;a,b&quot; or group=&quot;*&quot;</span><br><span class="line">    Map&lt;String, String&gt; qs = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));</span><br><span class="line">    String group = qs.get(Constants.GROUP_KEY);</span><br><span class="line">    if (group != null &amp;&amp; group.length() &gt; 0 ) &#123;</span><br><span class="line">        if ( ( Constants.COMMA_SPLIT_PATTERN.split( group ) ).length &gt; 1</span><br><span class="line">                || &quot;*&quot;.equals( group ) ) &#123;</span><br><span class="line">            return doRefer( getMergeableCluster(), registry, type, url );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return doRefer(cluster, registry, type, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url：registry://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.0&amp;pid=25267</span><br><span class="line">     &amp;refer=application=demo-consumer&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span><br><span class="line">     &amp;pid=25267&amp;register.ip=10.10.10.10&amp;side=consumer&amp;timestamp=1510225913509&amp;registry=zookeeper&amp;timestamp=1510225984358</span><br><span class="line">type: interface com.alibaba.dubbo.demo.DemoService</span><br></pre></td></tr></table></figure></p><p>替换了协议的url示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zookeeper://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.0&amp;pid=25267</span><br><span class="line">&amp;refer=application=demo-consumer&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span><br><span class="line">&amp;pid=25267&amp;register.ip=10.10.10.10&amp;side=consumer&amp;timestamp=1510225913509&amp;timestamp=1510225984358</span><br></pre></td></tr></table></figure></p><h4 id="7、实例化ZookeeperRegistry"><a href="#7、实例化ZookeeperRegistry" class="headerlink" title="7、实例化ZookeeperRegistry"></a>7、实例化ZookeeperRegistry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) &#123;</span><br><span class="line">    super(url);</span><br><span class="line">    if (url.isAnyHost()) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;registry address == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);</span><br><span class="line">    if (! group.startsWith(Constants.PATH_SEPARATOR)) &#123;</span><br><span class="line">        group = Constants.PATH_SEPARATOR + group;</span><br><span class="line">    &#125;</span><br><span class="line">    //&quot;/dubbo&quot;</span><br><span class="line">    this.root = group;</span><br><span class="line">    //创建zk客户端，启动会话,返回CuratorZookeeperClient</span><br><span class="line">    zkClient = zookeeperTransporter.connect(url);</span><br><span class="line">    //监听重新连接成功事件，重新连接成功后，之前已经完成注册和订阅的url要重新进行注册和订阅</span><br><span class="line">    zkClient.addStateListener(new StateListener() &#123;</span><br><span class="line">        public void stateChanged(int state) &#123;</span><br><span class="line">            if (state == RECONNECTED) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    recover();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    logger.error(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、6）RegistryProtocol的doRefer方法"><a href="#8、接（一、6）RegistryProtocol的doRefer方法" class="headerlink" title="8、接（一、6）RegistryProtocol的doRefer方法"></a>8、接（一、6）RegistryProtocol的doRefer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private &lt;T&gt; Invoker&lt;T&gt; doRefer(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url) &#123;</span><br><span class="line">    //创建RegistryDirectory</span><br><span class="line">    RegistryDirectory&lt;T&gt; directory = new RegistryDirectory&lt;T&gt;(type, url);</span><br><span class="line">    directory.setRegistry(registry);</span><br><span class="line">    directory.setProtocol(protocol);</span><br><span class="line">    URL subscribeUrl = new URL(Constants.CONSUMER_PROTOCOL, NetUtils.getLocalHost(), 0, type.getName(), directory.getUrl().getParameters());</span><br><span class="line">    //向zk注册消费者</span><br><span class="line">    if (! Constants.ANY_VALUE.equals(url.getServiceInterface())</span><br><span class="line">            &amp;&amp; url.getParameter(Constants.REGISTER_KEY, true)) &#123;</span><br><span class="line">        registry.register(subscribeUrl.addParameters(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY,</span><br><span class="line">                Constants.CHECK_KEY, String.valueOf(false)));</span><br><span class="line">    &#125;</span><br><span class="line">    //订阅</span><br><span class="line">    directory.subscribe(subscribeUrl.addParameter(Constants.CATEGORY_KEY, </span><br><span class="line">            Constants.PROVIDERS_CATEGORY </span><br><span class="line">            + &quot;,&quot; + Constants.CONFIGURATORS_CATEGORY </span><br><span class="line">            + &quot;,&quot; + Constants.ROUTERS_CATEGORY));</span><br><span class="line">    return cluster.join(directory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、FailbackRegistry的register方法"><a href="#9、FailbackRegistry的register方法" class="headerlink" title="9、FailbackRegistry的register方法"></a>9、FailbackRegistry的register方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void register(URL url) &#123;</span><br><span class="line">    super.register(url);</span><br><span class="line">    failedRegistered.remove(url);</span><br><span class="line">    failedUnregistered.remove(url);</span><br><span class="line">    try &#123;</span><br><span class="line">        // 向服务器端发送注册请求</span><br><span class="line">        doRegister(url);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">        boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; ! Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class="line">        boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">        if (check || skipFailback) &#123;</span><br><span class="line">            if(skipFailback) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            throw new IllegalStateException(&quot;Failed to register &quot; + url + &quot; to registry &quot; + getUrl().getAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.error(&quot;Failed to register &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的注册请求记录到失败列表，定时重试</span><br><span class="line">        failedRegistered.add(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、ZookeeperRegistry的doRegister方法"><a href="#10、ZookeeperRegistry的doRegister方法" class="headerlink" title="10、ZookeeperRegistry的doRegister方法"></a>10、ZookeeperRegistry的doRegister方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void doRegister(URL url) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建节点</span><br><span class="line">        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to register &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url示例（解码后的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dubbo/com.alibaba.dubbo.demo.DemoService/consumers/consumer://10.10.10.10/com.alibaba.dubbo.demo.DemoService</span><br><span class="line">?application=demo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService</span><br><span class="line">&amp;methods=sayHello&amp;pid=25267&amp;side=consumer&amp;timestamp=1510225913509</span><br></pre></td></tr></table></figure></p><h4 id="11、接（一、8）RegistryDirectory的subscribe方法"><a href="#11、接（一、8）RegistryDirectory的subscribe方法" class="headerlink" title="11、接（一、8）RegistryDirectory的subscribe方法"></a>11、接（一、8）RegistryDirectory的subscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void subscribe(URL url) &#123;</span><br><span class="line">    setConsumerUrl(url);</span><br><span class="line">    //订阅</span><br><span class="line">    registry.subscribe(url, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、FailbackRegistry的subscribe方法"><a href="#12、FailbackRegistry的subscribe方法" class="headerlink" title="12、FailbackRegistry的subscribe方法"></a>12、FailbackRegistry的subscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void subscribe(URL url, NotifyListener listener) &#123;</span><br><span class="line">    super.subscribe(url, listener);</span><br><span class="line">    removeFailedSubscribed(url, listener);</span><br><span class="line">    try &#123;</span><br><span class="line">        // 向服务器端发送订阅请求</span><br><span class="line">        doSubscribe(url, listener);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        List&lt;URL&gt; urls = getCacheUrls(url);</span><br><span class="line">        if (urls != null &amp;&amp; urls.size() &gt; 0) &#123;</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">            logger.error(&quot;Failed to subscribe &quot; + url + &quot;, Using cached list: &quot; + urls + &quot; from cache file: &quot; + getUrl().getParameter(Constants.FILE_KEY, System.getProperty(&quot;user.home&quot;) + &quot;/dubbo-registry-&quot; + url.getHost() + &quot;.cache&quot;) + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                    &amp;&amp; url.getParameter(Constants.CHECK_KEY, true);</span><br><span class="line">            boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">            if (check || skipFailback) &#123;</span><br><span class="line">                if(skipFailback) &#123;</span><br><span class="line">                    t = t.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">                throw new IllegalStateException(&quot;Failed to subscribe &quot; + url + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                logger.error(&quot;Failed to subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的订阅请求记录到失败列表，定时重试</span><br><span class="line">        addFailedSubscribed(url, listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、ZookeeperRegistry的doSubscribe方法"><a href="#13、ZookeeperRegistry的doSubscribe方法" class="headerlink" title="13、ZookeeperRegistry的doSubscribe方法"></a>13、ZookeeperRegistry的doSubscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">protected void doSubscribe(final URL url, final NotifyListener listener) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">            String root = toRootPath();</span><br><span class="line">            ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">            if (listeners == null) &#123;</span><br><span class="line">                zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                listeners = zkListeners.get(url);</span><br><span class="line">            &#125;</span><br><span class="line">            ChildListener zkListener = listeners.get(listener);</span><br><span class="line">            if (zkListener == null) &#123;</span><br><span class="line">                listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                    public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                        for (String child : currentChilds) &#123;</span><br><span class="line">                            child = URL.decode(child);</span><br><span class="line">                            if (! anyServices.contains(child)) &#123;</span><br><span class="line">                                anyServices.add(child);</span><br><span class="line">                                subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child, </span><br><span class="line">                                        Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                zkListener = listeners.get(listener);</span><br><span class="line">            &#125;</span><br><span class="line">            zkClient.create(root, false);</span><br><span class="line">            List&lt;String&gt; services = zkClient.addChildListener(root, zkListener);</span><br><span class="line">            if (services != null &amp;&amp; services.size() &gt; 0) &#123;</span><br><span class="line">                for (String service : services) &#123;</span><br><span class="line">                    service = URL.decode(service);</span><br><span class="line">                    anyServices.add(service);</span><br><span class="line">                    subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service, </span><br><span class="line">                            Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;();</span><br><span class="line">            //path分别为</span><br><span class="line">            //   /dubbo/com.alibaba.dubbo.demo.DemoService/providers</span><br><span class="line">            //   /dubbo/com.alibaba.dubbo.demo.DemoService/configurators</span><br><span class="line">            //   /dubbo/com.alibaba.dubbo.demo.DemoService/routers</span><br><span class="line">            for (String path : toCategoriesPath(url)) &#123;</span><br><span class="line">                ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">                if (listeners == null) &#123;</span><br><span class="line">                    zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                    listeners = zkListeners.get(url);</span><br><span class="line">                &#125;</span><br><span class="line">                ChildListener zkListener = listeners.get(listener);</span><br><span class="line">                if (zkListener == null) &#123;</span><br><span class="line">                    listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                        //监听子节点列表的变化</span><br><span class="line">                        public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                            ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    zkListener = listeners.get(listener);</span><br><span class="line">                &#125;</span><br><span class="line">                //创建path持久化节点</span><br><span class="line">                zkClient.create(path, false);</span><br><span class="line">                //创建path子节点监听器</span><br><span class="line">                List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);</span><br><span class="line">                if (children != null) &#123;</span><br><span class="line">                    urls.addAll(toUrlsWithEmpty(url, path, children));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to subscribe &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、FailbackRegistry的notify方法"><a href="#14、FailbackRegistry的notify方法" class="headerlink" title="14、FailbackRegistry的notify方法"></a>14、FailbackRegistry的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //执行父类的notify</span><br><span class="line">        doNotify(url, listener, urls);</span><br><span class="line">    &#125; catch (Exception t) &#123;</span><br><span class="line">        // 将失败的通知请求记录到失败列表，定时重试</span><br><span class="line">        Map&lt;NotifyListener, List&lt;URL&gt;&gt; listeners = failedNotified.get(url);</span><br><span class="line">        if (listeners == null) &#123;</span><br><span class="line">            failedNotified.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, List&lt;URL&gt;&gt;());</span><br><span class="line">            listeners = failedNotified.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.put(listener, urls);</span><br><span class="line">        logger.error(&quot;Failed to notify for subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AbstractRegistry的notify方法"><a href="#15、AbstractRegistry的notify方法" class="headerlink" title="15、AbstractRegistry的notify方法"></a>15、AbstractRegistry的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if ((urls == null || urls.size() == 0) </span><br><span class="line">            &amp;&amp; ! Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">        logger.warn(&quot;Ignore empty notify urls for subscribe url &quot; + url);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Notify urls for subscribe url &quot; + url + &quot;, urls: &quot; + urls);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; result = new HashMap&lt;String, List&lt;URL&gt;&gt;();</span><br><span class="line">    //遍历List&lt;URL&gt; urls，将urls按照category进行分类</span><br><span class="line">    for (URL u : urls) &#123;</span><br><span class="line">        if (UrlUtils.isMatch(url, u)) &#123;</span><br><span class="line">            String category = u.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">            List&lt;URL&gt; categoryList = result.get(category);</span><br><span class="line">            if (categoryList == null) &#123;</span><br><span class="line">                categoryList = new ArrayList&lt;URL&gt;();</span><br><span class="line">                result.put(category, categoryList);</span><br><span class="line">            &#125;</span><br><span class="line">            categoryList.add(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (result.size() == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; categoryNotified = notified.get(url);</span><br><span class="line">    if (categoryNotified == null) &#123;</span><br><span class="line">        notified.putIfAbsent(url, new ConcurrentHashMap&lt;String, List&lt;URL&gt;&gt;());</span><br><span class="line">        categoryNotified = notified.get(url);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Map.Entry&lt;String, List&lt;URL&gt;&gt; entry : result.entrySet()) &#123;</span><br><span class="line">        String category = entry.getKey();</span><br><span class="line">        List&lt;URL&gt; categoryList = entry.getValue();</span><br><span class="line">        categoryNotified.put(category, categoryList);</span><br><span class="line">        saveProperties(url);</span><br><span class="line">        //执行RegistryDirectory的notify方法</span><br><span class="line">        listener.notify(categoryList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分类后的url，Map&lt;String, List<url>&gt; result示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    configurators=[</span><br><span class="line">        empty://10.10.10.10/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=configurators&amp;check=false</span><br><span class="line">        &amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=25267&amp;side=consumer&amp;timestamp=1510225913509</span><br><span class="line">    ], </span><br><span class="line"></span><br><span class="line">    routers=[</span><br><span class="line">        empty://10.10.10.10/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=routers&amp;check=false&amp;dubbo=2.0.0</span><br><span class="line">        &amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=25267&amp;side=consumer&amp;timestamp=1510225913509</span><br><span class="line">    ], </span><br><span class="line"></span><br><span class="line">    providers=[</span><br><span class="line">        dubbo://10.211.55.5:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.7&amp;generic=false</span><br><span class="line">        &amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=318&amp;revision=2.5.7&amp;side=provider&amp;timestamp=1510225244315, </span><br><span class="line"></span><br><span class="line">        dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false</span><br><span class="line">        &amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=25215&amp;side=provider&amp;timestamp=1510225334486</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></url></p><h4 id="16、RegistryDirectory的notify方法"><a href="#16、RegistryDirectory的notify方法" class="headerlink" title="16、RegistryDirectory的notify方法"></a>16、RegistryDirectory的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void notify(List&lt;URL&gt; urls) &#123;</span><br><span class="line">    List&lt;URL&gt; invokerUrls = new ArrayList&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; routerUrls = new ArrayList&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; configuratorUrls = new ArrayList&lt;URL&gt;();</span><br><span class="line">    for (URL url : urls) &#123;</span><br><span class="line">        String protocol = url.getProtocol();</span><br><span class="line">        String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">        if (Constants.ROUTERS_CATEGORY.equals(category) </span><br><span class="line">                || Constants.ROUTE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            routerUrls.add(url);</span><br><span class="line">        &#125; else if (Constants.CONFIGURATORS_CATEGORY.equals(category) </span><br><span class="line">                || Constants.OVERRIDE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            configuratorUrls.add(url);</span><br><span class="line">        &#125; else if (Constants.PROVIDERS_CATEGORY.equals(category)) &#123;</span><br><span class="line">            invokerUrls.add(url);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.warn(&quot;Unsupported category &quot; + category + &quot; in notified url: &quot; + url + &quot; from registry &quot; + getUrl().getAddress() + &quot; to consumer &quot; + NetUtils.getLocalHost());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // configurators </span><br><span class="line">    if (configuratorUrls != null &amp;&amp; configuratorUrls.size() &gt;0 )&#123;</span><br><span class="line">        this.configurators = toConfigurators(configuratorUrls);</span><br><span class="line">    &#125;</span><br><span class="line">    // routers</span><br><span class="line">    if (routerUrls != null &amp;&amp; routerUrls.size() &gt;0 )&#123;</span><br><span class="line">        List&lt;Router&gt; routers = toRouters(routerUrls);</span><br><span class="line">        if(routers != null)&#123; // null - do nothing</span><br><span class="line">            setRouters(routers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Configurator&gt; localConfigurators = this.configurators; // local reference</span><br><span class="line">    // 合并override参数</span><br><span class="line">    this.overrideDirectoryUrl = directoryUrl;</span><br><span class="line">    if (localConfigurators != null &amp;&amp; localConfigurators.size() &gt; 0) &#123;</span><br><span class="line">        for (Configurator configurator : localConfigurators) &#123;</span><br><span class="line">            this.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // providers</span><br><span class="line">    refreshInvoker(invokerUrls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、RegistryDirectory的refreshInvoker方法"><a href="#17、RegistryDirectory的refreshInvoker方法" class="headerlink" title="17、RegistryDirectory的refreshInvoker方法"></a>17、RegistryDirectory的refreshInvoker方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private void refreshInvoker(List&lt;URL&gt; invokerUrls)&#123;</span><br><span class="line">    if (invokerUrls != null &amp;&amp; invokerUrls.size() == 1 &amp;&amp; invokerUrls.get(0) != null</span><br><span class="line">            &amp;&amp; Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) &#123;</span><br><span class="line">        this.forbidden = true; // 禁止访问</span><br><span class="line">        this.methodInvokerMap = null; // 置空列表</span><br><span class="line">        destroyAllInvokers(); // 关闭所有Invoker</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.forbidden = false; // 允许访问</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; oldUrlInvokerMap = this.urlInvokerMap; // local reference</span><br><span class="line">        if (invokerUrls.size() == 0 &amp;&amp; this.cachedInvokerUrls != null)&#123;</span><br><span class="line">            invokerUrls.addAll(this.cachedInvokerUrls);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.cachedInvokerUrls = new HashSet&lt;URL&gt;();</span><br><span class="line">            this.cachedInvokerUrls.addAll(invokerUrls);//缓存invokerUrls列表，便于交叉对比</span><br><span class="line">        &#125;</span><br><span class="line">        if (invokerUrls.size() ==0 )&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = toInvokers(invokerUrls) ;// 将URL列表转成Invoker列表</span><br><span class="line">        Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap); // 换方法名映射Invoker列表</span><br><span class="line">        // state change</span><br><span class="line">        //如果计算错误，则不进行处理.</span><br><span class="line">        if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0 )&#123;</span><br><span class="line">            logger.error(new IllegalStateException(&quot;urls to invokers error .invokerUrls.size :&quot;+invokerUrls.size() + &quot;, invoker.size :0. urls :&quot;+invokerUrls.toString()));</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        this.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap;</span><br><span class="line">        this.urlInvokerMap = newUrlInvokerMap;</span><br><span class="line">        try&#123;</span><br><span class="line">            destroyUnusedInvokers(oldUrlInvokerMap,newUrlInvokerMap); // 关闭未使用的Invoker</span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line">            logger.warn(&quot;destroyUnusedInvokers error. &quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、RegistryDirectory的toInvokers方法"><a href="#18、RegistryDirectory的toInvokers方法" class="headerlink" title="18、RegistryDirectory的toInvokers方法"></a>18、RegistryDirectory的toInvokers方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String, Invoker&lt;T&gt;&gt; toInvokers(List&lt;URL&gt; urls) &#123;</span><br><span class="line">    Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = new HashMap&lt;String, Invoker&lt;T&gt;&gt;();</span><br><span class="line">    if(urls == null || urls.size() == 0)&#123;</span><br><span class="line">        return newUrlInvokerMap;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; keys = new HashSet&lt;String&gt;();</span><br><span class="line">    String queryProtocols = this.queryMap.get(Constants.PROTOCOL_KEY);</span><br><span class="line">    for (URL providerUrl : urls) &#123;</span><br><span class="line">        //如果reference端配置了protocol，则只选择匹配的protocol</span><br><span class="line">        if (queryProtocols != null &amp;&amp; queryProtocols.length() &gt;0) &#123;</span><br><span class="line">            boolean accept = false;</span><br><span class="line">            String[] acceptProtocols = queryProtocols.split(&quot;,&quot;);</span><br><span class="line">            for (String acceptProtocol : acceptProtocols) &#123;</span><br><span class="line">                if (providerUrl.getProtocol().equals(acceptProtocol)) &#123;</span><br><span class="line">                    accept = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!accept) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (! ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) &#123;</span><br><span class="line">            logger.error(new IllegalStateException(&quot;Unsupported protocol &quot; + providerUrl.getProtocol() + &quot; in notified url: &quot; + providerUrl + &quot; from registry &quot; + getUrl().getAddress() + &quot; to consumer &quot; + NetUtils.getLocalHost() </span><br><span class="line">                    + &quot;, supported protocol: &quot;+ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        URL url = mergeUrl(providerUrl);</span><br><span class="line">        </span><br><span class="line">        String key = url.toFullString(); // URL参数是排序的</span><br><span class="line">        if (keys.contains(key)) &#123; // 重复URL</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        keys.add(key);</span><br><span class="line">        // 缓存key为没有合并消费端参数的URL，不管消费端如何合并参数，如果服务端URL发生变化，则重新refer</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; localUrlInvokerMap = this.urlInvokerMap; // local reference</span><br><span class="line">        Invoker&lt;T&gt; invoker = localUrlInvokerMap == null ? null : localUrlInvokerMap.get(key);</span><br><span class="line">        if (invoker == null) &#123; // 缓存中没有，重新refer</span><br><span class="line">            try &#123;</span><br><span class="line">                boolean enabled = true;</span><br><span class="line">                if (url.hasParameter(Constants.DISABLED_KEY)) &#123;</span><br><span class="line">                    enabled = ! url.getParameter(Constants.DISABLED_KEY, false);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    enabled = url.getParameter(Constants.ENABLED_KEY, true);</span><br><span class="line">                &#125;</span><br><span class="line">                if (enabled) &#123;</span><br><span class="line">                    //protocol是Protocol$Adaptive实例，依次执行listener、filter、DubboProtocol，返回DubboInvoker</span><br><span class="line">                    invoker = new InvokerDelegete&lt;T&gt;(protocol.refer(serviceType, url), url, providerUrl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.error(&quot;Failed to refer invoker for interface:&quot;+serviceType+&quot;,url:(&quot;+url+&quot;)&quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            if (invoker != null) &#123; // 将新的引用放入缓存</span><br><span class="line">                newUrlInvokerMap.put(key, invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            newUrlInvokerMap.put(key, invoker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    keys.clear();</span><br><span class="line">    return newUrlInvokerMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、DubboProtocol的refer方法"><a href="#19、DubboProtocol的refer方法" class="headerlink" title="19、DubboProtocol的refer方法"></a>19、DubboProtocol的refer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    public &lt;T&gt; Invoker&lt;T&gt; refer(Class&lt;T&gt; serviceType, URL url) throws RpcException &#123;</span><br><span class="line"></span><br><span class="line">    // modified by lishen</span><br><span class="line">    optimizeSerialization(url);</span><br><span class="line"></span><br><span class="line">    // create rpc invoker.</span><br><span class="line">    //创建DubboInvoker，getClients创建netty客户端</span><br><span class="line">    DubboInvoker&lt;T&gt; invoker = new DubboInvoker&lt;T&gt;(serviceType, url, getClients(url), invokers);</span><br><span class="line">    invokers.add(invoker);</span><br><span class="line">    return invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、DubboProtocol的getClients方法"><a href="#20、DubboProtocol的getClients方法" class="headerlink" title="20、DubboProtocol的getClients方法"></a>20、DubboProtocol的getClients方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private ExchangeClient[] getClients(URL url)&#123;</span><br><span class="line">    //是否共享连接</span><br><span class="line">    boolean service_share_connect = false;</span><br><span class="line">    int connections = url.getParameter(Constants.CONNECTIONS_KEY, 0);</span><br><span class="line">    //如果connections不配置，则共享连接，否则每服务每连接</span><br><span class="line">    if (connections == 0)&#123;</span><br><span class="line">        service_share_connect = true;</span><br><span class="line">        connections = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ExchangeClient[] clients = new ExchangeClient[connections];</span><br><span class="line">    for (int i = 0; i &lt; clients.length; i++) &#123;</span><br><span class="line">        if (service_share_connect)&#123;</span><br><span class="line">            //获取共享连接</span><br><span class="line">            clients[i] = getSharedClient(url);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //创建新连接</span><br><span class="line">            clients[i] = initClient(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return clients;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、DubboProtocol的getSharedClient方法"><a href="#21、DubboProtocol的getSharedClient方法" class="headerlink" title="21、DubboProtocol的getSharedClient方法"></a>21、DubboProtocol的getSharedClient方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private ExchangeClient getSharedClient(URL url)&#123;</span><br><span class="line">    String key = url.getAddress();</span><br><span class="line">    ReferenceCountExchangeClient client = referenceClientMap.get(key);</span><br><span class="line">    //使用已有连接</span><br><span class="line">    if ( client != null )&#123;</span><br><span class="line">        if ( !client.isClosed())&#123;</span><br><span class="line">            client.incrementAndGetCount();</span><br><span class="line">            return client;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">//          logger.warn(new IllegalStateException(&quot;client is closed,but stay in clientmap .client :&quot;+ client));</span><br><span class="line">            referenceClientMap.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建新连接</span><br><span class="line">    ExchangeClient exchagneclient = initClient(url);</span><br><span class="line">    </span><br><span class="line">    client = new ReferenceCountExchangeClient(exchagneclient, ghostClientMap);</span><br><span class="line">    referenceClientMap.put(key, client);</span><br><span class="line">    ghostClientMap.remove(key);</span><br><span class="line">    return client; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、DubboProtocol的initClient方法"><a href="#22、DubboProtocol的initClient方法" class="headerlink" title="22、DubboProtocol的initClient方法"></a>22、DubboProtocol的initClient方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private ExchangeClient initClient(URL url) &#123;</span><br><span class="line">    </span><br><span class="line">    // client type setting.</span><br><span class="line">    String str = url.getParameter(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_CLIENT));</span><br><span class="line"></span><br><span class="line">    String version = url.getParameter(Constants.DUBBO_VERSION_KEY);</span><br><span class="line">    boolean compatible = (version != null &amp;&amp; version.startsWith(&quot;1.0.&quot;));</span><br><span class="line">    url = url.addParameter(Constants.CODEC_KEY, Version.isCompatibleVersion() &amp;&amp; compatible ? COMPATIBLE_CODEC_NAME : DubboCodec.NAME);</span><br><span class="line">    //默认开启heartbeat</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class="line">    </span><br><span class="line">    // BIO存在严重性能问题，暂时不允许使用</span><br><span class="line">    if (str != null &amp;&amp; str.length() &gt; 0 &amp;&amp; ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) &#123;</span><br><span class="line">        throw new RpcException(&quot;Unsupported client type: &quot; + str + &quot;,&quot; +</span><br><span class="line">                &quot; supported client type is &quot; + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(), &quot; &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ExchangeClient client ;</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置连接应该是lazy的 </span><br><span class="line">        if (url.getParameter(Constants.LAZY_CONNECT_KEY, false))&#123;</span><br><span class="line">            client = new LazyConnectExchangeClient(url ,requestHandler);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //建立连接</span><br><span class="line">            client = Exchangers.connect(url ,requestHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Fail to create remoting client for service(&quot; + url</span><br><span class="line">                + &quot;): &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    return client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、Exchangers的connect方法"><a href="#23、Exchangers的connect方法" class="headerlink" title="23、Exchangers的connect方法"></a>23、Exchangers的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;handler == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, &quot;exchange&quot;);</span><br><span class="line">    //获取HeaderExchanger，执行connect方法</span><br><span class="line">    return getExchanger(url).connect(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、HeaderExchanger的connect方法"><a href="#24、HeaderExchanger的connect方法" class="headerlink" title="24、HeaderExchanger的connect方法"></a>24、HeaderExchanger的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    return new HeaderExchangeClient(Transporters.connect(url, new DecodeHandler(new HeaderExchangeHandler(handler))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、NettyTransporter的connect方法"><a href="#25、NettyTransporter的connect方法" class="headerlink" title="25、NettyTransporter的connect方法"></a>25、NettyTransporter的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Client connect(URL url, ChannelHandler listener) throws RemotingException &#123;</span><br><span class="line">    return new NettyClient(url, listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="26、实例化NettyClient"><a href="#26、实例化NettyClient" class="headerlink" title="26、实例化NettyClient"></a>26、实例化NettyClient</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NettyClient(final URL url, final ChannelHandler handler) throws RemotingException&#123;</span><br><span class="line">    super(url, wrapChannelHandler(url, handler));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public AbstractClient(URL url, ChannelHandler handler) throws RemotingException &#123;</span><br><span class="line">    super(url, handler);</span><br><span class="line">    </span><br><span class="line">    send_reconnect = url.getParameter(Constants.SEND_RECONNECT_KEY, false);</span><br><span class="line">    </span><br><span class="line">    shutdown_timeout = url.getParameter(Constants.SHUTDOWN_TIMEOUT_KEY, Constants.DEFAULT_SHUTDOWN_TIMEOUT);</span><br><span class="line">    </span><br><span class="line">    //默认重连间隔2s，1800表示1小时warning一次.</span><br><span class="line">    reconnect_warning_period = url.getParameter(&quot;reconnect.waring.period&quot;, 1800);</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        //创建客户端</span><br><span class="line">        doOpen();</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        close();</span><br><span class="line">        throw new RemotingException(url.toInetSocketAddress(), null, </span><br><span class="line">                                    &quot;Failed to start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress() </span><br><span class="line">                                    + &quot; connect to the server &quot; + getRemoteAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        // connect.</span><br><span class="line">        //建立连接</span><br><span class="line">        connect();</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress() + &quot; connect to the server &quot; + getRemoteAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RemotingException t) &#123;</span><br><span class="line">        if (url.getParameter(Constants.CHECK_KEY, true)) &#123;</span><br><span class="line">            close();</span><br><span class="line">            throw t;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.warn(&quot;Failed to start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress()</span><br><span class="line">                         + &quot; connect to the server &quot; + getRemoteAddress() + &quot; (check == false, ignore and retry later!), cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t)&#123;</span><br><span class="line">        close();</span><br><span class="line">        throw new RemotingException(url.toInetSocketAddress(), null, </span><br><span class="line">                &quot;Failed to start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress() </span><br><span class="line">                + &quot; connect to the server &quot; + getRemoteAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    executor = (ExecutorService) ExtensionLoader.getExtensionLoader(DataStore.class)</span><br><span class="line">        .getDefaultExtension().get(Constants.CONSUMER_SIDE, Integer.toString(url.getPort()));</span><br><span class="line">    ExtensionLoader.getExtensionLoader(DataStore.class)</span><br><span class="line">        .getDefaultExtension().remove(Constants.CONSUMER_SIDE, Integer.toString(url.getPort()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="27、NettyClient的doOpen方法"><a href="#27、NettyClient的doOpen方法" class="headerlink" title="27、NettyClient的doOpen方法"></a>27、NettyClient的doOpen方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doOpen() throws Throwable &#123;</span><br><span class="line">    NettyHelper.setNettyLoggerFactory();</span><br><span class="line">    bootstrap = new ClientBootstrap(channelFactory);</span><br><span class="line">    // config</span><br><span class="line">    // @see org.jboss.netty.channel.socket.SocketChannelConfig</span><br><span class="line">    bootstrap.setOption(&quot;keepAlive&quot;, true);</span><br><span class="line">    bootstrap.setOption(&quot;tcpNoDelay&quot;, true);</span><br><span class="line">    bootstrap.setOption(&quot;connectTimeoutMillis&quot;, getTimeout());</span><br><span class="line">    final NettyHandler nettyHandler = new NettyHandler(getUrl(), this);</span><br><span class="line">    bootstrap.setPipelineFactory(new ChannelPipelineFactory() &#123;</span><br><span class="line">        public ChannelPipeline getPipeline() &#123;</span><br><span class="line">            NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyClient.this);</span><br><span class="line">            ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line">            pipeline.addLast(&quot;decoder&quot;, adapter.getDecoder());</span><br><span class="line">            pipeline.addLast(&quot;encoder&quot;, adapter.getEncoder());</span><br><span class="line">            pipeline.addLast(&quot;handler&quot;, nettyHandler);</span><br><span class="line">            return pipeline;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="28、接（一、26）AbstractClient的connect方法"><a href="#28、接（一、26）AbstractClient的connect方法" class="headerlink" title="28、接（一、26）AbstractClient的connect方法"></a>28、接（一、26）AbstractClient的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected void connect() throws RemotingException &#123;</span><br><span class="line">    connectLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        if (isConnected()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        initConnectStatusCheckCommand();</span><br><span class="line">        //建立连接</span><br><span class="line">        doConnect();</span><br><span class="line">        if (! isConnected()) &#123;</span><br><span class="line">            throw new RemotingException(this, &quot;Failed connect to server &quot; + getRemoteAddress() + &quot; from &quot; + getClass().getSimpleName() + &quot; &quot;</span><br><span class="line">                                        + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                        + &quot;, cause: Connect wait timeout: &quot; + getTimeout() + &quot;ms.&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (logger.isInfoEnabled())&#123;</span><br><span class="line">                logger.info(&quot;Successed connect to server &quot; + getRemoteAddress() + &quot; from &quot; + getClass().getSimpleName() + &quot; &quot;</span><br><span class="line">                                        + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                        + &quot;, channel is &quot; + this.getChannel());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reconnect_count.set(0);</span><br><span class="line">        reconnect_error_log_flag.set(false);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RemotingException(this, &quot;Failed connect to server &quot; + getRemoteAddress() + &quot; from &quot; + getClass().getSimpleName() + &quot; &quot;</span><br><span class="line">                                    + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                    + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        connectLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="29、NettyClient的doConnect方法"><a href="#29、NettyClient的doConnect方法" class="headerlink" title="29、NettyClient的doConnect方法"></a>29、NettyClient的doConnect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">protected void doConnect() throws Throwable &#123;</span><br><span class="line">    long start = System.currentTimeMillis();</span><br><span class="line">    //建立连接</span><br><span class="line">    ChannelFuture future = bootstrap.connect(getConnectAddress());</span><br><span class="line">    try&#123;</span><br><span class="line">        boolean ret = future.awaitUninterruptibly(getConnectTimeout(), TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        if (ret &amp;&amp; future.isSuccess()) &#123;</span><br><span class="line">            Channel newChannel = future.getChannel();</span><br><span class="line">            newChannel.setInterestOps(Channel.OP_READ_WRITE);</span><br><span class="line">            try &#123;</span><br><span class="line">                // 关闭旧的连接</span><br><span class="line">                Channel oldChannel = NettyClient.this.channel; // copy reference</span><br><span class="line">                if (oldChannel != null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                            logger.info(&quot;Close old netty channel &quot; + oldChannel + &quot; on create new netty channel &quot; + newChannel);</span><br><span class="line">                        &#125;</span><br><span class="line">                        oldChannel.close();</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        NettyChannel.removeChannelIfDisconnected(oldChannel);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (NettyClient.this.isClosed()) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                            logger.info(&quot;Close new netty channel &quot; + newChannel + &quot;, because the client closed.&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        newChannel.close();</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        NettyClient.this.channel = null;</span><br><span class="line">                        NettyChannel.removeChannelIfDisconnected(newChannel);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    NettyClient.this.channel = newChannel;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (future.getCause() != null) &#123;</span><br><span class="line">            throw new RemotingException(this, &quot;client(url: &quot; + getUrl() + &quot;) failed to connect to server &quot;</span><br><span class="line">                    + getRemoteAddress() + &quot;, error message is:&quot; + future.getCause().getMessage(), future.getCause());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RemotingException(this, &quot;client(url: &quot; + getUrl() + &quot;) failed to connect to server &quot;</span><br><span class="line">                    + getRemoteAddress() + &quot; client-side timeout &quot;</span><br><span class="line">                    + getConnectTimeout() + &quot;ms (elapsed: &quot; + (System.currentTimeMillis() - start) + &quot;ms) from netty client &quot;</span><br><span class="line">                    + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">        if (! isConnected()) &#123;</span><br><span class="line">            future.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="30、接（一、24）实例化HeaderExchangeClient"><a href="#30、接（一、24）实例化HeaderExchangeClient" class="headerlink" title="30、接（一、24）实例化HeaderExchangeClient"></a>30、接（一、24）实例化HeaderExchangeClient</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public HeaderExchangeClient(Client client)&#123;</span><br><span class="line">    if (client == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;client == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.client = client;</span><br><span class="line">    this.channel = new HeaderExchangeChannel(client);</span><br><span class="line">    String dubbo = client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY);</span><br><span class="line">    this.heartbeat = client.getUrl().getParameter( Constants.HEARTBEAT_KEY, dubbo != null &amp;&amp; dubbo.startsWith(&quot;1.0.&quot;) ? Constants.DEFAULT_HEARTBEAT : 0 );</span><br><span class="line">    this.heartbeatTimeout = client.getUrl().getParameter( Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3 );</span><br><span class="line">    if ( heartbeatTimeout &lt; heartbeat * 2 ) &#123;</span><br><span class="line">        throw new IllegalStateException( &quot;heartbeatTimeout &lt; heartbeatInterval * 2&quot; );</span><br><span class="line">    &#125;</span><br><span class="line">    //启动心跳</span><br><span class="line">    startHeatbeatTimer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="31、HeaderExchangeClient的startHeatbeatTimer方法"><a href="#31、HeaderExchangeClient的startHeatbeatTimer方法" class="headerlink" title="31、HeaderExchangeClient的startHeatbeatTimer方法"></a>31、HeaderExchangeClient的startHeatbeatTimer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void startHeatbeatTimer() &#123;</span><br><span class="line">    stopHeartbeatTimer();</span><br><span class="line">    if ( heartbeat &gt; 0 ) &#123;</span><br><span class="line">        heatbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class="line">                //定时心跳，超时则重连</span><br><span class="line">                new HeartBeatTask( new HeartBeatTask.ChannelProvider() &#123;</span><br><span class="line">                    public Collection&lt;Channel&gt; getChannels() &#123;</span><br><span class="line">                        return Collections.&lt;Channel&gt;singletonList( HeaderExchangeClient.this );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, heartbeat, heartbeatTimeout),</span><br><span class="line">                heartbeat, heartbeat, TimeUnit.MILLISECONDS );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32、接（一、5）JavassistProxyFactory的getProxy方法"><a href="#32、接（一、5）JavassistProxyFactory的getProxy方法" class="headerlink" title="32、接（一、5）JavassistProxyFactory的getProxy方法"></a>32、接（一、5）JavassistProxyFactory的getProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public &lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line">    return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、服务调用"><a href="#二、服务调用" class="headerlink" title="二、服务调用"></a>二、服务调用</h3><h4 id="1、InvokerInvocationHandler的invoke方法"><a href="#1、InvokerInvocationHandler的invoke方法" class="headerlink" title="1、InvokerInvocationHandler的invoke方法"></a>1、InvokerInvocationHandler的invoke方法</h4><p>代理对象的拦截器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">    if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        return method.invoke(invoker, args);</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;toString&quot;.equals(methodName) &amp;&amp; parameterTypes.length == 0) &#123;</span><br><span class="line">        return invoker.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;hashCode&quot;.equals(methodName) &amp;&amp; parameterTypes.length == 0) &#123;</span><br><span class="line">        return invoker.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;equals&quot;.equals(methodName) &amp;&amp; parameterTypes.length == 1) &#123;</span><br><span class="line">        return invoker.equals(args[0]);</span><br><span class="line">    &#125;</span><br><span class="line">    //发起调用</span><br><span class="line">    return invoker.invoke(new RpcInvocation(method, args)).recreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、MockClusterInvoker的invoke方法"><a href="#2、MockClusterInvoker的invoke方法" class="headerlink" title="2、MockClusterInvoker的invoke方法"></a>2、MockClusterInvoker的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    Result result = null;</span><br><span class="line">    //根据配置的mock参数来做服务降级</span><br><span class="line">    String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim(); </span><br><span class="line">    //没有配置mock参数或者mock=false，则进行远程调用</span><br><span class="line">    if (value.length() == 0 || value.equalsIgnoreCase(&quot;false&quot;))&#123;</span><br><span class="line">        //no mock</span><br><span class="line">        result = this.invoker.invoke(invocation);</span><br><span class="line">    //配置了mock=force:return null，则直接返回null</span><br><span class="line">    &#125; else if (value.startsWith(&quot;force&quot;)) &#123;</span><br><span class="line">        if (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;force-mock: &quot; + invocation.getMethodName() + &quot; force-mock enabled , url : &quot; +  directory.getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        //force:direct mock</span><br><span class="line">        result = doMockInvoke(invocation, null);</span><br><span class="line">    //配置了mock=fail:return null，先进行远程调用，失败了在进行mock调用</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //fail-mock</span><br><span class="line">        try &#123;</span><br><span class="line">            result = this.invoker.invoke(invocation);</span><br><span class="line">        &#125;catch (RpcException e) &#123;</span><br><span class="line">            if (e.isBiz()) &#123;</span><br><span class="line">                throw e;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.info(&quot;fail-mock: &quot; + invocation.getMethodName() + &quot; fail-mock enabled , url : &quot; +  directory.getUrl(), e);</span><br><span class="line">                &#125;</span><br><span class="line">                result = doMockInvoke(invocation, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractClusterInvoker的invoke方法"><a href="#3、AbstractClusterInvoker的invoke方法" class="headerlink" title="3、AbstractClusterInvoker的invoke方法"></a>3、AbstractClusterInvoker的invoke方法</h4><p>FailoverClusterInvoker的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(final Invocation invocation) throws RpcException &#123;</span><br><span class="line"></span><br><span class="line">    checkWheatherDestoried();</span><br><span class="line"></span><br><span class="line">    LoadBalance loadbalance;</span><br><span class="line">    //获取invoker的集合，每个invoker对应一个服务</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = list(invocation);</span><br><span class="line">    if (invokers != null &amp;&amp; invokers.size() &gt; 0) &#123;</span><br><span class="line">        //获取负载均衡器,默认是RandomLoadBalance</span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl()</span><br><span class="line">                .getMethodParameter(invocation.getMethodName(),Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE);</span><br><span class="line">    &#125;</span><br><span class="line">    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line">    //发送请求</span><br><span class="line">    return doInvoke(invocation, invokers, loadbalance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、FailoverClusterInvoker的doInvoke方法"><a href="#4、FailoverClusterInvoker的doInvoke方法" class="headerlink" title="4、FailoverClusterInvoker的doInvoke方法"></a>4、FailoverClusterInvoker的doInvoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">public Result doInvoke(Invocation invocation, final List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance) throws RpcException &#123;</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; copyinvokers = invokers;</span><br><span class="line">    checkInvokers(copyinvokers, invocation);</span><br><span class="line">    //默认是2+1次</span><br><span class="line">    int len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + 1;</span><br><span class="line">    if (len &lt;= 0) &#123;</span><br><span class="line">        len = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // retry loop.</span><br><span class="line">    RpcException le = null; // last exception.</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invoked = new ArrayList&lt;Invoker&lt;T&gt;&gt;(copyinvokers.size()); // invoked invokers.</span><br><span class="line">    Set&lt;String&gt; providers = new HashSet&lt;String&gt;(len);</span><br><span class="line">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        //重试时，进行重新选择，避免重试时invoker列表已发生变化.</span><br><span class="line">        //注意：如果列表发生了变化，那么invoked判断会失效，因为invoker示例已经改变</span><br><span class="line">        if (i &gt; 0) &#123;</span><br><span class="line">            checkWheatherDestoried();</span><br><span class="line">            copyinvokers = list(invocation);</span><br><span class="line">            //重新检查一下</span><br><span class="line">            checkInvokers(copyinvokers, invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        //使用负载均衡器获取一个invoker</span><br><span class="line">        Invoker&lt;T&gt; invoker = select(loadbalance, invocation, copyinvokers, invoked);</span><br><span class="line">        invoked.add(invoker);</span><br><span class="line">        RpcContext.getContext().setInvokers((List)invoked);</span><br><span class="line">        try &#123;</span><br><span class="line">            //发送请求</span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            if (le != null &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(&quot;Although retry the method &quot; + invocation.getMethodName()</span><br><span class="line">                        + &quot; in the service &quot; + getInterface().getName()</span><br><span class="line">                        + &quot; was successful by the provider &quot; + invoker.getUrl().getAddress()</span><br><span class="line">                        + &quot;, but there have been failed providers &quot; + providers </span><br><span class="line">                        + &quot; (&quot; + providers.size() + &quot;/&quot; + copyinvokers.size()</span><br><span class="line">                        + &quot;) from the registry &quot; + directory.getUrl().getAddress()</span><br><span class="line">                        + &quot; on the consumer &quot; + NetUtils.getLocalHost()</span><br><span class="line">                        + &quot; using the dubbo version &quot; + Version.getVersion() + &quot;. Last error is: &quot;</span><br><span class="line">                        + le.getMessage(), le);</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125; catch (RpcException e) &#123;</span><br><span class="line">            if (e.isBiz()) &#123; // biz exception.</span><br><span class="line">                throw e;</span><br><span class="line">            &#125;</span><br><span class="line">            le = e;</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            le = new RpcException(e.getMessage(), e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            providers.add(invoker.getUrl().getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new RpcException(le != null ? le.getCode() : 0, &quot;Failed to invoke the method &quot;</span><br><span class="line">            + invocation.getMethodName() + &quot; in the service &quot; + getInterface().getName() </span><br><span class="line">            + &quot;. Tried &quot; + len + &quot; times of the providers &quot; + providers </span><br><span class="line">            + &quot; (&quot; + providers.size() + &quot;/&quot; + copyinvokers.size() </span><br><span class="line">            + &quot;) from the registry &quot; + directory.getUrl().getAddress()</span><br><span class="line">            + &quot; on the consumer &quot; + NetUtils.getLocalHost() + &quot; using the dubbo version &quot;</span><br><span class="line">            + Version.getVersion() + &quot;. Last error is: &quot;</span><br><span class="line">            + (le != null ? le.getMessage() : &quot;&quot;), le != null &amp;&amp; le.getCause() != null ? le.getCause() : le);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AbstractClusterInvoker的select方法"><a href="#5、AbstractClusterInvoker的select方法" class="headerlink" title="5、AbstractClusterInvoker的select方法"></a>5、AbstractClusterInvoker的select方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">protected Invoker&lt;T&gt; select(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected) throws RpcException &#123;</span><br><span class="line">    if (invokers == null || invokers.size() == 0)</span><br><span class="line">        return null;</span><br><span class="line">    String methodName = invocation == null ? &quot;&quot; : invocation.getMethodName();</span><br><span class="line">    </span><br><span class="line">    boolean sticky = invokers.get(0).getUrl().getMethodParameter(methodName,Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY) ;</span><br><span class="line">    &#123;</span><br><span class="line">        //ignore overloaded method</span><br><span class="line">        if ( stickyInvoker != null &amp;&amp; !invokers.contains(stickyInvoker) )&#123;</span><br><span class="line">            stickyInvoker = null;</span><br><span class="line">        &#125;</span><br><span class="line">        //ignore cucurrent problem</span><br><span class="line">        if (sticky &amp;&amp; stickyInvoker != null &amp;&amp; (selected == null || !selected.contains(stickyInvoker)))&#123;</span><br><span class="line">            if (availablecheck &amp;&amp; stickyInvoker.isAvailable())&#123;</span><br><span class="line">                return stickyInvoker;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //使用负载均衡器获取一个invoker</span><br><span class="line">    Invoker&lt;T&gt; invoker = doselect(loadbalance, invocation, invokers, selected);</span><br><span class="line">    </span><br><span class="line">    if (sticky)&#123;</span><br><span class="line">        stickyInvoker = invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    return invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractClusterInvoker的select方法"><a href="#6、AbstractClusterInvoker的select方法" class="headerlink" title="6、AbstractClusterInvoker的select方法"></a>6、AbstractClusterInvoker的select方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private Invoker&lt;T&gt; doselect(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected) throws RpcException &#123;</span><br><span class="line">    if (invokers == null || invokers.size() == 0)</span><br><span class="line">        return null;</span><br><span class="line">    if (invokers.size() == 1)</span><br><span class="line">        return invokers.get(0);</span><br><span class="line">    // 如果只有两个invoker，退化成轮循</span><br><span class="line">    if (invokers.size() == 2 &amp;&amp; selected != null &amp;&amp; selected.size() &gt; 0) &#123;</span><br><span class="line">        return selected.get(0) == invokers.get(0) ? invokers.get(1) : invokers.get(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用负载均衡器获取一个invoker</span><br><span class="line">    Invoker&lt;T&gt; invoker = loadbalance.select(invokers, getUrl(), invocation);</span><br><span class="line">    </span><br><span class="line">    //如果 selected中包含（优先判断） 或者 不可用&amp;&amp;availablecheck=true 则重试.</span><br><span class="line">    if( (selected != null &amp;&amp; selected.contains(invoker))</span><br><span class="line">            ||(!invoker.isAvailable() &amp;&amp; getUrl()!=null &amp;&amp; availablecheck))&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            //重选</span><br><span class="line">            Invoker&lt;T&gt; rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);</span><br><span class="line">            if(rinvoker != null)&#123;</span><br><span class="line">                invoker =  rinvoker;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //看下第一次选的位置，如果不是最后，选+1位置.</span><br><span class="line">                int index = invokers.indexOf(invoker);</span><br><span class="line">                try&#123;</span><br><span class="line">                    //最后在避免碰撞</span><br><span class="line">                    invoker = index &lt;invokers.size()-1?invokers.get(index+1) :invoker;</span><br><span class="line">                &#125;catch (Exception e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage()+&quot; may because invokers list dynamic change, ignore.&quot;,e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Throwable t)&#123;</span><br><span class="line">            logger.error(&quot;clustor relselect fail reason is :&quot;+t.getMessage() +&quot; if can not slove ,you can set cluster.availablecheck=false in url&quot;,t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（二、4）InvokerWrapper的invoke方法"><a href="#7、接（二、4）InvokerWrapper的invoke方法" class="headerlink" title="7、接（二、4）InvokerWrapper的invoke方法"></a>7、接（二、4）InvokerWrapper的invoke方法</h4><p>RegistryDirectory$InvokerDelegete的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    //最终调用DubboInvoker的invoke方法</span><br><span class="line">    return invoker.invoke(invocation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、AbstractInvoker的invoke方法"><a href="#8、AbstractInvoker的invoke方法" class="headerlink" title="8、AbstractInvoker的invoke方法"></a>8、AbstractInvoker的invoke方法</h4><p>DubboInvoker的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation inv) throws RpcException &#123;</span><br><span class="line">    if(destroyed) &#123;</span><br><span class="line">        throw new RpcException(&quot;Rpc invoker for service &quot; + this + &quot; on consumer &quot; + NetUtils.getLocalHost() </span><br><span class="line">                                        + &quot; use dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                        + &quot; is DESTROYED, can not be invoked any more!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    RpcInvocation invocation = (RpcInvocation) inv;</span><br><span class="line">    invocation.setInvoker(this);</span><br><span class="line">    if (attachment != null &amp;&amp; attachment.size() &gt; 0) &#123;</span><br><span class="line">        invocation.addAttachmentsIfAbsent(attachment);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, String&gt; context = RpcContext.getContext().getAttachments();</span><br><span class="line">    if (context != null) &#123;</span><br><span class="line">        invocation.addAttachmentsIfAbsent(context);</span><br><span class="line">    &#125;</span><br><span class="line">    if (getUrl().getMethodParameter(invocation.getMethodName(), Constants.ASYNC_KEY, false))&#123;</span><br><span class="line">        invocation.setAttachment(Constants.ASYNC_KEY, Boolean.TRUE.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        //发起请求</span><br><span class="line">        return doInvoke(invocation);</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123; // biz exception</span><br><span class="line">        Throwable te = e.getTargetException();</span><br><span class="line">        if (te == null) &#123;</span><br><span class="line">            return new RpcResult(e);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (te instanceof RpcException) &#123;</span><br><span class="line">                ((RpcException) te).setCode(RpcException.BIZ_EXCEPTION);</span><br><span class="line">            &#125;</span><br><span class="line">            return new RpcResult(te);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RpcException e) &#123;</span><br><span class="line">        if (e.isBiz()) &#123;</span><br><span class="line">            return new RpcResult(e);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        return new RpcResult(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="9、DubboInvoker的doInvoke方法"><a href="#9、DubboInvoker的doInvoke方法" class="headerlink" title="9、DubboInvoker的doInvoke方法"></a>9、DubboInvoker的doInvoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Result doInvoke(final Invocation invocation) throws Throwable &#123;</span><br><span class="line">    RpcInvocation inv = (RpcInvocation) invocation;</span><br><span class="line">    final String methodName = RpcUtils.getMethodName(invocation);</span><br><span class="line">    inv.setAttachment(Constants.PATH_KEY, getUrl().getPath());</span><br><span class="line">    inv.setAttachment(Constants.VERSION_KEY, version);</span><br><span class="line">    </span><br><span class="line">    ExchangeClient currentClient;</span><br><span class="line">    if (clients.length == 1) &#123;</span><br><span class="line">        //单一长连接。默认</span><br><span class="line">        currentClient = clients[0];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        currentClient = clients[index.getAndIncrement() % clients.length];</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //是否异步</span><br><span class="line">        boolean isAsync = RpcUtils.isAsync(getUrl(), invocation);</span><br><span class="line">        //是否没有返回值</span><br><span class="line">        boolean isOneway = RpcUtils.isOneway(getUrl(), invocation);</span><br><span class="line">        int timeout = getUrl().getMethodParameter(methodName, Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT);</span><br><span class="line">        if (isOneway) &#123;</span><br><span class="line">            boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false);</span><br><span class="line">            currentClient.send(inv, isSent);</span><br><span class="line">            RpcContext.getContext().setFuture(null);</span><br><span class="line">            return new RpcResult();</span><br><span class="line">        &#125; else if (isAsync) &#123;</span><br><span class="line">            ResponseFuture future = currentClient.request(inv, timeout) ;</span><br><span class="line">            RpcContext.getContext().setFuture(new FutureAdapter&lt;Object&gt;(future));</span><br><span class="line">            return new RpcResult();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            RpcContext.getContext().setFuture(null);</span><br><span class="line">            //发起请求</span><br><span class="line">            return (Result) currentClient.request(inv, timeout).get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (TimeoutException e) &#123;</span><br><span class="line">        throw new RpcException(RpcException.TIMEOUT_EXCEPTION, &quot;Invoke remote method timeout. method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(RpcException.NETWORK_EXCEPTION, &quot;Failed to invoke remote method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、HeaderExchangeClient的request方法"><a href="#10、HeaderExchangeClient的request方法" class="headerlink" title="10、HeaderExchangeClient的request方法"></a>10、HeaderExchangeClient的request方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ResponseFuture request(Object request) throws RemotingException &#123;</span><br><span class="line">    return channel.request(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、HeaderExchangeChannel的request方法"><a href="#11、HeaderExchangeChannel的request方法" class="headerlink" title="11、HeaderExchangeChannel的request方法"></a>11、HeaderExchangeChannel的request方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public ResponseFuture request(Object request, int timeout) throws RemotingException &#123;</span><br><span class="line">    if (closed) &#123;</span><br><span class="line">        throw new RemotingException(this.getLocalAddress(), null, &quot;Failed to send request &quot; + request + &quot;, cause: The channel &quot; + this + &quot; is closed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // create request.</span><br><span class="line">    Request req = new Request();</span><br><span class="line">    req.setVersion(&quot;2.0.0&quot;);</span><br><span class="line">    req.setTwoWay(true);</span><br><span class="line">    req.setData(request);</span><br><span class="line">    DefaultFuture future = new DefaultFuture(channel, req, timeout);</span><br><span class="line">    try&#123;</span><br><span class="line">        //发送请求，channel为NettyClient</span><br><span class="line">        channel.send(req);</span><br><span class="line">    &#125;catch (RemotingException e) &#123;</span><br><span class="line">        future.cancel();</span><br><span class="line">        throw e;</span><br><span class="line">    &#125;</span><br><span class="line">    return future;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（二、2）MockClusterInvoker的doMockInvoke方法"><a href="#12、接（二、2）MockClusterInvoker的doMockInvoke方法" class="headerlink" title="12、接（二、2）MockClusterInvoker的doMockInvoke方法"></a>12、接（二、2）MockClusterInvoker的doMockInvoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">    private Result doMockInvoke(Invocation invocation,RpcException e)&#123;</span><br><span class="line">        Result result = null;</span><br><span class="line">        Invoker&lt;T&gt; minvoker ;</span><br><span class="line">        //获取mock类型的Invoker</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; mockInvokers = selectMockInvoker(invocation);</span><br><span class="line">        if (mockInvokers == null || mockInvokers.size() == 0)&#123;</span><br><span class="line">            //没有配置mock类型的Invoker，则创建一个MockInvoker</span><br><span class="line">            minvoker = (Invoker&lt;T&gt;) new MockInvoker(directory.getUrl());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            minvoker = mockInvokers.get(0);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            //执行MockInvoker的invoke(Invocation invocation)方法</span><br><span class="line">            result = minvoker.invoke(invocation);</span><br><span class="line">        &#125; catch (RpcException me) &#123;</span><br><span class="line">            if (me.isBiz()) &#123;</span><br><span class="line">                result = new RpcResult(me.getCause());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //非业务异常</span><br><span class="line">                throw new RpcException(me.getCode(), getMockExceptionMessage(e, me), me.getCause());</span><br><span class="line">            &#125;</span><br><span class="line">//          </span><br><span class="line">        &#125; catch (Throwable me) &#123;</span><br><span class="line">            throw new RpcException(getMockExceptionMessage(e, me), me.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="13、MockInvoker的invoke方法"><a href="#13、MockInvoker的invoke方法" class="headerlink" title="13、MockInvoker的invoke方法"></a>13、MockInvoker的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    //获取mock配置</span><br><span class="line">    String mock = getUrl().getParameter(invocation.getMethodName()+&quot;.&quot;+Constants.MOCK_KEY);</span><br><span class="line">    if (invocation instanceof RpcInvocation) &#123;</span><br><span class="line">        ((RpcInvocation) invocation).setInvoker(this);</span><br><span class="line">    &#125;</span><br><span class="line">    if (StringUtils.isBlank(mock))&#123;</span><br><span class="line">        mock = getUrl().getParameter(Constants.MOCK_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (StringUtils.isBlank(mock))&#123;</span><br><span class="line">        throw new RpcException(new IllegalAccessException(&quot;mock can not be null. url :&quot; + url));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析mock</span><br><span class="line">    //mock=fail:throw -&gt; throw</span><br><span class="line">    //mock=fail:return -&gt; return</span><br><span class="line">    //mock=xx.Service -&gt; xx.ServiceMock</span><br><span class="line">    mock = normallizeMock(URL.decode(mock));</span><br><span class="line">    if (Constants.RETURN_PREFIX.trim().equalsIgnoreCase(mock.trim()))&#123;</span><br><span class="line">        RpcResult result = new RpcResult();</span><br><span class="line">        result.setValue(null);</span><br><span class="line">        return result;</span><br><span class="line">    &#125; else if (mock.startsWith(Constants.RETURN_PREFIX)) &#123;</span><br><span class="line">        mock = mock.substring(Constants.RETURN_PREFIX.length()).trim();</span><br><span class="line">        mock = mock.replace(&apos;`&apos;, &apos;&quot;&apos;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Type[] returnTypes = RpcUtils.getReturnTypes(invocation);</span><br><span class="line">            Object value = parseMockValue(mock, returnTypes);</span><br><span class="line">            return new RpcResult(value);</span><br><span class="line">        &#125; catch (Exception ew) &#123;</span><br><span class="line">            throw new RpcException(&quot;mock return invoke error. method :&quot; + invocation.getMethodName() + &quot;, mock:&quot; + mock + &quot;, url: &quot;+ url , ew);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (mock.startsWith(Constants.THROW_PREFIX)) &#123;</span><br><span class="line">        mock = mock.substring(Constants.THROW_PREFIX.length()).trim();</span><br><span class="line">        mock = mock.replace(&apos;`&apos;, &apos;&quot;&apos;);</span><br><span class="line">        if (StringUtils.isBlank(mock))&#123;</span><br><span class="line">            throw new RpcException(&quot; mocked exception for Service degradation. &quot;);</span><br><span class="line">        &#125; else &#123; //用户自定义类</span><br><span class="line">            Throwable t = getThrowable(mock);</span><br><span class="line">            throw new RpcException(RpcException.BIZ_EXCEPTION, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123; //impl mock</span><br><span class="line">         try &#123;</span><br><span class="line">             //获取包装mock的invoker</span><br><span class="line">             Invoker&lt;T&gt; invoker = getInvoker(mock);</span><br><span class="line">             return invoker.invoke(invocation);</span><br><span class="line">         &#125; catch (Throwable t) &#123;</span><br><span class="line">             throw new RpcException(&quot;Failed to create mock implemention class &quot; + mock , t);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、创建客户端&quot;&gt;&lt;a href=&quot;#一、创建客户端&quot; class=&quot;headerlink&quot; title=&quot;一、创建客户端&quot;&gt;&lt;/a&gt;一、创建客户端&lt;/h3&gt;&lt;h4 id=&quot;1、ReferenceBean的afterPropertiesSet方法&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>dubbo源码服务暴露</title>
    <link href="http://yoursite.com/2020/01/13/dubbo%E6%BA%90%E7%A0%81/dubbo%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/"/>
    <id>http://yoursite.com/2020/01/13/dubbo源码/dubbo源码服务暴露/</id>
    <published>2020-01-13T14:32:38.161Z</published>
    <updated>2018-08-05T07:49:10.616Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建ServiceBean"><a href="#一、创建ServiceBean" class="headerlink" title="一、创建ServiceBean"></a>一、创建ServiceBean</h3><h4 id="1、ServiceBean的setApplicationContext方法"><a href="#1、ServiceBean的setApplicationContext方法" class="headerlink" title="1、ServiceBean的setApplicationContext方法"></a>1、ServiceBean的setApplicationContext方法</h4><p>ServiceBean实现了ApplicationContextAware接口，创建bean时会执行setApplicationContext方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class="line">    //设置spring容器</span><br><span class="line">    this.applicationContext = applicationContext;</span><br><span class="line">    SpringExtensionFactory.addApplicationContext(applicationContext);</span><br><span class="line">    if (applicationContext != null) &#123;</span><br><span class="line">        SPRING_CONTEXT = applicationContext;</span><br><span class="line">        try &#123;</span><br><span class="line">            //将ServiceBean作为监听器设置到applicationContext中</span><br><span class="line">            Method method = applicationContext.getClass().getMethod(&quot;addApplicationListener&quot;, new Class&lt;?&gt;[]&#123;ApplicationListener.class&#125;); // 兼容Spring2.0.1</span><br><span class="line">            method.invoke(applicationContext, new Object[] &#123;this&#125;);</span><br><span class="line">            supportedApplicationListener = true;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            if (applicationContext instanceof AbstractApplicationContext) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Method method = AbstractApplicationContext.class.getDeclaredMethod(&quot;addListener&quot;, new Class&lt;?&gt;[]&#123;ApplicationListener.class&#125;); // 兼容Spring2.0.1</span><br><span class="line">                    if (! method.isAccessible()) &#123;</span><br><span class="line">                        method.setAccessible(true);</span><br><span class="line">                    &#125;</span><br><span class="line">                    method.invoke(applicationContext, new Object[] &#123;this&#125;);</span><br><span class="line">                    supportedApplicationListener = true;</span><br><span class="line">                &#125; catch (Throwable t2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ServiceBean的afterPropertiesSet方法"><a href="#2、ServiceBean的afterPropertiesSet方法" class="headerlink" title="2、ServiceBean的afterPropertiesSet方法"></a>2、ServiceBean的afterPropertiesSet方法</h4><p>ServiceBean实现了InitializingBean接口，创建bean时会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;deprecation&quot; &#125;)</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    //provider为null，即未配置&lt;dubbo:provider&gt;</span><br><span class="line">    if (getProvider() == null) &#123;</span><br><span class="line">        //获取applicationContext中的ProviderConfig的bean</span><br><span class="line">        Map&lt;String, ProviderConfig&gt; providerConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProviderConfig.class, false, false);</span><br><span class="line">        //存在providerConfig</span><br><span class="line">        if (providerConfigMap != null &amp;&amp; providerConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            //获取applicationContext中的ProtocolConfig的bean</span><br><span class="line">            Map&lt;String, ProtocolConfig&gt; protocolConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProtocolConfig.class, false, false);</span><br><span class="line">            //不存在protocolConfig</span><br><span class="line">            if ((protocolConfigMap == null || protocolConfigMap.size() == 0)</span><br><span class="line">                    &amp;&amp; providerConfigMap.size() &gt; 1) &#123; // 兼容旧版本</span><br><span class="line">                List&lt;ProviderConfig&gt; providerConfigs = new ArrayList&lt;ProviderConfig&gt;();</span><br><span class="line">                for (ProviderConfig config : providerConfigMap.values()) &#123;</span><br><span class="line">                    if (config.isDefault() != null &amp;&amp; config.isDefault().booleanValue()) &#123;</span><br><span class="line">                        providerConfigs.add(config);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (providerConfigs.size() &gt; 0) &#123;</span><br><span class="line">                    //将providerConfigs转换为ProtocolConfig设置为protocols</span><br><span class="line">                    setProviders(providerConfigs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ProviderConfig providerConfig = null;</span><br><span class="line">                for (ProviderConfig config : providerConfigMap.values()) &#123;</span><br><span class="line">                    if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                        if (providerConfig != null) &#123;</span><br><span class="line">                            throw new IllegalStateException(&quot;Duplicate provider configs: &quot; + providerConfig + &quot; and &quot; + config);</span><br><span class="line">                        &#125;</span><br><span class="line">                        providerConfig = config;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (providerConfig != null) &#123;</span><br><span class="line">                    //设置providerConfig</span><br><span class="line">                    setProvider(providerConfig);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //application为null，即未配置&lt;dubbo:application&gt;</span><br><span class="line">    if (getApplication() == null</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getApplication() == null)) &#123;</span><br><span class="line">        //获取applicationContext中的ApplicationConfig的bean</span><br><span class="line">        Map&lt;String, ApplicationConfig&gt; applicationConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ApplicationConfig.class, false, false);</span><br><span class="line">        if (applicationConfigMap != null &amp;&amp; applicationConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ApplicationConfig applicationConfig = null;</span><br><span class="line">            for (ApplicationConfig config : applicationConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (applicationConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate application configs: &quot; + applicationConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    applicationConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (applicationConfig != null) &#123;</span><br><span class="line">                //设置applicationConfig</span><br><span class="line">                setApplication(applicationConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //module为null，即未配置&lt;dubbo:module&gt;</span><br><span class="line">    if (getModule() == null</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getModule() == null)) &#123;</span><br><span class="line">        //获取applicationContext中的ModuleConfig的bean</span><br><span class="line">        Map&lt;String, ModuleConfig&gt; moduleConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ModuleConfig.class, false, false);</span><br><span class="line">        if (moduleConfigMap != null &amp;&amp; moduleConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ModuleConfig moduleConfig = null;</span><br><span class="line">            for (ModuleConfig config : moduleConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (moduleConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate module configs: &quot; + moduleConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    moduleConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (moduleConfig != null) &#123;</span><br><span class="line">                //设置moduleConfig</span><br><span class="line">                setModule(moduleConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //registries为null，即未配置&lt;dubbo:registry&gt;</span><br><span class="line">    if ((getRegistries() == null || getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getRegistries() == null || getProvider().getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getRegistries() == null || getApplication().getRegistries().size() == 0)) &#123;</span><br><span class="line">        //获取applicationContext中的RegistryConfig的bean</span><br><span class="line">        Map&lt;String, RegistryConfig&gt; registryConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, RegistryConfig.class, false, false);</span><br><span class="line">        if (registryConfigMap != null &amp;&amp; registryConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            List&lt;RegistryConfig&gt; registryConfigs = new ArrayList&lt;RegistryConfig&gt;();</span><br><span class="line">            for (RegistryConfig config : registryConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    registryConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (registryConfigs != null &amp;&amp; registryConfigs.size() &gt; 0) &#123;</span><br><span class="line">                //设置registryConfigs</span><br><span class="line">                super.setRegistries(registryConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //monitor为null，即未配置&lt;dubbo:monitor&gt;</span><br><span class="line">    if (getMonitor() == null</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getMonitor() == null)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getMonitor() == null)) &#123;</span><br><span class="line">        Map&lt;String, MonitorConfig&gt; monitorConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, MonitorConfig.class, false, false);</span><br><span class="line">        if (monitorConfigMap != null &amp;&amp; monitorConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            MonitorConfig monitorConfig = null;</span><br><span class="line">            for (MonitorConfig config : monitorConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (monitorConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate monitor configs: &quot; + monitorConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    monitorConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (monitorConfig != null) &#123;</span><br><span class="line">                //设置monitorConfig</span><br><span class="line">                setMonitor(monitorConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //protocols为null，即未配置&lt;dubbo:protocol&gt;</span><br><span class="line">    if ((getProtocols() == null || getProtocols().size() == 0)</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getProtocols() == null || getProvider().getProtocols().size() == 0)) &#123;</span><br><span class="line">        Map&lt;String, ProtocolConfig&gt; protocolConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProtocolConfig.class, false, false);</span><br><span class="line">        if (protocolConfigMap != null &amp;&amp; protocolConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            List&lt;ProtocolConfig&gt; protocolConfigs = new ArrayList&lt;ProtocolConfig&gt;();</span><br><span class="line">            for (ProtocolConfig config : protocolConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    protocolConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (protocolConfigs != null &amp;&amp; protocolConfigs.size() &gt; 0) &#123;</span><br><span class="line">                //设置protocolConfigs</span><br><span class="line">                super.setProtocols(protocolConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置服务名称即beanName（interface属性）</span><br><span class="line">    if (getPath() == null || getPath().length() == 0) &#123;</span><br><span class="line">        if (beanName != null &amp;&amp; beanName.length() &gt; 0 </span><br><span class="line">                &amp;&amp; getInterface() != null &amp;&amp; getInterface().length() &gt; 0</span><br><span class="line">                &amp;&amp; beanName.startsWith(getInterface())) &#123;</span><br><span class="line">            setPath(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //不延迟立即暴露服务，延迟会在容器refreshed完成后暴露服务</span><br><span class="line">    if (! isDelay()) &#123;</span><br><span class="line">        export();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析以后的ServiceBean的属性如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">id = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">applicationContext = ClassPathXmlApplicationContext实例</span><br><span class="line">beanName = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">interfaceName = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">ref = DemoServiceImpl实例</span><br><span class="line">path = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">  </span><br><span class="line">application:</span><br><span class="line">    -- id = demo-provider</span><br><span class="line">    -- name = demo-provider</span><br><span class="line"> </span><br><span class="line">registries = [</span><br><span class="line">    RegistryConfig:</span><br><span class="line">        -- id = com.alibaba.dubbo.config.RegistryConfig</span><br><span class="line">        -- protocol = zookeeper</span><br><span class="line">        - address = 10.211.55.5:2181</span><br><span class="line">        -- client = curator</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">protocols = [ </span><br><span class="line">    ProtocolConfig: </span><br><span class="line">        -- id = dubbo</span><br><span class="line">        -- name = dubbo</span><br><span class="line">        -- port = 20880    </span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="二、本地暴露"><a href="#二、本地暴露" class="headerlink" title="二、本地暴露"></a>二、本地暴露</h3><h4 id="1、ServiceConfig的export方法"><a href="#1、ServiceConfig的export方法" class="headerlink" title="1、ServiceConfig的export方法"></a>1、ServiceConfig的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void export() &#123;</span><br><span class="line">    if (provider != null) &#123;</span><br><span class="line">        if (export == null) &#123;</span><br><span class="line">            export = provider.getExport();</span><br><span class="line">        &#125;</span><br><span class="line">        if (delay == null) &#123;</span><br><span class="line">            delay = provider.getDelay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (export != null &amp;&amp; ! export.booleanValue()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //延时暴露</span><br><span class="line">    if (delay != null &amp;&amp; delay &gt; 0) &#123;</span><br><span class="line">        Thread thread = new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(delay);</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                doExport();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //由于是后台线程，则如果当前只有后台线程存在的情况下，JAVA虚拟机将退出，daemon线程也将结束</span><br><span class="line">        thread.setDaemon(true);</span><br><span class="line">        thread.setName(&quot;DelayExportServiceThread&quot;);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //暴露服务</span><br><span class="line">        doExport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、ServiceConfig的doExport方法"><a href="#2、ServiceConfig的doExport方法" class="headerlink" title="2、ServiceConfig的doExport方法"></a>2、ServiceConfig的doExport方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">protected synchronized void doExport() &#123;</span><br><span class="line">    //已经解除暴露</span><br><span class="line">    if (unexported) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Already unexported!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //已经暴露</span><br><span class="line">    if (exported) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    exported = true;</span><br><span class="line">    //interfaceName不能为空</span><br><span class="line">    if (interfaceName == null || interfaceName.length() == 0) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;&lt;dubbo:service interface=\&quot;\&quot; /&gt; interface not allow null!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //provider不存在，创建默认的ProviderConfig，并设置属性</span><br><span class="line">    checkDefault();</span><br><span class="line">    if (provider != null) &#123;</span><br><span class="line">        if (application == null) &#123;</span><br><span class="line">            application = provider.getApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        if (module == null) &#123;</span><br><span class="line">            module = provider.getModule();</span><br><span class="line">        &#125;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = provider.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = provider.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">        if (protocols == null) &#123;</span><br><span class="line">            protocols = provider.getProtocols();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (module != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = module.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = module.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (application != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = application.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = application.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //ref是接口实现类引用，GenericService是泛接口</span><br><span class="line">    //这个方式主要用于服务器端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示</span><br><span class="line">    if (ref instanceof GenericService) &#123;</span><br><span class="line">        interfaceClass = GenericService.class;</span><br><span class="line">        if (StringUtils.isEmpty(generic)) &#123;</span><br><span class="line">            generic = Boolean.TRUE.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            interfaceClass = Class.forName(interfaceName, true, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">        checkRef();</span><br><span class="line">        generic = Boolean.FALSE.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    if(local !=null)&#123;</span><br><span class="line">        if(local==&quot;true&quot;)&#123;</span><br><span class="line">            local=interfaceName+&quot;Local&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; localClass;</span><br><span class="line">        try &#123;</span><br><span class="line">            localClass = ClassHelper.forNameWithThreadContextClassLoader(local);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        if(!interfaceClass.isAssignableFrom(localClass))&#123;</span><br><span class="line">            throw new IllegalStateException(&quot;The local implemention class &quot; + localClass.getName() + &quot; not implement interface &quot; + interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(stub !=null)&#123;</span><br><span class="line">        if(stub==&quot;true&quot;)&#123;</span><br><span class="line">            stub=interfaceName+&quot;Stub&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; stubClass;</span><br><span class="line">        try &#123;</span><br><span class="line">            stubClass = ClassHelper.forNameWithThreadContextClassLoader(stub);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        if(!interfaceClass.isAssignableFrom(stubClass))&#123;</span><br><span class="line">            throw new IllegalStateException(&quot;The stub implemention class &quot; + stubClass.getName() + &quot; not implement interface &quot; + interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //application为null,创建默认的ApplicationConfig，并设置属性</span><br><span class="line">    checkApplication();</span><br><span class="line">    //registries为null,创建默认的RegistryConfig，并设置属性</span><br><span class="line">    checkRegistry();</span><br><span class="line">    //protocols为null,创建默认的ProtocolConfig，并设置属性</span><br><span class="line">    checkProtocol();</span><br><span class="line">    //设置ServiceBean属性</span><br><span class="line">    appendProperties(this);</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line">    if (path == null || path.length() == 0) &#123;</span><br><span class="line">        path = interfaceName;</span><br><span class="line">    &#125;</span><br><span class="line">    //暴露服务</span><br><span class="line">    doExportUrls();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ServiceConfig的doExportUrls方法"><a href="#3、ServiceConfig的doExportUrls方法" class="headerlink" title="3、ServiceConfig的doExportUrls方法"></a>3、ServiceConfig的doExportUrls方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">private void doExportUrls() &#123;</span><br><span class="line">    //获取注册中心的配置</span><br><span class="line">    List&lt;URL&gt; registryURLs = loadRegistries(true);</span><br><span class="line">    //协议配置</span><br><span class="line">    for (ProtocolConfig protocolConfig : protocols) &#123;</span><br><span class="line">        //暴露服务</span><br><span class="line">        doExportUrlsFor1Protocol(protocolConfig, registryURLs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractInterfaceConfig的loadRegistries方法"><a href="#4、AbstractInterfaceConfig的loadRegistries方法" class="headerlink" title="4、AbstractInterfaceConfig的loadRegistries方法"></a>4、AbstractInterfaceConfig的loadRegistries方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;URL&gt; loadRegistries(boolean provider) &#123;</span><br><span class="line">    //registries不能为null</span><br><span class="line">    checkRegistry();</span><br><span class="line">    List&lt;URL&gt; registryList = new ArrayList&lt;URL&gt;();</span><br><span class="line">    if (registries != null &amp;&amp; registries.size() &gt; 0) &#123;</span><br><span class="line">        for (RegistryConfig config : registries) &#123;</span><br><span class="line">            //获取注册中心地址</span><br><span class="line">            String address = config.getAddress();</span><br><span class="line">            if (address == null || address.length() == 0) &#123;</span><br><span class="line">                address = Constants.ANYHOST_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            String sysaddress = System.getProperty(&quot;dubbo.registry.address&quot;);</span><br><span class="line">            if (sysaddress != null &amp;&amp; sysaddress.length() &gt; 0) &#123;</span><br><span class="line">                address = sysaddress;</span><br><span class="line">            &#125;</span><br><span class="line">            if (address != null &amp;&amp; address.length() &gt; 0 </span><br><span class="line">                    &amp;&amp; ! RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) &#123;</span><br><span class="line">                Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">                //获取application中的参数</span><br><span class="line">                appendParameters(map, application);</span><br><span class="line">                //获取config中的参数</span><br><span class="line">                appendParameters(map, config);</span><br><span class="line">                //设置path</span><br><span class="line">                map.put(&quot;path&quot;, RegistryService.class.getName());</span><br><span class="line">                //设置dubbo版本</span><br><span class="line">                map.put(&quot;dubbo&quot;, Version.getVersion());</span><br><span class="line">                //设置timestamp</span><br><span class="line">                map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">                //设置pid</span><br><span class="line">                if (ConfigUtils.getPid() &gt; 0) &#123;</span><br><span class="line">                    map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">                &#125;</span><br><span class="line">                //设置protocol</span><br><span class="line">                if (! map.containsKey(&quot;protocol&quot;)) &#123;</span><br><span class="line">                    if (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension(&quot;remote&quot;)) &#123;</span><br><span class="line">                        map.put(&quot;protocol&quot;, &quot;remote&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        map.put(&quot;protocol&quot;, &quot;dubbo&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //将map中的参数拼接到url中</span><br><span class="line">                List&lt;URL&gt; urls = UrlUtils.parseURLs(address, map);</span><br><span class="line">                for (URL url : urls) &#123;</span><br><span class="line">                    //url中添加registry参数</span><br><span class="line">                    url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());</span><br><span class="line">                    //设置protocol为registry</span><br><span class="line">                    url = url.setProtocol(Constants.REGISTRY_PROTOCOL);</span><br><span class="line">                    if ((provider &amp;&amp; url.getParameter(Constants.REGISTER_KEY, true))</span><br><span class="line">                            || (! provider &amp;&amp; url.getParameter(Constants.SUBSCRIBE_KEY, true))) &#123;</span><br><span class="line">                        //url加入registryList中</span><br><span class="line">                        registryList.add(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return registryList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法"><a href="#5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法" class="headerlink" title="5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法"></a>5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line">private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs) &#123;</span><br><span class="line">    //获取协议名，默认dubbo</span><br><span class="line">    String name = protocolConfig.getName();</span><br><span class="line">    if (name == null || name.length() == 0) &#123;</span><br><span class="line">        name = &quot;dubbo&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //从配置中获取host地址</span><br><span class="line">    String host = protocolConfig.getHost();</span><br><span class="line">    if (provider != null &amp;&amp; (host == null || host.length() == 0)) &#123;</span><br><span class="line">        host = provider.getHost();</span><br><span class="line">    &#125;</span><br><span class="line">    boolean anyhost = false;</span><br><span class="line">    //host不存在或无效</span><br><span class="line">    if (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">        anyhost = true;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取本机地址</span><br><span class="line">            host = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        //host不存在或无效</span><br><span class="line">        if (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">            if (registryURLs != null &amp;&amp; registryURLs.size() &gt; 0) &#123;</span><br><span class="line">                for (URL registryURL : registryURLs) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Socket socket = new Socket();</span><br><span class="line">                        try &#123;</span><br><span class="line">                            SocketAddress addr = new InetSocketAddress(registryURL.getHost(), registryURL.getPort());</span><br><span class="line">                            //连接注册中心</span><br><span class="line">                            socket.connect(addr, 1000);</span><br><span class="line">                            //获取本机地址</span><br><span class="line">                            host = socket.getLocalAddress().getHostAddress();</span><br><span class="line">                            break;</span><br><span class="line">                        &#125; finally &#123;</span><br><span class="line">                            try &#123;</span><br><span class="line">                                socket.close();</span><br><span class="line">                            &#125; catch (Throwable e) &#123;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        logger.warn(e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">                //遍历本地网卡，返回第一个合理的IP</span><br><span class="line">                host = NetUtils.getLocalHost();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //从配置中获取端口</span><br><span class="line">    Integer port = protocolConfig.getPort();</span><br><span class="line">    if (provider != null &amp;&amp; (port == null || port == 0)) &#123;</span><br><span class="line">        port = provider.getPort();</span><br><span class="line">    &#125;</span><br><span class="line">    //获取DubboProtocol的默认端口20880</span><br><span class="line">    final int defaultPort = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(name).getDefaultPort();</span><br><span class="line">    if (port == null || port == 0) &#123;</span><br><span class="line">        port = defaultPort;</span><br><span class="line">    &#125;</span><br><span class="line">    //随机获取可用端口</span><br><span class="line">    if (port == null || port &lt;= 0) &#123;</span><br><span class="line">        port = getRandomPort(name);</span><br><span class="line">        if (port == null || port &lt; 0) &#123;</span><br><span class="line">            port = NetUtils.getAvailablePort(defaultPort);</span><br><span class="line">            putRandomPort(name, port);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.warn(&quot;Use random available port(&quot; + port + &quot;) for protocol &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">    //设置anyhost</span><br><span class="line">    if (anyhost) &#123;</span><br><span class="line">        map.put(Constants.ANYHOST_KEY, &quot;true&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置side为provider</span><br><span class="line">    map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);</span><br><span class="line">    //设置dubbo版本</span><br><span class="line">    map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());</span><br><span class="line">    //设置timestamp</span><br><span class="line">    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    //设置pid</span><br><span class="line">    if (ConfigUtils.getPid() &gt; 0) &#123;</span><br><span class="line">        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">    &#125;</span><br><span class="line">    //将配置属性加入map</span><br><span class="line">    appendParameters(map, application);</span><br><span class="line">    appendParameters(map, module);</span><br><span class="line">    appendParameters(map, provider, Constants.DEFAULT_KEY);</span><br><span class="line">    appendParameters(map, protocolConfig);</span><br><span class="line">    appendParameters(map, this);</span><br><span class="line">    if (methods != null &amp;&amp; methods.size() &gt; 0) &#123;</span><br><span class="line">        for (MethodConfig method : methods) &#123;</span><br><span class="line">            appendParameters(map, method, method.getName());</span><br><span class="line">            String retryKey = method.getName() + &quot;.retry&quot;;</span><br><span class="line">            if (map.containsKey(retryKey)) &#123;</span><br><span class="line">                String retryValue = map.remove(retryKey);</span><br><span class="line">                if (&quot;false&quot;.equals(retryValue)) &#123;</span><br><span class="line">                    map.put(method.getName() + &quot;.retries&quot;, &quot;0&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;ArgumentConfig&gt; arguments = method.getArguments();</span><br><span class="line">            if (arguments != null &amp;&amp; arguments.size() &gt; 0) &#123;</span><br><span class="line">                for (ArgumentConfig argument : arguments) &#123;</span><br><span class="line">                    //类型自动转换.</span><br><span class="line">                    if(argument.getType() != null &amp;&amp; argument.getType().length() &gt;0)&#123;</span><br><span class="line">                        Method[] methods = interfaceClass.getMethods();</span><br><span class="line">                        //遍历所有方法</span><br><span class="line">                        if(methods != null &amp;&amp; methods.length &gt; 0)&#123;</span><br><span class="line">                            for (int i = 0; i &lt; methods.length; i++) &#123;</span><br><span class="line">                                String methodName = methods[i].getName();</span><br><span class="line">                                //匹配方法名称，获取方法签名.</span><br><span class="line">                                if(methodName.equals(method.getName()))&#123;</span><br><span class="line">                                    Class&lt;?&gt;[] argtypes = methods[i].getParameterTypes();</span><br><span class="line">                                    //一个方法中单个callback</span><br><span class="line">                                    if (argument.getIndex() != -1 )&#123;</span><br><span class="line">                                        if (argtypes[argument.getIndex()].getName().equals(argument.getType()))&#123;</span><br><span class="line">                                            appendParameters(map, argument, method.getName() + &quot;.&quot; + argument.getIndex());</span><br><span class="line">                                        &#125;else &#123;</span><br><span class="line">                                            throw new IllegalArgumentException(&quot;argument config error : the index attribute and type attirbute not match :index :&quot;+argument.getIndex() + &quot;, type:&quot; + argument.getType());</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        //一个方法中多个callback</span><br><span class="line">                                        for (int j = 0 ;j&lt;argtypes.length ;j++) &#123;</span><br><span class="line">                                            Class&lt;?&gt; argclazz = argtypes[j];</span><br><span class="line">                                            if (argclazz.getName().equals(argument.getType()))&#123;</span><br><span class="line">                                                appendParameters(map, argument, method.getName() + &quot;.&quot; + j);</span><br><span class="line">                                                if (argument.getIndex() != -1 &amp;&amp; argument.getIndex() != j)&#123;</span><br><span class="line">                                                    throw new IllegalArgumentException(&quot;argument config error : the index attribute and type attirbute not match :index :&quot;+argument.getIndex() + &quot;, type:&quot; + argument.getType());</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;else if(argument.getIndex() != -1)&#123;</span><br><span class="line">                        appendParameters(map, argument, method.getName() + &quot;.&quot; + argument.getIndex());</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        throw new IllegalArgumentException(&quot;argument config must set index or type attribute.eg: &lt;dubbo:argument index=&apos;0&apos; .../&gt; or &lt;dubbo:argument type=xxx .../&gt;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; // end of methods for</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ProtocolUtils.isGeneric(generic)) &#123;</span><br><span class="line">        map.put(&quot;generic&quot;, generic);</span><br><span class="line">        map.put(&quot;methods&quot;, Constants.ANY_VALUE);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">        if (revision != null &amp;&amp; revision.length() &gt; 0) &#123;</span><br><span class="line">            map.put(&quot;revision&quot;, revision);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取接口中的方法</span><br><span class="line">        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">        if(methods.length == 0) &#123;</span><br><span class="line">            logger.warn(&quot;NO method found in service interface &quot; + interfaceClass.getName());</span><br><span class="line">            map.put(&quot;methods&quot;, Constants.ANY_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            map.put(&quot;methods&quot;, StringUtils.join(new HashSet&lt;String&gt;(Arrays.asList(methods)), &quot;,&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (! ConfigUtils.isEmpty(token)) &#123;</span><br><span class="line">        if (ConfigUtils.isDefault(token)) &#123;</span><br><span class="line">            map.put(&quot;token&quot;, UUID.randomUUID().toString());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            map.put(&quot;token&quot;, token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;injvm&quot;.equals(protocolConfig.getName())) &#123;</span><br><span class="line">        protocolConfig.setRegister(false);</span><br><span class="line">        map.put(&quot;notify&quot;, &quot;false&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 导出服务</span><br><span class="line">    String contextPath = protocolConfig.getContextpath();</span><br><span class="line">    if ((contextPath == null || contextPath.length() == 0) &amp;&amp; provider != null) &#123;</span><br><span class="line">        contextPath = provider.getContextpath();</span><br><span class="line">    &#125;</span><br><span class="line">    //创建注册中心地址</span><br><span class="line">    URL url = new URL(name, host, port, (contextPath == null || contextPath.length() == 0 ? &quot;&quot; : contextPath + &quot;/&quot;) + path, map);</span><br><span class="line"></span><br><span class="line">    if (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)</span><br><span class="line">            .hasExtension(url.getProtocol())) &#123;</span><br><span class="line">        url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)</span><br><span class="line">                .getExtension(url.getProtocol()).getConfigurator(url).configure(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String scope = url.getParameter(Constants.SCOPE_KEY);</span><br><span class="line">    //配置为none不暴露</span><br><span class="line">    if (! Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) &#123;</span><br><span class="line"></span><br><span class="line">        //配置不是remote的情况下做本地暴露 (配置为remote，则表示只暴露远程服务)</span><br><span class="line">        if (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) &#123;</span><br><span class="line">            exportLocal(url);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露远程服务)</span><br><span class="line">        if (! Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope) )&#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Export dubbo service &quot; + interfaceClass.getName() + &quot; to url &quot; + url);</span><br><span class="line">            &#125;</span><br><span class="line">            //注册中心配置不为空</span><br><span class="line">            if (registryURLs != null &amp;&amp; registryURLs.size() &gt; 0</span><br><span class="line">                    &amp;&amp; url.getParameter(&quot;register&quot;, true)) &#123;</span><br><span class="line">                for (URL registryURL : registryURLs) &#123;</span><br><span class="line">                    url = url.addParameterIfAbsent(&quot;dynamic&quot;, registryURL.getParameter(&quot;dynamic&quot;));</span><br><span class="line">                    URL monitorUrl = loadMonitor(registryURL);</span><br><span class="line">                    if (monitorUrl != null) &#123;</span><br><span class="line">                        url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                        logger.info(&quot;Register dubbo service &quot; + interfaceClass.getName() + &quot; url &quot; + url + &quot; to registry &quot; + registryURL);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //proxyFactory为ProxyFactory$Adaptive，最终执行JavassistProxyFactory的getInvoker方法</span><br><span class="line">                    //创建AbstractProxyInvoker，url默认使用&quot;UTF-8&quot;编码</span><br><span class="line">                    Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class="line">                    //protocol为Protocol$Adaptive，最终执行RegistryProtocol的export方法</span><br><span class="line">                    Exporter&lt;?&gt; exporter = protocol.export(invoker);</span><br><span class="line">                    exporters.add(exporter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);</span><br><span class="line">                //远程暴露</span><br><span class="line">                Exporter&lt;?&gt; exporter = protocol.export(invoker);</span><br><span class="line">                exporters.add(exporter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.urls.add(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、ServiceConfig的exportLocal方法"><a href="#6、ServiceConfig的exportLocal方法" class="headerlink" title="6、ServiceConfig的exportLocal方法"></a>6、ServiceConfig的exportLocal方法</h4><p>本地暴露，暴露在当前jvm中，相互调用不需要通过远程注册中心，但是又想使用filter链，可以使用本地暴露。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">private void exportLocal(URL url) &#123;</span><br><span class="line">    if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) &#123;</span><br><span class="line">        URL local = URL.valueOf(url.toFullString())</span><br><span class="line">                .setProtocol(Constants.LOCAL_PROTOCOL)</span><br><span class="line">                .setHost(NetUtils.LOCALHOST)</span><br><span class="line">                .setPort(0);</span><br><span class="line"></span><br><span class="line">        // modified by lishen</span><br><span class="line">        ServiceClassHolder.getInstance().pushServiceClass(getServiceClass(ref));</span><br><span class="line">        //protocol为Protocol$Adaptive</span><br><span class="line">        //依次调用ProtocolListenerWrapper、ProtocolFilterWrapper、InjvmProtocol的export方法</span><br><span class="line">        //返回被Listener监听器和Filter过滤器包裹以后的invoker</span><br><span class="line">        Exporter&lt;?&gt; exporter = protocol.export(</span><br><span class="line">                proxyFactory.getInvoker(ref, (Class) interfaceClass, local));</span><br><span class="line">        exporters.add(exporter);</span><br><span class="line">        logger.info(&quot;Export dubbo service &quot; + interfaceClass.getName() +&quot; to local registry&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>url示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=2999&amp;side=provider&amp;timestamp=1507005507343</span><br></pre></td></tr></table></figure></p><h4 id="7、InjvmProtocol的export方法"><a href="#7、InjvmProtocol的export方法" class="headerlink" title="7、InjvmProtocol的export方法"></a>7、InjvmProtocol的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; Exporter&lt;T&gt; export(Invoker&lt;T&gt; invoker) throws RpcException &#123;</span><br><span class="line">    return new InjvmExporter&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、远程暴露启动netty服务器"><a href="#三、远程暴露启动netty服务器" class="headerlink" title="三、远程暴露启动netty服务器"></a>三、远程暴露启动netty服务器</h3><h4 id="1、接（二、5）RegistryProtocol的export方法"><a href="#1、接（二、5）RegistryProtocol的export方法" class="headerlink" title="1、接（二、5）RegistryProtocol的export方法"></a>1、接（二、5）RegistryProtocol的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; Exporter&lt;T&gt; export(final Invoker&lt;T&gt; originInvoker) throws RpcException &#123;</span><br><span class="line">    //export invoker</span><br><span class="line">    //启动netty服务器</span><br><span class="line">    final ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);</span><br><span class="line">    //registry provider</span><br><span class="line">    //获取ZookeeperRegistry</span><br><span class="line">    final Registry registry = getRegistry(originInvoker);</span><br><span class="line">    //获取注册url</span><br><span class="line">    final URL registedProviderUrl = getRegistedProviderUrl(originInvoker);</span><br><span class="line">    registry.register(registedProviderUrl);</span><br><span class="line">    // 订阅override数据</span><br><span class="line">    // FIXME 提供者订阅时，会影响同一JVM即暴露服务，又引用同一服务的的场景，因为subscribed以服务名为缓存的key，导致订阅信息覆盖。</span><br><span class="line">    //获取overrideSubscribeUrl</span><br><span class="line">    final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registedProviderUrl);</span><br><span class="line">    //创建overrideSubscribeListener</span><br><span class="line">    final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl);</span><br><span class="line">    //将overrideSubscribeUrl:overrideSubscribeListener放入缓存</span><br><span class="line">    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    //订阅</span><br><span class="line">    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    //保证每次export都返回一个新的exporter实例</span><br><span class="line">    return new Exporter&lt;T&gt;() &#123;</span><br><span class="line">        public Invoker&lt;T&gt; getInvoker() &#123;</span><br><span class="line">            return exporter.getInvoker();</span><br><span class="line">        &#125;</span><br><span class="line">        public void unexport() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                exporter.unexport();</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.warn(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                registry.unregister(registedProviderUrl);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.warn(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                overrideListeners.remove(overrideSubscribeUrl);</span><br><span class="line">                registry.unsubscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.warn(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>originInvoker属性示例，url为解码后的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy： DemoServiceImpl实例</span><br><span class="line">type：  Class&lt;com.alibaba.dubbo.demo.DemoService&gt;</span><br><span class="line">url：   registry://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;client=curator</span><br><span class="line">        &amp;dubbo=2.0.0&amp;export=dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true</span><br><span class="line">        &amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService</span><br><span class="line">        &amp;methods=sayHello&amp;pid=887&amp;side=provider&amp;timestamp=1507096024334</span><br></pre></td></tr></table></figure></p><p>registedProviderUrl示例（解码后的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zookeeper://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;client=curator</span><br><span class="line">&amp;dubbo=2.0.0&amp;export=dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider</span><br><span class="line">&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=2791</span><br><span class="line">&amp;side=provider&amp;timestamp=1507262031554&amp;pid=2791&amp;timestamp=1507262031521</span><br></pre></td></tr></table></figure></p><p>overrideSubscribeUrl示例（解码后的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provider://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators</span><br><span class="line">&amp;check=false&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=5259&amp;side=provider</span><br><span class="line">&amp;timestamp=1507294508053</span><br></pre></td></tr></table></figure></p><h4 id="2、RegistryProtocol的doLocalExport方法"><a href="#2、RegistryProtocol的doLocalExport方法" class="headerlink" title="2、RegistryProtocol的doLocalExport方法"></a>2、RegistryProtocol的doLocalExport方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private &lt;T&gt; ExporterChangeableWrapper&lt;T&gt;  doLocalExport(final Invoker&lt;T&gt; originInvoker)&#123;</span><br><span class="line">    //根据originInvoker获取providerUrl</span><br><span class="line">    String key = getCacheKey(originInvoker);</span><br><span class="line">    ExporterChangeableWrapper&lt;T&gt; exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">    if (exporter == null) &#123;</span><br><span class="line">        synchronized (bounds) &#123;</span><br><span class="line">            exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">            if (exporter == null) &#123;</span><br><span class="line">                //存储originInvoker和providerUrl</span><br><span class="line">                final Invoker&lt;?&gt; invokerDelegete = new InvokerDelegete&lt;T&gt;(originInvoker, getProviderUrl(originInvoker));</span><br><span class="line">                //启动netty服务器，protocol为Protocol$Adaptive</span><br><span class="line">                //依次调用ProtocolListenerWrapper、ProtocolFilterWrapper、DubboProtocol的export方法</span><br><span class="line">                //返回被Listener监听器和Filter过滤器包裹以后的invoker</span><br><span class="line">                exporter = new ExporterChangeableWrapper&lt;T&gt;((Exporter&lt;T&gt;)protocol.export(invokerDelegete), originInvoker);</span><br><span class="line">                bounds.put(key, exporter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (ExporterChangeableWrapper&lt;T&gt;) exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InvokerDelegete属性示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">invoker:    originInvoker（AbstractProxyInvoker对象）</span><br><span class="line">InvokerWrapper.invoker： originInvoker（AbstractProxyInvoker对象）</span><br><span class="line">url：   providerUrl（dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider</span><br><span class="line">        &amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span><br><span class="line">        &amp;pid=1035&amp;side=provider&amp;timestamp=1507101286063）</span><br></pre></td></tr></table></figure></p><h4 id="3、DubboProtocol的export方法"><a href="#3、DubboProtocol的export方法" class="headerlink" title="3、DubboProtocol的export方法"></a>3、DubboProtocol的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; Exporter&lt;T&gt; export(Invoker&lt;T&gt; invoker) throws RpcException &#123;</span><br><span class="line"></span><br><span class="line">    URL url = invoker.getUrl();</span><br><span class="line">    </span><br><span class="line">    // export service.</span><br><span class="line">    //由url获取key，key的格式serviceGroup/serviceName:serviceVersion:port如com.alibaba.dubbo.demo.DemoService:20880</span><br><span class="line">    String key = serviceKey(url);</span><br><span class="line">    DubboExporter&lt;T&gt; exporter = new DubboExporter&lt;T&gt;(invoker, key, exporterMap);</span><br><span class="line">    exporterMap.put(key, exporter);</span><br><span class="line">    </span><br><span class="line">    //export an stub service for dispaching event</span><br><span class="line">    Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY,Constants.DEFAULT_STUB_EVENT);</span><br><span class="line">    Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, false);</span><br><span class="line">    if (isStubSupportEvent &amp;&amp; !isCallbackservice)&#123;</span><br><span class="line">        String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);</span><br><span class="line">        if (stubServiceMethods == null || stubServiceMethods.length() == 0 )&#123;</span><br><span class="line">            if (logger.isWarnEnabled())&#123;</span><br><span class="line">                logger.warn(new IllegalStateException(&quot;consumer [&quot; +url.getParameter(Constants.INTERFACE_KEY) +</span><br><span class="line">                        &quot;], has set stubproxy support event ,but no stub methods founded.&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动netty服务器</span><br><span class="line">    openServer(url);</span><br><span class="line"></span><br><span class="line">    // modified by lishen</span><br><span class="line">    optimizeSerialization(url);</span><br><span class="line"></span><br><span class="line">    return exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DubboExporter属性示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key：    com.alibaba.dubbo.demo.DemoService:20880</span><br><span class="line">invoker：    “InvokerDelegete的filter对象”</span><br><span class="line">exporterMap：&#123; &quot;com.alibaba.dubbo.demo.DemoService:20880&quot; -&gt; 当前的DubboExporter实例 &#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、DubboProtocol的openServer方法"><a href="#4、DubboProtocol的openServer方法" class="headerlink" title="4、DubboProtocol的openServer方法"></a>4、DubboProtocol的openServer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void openServer(URL url) &#123;</span><br><span class="line">    // find server.</span><br><span class="line">    //获取netty服务器地址</span><br><span class="line">    String key = url.getAddress();</span><br><span class="line">    //client 也可以暴露一个只有server可以调用的服务。</span><br><span class="line">    boolean isServer = url.getParameter(Constants.IS_SERVER_KEY,true);</span><br><span class="line">    if (isServer) &#123;</span><br><span class="line">        //从缓存里获取netty服务器</span><br><span class="line">        ExchangeServer server = serverMap.get(key);</span><br><span class="line">        if (server == null) &#123;</span><br><span class="line">            //创建并启动netty服务器</span><br><span class="line">            serverMap.put(key, createServer(url));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //server支持reset,配合override功能使用</span><br><span class="line">            server.reset(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DubboProtocol的createServer方法"><a href="#5、DubboProtocol的createServer方法" class="headerlink" title="5、DubboProtocol的createServer方法"></a>5、DubboProtocol的createServer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> private ExchangeServer createServer(URL url) &#123;</span><br><span class="line">    //添加参数channel.readonly.sent=true</span><br><span class="line">    //默认开启server关闭时发送readonly事件</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());</span><br><span class="line">    //默认开启heartbeat</span><br><span class="line">    //添加参数heartbeat=60000</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class="line">    String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);</span><br><span class="line"></span><br><span class="line">    if (str != null &amp;&amp; str.length() &gt; 0 &amp;&amp; ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))</span><br><span class="line">        throw new RpcException(&quot;Unsupported server type: &quot; + str + &quot;, url: &quot; + url);</span><br><span class="line">    //添加参数codec=dubbo</span><br><span class="line">    url = url.addParameter(Constants.CODEC_KEY, Version.isCompatibleVersion() ? COMPATIBLE_CODEC_NAME : DubboCodec.NAME);</span><br><span class="line">    ExchangeServer server;</span><br><span class="line">    try &#123;</span><br><span class="line">        //启动netty服务器，requestHandler为请求处理器</span><br><span class="line">        server = Exchangers.bind(url, requestHandler);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Fail to start server(url: &quot; + url + &quot;) &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取client参数</span><br><span class="line">    str = url.getParameter(Constants.CLIENT_KEY);</span><br><span class="line">    if (str != null &amp;&amp; str.length() &gt; 0) &#123;</span><br><span class="line">        Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();</span><br><span class="line">        if (!supportedTypes.contains(str)) &#123;</span><br><span class="line">            throw new RpcException(&quot;Unsupported client type: &quot; + str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Exchangers的bind方法"><a href="#6、Exchangers的bind方法" class="headerlink" title="6、Exchangers的bind方法"></a>6、Exchangers的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;handler == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, &quot;exchange&quot;);</span><br><span class="line">    //获取HeaderExchanger，执行bind方法</span><br><span class="line">    return getExchanger(url).bind(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、HeaderExchanger的bind方法"><a href="#7、HeaderExchanger的bind方法" class="headerlink" title="7、HeaderExchanger的bind方法"></a>7、HeaderExchanger的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、Transporters的bind方法"><a href="#8、Transporters的bind方法" class="headerlink" title="8、Transporters的bind方法"></a>8、Transporters的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static Server bind(URL url, ChannelHandler... handlers) throws RemotingException &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (handlers == null || handlers.length == 0) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;handlers == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    ChannelHandler handler;</span><br><span class="line">    if (handlers.length == 1) &#123;</span><br><span class="line">        handler = handlers[0];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        handler = new ChannelHandlerDispatcher(handlers);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取Transporter$Adaptive，最终执行NettyTransporter的bind方法</span><br><span class="line">    return getTransporter().bind(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、NettyTransporter的bind方法"><a href="#9、NettyTransporter的bind方法" class="headerlink" title="9、NettyTransporter的bind方法"></a>9、NettyTransporter的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Server bind(URL url, ChannelHandler listener) throws RemotingException &#123;</span><br><span class="line">    //创建netty服务器</span><br><span class="line">    return new NettyServer(url, listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、实例化NettyServer"><a href="#10、实例化NettyServer" class="headerlink" title="10、实例化NettyServer"></a>10、实例化NettyServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NettyServer(URL url, ChannelHandler handler) throws RemotingException&#123;</span><br><span class="line">    super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NettyServer的父类AbstractServer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public AbstractServer(URL url, ChannelHandler handler) throws RemotingException &#123;</span><br><span class="line">    super(url, handler);</span><br><span class="line">    //本机地址</span><br><span class="line">    localAddress = getUrl().toInetSocketAddress();</span><br><span class="line">    String host = url.getParameter(Constants.ANYHOST_KEY, false) </span><br><span class="line">                    || NetUtils.isInvalidLocalHost(getUrl().getHost()) </span><br><span class="line">                    ? NetUtils.ANYHOST : getUrl().getHost();</span><br><span class="line">    //netty服务器绑定地址</span><br><span class="line">    bindAddress = new InetSocketAddress(host, getUrl().getPort());</span><br><span class="line">    this.accepts = url.getParameter(Constants.ACCEPTS_KEY, Constants.DEFAULT_ACCEPTS);</span><br><span class="line">    this.idleTimeout = url.getParameter(Constants.IDLE_TIMEOUT_KEY, Constants.DEFAULT_IDLE_TIMEOUT);</span><br><span class="line">    try &#123;</span><br><span class="line">        //启动服务</span><br><span class="line">        doOpen();</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Start &quot; + getClass().getSimpleName() + &quot; bind &quot; + getBindAddress() + &quot;, export &quot; + getLocalAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        throw new RemotingException(url.toInetSocketAddress(), null, &quot;Failed to bind &quot; + getClass().getSimpleName() </span><br><span class="line">                                    + &quot; on &quot; + getLocalAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">    //从SimpleDataStore中获取线程池</span><br><span class="line">    executor = (ExecutorService) ExtensionLoader.getExtensionLoader(DataStore.class)</span><br><span class="line">            .getDefaultExtension().get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="11、NettyServer的doOpen方法"><a href="#11、NettyServer的doOpen方法" class="headerlink" title="11、NettyServer的doOpen方法"></a>11、NettyServer的doOpen方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doOpen() throws Throwable &#123;</span><br><span class="line">    NettyHelper.setNettyLoggerFactory();</span><br><span class="line">    //创建工作线程池</span><br><span class="line">    ExecutorService boss = Executors.newCachedThreadPool(new NamedThreadFactory(&quot;NettyServerBoss&quot;, true));</span><br><span class="line">    ExecutorService worker = Executors.newCachedThreadPool(new NamedThreadFactory(&quot;NettyServerWorker&quot;, true));</span><br><span class="line">    //channel工厂</span><br><span class="line">    ChannelFactory channelFactory = new NioServerSocketChannelFactory(boss, worker, getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS));</span><br><span class="line">    //创建ServerBootstrap对象</span><br><span class="line">    bootstrap = new ServerBootstrap(channelFactory);</span><br><span class="line">    //服务器处理器</span><br><span class="line">    final NettyHandler nettyHandler = new NettyHandler(getUrl(), this);</span><br><span class="line">    channels = nettyHandler.getChannels();</span><br><span class="line">    // https://issues.jboss.org/browse/NETTY-365</span><br><span class="line">    // https://issues.jboss.org/browse/NETTY-379</span><br><span class="line">    // final Timer timer = new HashedWheelTimer(new NamedThreadFactory(&quot;NettyIdleTimer&quot;, true));</span><br><span class="line">    //设置pipeline工厂</span><br><span class="line">    bootstrap.setPipelineFactory(new ChannelPipelineFactory() &#123;</span><br><span class="line">        public ChannelPipeline getPipeline() &#123;</span><br><span class="line">            NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec() ,getUrl(), NettyServer.this);</span><br><span class="line">            ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line">            /*int idleTimeout = getIdleTimeout();</span><br><span class="line">            if (idleTimeout &gt; 10000) &#123;</span><br><span class="line">                pipeline.addLast(&quot;timer&quot;, new IdleStateHandler(timer, idleTimeout / 1000, 0, 0));</span><br><span class="line">            &#125;*/</span><br><span class="line">            pipeline.addLast(&quot;decoder&quot;, adapter.getDecoder());</span><br><span class="line">            pipeline.addLast(&quot;encoder&quot;, adapter.getEncoder());</span><br><span class="line">            pipeline.addLast(&quot;handler&quot;, nettyHandler);</span><br><span class="line">            return pipeline;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    // bind</span><br><span class="line">    //netty服务器绑定端口</span><br><span class="line">    channel = bootstrap.bind(getBindAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（三、7）实例化HeaderExchangeServer"><a href="#12、接（三、7）实例化HeaderExchangeServer" class="headerlink" title="12、接（三、7）实例化HeaderExchangeServer"></a>12、接（三、7）实例化HeaderExchangeServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public HeaderExchangeServer(Server server) &#123;</span><br><span class="line">    if (server == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;server == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //NettyServer</span><br><span class="line">    this.server = server;</span><br><span class="line">    //获取心跳时间间隔&quot;heartbeat&quot;</span><br><span class="line">    this.heartbeat = server.getUrl().getParameter(Constants.HEARTBEAT_KEY, 0);</span><br><span class="line">    //获取心跳超时时间&quot;heartbeat.timeout&quot;</span><br><span class="line">    this.heartbeatTimeout = server.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3);</span><br><span class="line">    if (heartbeatTimeout &lt; heartbeat * 2) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;heartbeatTimeout &lt; heartbeatInterval * 2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //启动心跳计时器</span><br><span class="line">    startHeatbeatTimer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、HeaderExchangeServer的startHeatbeatTimer方法"><a href="#13、HeaderExchangeServer的startHeatbeatTimer方法" class="headerlink" title="13、HeaderExchangeServer的startHeatbeatTimer方法"></a>13、HeaderExchangeServer的startHeatbeatTimer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void startHeatbeatTimer() &#123;</span><br><span class="line">    //关闭计时器</span><br><span class="line">    stopHeartbeatTimer();</span><br><span class="line">    if (heartbeat &gt; 0) &#123;</span><br><span class="line">        //启动计时器</span><br><span class="line">        heatbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class="line">                new HeartBeatTask( new HeartBeatTask.ChannelProvider() &#123;</span><br><span class="line">                    public Collection&lt;Channel&gt; getChannels() &#123;</span><br><span class="line">                        //获取已经来凝结服务器的channel</span><br><span class="line">                        return Collections.unmodifiableCollection(</span><br><span class="line">                                HeaderExchangeServer.this.getChannels() );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, heartbeat, heartbeatTimeout),</span><br><span class="line">                heartbeat, heartbeat,TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、HeartBeatTask的run方法"><a href="#14、HeartBeatTask的run方法" class="headerlink" title="14、HeartBeatTask的run方法"></a>14、HeartBeatTask的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        long now = System.currentTimeMillis();</span><br><span class="line">        //遍历channel</span><br><span class="line">        for ( Channel channel : channelProvider.getChannels() ) &#123;</span><br><span class="line">            //channel已关闭则不处理</span><br><span class="line">            if (channel.isClosed()) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                //最后一次读的时间</span><br><span class="line">                Long lastRead = ( Long ) channel.getAttribute(</span><br><span class="line">                        HeaderExchangeHandler.KEY_READ_TIMESTAMP );</span><br><span class="line">                //最后一次写的时间</span><br><span class="line">                Long lastWrite = ( Long ) channel.getAttribute(</span><br><span class="line">                        HeaderExchangeHandler.KEY_WRITE_TIMESTAMP );</span><br><span class="line">                //最后一次读和写在heartbeat时间（60s）内，则最后一次的读和写本身可以看作心跳</span><br><span class="line">                //否则，需要程序发送心跳</span><br><span class="line">                if ( ( lastRead != null &amp;&amp; now - lastRead &gt; heartbeat )</span><br><span class="line">                        || ( lastWrite != null &amp;&amp; now - lastWrite &gt; heartbeat ) ) &#123;</span><br><span class="line">                    Request req = new Request();</span><br><span class="line">                    req.setVersion( &quot;2.0.0&quot; );</span><br><span class="line">                    req.setTwoWay( true );</span><br><span class="line">                    req.setEvent( Request.HEARTBEAT_EVENT );</span><br><span class="line">                    //发送心跳信息</span><br><span class="line">                    channel.send( req );</span><br><span class="line">                    if ( logger.isDebugEnabled() ) &#123;</span><br><span class="line">                        logger.debug( &quot;Send heartbeat to remote channel &quot; + channel.getRemoteAddress()</span><br><span class="line">                                              + &quot;, cause: The channel has no data-transmission exceeds a heartbeat period: &quot; + heartbeat + &quot;ms&quot; );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //最后一次读的时间距离现在已经超过heartbeatTimeout了，</span><br><span class="line">                //则认为channel已经断了（因为在这个过程中，发送了至少三次心跳都没反应），此时channel进行重连</span><br><span class="line">                if ( lastRead != null &amp;&amp; now - lastRead &gt; heartbeatTimeout ) &#123;</span><br><span class="line">                    logger.warn( &quot;Close channel &quot; + channel</span><br><span class="line">                                         + &quot;, because heartbeat read idle time out: &quot; + heartbeatTimeout + &quot;ms&quot; );</span><br><span class="line">                    if (channel instanceof Client) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            ((Client)channel).reconnect();</span><br><span class="line">                        &#125;catch (Exception e) &#123;</span><br><span class="line">                            //do nothing</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        channel.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch ( Throwable t ) &#123;</span><br><span class="line">                logger.warn( &quot;Exception when heartbeat to remote channel &quot; + channel.getRemoteAddress(), t );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch ( Throwable t ) &#123;</span><br><span class="line">        logger.warn( &quot;Unhandled exception when heartbeat, cause: &quot; + t.getMessage(), t );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、远程暴露注册、订阅服务到zookeeper"><a href="#四、远程暴露注册、订阅服务到zookeeper" class="headerlink" title="四、远程暴露注册、订阅服务到zookeeper"></a>四、远程暴露注册、订阅服务到zookeeper</h3><h4 id="1、接（三、1）RegistryProtocol的getRegistry方法"><a href="#1、接（三、1）RegistryProtocol的getRegistry方法" class="headerlink" title="1、接（三、1）RegistryProtocol的getRegistry方法"></a>1、接（三、1）RegistryProtocol的getRegistry方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private Registry getRegistry(final Invoker&lt;?&gt; originInvoker)&#123;</span><br><span class="line">    URL registryUrl = originInvoker.getUrl();</span><br><span class="line">    if (Constants.REGISTRY_PROTOCOL.equals(registryUrl.getProtocol())) &#123;</span><br><span class="line">        String protocol = registryUrl.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_DIRECTORY);</span><br><span class="line">        registryUrl = registryUrl.setProtocol(protocol).removeParameter(Constants.REGISTRY_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    //RegistryFactory$Adaptive的getRegistry方法，执行ZookeeperRegistryFactory的getRegistry方法</span><br><span class="line">    //获取ZookeeperRegistry</span><br><span class="line">    return registryFactory.getRegistry(registryUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化ZookeeperRegistry"><a href="#2、实例化ZookeeperRegistry" class="headerlink" title="2、实例化ZookeeperRegistry"></a>2、实例化ZookeeperRegistry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) &#123;</span><br><span class="line">    super(url);</span><br><span class="line">    if (url.isAnyHost()) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;registry address == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);</span><br><span class="line">    if (! group.startsWith(Constants.PATH_SEPARATOR)) &#123;</span><br><span class="line">        group = Constants.PATH_SEPARATOR + group;</span><br><span class="line">    &#125;</span><br><span class="line">    // &quot;/dubbo&quot;</span><br><span class="line">    this.root = group;</span><br><span class="line">    //创建zk客户端，启动会话,返回CuratorZookeeperClient</span><br><span class="line">    zkClient = zookeeperTransporter.connect(url);</span><br><span class="line">    //监听重新连接成功事件，重新连接成功后，之前已经完成注册和订阅的url要重新进行注册和订阅</span><br><span class="line">    zkClient.addStateListener(new StateListener() &#123;</span><br><span class="line">        public void stateChanged(int state) &#123;</span><br><span class="line">            if (state == RECONNECTED) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    recover();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    logger.error(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化FailbackRegistry（失败重试）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public FailbackRegistry(URL url) &#123;</span><br><span class="line">    super(url);</span><br><span class="line">    //重连间隔</span><br><span class="line">    int retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);</span><br><span class="line">    this.retryFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            // 检测并连接注册中心</span><br><span class="line">            try &#123;</span><br><span class="line">                retry();</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 防御性容错</span><br><span class="line">                logger.error(&quot;Unexpected error occur at failed retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例化AbstractRegistry（维护缓存文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public AbstractRegistry(URL url) &#123;</span><br><span class="line">    setUrl(url);</span><br><span class="line">    // 启动文件保存定时器</span><br><span class="line">    syncSaveFile = url.getParameter(Constants.REGISTRY_FILESAVE_SYNC_KEY, false);</span><br><span class="line">    String filename = url.getParameter(Constants.FILE_KEY, System.getProperty(&quot;user.home&quot;) + &quot;/.dubbo/dubbo-registry-&quot; + url.getHost() + &quot;.cache&quot;);</span><br><span class="line">    File file = null;</span><br><span class="line">    if (ConfigUtils.isNotEmpty(filename)) &#123;</span><br><span class="line">        file = new File(filename);</span><br><span class="line">        if(! file.exists() &amp;&amp; file.getParentFile() != null &amp;&amp; ! file.getParentFile().exists())&#123;</span><br><span class="line">            if(! file.getParentFile().mkdirs())&#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;Invalid registry store file &quot; + file + &quot;, cause: Failed to create directory &quot; + file.getParentFile() + &quot;!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.file = file;</span><br><span class="line">    //加载properties文件</span><br><span class="line">    loadProperties();</span><br><span class="line">    notify(url.getBackupUrls());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、FailbackRegistry的retry方法"><a href="#3、FailbackRegistry的retry方法" class="headerlink" title="3、FailbackRegistry的retry方法"></a>3、FailbackRegistry的retry方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">// 重试失败的动作</span><br><span class="line">protected void retry() &#123;</span><br><span class="line">    //将注册失败的url（failedRegistered中的url）进行注册，之后从failedRegistered进行移除；</span><br><span class="line">    if (! failedRegistered.isEmpty()) &#123;</span><br><span class="line">        Set&lt;URL&gt; failed = new HashSet&lt;URL&gt;(failedRegistered);</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry register &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (URL url : failed) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        doRegister(url);</span><br><span class="line">                        failedRegistered.remove(url);</span><br><span class="line">                    &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                        logger.warn(&quot;Failed to retry register &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry register &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将取消注册失败的url（failedUnregistered中的url）进行取消注册，之后从failedUnregistered进行移除；</span><br><span class="line">    if(! failedUnregistered.isEmpty()) &#123;</span><br><span class="line">        Set&lt;URL&gt; failed = new HashSet&lt;URL&gt;(failedUnregistered);</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry unregister &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (URL url : failed) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        doUnregister(url);</span><br><span class="line">                        failedUnregistered.remove(url);</span><br><span class="line">                    &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                        logger.warn(&quot;Failed to retry unregister  &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry unregister  &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将订阅失败的url（failedSubscribed中的url）进行重新订阅，之后从failedSubscribed进行移除；</span><br><span class="line">    if (! failedSubscribed.isEmpty()) &#123;</span><br><span class="line">        Map&lt;URL, Set&lt;NotifyListener&gt;&gt; failed = new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failedSubscribed);</span><br><span class="line">        for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failed).entrySet()) &#123;</span><br><span class="line">            if (entry.getValue() == null || entry.getValue().size() == 0) &#123;</span><br><span class="line">                failed.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry subscribe &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : failed.entrySet()) &#123;</span><br><span class="line">                    URL url = entry.getKey();</span><br><span class="line">                    Set&lt;NotifyListener&gt; listeners = entry.getValue();</span><br><span class="line">                    for (NotifyListener listener : listeners) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            doSubscribe(url, listener);</span><br><span class="line">                            listeners.remove(listener);</span><br><span class="line">                        &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                            logger.warn(&quot;Failed to retry subscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry subscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将取消订阅失败的url（failedUnsubscribed中的url）进行取消订阅，之后从failedUnsubscribed进行移除</span><br><span class="line">    if (! failedUnsubscribed.isEmpty()) &#123;</span><br><span class="line">        Map&lt;URL, Set&lt;NotifyListener&gt;&gt; failed = new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failedUnsubscribed);</span><br><span class="line">        for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failed).entrySet()) &#123;</span><br><span class="line">            if (entry.getValue() == null || entry.getValue().size() == 0) &#123;</span><br><span class="line">                failed.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry unsubscribe &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : failed.entrySet()) &#123;</span><br><span class="line">                    URL url = entry.getKey();</span><br><span class="line">                    Set&lt;NotifyListener&gt; listeners = entry.getValue();</span><br><span class="line">                    for (NotifyListener listener : listeners) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            doUnsubscribe(url, listener);</span><br><span class="line">                            listeners.remove(listener);</span><br><span class="line">                        &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                            logger.warn(&quot;Failed to retry unsubscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry unsubscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将所有通知失败的url（failedNotified中的url）进行通知，之后从failedNotified进行移除</span><br><span class="line">    if (! failedNotified.isEmpty()) &#123;</span><br><span class="line">        Map&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt; failed = new HashMap&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt;(failedNotified);</span><br><span class="line">        for (Map.Entry&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt; entry : new HashMap&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt;(failed).entrySet()) &#123;</span><br><span class="line">            if (entry.getValue() == null || entry.getValue().size() == 0) &#123;</span><br><span class="line">                failed.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry notify &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (Map&lt;NotifyListener, List&lt;URL&gt;&gt; values : failed.values()) &#123;</span><br><span class="line">                    for (Map.Entry&lt;NotifyListener, List&lt;URL&gt;&gt; entry : values.entrySet()) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            NotifyListener listener = entry.getKey();</span><br><span class="line">                            List&lt;URL&gt; urls = entry.getValue();</span><br><span class="line">                            listener.notify(urls);</span><br><span class="line">                            values.remove(listener);</span><br><span class="line">                        &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                            logger.warn(&quot;Failed to retry notify &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry notify &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（三、1）FailbackRegistry的register方法"><a href="#4、接（三、1）FailbackRegistry的register方法" class="headerlink" title="4、接（三、1）FailbackRegistry的register方法"></a>4、接（三、1）FailbackRegistry的register方法</h4><p>ZookeeperRegistry的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void register(URL url) &#123;</span><br><span class="line">    //加入已注册集合</span><br><span class="line">    super.register(url);</span><br><span class="line">    //从注册失败的集合中删除</span><br><span class="line">    failedRegistered.remove(url);</span><br><span class="line">    failedUnregistered.remove(url);</span><br><span class="line">    try &#123;</span><br><span class="line">        // 向服务器端发送注册请求</span><br><span class="line">        doRegister(url);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">        boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; ! Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class="line">        boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">        if (check || skipFailback) &#123;</span><br><span class="line">            if(skipFailback) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            throw new IllegalStateException(&quot;Failed to register &quot; + url + &quot; to registry &quot; + getUrl().getAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.error(&quot;Failed to register &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的注册请求记录到失败列表，定时重试</span><br><span class="line">        failedRegistered.add(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、ZookeeperRegistry的doRegister方法"><a href="#5、ZookeeperRegistry的doRegister方法" class="headerlink" title="5、ZookeeperRegistry的doRegister方法"></a>5、ZookeeperRegistry的doRegister方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void doRegister(URL url) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建节点</span><br><span class="line">        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to register &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractZookeeperClient的create方法"><a href="#6、AbstractZookeeperClient的create方法" class="headerlink" title="6、AbstractZookeeperClient的create方法"></a>6、AbstractZookeeperClient的create方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void create(String path, boolean ephemeral) &#123;</span><br><span class="line">    int i = path.lastIndexOf(&apos;/&apos;);</span><br><span class="line">    //循环创建节点</span><br><span class="line">    if (i &gt; 0) &#123;</span><br><span class="line">        create(path.substring(0, i), false);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建临时节点</span><br><span class="line">    if (ephemeral) &#123;</span><br><span class="line">        createEphemeral(path);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        createPersistent(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>path示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo%3A%2F%2F10.10.10.10%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26methods%3DsayHello%26pid%3D5148%26side%3Dprovider%26timestamp%3D1507291294629</span><br><span class="line">解码后</span><br><span class="line">/dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=5148&amp;side=provider&amp;timestamp=1507291294629</span><br></pre></td></tr></table></figure></p><h4 id="7、接（三、1）FailbackRegistry的subscribe方法"><a href="#7、接（三、1）FailbackRegistry的subscribe方法" class="headerlink" title="7、接（三、1）FailbackRegistry的subscribe方法"></a>7、接（三、1）FailbackRegistry的subscribe方法</h4><p>ZookeeperRegistry的父类，订阅<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void subscribe(URL url, NotifyListener listener) &#123;</span><br><span class="line">    //listeners加入已订阅集合</span><br><span class="line">    super.subscribe(url, listener);</span><br><span class="line">    //从订阅失败集合删除</span><br><span class="line">    removeFailedSubscribed(url, listener);</span><br><span class="line">    try &#123;</span><br><span class="line">        //向服务器端发送订阅请求</span><br><span class="line">        doSubscribe(url, listener);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        List&lt;URL&gt; urls = getCacheUrls(url);</span><br><span class="line">        if (urls != null &amp;&amp; urls.size() &gt; 0) &#123;</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">            logger.error(&quot;Failed to subscribe &quot; + url + &quot;, Using cached list: &quot; + urls + &quot; from cache file: &quot; + getUrl().getParameter(Constants.FILE_KEY, System.getProperty(&quot;user.home&quot;) + &quot;/dubbo-registry-&quot; + url.getHost() + &quot;.cache&quot;) + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                    &amp;&amp; url.getParameter(Constants.CHECK_KEY, true);</span><br><span class="line">            boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">            if (check || skipFailback) &#123;</span><br><span class="line">                if(skipFailback) &#123;</span><br><span class="line">                    t = t.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">                throw new IllegalStateException(&quot;Failed to subscribe &quot; + url + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                logger.error(&quot;Failed to subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的订阅请求记录到失败列表，定时重试</span><br><span class="line">        addFailedSubscribed(url, listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7、ZookeeperRegistry的doSubscribe方法"><a href="#7、ZookeeperRegistry的doSubscribe方法" class="headerlink" title="7、ZookeeperRegistry的doSubscribe方法"></a>7、ZookeeperRegistry的doSubscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">protected void doSubscribe(final URL url, final NotifyListener listener) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">            String root = toRootPath();</span><br><span class="line">            ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">            if (listeners == null) &#123;</span><br><span class="line">                zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                listeners = zkListeners.get(url);</span><br><span class="line">            &#125;</span><br><span class="line">            ChildListener zkListener = listeners.get(listener);</span><br><span class="line">            if (zkListener == null) &#123;</span><br><span class="line">                listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                    public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                        for (String child : currentChilds) &#123;</span><br><span class="line">                            child = URL.decode(child);</span><br><span class="line">                            if (! anyServices.contains(child)) &#123;</span><br><span class="line">                                anyServices.add(child);</span><br><span class="line">                                subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child, </span><br><span class="line">                                        Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                zkListener = listeners.get(listener);</span><br><span class="line">            &#125;</span><br><span class="line">            zkClient.create(root, false);</span><br><span class="line">            List&lt;String&gt; services = zkClient.addChildListener(root, zkListener);</span><br><span class="line">            if (services != null &amp;&amp; services.size() &gt; 0) &#123;</span><br><span class="line">                for (String service : services) &#123;</span><br><span class="line">                    service = URL.decode(service);</span><br><span class="line">                    anyServices.add(service);</span><br><span class="line">                    subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service, </span><br><span class="line">                            Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;();</span><br><span class="line">            //categorypath：获取/dubbo/&#123;servicename&#125;/&#123;url中的category参数，默认是providers&#125;</span><br><span class="line">            //path示例&quot;/dubbo/com.alibaba.dubbo.demo.DemoService/configurators&quot;</span><br><span class="line">            for (String path : toCategoriesPath(url)) &#123;</span><br><span class="line">                //根据url获取ConcurrentMap&lt;NotifyListener, ChildListener&gt;，没有就创建</span><br><span class="line">                ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">                if (listeners == null) &#123;</span><br><span class="line">                    zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                    listeners = zkListeners.get(url);</span><br><span class="line">                &#125;</span><br><span class="line">                //根据listener从ConcurrentMap&lt;NotifyListener, ChildListener&gt;获取ChildListener</span><br><span class="line">                //没有就创建（创建的ChildListener用来监听子节点的变化）</span><br><span class="line">                ChildListener zkListener = listeners.get(listener);</span><br><span class="line">                if (zkListener == null) &#123;</span><br><span class="line">                    listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                        //监听子节点列表的变化</span><br><span class="line">                        public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                            ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    zkListener = listeners.get(listener);</span><br><span class="line">                &#125;</span><br><span class="line">                //创建path持久化节点</span><br><span class="line">                zkClient.create(path, false);</span><br><span class="line">                //创建path子节点监听器</span><br><span class="line">                List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);</span><br><span class="line">                if (children != null) &#123;</span><br><span class="line">                    urls.addAll(toUrlsWithEmpty(url, path, children));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //通知path子节点变化</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to subscribe &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url（overrideSubscribeUrl）示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provider://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators</span><br><span class="line">&amp;check=false&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=9544&amp;side=provider</span><br><span class="line">&amp;timestamp=1507643800076</span><br></pre></td></tr></table></figure></p><h4 id="8、ZookeeperRegistry的toUrlsWithEmpty方法"><a href="#8、ZookeeperRegistry的toUrlsWithEmpty方法" class="headerlink" title="8、ZookeeperRegistry的toUrlsWithEmpty方法"></a>8、ZookeeperRegistry的toUrlsWithEmpty方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;URL&gt; toUrlsWithEmpty(URL consumer, String path, List&lt;String&gt; providers) &#123;</span><br><span class="line">    //过滤出providers中与consumer匹配的providerUrl集合</span><br><span class="line">    List&lt;URL&gt; urls = toUrlsWithoutEmpty(consumer, providers);</span><br><span class="line">    //urls为空，首先从path中获取category，然后将consumer的协议换成empty，添加参数category=configurators</span><br><span class="line">    if (urls.isEmpty()) &#123;</span><br><span class="line">        int i = path.lastIndexOf(&apos;/&apos;);</span><br><span class="line">        String category = i &lt; 0 ? path : path.substring(i + 1);</span><br><span class="line">        URL empty = consumer.setProtocol(Constants.EMPTY_PROTOCOL).addParameter(Constants.CATEGORY_KEY, category);</span><br><span class="line">        urls.add(empty);</span><br><span class="line">    &#125;</span><br><span class="line">    return urls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（四、7）FailbackRegistry的notify方法"><a href="#9、接（四、7）FailbackRegistry的notify方法" class="headerlink" title="9、接（四、7）FailbackRegistry的notify方法"></a>9、接（四、7）FailbackRegistry的notify方法</h4><p>通知<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //执行父类的notify方法</span><br><span class="line">        doNotify(url, listener, urls);</span><br><span class="line">    &#125; catch (Exception t) &#123;</span><br><span class="line">        // 将失败的通知请求记录到失败列表，定时重试</span><br><span class="line">        Map&lt;NotifyListener, List&lt;URL&gt;&gt; listeners = failedNotified.get(url);</span><br><span class="line">        if (listeners == null) &#123;</span><br><span class="line">            failedNotified.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, List&lt;URL&gt;&gt;());</span><br><span class="line">            listeners = failedNotified.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.put(listener, urls);</span><br><span class="line">        logger.error(&quot;Failed to notify for subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、AbstractRegistry的notify方法"><a href="#10、AbstractRegistry的notify方法" class="headerlink" title="10、AbstractRegistry的notify方法"></a>10、AbstractRegistry的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if ((urls == null || urls.size() == 0) </span><br><span class="line">            &amp;&amp; ! Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">        logger.warn(&quot;Ignore empty notify urls for subscribe url &quot; + url);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Notify urls for subscribe url &quot; + url + &quot;, urls: &quot; + urls);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; result = new HashMap&lt;String, List&lt;URL&gt;&gt;();</span><br><span class="line">    //遍历List&lt;URL&gt; urls，将urls按照category进行分类</span><br><span class="line">    for (URL u : urls) &#123;</span><br><span class="line">        if (UrlUtils.isMatch(url, u)) &#123;</span><br><span class="line">            String category = u.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">            List&lt;URL&gt; categoryList = result.get(category);</span><br><span class="line">            if (categoryList == null) &#123;</span><br><span class="line">                categoryList = new ArrayList&lt;URL&gt;();</span><br><span class="line">                result.put(category, categoryList);</span><br><span class="line">            &#125;</span><br><span class="line">            categoryList.add(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (result.size() == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; categoryNotified = notified.get(url);</span><br><span class="line">    if (categoryNotified == null) &#123;</span><br><span class="line">        notified.putIfAbsent(url, new ConcurrentHashMap&lt;String, List&lt;URL&gt;&gt;());</span><br><span class="line">        categoryNotified = notified.get(url);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Map.Entry&lt;String, List&lt;URL&gt;&gt; entry : result.entrySet()) &#123;</span><br><span class="line">        String category = entry.getKey();</span><br><span class="line">        List&lt;URL&gt; categoryList = entry.getValue();</span><br><span class="line">        //添加已通知的url</span><br><span class="line">        categoryNotified.put(category, categoryList);</span><br><span class="line">        //保存传入的url到Properties properties（本地磁盘缓存中）</span><br><span class="line">        saveProperties(url);</span><br><span class="line">        //overrideSubscribeListener的notify方法</span><br><span class="line">        listener.notify(categoryList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、OverrideListener的notify方法"><a href="#11、OverrideListener的notify方法" class="headerlink" title="11、OverrideListener的notify方法"></a>11、OverrideListener的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public void notify(List&lt;URL&gt; urls) &#123;</span><br><span class="line">    List&lt;URL&gt; result = null;</span><br><span class="line">    //检查是不是要应用到当前服务上</span><br><span class="line">    for (URL url : urls) &#123;</span><br><span class="line">        URL overrideUrl = url;</span><br><span class="line">        if (url.getParameter(Constants.CATEGORY_KEY) == null</span><br><span class="line">                &amp;&amp; Constants.OVERRIDE_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">            // 兼容旧版本</span><br><span class="line">            overrideUrl = url.addParameter(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);</span><br><span class="line">        &#125;</span><br><span class="line">        if (! UrlUtils.isMatch(subscribeUrl, overrideUrl)) &#123;</span><br><span class="line">            if (result == null) &#123;</span><br><span class="line">                result = new ArrayList&lt;URL&gt;(urls);</span><br><span class="line">            &#125;</span><br><span class="line">            result.remove(url);</span><br><span class="line">            logger.warn(&quot;Subsribe category=configurator, but notifed non-configurator urls. may be registry bug. unexcepted url: &quot; + url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (result != null) &#123;</span><br><span class="line">        urls = result;</span><br><span class="line">    &#125;</span><br><span class="line">    //由url创建OverrideConfigurator</span><br><span class="line">    this.configurators = RegistryDirectory.toConfigurators(urls);</span><br><span class="line">    //在doLocalExport方法中已经存放在这里了</span><br><span class="line">    List&lt;ExporterChangeableWrapper&lt;?&gt;&gt; exporters = new ArrayList&lt;ExporterChangeableWrapper&lt;?&gt;&gt;(bounds.values());</span><br><span class="line">    for (ExporterChangeableWrapper&lt;?&gt; exporter : exporters)&#123;</span><br><span class="line">        //获取原始的invoker</span><br><span class="line">        Invoker&lt;?&gt; invoker = exporter.getOriginInvoker();</span><br><span class="line">        final Invoker&lt;?&gt; originInvoker ;</span><br><span class="line">        if (invoker instanceof InvokerDelegete)&#123;</span><br><span class="line">            originInvoker = ((InvokerDelegete&lt;?&gt;)invoker).getInvoker();</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            originInvoker = invoker;</span><br><span class="line">        &#125;</span><br><span class="line">        //原始的Url</span><br><span class="line">        URL originUrl = RegistryProtocol.this.getProviderUrl(originInvoker);</span><br><span class="line">        //新Url，合并override参数</span><br><span class="line">        URL newUrl = getNewInvokerUrl(originUrl, urls);</span><br><span class="line">        //当前的provider订阅了/dubbo/com.alibaba.dubbo.demo.DemoService/configurators</span><br><span class="line">        //当其下的子节点发生变化时，如果providerUrl发生了变化，需要重新暴露</span><br><span class="line">        if (! originUrl.equals(newUrl))&#123;</span><br><span class="line">            //重新将invoker暴露为exporter</span><br><span class="line">            RegistryProtocol.this.doChangeLocalExport(originInvoker, newUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、创建ServiceBean&quot;&gt;&lt;a href=&quot;#一、创建ServiceBean&quot; class=&quot;headerlink&quot; title=&quot;一、创建ServiceBean&quot;&gt;&lt;/a&gt;一、创建ServiceBean&lt;/h3&gt;&lt;h4 id=&quot;1、ServiceBean
      
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>Zookeeper源码总结</title>
    <link href="http://yoursite.com/2020/01/13/zookeeper%E6%BA%90%E7%A0%81/Zookeeper%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/13/zookeeper源码/Zookeeper源码总结/</id>
    <published>2020-01-13T14:32:38.135Z</published>
    <updated>2018-10-23T04:17:06.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Zookeeper结构"><a href="#一、Zookeeper结构" class="headerlink" title="一、Zookeeper结构"></a>一、Zookeeper结构</h3><p><img src="/2020/01/13/zookeeper源码/Zookeeper源码总结/Zookeeper结构图.png" alt="Zookeeper结构图"></p><h4 id="1、主要类"><a href="#1、主要类" class="headerlink" title="1、主要类"></a>1、主要类</h4><p>QuorumPeer：Zookeeper后台进程。<br>QuorumCnxManager：leader选举通信管理器。<br>Election接口：选举策略接口，默认实现FastLeaderElection。<br>LeaderZooKeeperServer：leader服务器。<br>FollowerZooKeeperServer：follower服务器。<br>ZKDatabase：数据存储，在内存中维护了zookeeper的datatree和commit logs集合。<br>DataTree：内存树。<br>WatchManager：监听器管理器。<br>TxnLog接口：事务日志。<br>SnapShot接口：内存快照。<br>PrepRequestProcessor：对事物请求进行预处理。<br>ProposalRequestProcessor：事务投票处理器，outstandingProposals中维护了正在投票的提议。<br>ToBeAppliedRequestProcessor：维护Leader类的toBeApplied队列，这个队列中保存了已经完成投票（即commit）的proposal。<br>FollowerRequestProcessor：follower处理器，事务请求转发给leader。<br>SyncRequestProcessor：将事务请求持久化到本地磁盘。<br>SendAckRequestProcessor：将投票发回leader。<br>CommitProcessor：将本机提交的事务和已经在集群中达成commit的事务匹配。<br>FinalRequestProcessor：把已经commit的事务请求应用到内存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Zookeeper结构&quot;&gt;&lt;a href=&quot;#一、Zookeeper结构&quot; class=&quot;headerlink&quot; title=&quot;一、Zookeeper结构&quot;&gt;&lt;/a&gt;一、Zookeeper结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/01/13/zook
      
    
    </summary>
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>zookeeper源码客户端</title>
    <link href="http://yoursite.com/2020/01/13/zookeeper%E6%BA%90%E7%A0%81/zookeeper%E6%BA%90%E7%A0%81%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://yoursite.com/2020/01/13/zookeeper源码/zookeeper源码客户端/</id>
    <published>2020-01-13T14:32:38.131Z</published>
    <updated>2018-08-05T11:46:50.324Z</updated>
    
    <content type="html"><![CDATA[<h4 id="客户端Demo"><a href="#客户端Demo" class="headerlink" title="客户端Demo"></a>客户端Demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void process(WatchedEvent event) &#123;</span><br><span class="line">               // 收到watch通知后的回调函数</span><br><span class="line">               System.out.println(&quot;事件类型&quot; + event.getType() + &quot;，路径&quot; + event.getPath());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">//参数1 路径，参数2 内容，参数3 权限，参数4 类型</span><br><span class="line">String znodePath = zk.create(&quot;/demo&quot;, &quot;hello zookeeper&quot;.getBytes(), Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">   CreateMode.EPHEMERAL);</span><br><span class="line"></span><br><span class="line">//判断/java节点是否存在，并且给它注册一个监听器，这个监听器只能监听一次，监听到一次事件后就会失效  </span><br><span class="line">   zk.exists(&quot;/demo&quot;, new Watcher() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void process(WatchedEvent event) &#123;</span><br><span class="line">               // 收到watch通知后的回调函数</span><br><span class="line">               System.out.println(&quot;事件类型&quot; + event.getType() + &quot;，路径&quot; + event.getPath());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h3 id="一、建立连接过程"><a href="#一、建立连接过程" class="headerlink" title="一、建立连接过程"></a>一、建立连接过程</h3><h4 id="1、实例化ZooKeeper"><a href="#1、实例化ZooKeeper" class="headerlink" title="1、实例化ZooKeeper"></a>1、实例化ZooKeeper</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// connectString 连接字符串 如&quot;192.168.12.1:2181,192.168.12.2:2181,192.168.12.3:2181/root&quot;  </span><br><span class="line">// sessionTimeout 客户端提议的session有效时间</span><br><span class="line">public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher)throws IOException&#123;</span><br><span class="line">    this(connectString, sessionTimeout, watcher, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher,boolean canBeReadOnly) throws IOException &#123;</span><br><span class="line">    this(connectString, sessionTimeout, watcher, canBeReadOnly,createDefaultHostProvider(connectString));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher,boolean canBeReadOnly, HostProvider aHostProvider)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    this(connectString, sessionTimeout, watcher, canBeReadOnly,aHostProvider, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher,</span><br><span class="line">           boolean canBeReadOnly, HostProvider aHostProvider,</span><br><span class="line">           ZKClientConfig clientConfig) throws IOException &#123;</span><br><span class="line">       LOG.info(&quot;Initiating client connection, connectString=&quot; + connectString</span><br><span class="line">               + &quot; sessionTimeout=&quot; + sessionTimeout + &quot; watcher=&quot; + watcher);</span><br><span class="line"></span><br><span class="line">       if (clientConfig == null) &#123;</span><br><span class="line">           clientConfig = new ZKClientConfig();</span><br><span class="line">       &#125;</span><br><span class="line">       this.clientConfig = clientConfig;</span><br><span class="line"></span><br><span class="line">       //创建Watcher监听器的管理器</span><br><span class="line">       watchManager = defaultWatchManager();</span><br><span class="line"></span><br><span class="line">       //设置默认的Watcher监听器</span><br><span class="line">       watchManager.defaultWatcher = watcher;</span><br><span class="line"></span><br><span class="line">       ConnectStringParser connectStringParser = new ConnectStringParser(</span><br><span class="line">               connectString);</span><br><span class="line"></span><br><span class="line">       hostProvider = aHostProvider;</span><br><span class="line"></span><br><span class="line">       //客户端负责与服务端通信的对象</span><br><span class="line">       cnxn = new ClientCnxn(connectStringParser.getChrootPath(),</span><br><span class="line">               hostProvider, sessionTimeout, this, watchManager,</span><br><span class="line">               getClientCnxnSocket(), canBeReadOnly);</span><br><span class="line"></span><br><span class="line">       cnxn.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化ClientCnxn"><a href="#2、实例化ClientCnxn" class="headerlink" title="2、实例化ClientCnxn"></a>2、实例化ClientCnxn</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public ClientCnxn(String chrootPath, HostProvider hostProvider, int sessionTimeout, ZooKeeper zooKeeper,</span><br><span class="line">           ClientWatchManager watcher, ClientCnxnSocket clientCnxnSocket,</span><br><span class="line">           long sessionId, byte[] sessionPasswd, boolean canBeReadOnly) &#123;</span><br><span class="line">       this.zooKeeper = zooKeeper;</span><br><span class="line">       this.watcher = watcher;</span><br><span class="line">       this.sessionId = sessionId; //初始值为0</span><br><span class="line">       this.sessionPasswd = sessionPasswd; //初始值为 new byte[16]</span><br><span class="line">       this.sessionTimeout = sessionTimeout;</span><br><span class="line">       this.hostProvider = hostProvider;</span><br><span class="line">       this.chrootPath = chrootPath;</span><br><span class="line"></span><br><span class="line">       connectTimeout = sessionTimeout / hostProvider.size();//hostProvider.size() 服务端地址个数</span><br><span class="line">       readTimeout = sessionTimeout * 2 / 3;</span><br><span class="line">       readOnly = canBeReadOnly;</span><br><span class="line"></span><br><span class="line">       //发送和接收socket数据的线程</span><br><span class="line">       sendThread = new SendThread(clientCnxnSocket);</span><br><span class="line"></span><br><span class="line">       //事件线程</span><br><span class="line">       eventThread = new EventThread();</span><br><span class="line"></span><br><span class="line">       this.clientConfig=zooKeeper.getClientConfig();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（一、2）SendThread的run方法"><a href="#3、接（一、2）SendThread的run方法" class="headerlink" title="3、接（一、2）SendThread的run方法"></a>3、接（一、2）SendThread的run方法</h4><p>ClientCnxn的start方法 会分别启动SendThread、EventThread，SendThread的run方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    clientCnxnSocket.introduce(this, sessionId, outgoingQueue);</span><br><span class="line">    clientCnxnSocket.updateNow();</span><br><span class="line">    //更新最近接受和发送时间</span><br><span class="line">    clientCnxnSocket.updateLastSendAndHeard();</span><br><span class="line">    int to;</span><br><span class="line">    long lastPingRwServer = Time.currentElapsedTime();</span><br><span class="line">    final int MAX_SEND_PING_INTERVAL = 10000; //10 seconds</span><br><span class="line">    InetSocketAddress serverAddress = null;</span><br><span class="line">    while (state.isAlive()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">        //判断是否完成连接</span><br><span class="line">            if (!clientCnxnSocket.isConnected()) &#123;</span><br><span class="line">                判断是否关闭</span><br><span class="line">                if (closing) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //若之前连接过读写服务器，直接用上次查找出的读写服务器地址连接</span><br><span class="line">                if (rwServerAddress != null) &#123;</span><br><span class="line">                    serverAddress = rwServerAddress;</span><br><span class="line">                    rwServerAddress = null;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                //获取下一个服务端地址 延迟1s返回</span><br><span class="line">                    serverAddress = hostProvider.next(1000);</span><br><span class="line">                &#125;</span><br><span class="line">                //连接服务端</span><br><span class="line">                startConnect(serverAddress);</span><br><span class="line">                clientCnxnSocket.updateLastSendAndHeard();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //判断是否已连接</span><br><span class="line">            if (state.isConnected()) &#123;</span><br><span class="line">                // determine whether we need to send an AuthFailed event.</span><br><span class="line">                if (zooKeeperSaslClient != null) &#123;</span><br><span class="line">                ...</span><br><span class="line">                    //进行sasl权限验证</span><br><span class="line">                &#125;</span><br><span class="line">                //超时剩余时间</span><br><span class="line">                to = readTimeout - clientCnxnSocket.getIdleRecv();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            //超时剩余时间</span><br><span class="line">                to = connectTimeout - clientCnxnSocket.getIdleRecv();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //to &lt;= 0 则说明连接超时</span><br><span class="line">            if (to &lt;= 0) &#123;</span><br><span class="line">                ...</span><br><span class="line">                //打印日志抛出异常</span><br><span class="line">                throw new SessionTimeoutException(warnInfo);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //如果已连接  定时发送心跳检测</span><br><span class="line">            if (state.isConnected()) &#123;</span><br><span class="line">                int timeToNextPing = readTimeout / 2 - clientCnxnSocket.getIdleSend() - </span><br><span class="line">                        ((clientCnxnSocket.getIdleSend() &gt; 1000) ? 1000 : 0);</span><br><span class="line">                if (timeToNextPing &lt;= 0 || clientCnxnSocket.getIdleSend() &gt; MAX_SEND_PING_INTERVAL) &#123;</span><br><span class="line">                    //发送ping数据</span><br><span class="line">                    sendPing();</span><br><span class="line">                    clientCnxnSocket.updateLastSend();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (timeToNextPing &lt; to) &#123;</span><br><span class="line">                        to = timeToNextPing;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 如果连接的是只读服务器</span><br><span class="line">            if (state == States.CONNECTEDREADONLY) &#123;</span><br><span class="line">                long now = Time.currentElapsedTime();</span><br><span class="line">                int idlePingRwServer = (int) (now - lastPingRwServer);</span><br><span class="line">                if (idlePingRwServer &gt;= pingRwTimeout) &#123;</span><br><span class="line">                    lastPingRwServer = now;</span><br><span class="line">                    idlePingRwServer = 0;</span><br><span class="line">                    pingRwTimeout =</span><br><span class="line">                        Math.min(2*pingRwTimeout, maxPingRwTimeout);</span><br><span class="line">                    //寻找读写服务器，抛出异常，重新连接</span><br><span class="line">                    pingRwServer();</span><br><span class="line">                &#125;</span><br><span class="line">                to = Math.min(to, pingRwTimeout - idlePingRwServer);</span><br><span class="line">            &#125;</span><br><span class="line">            //处理与客户端的通信</span><br><span class="line">            clientCnxnSocket.doTransport(to, pendingQueue, ClientCnxn.this);</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            if (closing) &#123;</span><br><span class="line">                ...</span><br><span class="line">                //跳出主循环，结束线程</span><br><span class="line">                break;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (state) &#123;</span><br><span class="line">        断开连接，处理队列中的数据包</span><br><span class="line">        cleanup();</span><br><span class="line">    &#125;</span><br><span class="line">    关闭socket</span><br><span class="line">    clientCnxnSocket.close();</span><br><span class="line">    if (state.isAlive()) &#123;</span><br><span class="line">    //添加断开连接事件</span><br><span class="line">        eventThread.queueEvent(new WatchedEvent(Event.EventType.None,</span><br><span class="line">                Event.KeeperState.Disconnected, null));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、startConnect方法连接服务端"><a href="#4、startConnect方法连接服务端" class="headerlink" title="4、startConnect方法连接服务端"></a>4、startConnect方法连接服务端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void startConnect(InetSocketAddress addr) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    客户端状态更新为正在连接</span><br><span class="line">    state = States.CONNECTING;</span><br><span class="line"></span><br><span class="line">    //连接服务端</span><br><span class="line">    clientCnxnSocket.connect(addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ClientCnxnSocketNIO中的connect方法"><a href="#5、ClientCnxnSocketNIO中的connect方法" class="headerlink" title="5、ClientCnxnSocketNIO中的connect方法"></a>5、ClientCnxnSocketNIO中的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   void connect(InetSocketAddress addr) throws IOException &#123;</span><br><span class="line">       SocketChannel sock = createSock();</span><br><span class="line">       try &#123;</span><br><span class="line">          registerAndConnect(sock, addr);</span><br><span class="line">     &#125; catch (IOException e) &#123;</span><br><span class="line">           sock.close();</span><br><span class="line">           throw e;</span><br><span class="line">       &#125;</span><br><span class="line">       //未初始化</span><br><span class="line">       initialized = false;</span><br><span class="line">       //清空缓存区</span><br><span class="line">       lenBuffer.clear();</span><br><span class="line">       incomingBuffer = lenBuffer;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="6、调用了registerAndConnect方法"><a href="#6、调用了registerAndConnect方法" class="headerlink" title="6、调用了registerAndConnect方法"></a>6、调用了registerAndConnect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void registerAndConnect(SocketChannel sock, InetSocketAddress addr) </span><br><span class="line">   throws IOException &#123;</span><br><span class="line">   //向selector注册SocketChannel指定OP_CONNECT事件</span><br><span class="line">       sockKey = sock.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">       //连接服务器</span><br><span class="line">       boolean immediateConnect = sock.connect(addr);</span><br><span class="line">       if (immediateConnect) &#123;</span><br><span class="line">           sendThread.primeConnection();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="7、SendThread的primeConnection方法"><a href="#7、SendThread的primeConnection方法" class="headerlink" title="7、SendThread的primeConnection方法"></a>7、SendThread的primeConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">void primeConnection() throws IOException &#123;</span><br><span class="line">       isFirstConnect = false;</span><br><span class="line">       //若之前连接过读写服务器，则使用之前的sessionId</span><br><span class="line">       long sessId = (seenRwServerBefore) ? sessionId : 0;</span><br><span class="line">       //创建连接请求对象</span><br><span class="line">       ConnectRequest conReq = new ConnectRequest(0, lastZxid,</span><br><span class="line">               sessionTimeout, sessId, sessionPasswd);</span><br><span class="line">      </span><br><span class="line">       //重新连接将已有的监听器注册到服务器</span><br><span class="line">       if (!clientConfig.getBoolean(ZKClientConfig.DISABLE_AUTO_WATCH_RESET)) &#123;</span><br><span class="line">       //类是否存在监听器</span><br><span class="line">           List&lt;String&gt; dataWatches = zooKeeper.getDataWatches();</span><br><span class="line">           //数据变化监听器</span><br><span class="line">           List&lt;String&gt; existWatches = zooKeeper.getExistWatches();</span><br><span class="line">           //子节点变化监听器</span><br><span class="line">           List&lt;String&gt; childWatches = zooKeeper.getChildWatches();</span><br><span class="line">           if (!dataWatches.isEmpty()</span><br><span class="line">                   || !existWatches.isEmpty() || !childWatches.isEmpty()) &#123;</span><br><span class="line">               Iterator&lt;String&gt; dataWatchesIter = prependChroot(dataWatches).iterator();</span><br><span class="line">               Iterator&lt;String&gt; existWatchesIter = prependChroot(existWatches).iterator();</span><br><span class="line">               Iterator&lt;String&gt; childWatchesIter = prependChroot(childWatches).iterator();</span><br><span class="line">               long setWatchesLastZxid = lastZxid;</span><br><span class="line"></span><br><span class="line">               while (dataWatchesIter.hasNext()</span><br><span class="line">                      || existWatchesIter.hasNext() || childWatchesIter.hasNext()) &#123;</span><br><span class="line">                   List&lt;String&gt; dataWatchesBatch = new ArrayList&lt;String&gt;();</span><br><span class="line">                   List&lt;String&gt; existWatchesBatch = new ArrayList&lt;String&gt;();</span><br><span class="line">                   List&lt;String&gt; childWatchesBatch = new ArrayList&lt;String&gt;();</span><br><span class="line">                   int batchLength = 0;</span><br><span class="line"></span><br><span class="line">                   while (batchLength &lt; SET_WATCHES_MAX_LENGTH) &#123;</span><br><span class="line">                       final String watch;</span><br><span class="line">                       if (dataWatchesIter.hasNext()) &#123;</span><br><span class="line">                           watch = dataWatchesIter.next();</span><br><span class="line">                           dataWatchesBatch.add(watch);</span><br><span class="line">                       &#125; else if (existWatchesIter.hasNext()) &#123;</span><br><span class="line">                           watch = existWatchesIter.next();</span><br><span class="line">                           existWatchesBatch.add(watch);</span><br><span class="line">                       &#125; else if (childWatchesIter.hasNext()) &#123;</span><br><span class="line">                           watch = childWatchesIter.next();</span><br><span class="line">                           childWatchesBatch.add(watch);</span><br><span class="line">                       &#125; else &#123;</span><br><span class="line">                           break;</span><br><span class="line">                       &#125;</span><br><span class="line">                       batchLength += watch.length();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   SetWatches sw = new SetWatches(setWatchesLastZxid,</span><br><span class="line">                                                  dataWatchesBatch,</span><br><span class="line">                                                  existWatchesBatch,</span><br><span class="line">                                                  childWatchesBatch);</span><br><span class="line">                   RequestHeader header = new RequestHeader(-8, OpCode.setWatches);</span><br><span class="line">                   Packet packet = new Packet(header, new ReplyHeader(), sw, null, null);</span><br><span class="line">                   outgoingQueue.addFirst(packet);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">       //新建一个数据包，加入发送队列</span><br><span class="line">       outgoingQueue.addFirst(new Packet(null, null, conReq,</span><br><span class="line">               null, null, readOnly));</span><br><span class="line">       //该方法修改SocketChannel指定事件为读和写</span><br><span class="line">       clientCnxnSocket.connectionPrimed();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="8、ClientCnxnSocketNIO的doTransport方法"><a href="#8、ClientCnxnSocketNIO的doTransport方法" class="headerlink" title="8、ClientCnxnSocketNIO的doTransport方法"></a>8、ClientCnxnSocketNIO的doTransport方法</h4><p>读取和发送数据的逻辑在实现类ClientCnxnSocketNIO的doTransport方法中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   void doTransport(int waitTimeOut, List&lt;Packet&gt; pendingQueue, ClientCnxn cnxn)</span><br><span class="line">           throws IOException, InterruptedException &#123;</span><br><span class="line">       selector.select(waitTimeOut);</span><br><span class="line">       Set&lt;SelectionKey&gt; selected;</span><br><span class="line">       synchronized (this) &#123;</span><br><span class="line">           selected = selector.selectedKeys();</span><br><span class="line">       &#125;</span><br><span class="line">       updateNow();</span><br><span class="line">       for (SelectionKey k : selected) &#123;</span><br><span class="line">           SocketChannel sc = ((SocketChannel) k.channel());</span><br><span class="line">           //连接事件未就绪</span><br><span class="line">           if ((k.readyOps() &amp; SelectionKey.OP_CONNECT) != 0) &#123;</span><br><span class="line">               if (sc.finishConnect()) &#123;</span><br><span class="line">                   updateLastSendAndHeard();</span><br><span class="line">                   更新服务端地址</span><br><span class="line">                   updateSocketAddresses();</span><br><span class="line">                   连接服务端</span><br><span class="line">                   sendThread.primeConnection();</span><br><span class="line">               &#125;</span><br><span class="line">            //读写事件就绪</span><br><span class="line">           &#125; else if ((k.readyOps() &amp; (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) &#123;</span><br><span class="line">               处理通信数据</span><br><span class="line">               doIO(pendingQueue, cnxn);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       if (sendThread.getZkState().isConnected()) &#123;</span><br><span class="line">       //找出可以在sasl认证之前可以预先发送的请求</span><br><span class="line">           if (findSendablePacket(outgoingQueue,</span><br><span class="line">                   sendThread.tunnelAuthInProgress()) != null) &#123;</span><br><span class="line">               enableWrite();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       selected.clear();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="9、ClientCnxnSocketNIO的doIO方法"><a href="#9、ClientCnxnSocketNIO的doIO方法" class="headerlink" title="9、ClientCnxnSocketNIO的doIO方法"></a>9、ClientCnxnSocketNIO的doIO方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">void doIO(List&lt;Packet&gt; pendingQueue, ClientCnxn cnxn)</span><br><span class="line">     throws InterruptedException, IOException &#123;</span><br><span class="line">       SocketChannel sock = (SocketChannel) sockKey.channel();</span><br><span class="line">       if (sock == null) &#123;</span><br><span class="line">           throw new IOException(&quot;Socket is null!&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //就绪事件为读事件</span><br><span class="line">       if (sockKey.isReadable()) &#123;</span><br><span class="line">           int rc = sock.read(incomingBuffer);</span><br><span class="line">           if (rc &lt; 0) &#123;</span><br><span class="line">               throw new EndOfStreamException(</span><br><span class="line">                       &quot;Unable to read additional data from server sessionid 0x&quot;</span><br><span class="line">                               + Long.toHexString(sessionId)</span><br><span class="line">                               + &quot;, likely server has closed socket&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           //incomingBuffer是否还有空间</span><br><span class="line">           if (!incomingBuffer.hasRemaining()) &#123;</span><br><span class="line">               incomingBuffer.flip();</span><br><span class="line">               //如果incomingBuffer和lenBuffer指向同一个byteBuffer，说明是新请求的第一次读 </span><br><span class="line">               if (incomingBuffer == lenBuffer) &#123;</span><br><span class="line">               请求次数增加</span><br><span class="line">                   recvCount++;</span><br><span class="line">                   //incomingBuffer缓存区初始化</span><br><span class="line">                   readLength();</span><br><span class="line">               &#125; else if (!initialized) &#123;</span><br><span class="line">               //读取服务端的连接请求返回</span><br><span class="line">                   readConnectResult();</span><br><span class="line">                   enableRead();</span><br><span class="line">                   if (findSendablePacket(outgoingQueue,</span><br><span class="line">                           sendThread.tunnelAuthInProgress()) != null) &#123;</span><br><span class="line">                       enableWrite();</span><br><span class="line">                   &#125;</span><br><span class="line">                   lenBuffer.clear();</span><br><span class="line">                   incomingBuffer = lenBuffer;</span><br><span class="line">                   updateLastHeard();</span><br><span class="line">                   initialized = true;</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">               //读取服务端的其他请求返回</span><br><span class="line">                   sendThread.readResponse(incomingBuffer);</span><br><span class="line">                   lenBuffer.clear();</span><br><span class="line">                   incomingBuffer = lenBuffer;</span><br><span class="line">                   updateLastHeard();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       if (sockKey.isWritable()) &#123;</span><br><span class="line">       //查找可发送的数据包</span><br><span class="line">           Packet p = findSendablePacket(outgoingQueue,</span><br><span class="line">                   sendThread.tunnelAuthInProgress());</span><br><span class="line"></span><br><span class="line">           if (p != null) &#123;</span><br><span class="line">               updateLastSend();</span><br><span class="line">               // If we already started writing p, p.bb will already exist</span><br><span class="line">               if (p.bb == null) &#123;</span><br><span class="line">                   if ((p.requestHeader != null) &amp;&amp;</span><br><span class="line">                           (p.requestHeader.getType() != OpCode.ping) &amp;&amp;</span><br><span class="line">                           (p.requestHeader.getType() != OpCode.auth)) &#123;</span><br><span class="line">                       p.requestHeader.setXid(cnxn.getXid());</span><br><span class="line">                   &#125;</span><br><span class="line">                   p.createBB();</span><br><span class="line">               &#125;</span><br><span class="line">               //发送数据</span><br><span class="line">               sock.write(p.bb);</span><br><span class="line">               if (!p.bb.hasRemaining()) &#123;</span><br><span class="line">                   sentCount++;</span><br><span class="line">                   outgoingQueue.removeFirstOccurrence(p);</span><br><span class="line">                   if (p.requestHeader != null</span><br><span class="line">                           &amp;&amp; p.requestHeader.getType() != OpCode.ping</span><br><span class="line">                           &amp;&amp; p.requestHeader.getType() != OpCode.auth) &#123;</span><br><span class="line">                       synchronized (pendingQueue) &#123;</span><br><span class="line">                       //把包裹加入到等待服务端返回队列</span><br><span class="line">                           pendingQueue.add(p);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           if (outgoingQueue.isEmpty()) &#123;</span><br><span class="line">               发送队列为空，取消对OP_WRITE事件的指定</span><br><span class="line">               disableWrite();</span><br><span class="line">           &#125; else if (!initialized &amp;&amp; p != null &amp;&amp; !p.bb.hasRemaining()) &#123;</span><br><span class="line">               连接请求发送完成，取消对OP_WRITE事件的指定</span><br><span class="line">               disableWrite();</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               // Just in case</span><br><span class="line">               enableWrite();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="10、ClientCnxnSocketNIO的readConnectResult方法"><a href="#10、ClientCnxnSocketNIO的readConnectResult方法" class="headerlink" title="10、ClientCnxnSocketNIO的readConnectResult方法"></a>10、ClientCnxnSocketNIO的readConnectResult方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">void readConnectResult() throws IOException &#123;</span><br><span class="line">       if (LOG.isTraceEnabled()) &#123;</span><br><span class="line">           StringBuilder buf = new StringBuilder(&quot;0x[&quot;);</span><br><span class="line">           for (byte b : incomingBuffer.array()) &#123;</span><br><span class="line">               buf.append(Integer.toHexString(b) + &quot;,&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           buf.append(&quot;]&quot;);</span><br><span class="line">           LOG.trace(&quot;readConnectResult &quot; + incomingBuffer.remaining() + &quot; &quot;</span><br><span class="line">                   + buf.toString());</span><br><span class="line">       &#125;</span><br><span class="line">       ByteBufferInputStream bbis = new ByteBufferInputStream(incomingBuffer);</span><br><span class="line">       BinaryInputArchive bbia = BinaryInputArchive.getArchive(bbis);</span><br><span class="line">       ConnectResponse conRsp = new ConnectResponse();</span><br><span class="line">       反序列化连接请求返回</span><br><span class="line">       conRsp.deserialize(bbia, &quot;connect&quot;);</span><br><span class="line"></span><br><span class="line">       // read &quot;is read-only&quot; flag</span><br><span class="line">       boolean isRO = false;</span><br><span class="line">       try &#123;</span><br><span class="line">           isRO = bbia.readBool(&quot;readOnly&quot;);</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           // this is ok -- just a packet from an old server which</span><br><span class="line">           // doesn&apos;t contain readOnly field</span><br><span class="line">           LOG.warn(&quot;Connected to an old server; r-o mode will be unavailable&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //获取服务端返回的sessionId</span><br><span class="line">       this.sessionId = conRsp.getSessionId();</span><br><span class="line">       //最终处理连接返回数据</span><br><span class="line">       sendThread.onConnected(conRsp.getTimeOut(), this.sessionId,</span><br><span class="line">               conRsp.getPasswd(), isRO);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="11、sendThread的onConnected方法"><a href="#11、sendThread的onConnected方法" class="headerlink" title="11、sendThread的onConnected方法"></a>11、sendThread的onConnected方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">void onConnected(int _negotiatedSessionTimeout, long _sessionId,</span><br><span class="line">                byte[] _sessionPasswd, boolean isRO) throws IOException &#123;</span><br><span class="line">    negotiatedSessionTimeout = _negotiatedSessionTimeout;</span><br><span class="line">    //session是否过期</span><br><span class="line">    if (negotiatedSessionTimeout &lt;= 0) &#123;</span><br><span class="line">        state = States.CLOSED;</span><br><span class="line">        //session过期 关闭客户端</span><br><span class="line">        eventThread.queueEvent(new WatchedEvent(</span><br><span class="line">                Watcher.Event.EventType.None,</span><br><span class="line">                Watcher.Event.KeeperState.Expired, null));</span><br><span class="line">        eventThread.queueEventOfDeath();</span><br><span class="line">        ...</span><br><span class="line">        throw new SessionExpiredException(warnInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    //读写客户端连接上只读服务器，则打印错误日志</span><br><span class="line">    if (!readOnly &amp;&amp; isRO) &#123;</span><br><span class="line">        LOG.error(&quot;Read/write client got connected to read-only server&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    readTimeout = negotiatedSessionTimeout * 2 / 3;</span><br><span class="line">    connectTimeout = negotiatedSessionTimeout / hostProvider.size();</span><br><span class="line">    hostProvider.onConnected();</span><br><span class="line">    sessionId = _sessionId;</span><br><span class="line">    sessionPasswd = _sessionPasswd;</span><br><span class="line">    //连接成功修改连接状态</span><br><span class="line">    state = (isRO) ?</span><br><span class="line">            States.CONNECTEDREADONLY : States.CONNECTED;</span><br><span class="line">    //是否连接上读写服务器</span><br><span class="line">    seenRwServerBefore |= !isRO;</span><br><span class="line">    KeeperState eventState = (isRO) ?</span><br><span class="line">            KeeperState.ConnectedReadOnly : KeeperState.SyncConnected;</span><br><span class="line">    //事件队列添加一个None类型的事件</span><br><span class="line">    eventThread.queueEvent(new WatchedEvent(</span><br><span class="line">            Watcher.Event.EventType.None,</span><br><span class="line">            eventState, null));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、EventThread的queueEvent方法"><a href="#12、EventThread的queueEvent方法" class="headerlink" title="12、EventThread的queueEvent方法"></a>12、EventThread的queueEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private void queueEvent(WatchedEvent event,</span><br><span class="line">           Set&lt;Watcher&gt; materializedWatchers) &#123;</span><br><span class="line">       if (event.getType() == EventType.None</span><br><span class="line">               &amp;&amp; sessionState == event.getState()) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       sessionState = event.getState();</span><br><span class="line">       final Set&lt;Watcher&gt; watchers;</span><br><span class="line">       if (materializedWatchers == null) &#123;</span><br><span class="line">           // 获取与该事件相关的所有监听器</span><br><span class="line">           watchers = watcher.materialize(event.getState(),</span><br><span class="line">                   event.getType(), event.getPath());</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           watchers = new HashSet&lt;Watcher&gt;();</span><br><span class="line">           watchers.addAll(materializedWatchers);</span><br><span class="line">       &#125;</span><br><span class="line">       WatcherSetEventPair pair = new WatcherSetEventPair(watchers, event);</span><br><span class="line">       //往队列添加监听器和事件对</span><br><span class="line">       waitingEvents.add(pair);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="13、ZKWatchManager的materialize方法"><a href="#13、ZKWatchManager的materialize方法" class="headerlink" title="13、ZKWatchManager的materialize方法"></a>13、ZKWatchManager的materialize方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public Set&lt;Watcher&gt; materialize(Watcher.Event.KeeperState state,</span><br><span class="line">                                       Watcher.Event.EventType type,</span><br><span class="line">                                       String clientPath)</span><br><span class="line">   &#123;</span><br><span class="line">       Set&lt;Watcher&gt; result = new HashSet&lt;Watcher&gt;();</span><br><span class="line"></span><br><span class="line">       switch (type) &#123;</span><br><span class="line">       //None类型的事件通知所有监听器</span><br><span class="line">       case None:</span><br><span class="line">           result.add(defaultWatcher);</span><br><span class="line">           boolean clear = disableAutoWatchReset &amp;&amp; state != Watcher.Event.KeeperState.SyncConnected;</span><br><span class="line">           synchronized(dataWatches) &#123;</span><br><span class="line">               for(Set&lt;Watcher&gt; ws: dataWatches.values()) &#123;</span><br><span class="line">                   result.addAll(ws);</span><br><span class="line">               &#125;</span><br><span class="line">               if (clear) &#123;</span><br><span class="line">                   dataWatches.clear();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           synchronized(existWatches) &#123;</span><br><span class="line">               for(Set&lt;Watcher&gt; ws: existWatches.values()) &#123;</span><br><span class="line">                   result.addAll(ws);</span><br><span class="line">               &#125;</span><br><span class="line">               if (clear) &#123;</span><br><span class="line">                   existWatches.clear();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           synchronized(childWatches) &#123;</span><br><span class="line">               for(Set&lt;Watcher&gt; ws: childWatches.values()) &#123;</span><br><span class="line">                   result.addAll(ws);</span><br><span class="line">               &#125;</span><br><span class="line">               if (clear) &#123;</span><br><span class="line">                   childWatches.clear();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return result;</span><br><span class="line">       case NodeDataChanged:</span><br><span class="line">       case NodeCreated:</span><br><span class="line">           synchronized (dataWatches) &#123;</span><br><span class="line">               addTo(dataWatches.remove(clientPath), result);</span><br><span class="line">           &#125;</span><br><span class="line">           synchronized (existWatches) &#123;</span><br><span class="line">               addTo(existWatches.remove(clientPath), result);</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">       case NodeChildrenChanged:</span><br><span class="line">           synchronized (childWatches) &#123;</span><br><span class="line">               addTo(childWatches.remove(clientPath), result);</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">       case NodeDeleted:</span><br><span class="line">           synchronized (dataWatches) &#123;</span><br><span class="line">               addTo(dataWatches.remove(clientPath), result);</span><br><span class="line">           &#125;</span><br><span class="line">           // XXX This shouldn&apos;t be needed, but just in case</span><br><span class="line">           synchronized (existWatches) &#123;</span><br><span class="line">               Set&lt;Watcher&gt; list = existWatches.remove(clientPath);</span><br><span class="line">               if (list != null) &#123;</span><br><span class="line">                   addTo(existWatches.remove(clientPath), result);</span><br><span class="line">                   LOG.warn(&quot;We are triggering an exists watch for delete! Shouldn&apos;t happen!&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           synchronized (childWatches) &#123;</span><br><span class="line">               addTo(childWatches.remove(clientPath), result);</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">       default:</span><br><span class="line">           String msg = &quot;Unhandled watch event type &quot; + type</span><br><span class="line">               + &quot; with state &quot; + state + &quot; on path &quot; + clientPath;</span><br><span class="line">           LOG.error(msg);</span><br><span class="line">           throw new RuntimeException(msg);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="14、EventThread的processEvent方法"><a href="#14、EventThread的processEvent方法" class="headerlink" title="14、EventThread的processEvent方法"></a>14、EventThread的processEvent方法</h4><p>EventThread的run方法中的processEvent方法处理事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">private void processEvent(Object event) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (event instanceof WatcherSetEventPair) &#123;</span><br><span class="line">            //是监听器事件则调用所有监听器</span><br><span class="line">            WatcherSetEventPair pair = (WatcherSetEventPair) event;</span><br><span class="line">            for (Watcher watcher : pair.watchers) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                      watcher.process(pair.event);</span><br><span class="line">                catch (Throwable t) &#123;</span><br><span class="line">                      LOG.error(&quot;Error while calling watcher &quot;, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //调用回调函数</span><br><span class="line">        &#125; else if (event instanceof LocalCallback) &#123;</span><br><span class="line">            LocalCallback lcb = (LocalCallback) event;</span><br><span class="line">            if (lcb.cb instanceof StatCallback) &#123;</span><br><span class="line">                ((StatCallback) lcb.cb).processResult(lcb.rc, lcb.path,</span><br><span class="line">                        lcb.ctx, null);</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        //是数据包则调用其中的回调函数</span><br><span class="line">            Packet p = (Packet) event;</span><br><span class="line">            int rc = 0;</span><br><span class="line">            String clientPath = p.clientPath;</span><br><span class="line">            if (p.replyHeader.getErr() != 0) &#123;</span><br><span class="line">                rc = p.replyHeader.getErr();</span><br><span class="line">            &#125;</span><br><span class="line">            if (p.cb == null) &#123;</span><br><span class="line">                LOG.warn(&quot;Somehow a null cb got to EventThread!&quot;);</span><br><span class="line">            &#125; else if (p.response instanceof ExistsResponse</span><br><span class="line">                      || p.response instanceof SetDataResponse</span><br><span class="line">                      || p.response instanceof SetACLResponse) &#123;</span><br><span class="line">            StatCallback cb = (StatCallback) p.cb;</span><br><span class="line">                if (rc == 0) &#123;</span><br><span class="line">                    if (p.response instanceof ExistsResponse) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx,</span><br><span class="line">                                  ((ExistsResponse) p.response)</span><br><span class="line">                                          .getStat());</span><br><span class="line">                    &#125; else if (p.response instanceof SetDataResponse) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx,</span><br><span class="line">                                  ((SetDataResponse) p.response)</span><br><span class="line">                                          .getStat());</span><br><span class="line">                    &#125; else if (p.response instanceof SetACLResponse) &#123;</span><br><span class="line">                          cb.processResult(rc, clientPath, p.ctx,</span><br><span class="line">                                  ((SetACLResponse) p.response)</span><br><span class="line">                                          .getStat());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                      cb.processResult(rc, clientPath, p.ctx, null);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ... </span><br><span class="line">       &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        LOG.error(&quot;Caught unexpected throwable&quot;, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此客户端连接成功</p><h3 id="二、添加节点过程"><a href="#二、添加节点过程" class="headerlink" title="二、添加节点过程"></a>二、添加节点过程</h3><h4 id="1、ZooKeeper类中的create方法"><a href="#1、ZooKeeper类中的create方法" class="headerlink" title="1、ZooKeeper类中的create方法"></a>1、ZooKeeper类中的create方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">   //path          节点的位置</span><br><span class="line">   //data[]        节点的数据</span><br><span class="line">   //acl         OPEN_ACL_UNSAFE：完全开放</span><br><span class="line">//              CREATOR_ALL_ACL：创建该znode的连接拥有所有权限</span><br><span class="line">//              READ_ACL_UNSAFE：所有的客户端都可读</span><br><span class="line">   //createMode PERSISTENT：持久化节点</span><br><span class="line">//              PERSISTENT_SEQUENTIAL：持久化有序节点</span><br><span class="line">//              EPHEMERAL：临时节点（连接断开自动删除）</span><br><span class="line">//              EPHEMERAL_SEQUENTIAL：临时有序节点（连接断开自动删除）</span><br><span class="line">public String create(final String path, byte data[], List&lt;ACL&gt; acl,</span><br><span class="line">           CreateMode createMode)</span><br><span class="line">       throws KeeperException, InterruptedException</span><br><span class="line">   &#123;</span><br><span class="line">       final String clientPath = path;</span><br><span class="line">       PathUtils.validatePath(clientPath, createMode.isSequential());</span><br><span class="line">       EphemeralType.validateTTL(createMode, -1);</span><br><span class="line">       validateACL(acl);</span><br><span class="line"></span><br><span class="line">       final String serverPath = prependChroot(clientPath);</span><br><span class="line"></span><br><span class="line">       RequestHeader h = new RequestHeader();</span><br><span class="line">       h.setType(createMode.isContainer() ? ZooDefs.OpCode.createContainer : ZooDefs.OpCode.create);</span><br><span class="line">       CreateRequest request = new CreateRequest();</span><br><span class="line">       CreateResponse response = new CreateResponse();</span><br><span class="line">       request.setData(data);</span><br><span class="line">       request.setFlags(createMode.toFlag());</span><br><span class="line">       request.setPath(serverPath);</span><br><span class="line">       request.setAcl(acl);</span><br><span class="line">       //发送请求</span><br><span class="line">       ReplyHeader r = cnxn.submitRequest(h, request, response, null);</span><br><span class="line">       if (r.getErr() != 0) &#123;</span><br><span class="line">           throw KeeperException.create(KeeperException.Code.get(r.getErr()),</span><br><span class="line">                   clientPath);</span><br><span class="line">       &#125;</span><br><span class="line">       if (cnxn.chrootPath == null) &#123;</span><br><span class="line">           return response.getPath();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return response.getPath().substring(cnxn.chrootPath.length());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2、ClientCnxn的submitRequest方法"><a href="#2、ClientCnxn的submitRequest方法" class="headerlink" title="2、ClientCnxn的submitRequest方法"></a>2、ClientCnxn的submitRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public ReplyHeader submitRequest(RequestHeader h, Record request,</span><br><span class="line">           Record response, WatchRegistration watchRegistration,</span><br><span class="line">           WatchDeregistration watchDeregistration)</span><br><span class="line">           throws InterruptedException &#123;</span><br><span class="line">       ReplyHeader r = new ReplyHeader();</span><br><span class="line">       //将请求打包并加入发送队列</span><br><span class="line">       Packet packet = queuePacket(h, r, request, response, null, null, null,</span><br><span class="line">               null, watchRegistration, watchDeregistration);</span><br><span class="line">       synchronized (packet) &#123;</span><br><span class="line">       //等待直到数据包处理</span><br><span class="line">           while (!packet.finished) &#123;</span><br><span class="line">               packet.wait();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return r;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3、ClientCnxn的queuePacket方法"><a href="#3、ClientCnxn的queuePacket方法" class="headerlink" title="3、ClientCnxn的queuePacket方法"></a>3、ClientCnxn的queuePacket方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public Packet queuePacket(RequestHeader h, ReplyHeader r, Record request,</span><br><span class="line">           Record response, AsyncCallback cb, String clientPath,</span><br><span class="line">           String serverPath, Object ctx, WatchRegistration watchRegistration,</span><br><span class="line">           WatchDeregistration watchDeregistration) &#123;</span><br><span class="line">       Packet packet = null;</span><br><span class="line"></span><br><span class="line">       //创建待发送的数据包裹</span><br><span class="line">       packet = new Packet(h, r, request, response, watchRegistration);</span><br><span class="line">       packet.cb = cb;</span><br><span class="line">       packet.ctx = ctx;</span><br><span class="line">       packet.clientPath = clientPath;</span><br><span class="line">       packet.serverPath = serverPath;</span><br><span class="line">       packet.watchDeregistration = watchDeregistration;</span><br><span class="line">       </span><br><span class="line">       synchronized (state) &#123;</span><br><span class="line">           if (!state.isAlive() || closing) &#123;</span><br><span class="line">           //客户端已关闭或正在关闭，关闭包裹</span><br><span class="line">               conLossPacket(packet);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               //如果发送的是关闭请求,更改正关闭状态为true</span><br><span class="line">               if (h.getType() == OpCode.closeSession) &#123;</span><br><span class="line">                   closing = true;</span><br><span class="line">               &#125;</span><br><span class="line">               将数据包裹加入待发送队列</span><br><span class="line">               outgoingQueue.add(packet);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       //唤醒selector</span><br><span class="line">       sendThread.getClientCnxnSocket().packetAdded();</span><br><span class="line">       return packet;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4、SendThread类的readResponse方法"><a href="#4、SendThread类的readResponse方法" class="headerlink" title="4、SendThread类的readResponse方法"></a>4、SendThread类的readResponse方法</h4><p>发送数据包的逻辑在（一、9）的doIO中，readResponse方法读取客户端返回数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">void readResponse(ByteBuffer incomingBuffer) throws IOException &#123;</span><br><span class="line">    ByteBufferInputStream bbis = new ByteBufferInputStream(</span><br><span class="line">            incomingBuffer);</span><br><span class="line">    BinaryInputArchive bbia = BinaryInputArchive.getArchive(bbis);</span><br><span class="line">    ReplyHeader replyHdr = new ReplyHeader();</span><br><span class="line"></span><br><span class="line">    replyHdr.deserialize(bbia, &quot;header&quot;);</span><br><span class="line">    //ping请求返回</span><br><span class="line">    if (replyHdr.getXid() == -2) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //权限认证请求返回</span><br><span class="line">    if (replyHdr.getXid() == -4) &#123;</span><br><span class="line">        if(replyHdr.getErr() == KeeperException.Code.AUTHFAILED.intValue()) &#123;</span><br><span class="line">            state = States.AUTH_FAILED;                    </span><br><span class="line">            eventThread.queueEvent( new WatchedEvent(Watcher.Event.EventType.None, </span><br><span class="line">                    Watcher.Event.KeeperState.AuthFailed, null) );                                        </span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //客户端返回通知</span><br><span class="line">    if (replyHdr.getXid() == -1) &#123;</span><br><span class="line">        WatcherEvent event = new WatcherEvent();</span><br><span class="line">        event.deserialize(bbia, &quot;response&quot;);</span><br><span class="line"></span><br><span class="line">        //把event中的path转换为客户端path</span><br><span class="line">        if (chrootPath != null) &#123;</span><br><span class="line">            String serverPath = event.getPath();</span><br><span class="line">            if(serverPath.compareTo(chrootPath)==0)</span><br><span class="line">                event.setPath(&quot;/&quot;);</span><br><span class="line">            else if (serverPath.length() &gt; chrootPath.length())</span><br><span class="line">                event.setPath(serverPath.substring(chrootPath.length()));</span><br><span class="line">            else &#123;</span><br><span class="line">            LOG.warn(&quot;Got server path &quot; + event.getPath()</span><br><span class="line">                    + &quot; which is too short for chroot path &quot;</span><br><span class="line">                    + chrootPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WatchedEvent we = new WatchedEvent(event);</span><br><span class="line">        //添加事件，逻辑在（一、12）中</span><br><span class="line">        eventThread.queueEvent( we );</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Packet packet;</span><br><span class="line">    synchronized (pendingQueue) &#123;</span><br><span class="line">        if (pendingQueue.size() == 0) &#123;</span><br><span class="line">            throw new IOException(&quot;Nothing in the queue, but got &quot;</span><br><span class="line">                    + replyHdr.getXid());</span><br><span class="line">        &#125;</span><br><span class="line">        //服务端已返回，从队列中删除该数据包</span><br><span class="line">        packet = pendingQueue.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    //数据包裹按顺序处理，返回不一致则抛出异常</span><br><span class="line">    try &#123;</span><br><span class="line">        if (packet.requestHeader.getXid() != replyHdr.getXid()) &#123;</span><br><span class="line">            packet.replyHeader.setErr(</span><br><span class="line">                    KeeperException.Code.CONNECTIONLOSS.intValue());</span><br><span class="line">            throw new IOException(&quot;Xid out of order. Got Xid &quot;</span><br><span class="line">                    + replyHdr.getXid() + &quot; with err &quot; +</span><br><span class="line">                    + replyHdr.getErr() +</span><br><span class="line">                    &quot; expected Xid &quot;</span><br><span class="line">                    + packet.requestHeader.getXid()</span><br><span class="line">                    + &quot; for a packet with details: &quot;</span><br><span class="line">                    + packet );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        packet.replyHeader.setXid(replyHdr.getXid());</span><br><span class="line">        packet.replyHeader.setErr(replyHdr.getErr());</span><br><span class="line">        packet.replyHeader.setZxid(replyHdr.getZxid());</span><br><span class="line">        if (replyHdr.getZxid() &gt; 0) &#123;</span><br><span class="line">        //更新最新处理事物id</span><br><span class="line">            lastZxid = replyHdr.getZxid();</span><br><span class="line">        &#125;</span><br><span class="line">        if (packet.response != null &amp;&amp; replyHdr.getErr() == 0) &#123;</span><br><span class="line">        //序列化返回数据</span><br><span class="line">            packet.response.deserialize(bbia, &quot;response&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">    //最终完成数据包处理</span><br><span class="line">        finishPacket(packet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、SendThread的finishPacket方法"><a href="#5、SendThread的finishPacket方法" class="headerlink" title="5、SendThread的finishPacket方法"></a>5、SendThread的finishPacket方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void finishPacket(Packet p) &#123;</span><br><span class="line">       int err = p.replyHeader.getErr();</span><br><span class="line">       if (p.watchRegistration != null) &#123;</span><br><span class="line">       //注册监听器到watchManager中</span><br><span class="line">           p.watchRegistration.register(err);</span><br><span class="line">       &#125;</span><br><span class="line">       ...</span><br><span class="line">       数据包裹处理完成</span><br><span class="line">       if (p.cb == null) &#123;</span><br><span class="line">           synchronized (p) &#123;</span><br><span class="line">               p.finished = true;</span><br><span class="line">               p.notifyAll();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           p.finished = true;</span><br><span class="line">           eventThread.queuePacket(p);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>到此create处理完成</p><h3 id="三、添加监听器过程"><a href="#三、添加监听器过程" class="headerlink" title="三、添加监听器过程"></a>三、添加监听器过程</h3><h4 id="1、以ZooKeepe类中的exists方法为例"><a href="#1、以ZooKeepe类中的exists方法为例" class="headerlink" title="1、以ZooKeepe类中的exists方法为例"></a>1、以ZooKeepe类中的exists方法为例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public Stat exists(final String path, Watcher watcher)</span><br><span class="line">       throws KeeperException, InterruptedException</span><br><span class="line">   &#123;</span><br><span class="line">       final String clientPath = path;</span><br><span class="line">       PathUtils.validatePath(clientPath);</span><br><span class="line">       WatchRegistration wcb = null;</span><br><span class="line">       if (watcher != null) &#123;</span><br><span class="line">       //新建Exist监听器注册器</span><br><span class="line">           wcb = new ExistsWatchRegistration(watcher, clientPath);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       final String serverPath = prependChroot(clientPath);</span><br><span class="line"></span><br><span class="line">       RequestHeader h = new RequestHeader();</span><br><span class="line">       h.setType(ZooDefs.OpCode.exists);</span><br><span class="line">       //实例化Exists请求</span><br><span class="line">       ExistsRequest request = new ExistsRequest();</span><br><span class="line">       request.setPath(serverPath);</span><br><span class="line">       request.setWatch(watcher != null);</span><br><span class="line">       SetDataResponse response = new SetDataResponse();</span><br><span class="line">       //发送请求，见（二、2）</span><br><span class="line">       ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);</span><br><span class="line">       if (r.getErr() != 0) &#123;</span><br><span class="line">           if (r.getErr() == KeeperException.Code.NONODE.intValue()) &#123;</span><br><span class="line">               return null;</span><br><span class="line">           &#125;</span><br><span class="line">           throw KeeperException.create(KeeperException.Code.get(r.getErr()),</span><br><span class="line">                   clientPath);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return response.getStat().getCzxid() == -1 ? null : response.getStat();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2、ExistsWatchRegistration的register方法"><a href="#2、ExistsWatchRegistration的register方法" class="headerlink" title="2、ExistsWatchRegistration的register方法"></a>2、ExistsWatchRegistration的register方法</h4><p>发送和接受请求与二中相同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void register(int rc) &#123;</span><br><span class="line">       if (shouldAddWatch(rc)) &#123;</span><br><span class="line">           Map&lt;String, Set&lt;Watcher&gt;&gt; watches = getWatches(rc);</span><br><span class="line">           synchronized(watches) &#123;</span><br><span class="line">               Set&lt;Watcher&gt; watchers = watches.get(clientPath);</span><br><span class="line">               if (watchers == null) &#123;</span><br><span class="line">                   watchers = new HashSet&lt;Watcher&gt;();</span><br><span class="line">                   watches.put(clientPath, watchers);</span><br><span class="line">               &#125;</span><br><span class="line">               watchers.add(watcher);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、ExistsWatchRegistration的getWatches方法"><a href="#3、ExistsWatchRegistration的getWatches方法" class="headerlink" title="3、ExistsWatchRegistration的getWatches方法"></a>3、ExistsWatchRegistration的getWatches方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected Map&lt;String, Set&lt;Watcher&gt;&gt; getWatches(int rc) &#123;</span><br><span class="line">   //返回成功则注册到dataWatches，不存在则注册到existWatches中</span><br><span class="line">       return rc == 0 ?  watchManager.dataWatches : watchManager.existWatches;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>到此zookeeper客户端源码就介绍完了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;客户端Demo&quot;&gt;&lt;a href=&quot;#客户端Demo&quot; class=&quot;headerlink&quot; title=&quot;客户端Demo&quot;&gt;&lt;/a&gt;客户端Demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>zookeeper源码单机版服务端</title>
    <link href="http://yoursite.com/2020/01/13/zookeeper%E6%BA%90%E7%A0%81/zookeeper%E6%BA%90%E7%A0%81%E5%8D%95%E6%9C%BA%E7%89%88%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://yoursite.com/2020/01/13/zookeeper源码/zookeeper源码单机版服务端/</id>
    <published>2020-01-13T14:32:38.121Z</published>
    <updated>2018-08-05T11:46:46.762Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、服务器启动过程"><a href="#一、服务器启动过程" class="headerlink" title="一、服务器启动过程"></a>一、服务器启动过程</h3><h4 id="1、ZooKeeperServerMain的nitializeAndRun方法"><a href="#1、ZooKeeperServerMain的nitializeAndRun方法" class="headerlink" title="1、ZooKeeperServerMain的nitializeAndRun方法"></a>1、ZooKeeperServerMain的nitializeAndRun方法</h4><p>单机版入口为ZooKeeperServerMain类main方法，调用了initializeAndRun方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected void initializeAndRun(String[] args)</span><br><span class="line">     throws ConfigException, IOException, AdminServerException</span><br><span class="line"> &#123;</span><br><span class="line">     try &#123;</span><br><span class="line">         ManagedUtil.registerLog4jMBeans();</span><br><span class="line">     &#125; catch (JMException e) &#123;</span><br><span class="line">         LOG.warn(&quot;Unable to register log4j JMX control&quot;, e);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ServerConfig config = new ServerConfig();</span><br><span class="line">     if (args.length == 1) &#123;</span><br><span class="line">         //args[0]为配置文件路径</span><br><span class="line">         config.parse(args[0]);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         config.parse(args);</span><br><span class="line">     &#125;</span><br><span class="line">     runFromConfig(config);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ServerConfig的parse方法"><a href="#2、ServerConfig的parse方法" class="headerlink" title="2、ServerConfig的parse方法"></a>2、ServerConfig的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void parse(String path) throws ConfigException &#123;</span><br><span class="line">    QuorumPeerConfig config = new QuorumPeerConfig();</span><br><span class="line">    //解析配置文件</span><br><span class="line">    config.parse(path);</span><br><span class="line">    //将解析存放于QuorumPeerConfig中的配置信息赋值给ServerConfig</span><br><span class="line">    readFrom(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、runFromConfig方法"><a href="#3、runFromConfig方法" class="headerlink" title="3、runFromConfig方法"></a>3、runFromConfig方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> public void runFromConfig(ServerConfig config)</span><br><span class="line">        throws IOException, AdminServerException &#123;</span><br><span class="line">    FileTxnSnapLog txnLog = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //FileTxnSnapLog包含了日志和快照文件 </span><br><span class="line">        txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);</span><br><span class="line">        //zookeeper服务器实例</span><br><span class="line">        final ZooKeeperServer zkServer = new ZooKeeperServer(txnLog,</span><br><span class="line">                config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, null);</span><br><span class="line">        //主线程以此等待zkServer关闭</span><br><span class="line">        final CountDownLatch shutdownLatch = new CountDownLatch(1);</span><br><span class="line">        zkServer.registerServerShutdownHandler(</span><br><span class="line">                new ZooKeeperServerShutdownHandler(shutdownLatch));</span><br><span class="line"></span><br><span class="line">        //内嵌的管理控制台是通过jetty启动,占用8080 端口</span><br><span class="line">        adminServer = AdminServerFactory.createAdminServer();</span><br><span class="line">        adminServer.setZooKeeperServer(zkServer);</span><br><span class="line">        adminServer.start();</span><br><span class="line"></span><br><span class="line">        boolean needStartZKServer = true;</span><br><span class="line">        if (config.getClientPortAddress() != null) &#123;</span><br><span class="line">            //连接工厂，默认NIOServerCnxnFactory </span><br><span class="line">            cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            //监听客户端请求，实例化接受、处理请求的线程</span><br><span class="line">            cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), false);</span><br><span class="line">            cnxnFactory.startup(zkServer);</span><br><span class="line">            // zkServer has been started. So we don&apos;t need to start it again in secureCnxnFactory.</span><br><span class="line">            needStartZKServer = false;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        //定期删除子节点为空的容器节点</span><br><span class="line">        containerManager = new ContainerManager(zkServer.getZKDatabase(), zkServer.firstProcessor,</span><br><span class="line">                Integer.getInteger(&quot;znode.container.checkIntervalMs&quot;, (int) TimeUnit.MINUTES.toMillis(1)),</span><br><span class="line">                Integer.getInteger(&quot;znode.container.maxPerMinute&quot;, 10000)</span><br><span class="line">        );</span><br><span class="line">        containerManager.start();</span><br><span class="line"></span><br><span class="line">        // Watch status of ZooKeeper server. It will do a graceful shutdown</span><br><span class="line">        // if the server is not running or hits an internal error.</span><br><span class="line">        shutdownLatch.await();</span><br><span class="line"></span><br><span class="line">        shutdown();</span><br><span class="line"></span><br><span class="line">        //等待子线程执行完毕</span><br><span class="line">        if (cnxnFactory != null) &#123;</span><br><span class="line">            cnxnFactory.join();</span><br><span class="line">        &#125;</span><br><span class="line">        if (secureCnxnFactory != null) &#123;</span><br><span class="line">            secureCnxnFactory.join();</span><br><span class="line">        &#125;</span><br><span class="line">        if (zkServer.canShutdown()) &#123;</span><br><span class="line">            zkServer.shutdown(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        // warn, but generally this is ok</span><br><span class="line">        LOG.warn(&quot;Server interrupted&quot;, e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (txnLog != null) &#123;</span><br><span class="line">            txnLog.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、NIOServerCnxnFactory的configure方法"><a href="#4、NIOServerCnxnFactory的configure方法" class="headerlink" title="4、NIOServerCnxnFactory的configure方法"></a>4、NIOServerCnxnFactory的configure方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void configure(InetSocketAddress addr, int maxcc, boolean secure) throws IOException &#123;</span><br><span class="line">    if (secure) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;SSL isn&apos;t supported in NIOServerCnxn&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    configureSaslLogin();</span><br><span class="line">    //单个客户端与单台服务器之间的连接数的限制</span><br><span class="line">    maxClientCnxns = maxcc;</span><br><span class="line">    //服务端连接过期时间</span><br><span class="line">    sessionlessCnxnTimeout = Integer.getInteger(</span><br><span class="line">        ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT, 10000);</span><br><span class="line">    //存放服务端接收到的连接</span><br><span class="line">    cnxnExpiryQueue =</span><br><span class="line">        new ExpiryQueue&lt;NIOServerCnxn&gt;(sessionlessCnxnTimeout);</span><br><span class="line">    //该线程关闭cnxnExpiryQueue中已经过期的连接</span><br><span class="line">    expirerThread = new ConnectionExpirerThread();</span><br><span class="line"></span><br><span class="line">    int numCores = Runtime.getRuntime().availableProcessors();</span><br><span class="line">    // 32 cores sweet spot seems to be 4 selector threads</span><br><span class="line">    numSelectorThreads = Integer.getInteger(</span><br><span class="line">        ZOOKEEPER_NIO_NUM_SELECTOR_THREADS,</span><br><span class="line">        Math.max((int) Math.sqrt((float) numCores/2), 1));</span><br><span class="line">    if (numSelectorThreads &lt; 1) &#123;</span><br><span class="line">        throw new IOException(&quot;numSelectorThreads must be at least 1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    numWorkerThreads = Integer.getInteger(</span><br><span class="line">        ZOOKEEPER_NIO_NUM_WORKER_THREADS, 2 * numCores);</span><br><span class="line">    workerShutdownTimeoutMS = Long.getLong(</span><br><span class="line">        ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT, 5000);</span><br><span class="line"></span><br><span class="line">    //处理接收到请求的线程</span><br><span class="line">    for(int i=0; i&lt;numSelectorThreads; ++i) &#123;</span><br><span class="line">        selectorThreads.add(new SelectorThread(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.ss = ServerSocketChannel.open();</span><br><span class="line">    ss.socket().setReuseAddress(true);</span><br><span class="line">    LOG.info(&quot;binding to port &quot; + addr);</span><br><span class="line">    ss.socket().bind(addr);</span><br><span class="line">    ss.configureBlocking(false);</span><br><span class="line">    //接受客户端请求的线程</span><br><span class="line">    acceptThread = new AcceptThread(ss, addr, selectorThreads);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、3）NIOServerCnxnFactory的startup方法"><a href="#5、接（一、3）NIOServerCnxnFactory的startup方法" class="headerlink" title="5、接（一、3）NIOServerCnxnFactory的startup方法"></a>5、接（一、3）NIOServerCnxnFactory的startup方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void startup(ZooKeeperServer zks, boolean startServer)</span><br><span class="line">        throws IOException, InterruptedException &#123;</span><br><span class="line">    start();</span><br><span class="line">    setZooKeeperServer(zks);</span><br><span class="line">    if (startServer) &#123;</span><br><span class="line">        zks.startdata();</span><br><span class="line">        zks.startup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、NIOServerCnxnFactory的start方法"><a href="#6、NIOServerCnxnFactory的start方法" class="headerlink" title="6、NIOServerCnxnFactory的start方法"></a>6、NIOServerCnxnFactory的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void start() &#123;</span><br><span class="line">    stopped = false;</span><br><span class="line">    if (workerPool == null) &#123;</span><br><span class="line">        //封装了一组线程池集合，集合大小默认2 * numCores。定长线程池大小1，</span><br><span class="line">        workerPool = new WorkerService(</span><br><span class="line">            &quot;NIOWorker&quot;, numWorkerThreads, false);</span><br><span class="line">    &#125;</span><br><span class="line">    //启动处理接收到请求的线程</span><br><span class="line">    for(SelectorThread thread : selectorThreads) &#123;</span><br><span class="line">        if (thread.getState() == Thread.State.NEW) &#123;</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动管理请求线程</span><br><span class="line">    if (acceptThread.getState() == Thread.State.NEW) &#123;</span><br><span class="line">        acceptThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //关闭cnxnExpiryQueue中已经过期的连接</span><br><span class="line">    if (expirerThread.getState() == Thread.State.NEW) &#123;</span><br><span class="line">        expirerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（一、3）实例化ZooKeeperServer"><a href="#7、接（一、3）实例化ZooKeeperServer" class="headerlink" title="7、接（一、3）实例化ZooKeeperServer"></a>7、接（一、3）实例化ZooKeeperServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime,</span><br><span class="line">        int minSessionTimeout, int maxSessionTimeout, ZKDatabase zkDb) &#123;</span><br><span class="line">    serverStats = new ServerStats(this);</span><br><span class="line">    //封装日志和快照</span><br><span class="line">    this.txnLogFactory = txnLogFactory;</span><br><span class="line">    //内存数据ZKDatabase</span><br><span class="line">    this.zkDb = zkDb;</span><br><span class="line">    //最小事件单位</span><br><span class="line">    this.tickTime = tickTime;</span><br><span class="line">    //最小session时间</span><br><span class="line">    setMinSessionTimeout(minSessionTimeout);</span><br><span class="line">    //最大session时间</span><br><span class="line">    setMaxSessionTimeout(maxSessionTimeout);</span><br><span class="line">    listener = new ZooKeeperServerListenerImpl(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、5）ZooKeeperServer的startdata方法恢复数据s"><a href="#8、接（一、5）ZooKeeperServer的startdata方法恢复数据s" class="headerlink" title="8、接（一、5）ZooKeeperServer的startdata方法恢复数据s"></a>8、接（一、5）ZooKeeperServer的startdata方法恢复数据s</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void startdata()</span><br><span class="line">throws IOException, InterruptedException &#123;</span><br><span class="line">    //check to see if zkDb is not null</span><br><span class="line">    if (zkDb == null) &#123;</span><br><span class="line">        zkDb = new ZKDatabase(this.txnLogFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!zkDb.isInitialized()) &#123;</span><br><span class="line">        //恢复数据</span><br><span class="line">        loadData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ZooKeeperServer的loadData方法恢复数据s"><a href="#9、ZooKeeperServer的loadData方法恢复数据s" class="headerlink" title="9、ZooKeeperServer的loadData方法恢复数据s"></a>9、ZooKeeperServer的loadData方法恢复数据s</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void loadData() throws IOException, InterruptedException &#123;</span><br><span class="line">    //设置最新的事务Zxid</span><br><span class="line">    if(zkDb.isInitialized())&#123;</span><br><span class="line">        setZxid(zkDb.getDataTreeLastProcessedZxid());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">    //恢复数据</span><br><span class="line">        setZxid(zkDb.loadDataBase());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Clean up dead sessions</span><br><span class="line">    List&lt;Long&gt; deadSessions = new LinkedList&lt;Long&gt;();</span><br><span class="line">    //获取过期的session</span><br><span class="line">    for (Long session : zkDb.getSessions()) &#123;</span><br><span class="line">        if (zkDb.getSessionWithTimeOuts().get(session) == null) &#123;</span><br><span class="line">            deadSessions.add(session);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //清除过期的session</span><br><span class="line">    for (long session : deadSessions) &#123;</span><br><span class="line">        killSession(session, zkDb.getDataTreeLastProcessedZxid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //创建一个最新的快照文件</span><br><span class="line">    takeSnapshot();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、ZKDatabase的loadDataBase方法恢复数据"><a href="#10、ZKDatabase的loadDataBase方法恢复数据" class="headerlink" title="10、ZKDatabase的loadDataBase方法恢复数据"></a>10、ZKDatabase的loadDataBase方法恢复数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public long loadDataBase() throws IOException &#123;</span><br><span class="line">        PlayBackListener listener=new PlayBackListener()&#123;</span><br><span class="line">            public void onTxnLoaded(TxnHeader hdr,Record txn)&#123;</span><br><span class="line">                Request r = new Request(0, hdr.getCxid(),hdr.getType(), hdr, txn, hdr.getZxid());</span><br><span class="line">                addCommittedProposal(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //实际恢复数据的方法</span><br><span class="line">        long zxid = snapLog.restore(dataTree,sessionsWithTimeouts,listener);</span><br><span class="line">        initialized = true;</span><br><span class="line">        return zxid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="11、FileTxnSnapLog的restore方法恢复数据s"><a href="#11、FileTxnSnapLog的restore方法恢复数据s" class="headerlink" title="11、FileTxnSnapLog的restore方法恢复数据s"></a>11、FileTxnSnapLog的restore方法恢复数据s</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public long restore(DataTree dt, Map&lt;Long, Integer&gt; sessions,</span><br><span class="line">           PlayBackListener listener) throws IOException &#123;</span><br><span class="line">       //从快照文件中恢复数据</span><br><span class="line">       long deserializeResult = snapLog.deserialize(dt, sessions);</span><br><span class="line">       //事务记录</span><br><span class="line">       FileTxnLog txnLog = new FileTxnLog(dataDir);</span><br><span class="line">       boolean trustEmptyDB;</span><br><span class="line">       File initFile = new File(dataDir.getParent(), &quot;initialize&quot;);</span><br><span class="line">       if (Files.deleteIfExists(initFile.toPath())) &#123;</span><br><span class="line">           LOG.info(&quot;Initialize file found, an empty database will not block voting participation&quot;);</span><br><span class="line">           trustEmptyDB = true;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           trustEmptyDB = autoCreateDB;</span><br><span class="line">       &#125;</span><br><span class="line">       //无快照文件</span><br><span class="line">       if (-1L == deserializeResult) &#123;</span><br><span class="line">           //无快照文件，但是有事务记录</span><br><span class="line">           if (txnLog.getLastLoggedZxid() != -1) &#123;</span><br><span class="line">               throw new IOException(</span><br><span class="line">                       &quot;No snapshot found, but there are log entries. &quot; +</span><br><span class="line">                       &quot;Something is broken!&quot;);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (trustEmptyDB) &#123;</span><br><span class="line">               //创建内存快照</span><br><span class="line">               save(dt, (ConcurrentHashMap&lt;Long, Integer&gt;)sessions, false);</span><br><span class="line">               //内存DataTree数据为空</span><br><span class="line">               return 0L;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               //返回-1L可能丢失数据</span><br><span class="line">               dt.lastProcessedZxid = -1L;</span><br><span class="line">               return -1L;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       //获取事务id大于最新快照文件的事务记录</span><br><span class="line">       TxnIterator itr = txnLog.read(dt.lastProcessedZxid+1);</span><br><span class="line">       long highestZxid = dt.lastProcessedZxid;</span><br><span class="line">       TxnHeader hdr;</span><br><span class="line">       try &#123;</span><br><span class="line">           while (true) &#123;</span><br><span class="line">               获取事务头</span><br><span class="line">               hdr = itr.getHeader();</span><br><span class="line">               //空事务记录</span><br><span class="line">               if (hdr == null) &#123;</span><br><span class="line">                   return dt.lastProcessedZxid;</span><br><span class="line">               &#125;</span><br><span class="line">               //取出的事务记录id应当不小于快照中的</span><br><span class="line">               if (hdr.getZxid() &lt; highestZxid &amp;&amp; highestZxid != 0) &#123;</span><br><span class="line">                   LOG.error(&quot;&#123;&#125;(highestZxid) &gt; &#123;&#125;(next log) for type &#123;&#125;&quot;,</span><br><span class="line">                           highestZxid, hdr.getZxid(), hdr.getType());</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   highestZxid = hdr.getZxid();</span><br><span class="line">               &#125;</span><br><span class="line">               try &#123;</span><br><span class="line">                   //将事务执行到内存树DataTree上</span><br><span class="line">                   processTransaction(hdr,dt,sessions, itr.getTxn());</span><br><span class="line">               &#125; catch(KeeperException.NoNodeException e) &#123;</span><br><span class="line">                  throw new IOException(&quot;Failed to process transaction type: &quot; +</span><br><span class="line">                        hdr.getType() + &quot; error: &quot; + e.getMessage(), e);</span><br><span class="line">               &#125;</span><br><span class="line">               //调用监听器将事务commitedLog集合，待服务恢复的时候会同步到其他leaner server</span><br><span class="line">               listener.onTxnLoaded(hdr, itr.getTxn());</span><br><span class="line">               if (!itr.next())</span><br><span class="line">                   break;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           if (itr != null) &#123;</span><br><span class="line">               itr.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return highestZxid;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（一、5）ZooKeeperServer的startup方法"><a href="#12、接（一、5）ZooKeeperServer的startup方法" class="headerlink" title="12、接（一、5）ZooKeeperServer的startup方法"></a>12、接（一、5）ZooKeeperServer的startup方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void startup() &#123;</span><br><span class="line">       if (sessionTracker == null) &#123;</span><br><span class="line">       //创建SessionTrackerImpl用来管理Session</span><br><span class="line">           createSessionTracker();</span><br><span class="line">       &#125;</span><br><span class="line">       //启动SessionTrackerImpl</span><br><span class="line">       startSessionTracker();</span><br><span class="line">       //初始化处理器</span><br><span class="line">       setupRequestProcessors();</span><br><span class="line">       registerJMX();</span><br><span class="line">       setState(State.RUNNING);</span><br><span class="line">       notifyAll();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="13、ZooKeeperServer的setupRequestProcessors方法"><a href="#13、ZooKeeperServer的setupRequestProcessors方法" class="headerlink" title="13、ZooKeeperServer的setupRequestProcessors方法"></a>13、ZooKeeperServer的setupRequestProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected void setupRequestProcessors() &#123;</span><br><span class="line">       //FinalRequestProcessor负责把已经commit的写操作应用到本机，对于读操作则从本机中读取数据并返回给client</span><br><span class="line">       RequestProcessor finalProcessor = new FinalRequestProcessor(this);</span><br><span class="line">       //这个 processor负责把写request持久化到本地磁盘</span><br><span class="line">       RequestProcessor syncProcessor = new SyncRequestProcessor(this,</span><br><span class="line">               finalProcessor);</span><br><span class="line">       ((SyncRequestProcessor)syncProcessor).start();</span><br><span class="line">       //为修改状态的操作建立相应的TxnHeader和Record对象</span><br><span class="line">       firstProcessor = new PrepRequestProcessor(this, syncProcessor);</span><br><span class="line">       ((PrepRequestProcessor)firstProcessor).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（一、12）实例化SessionTrackerImpl"><a href="#14、接（一、12）实例化SessionTrackerImpl" class="headerlink" title="14、接（一、12）实例化SessionTrackerImpl"></a>14、接（一、12）实例化SessionTrackerImpl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public SessionTrackerImpl(SessionExpirer expirer,</span><br><span class="line">           ConcurrentMap&lt;Long, Integer&gt; sessionsWithTimeout, int tickTime,</span><br><span class="line">           long serverId, ZooKeeperServerListener listener)</span><br><span class="line">   &#123;</span><br><span class="line">       super(&quot;SessionTracker&quot;, listener);</span><br><span class="line">       this.expirer = expirer;</span><br><span class="line">       //管理session的队列</span><br><span class="line">       this.sessionExpiryQueue = new ExpiryQueue&lt;SessionImpl&gt;(tickTime);</span><br><span class="line">       this.sessionsWithTimeout = sessionsWithTimeout;</span><br><span class="line">       //初始化sessionId</span><br><span class="line">       this.nextSessionId.set(initializeNextSession(serverId));</span><br><span class="line">       //恢复的数据中的sessions，加入SessionTrackerImpl</span><br><span class="line">       for (Entry&lt;Long, Integer&gt; e : sessionsWithTimeout.entrySet()) &#123;</span><br><span class="line">           addSession(e.getKey(), e.getValue());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="15、SessionTrackerImpl的run方法"><a href="#15、SessionTrackerImpl的run方法" class="headerlink" title="15、SessionTrackerImpl的run方法"></a>15、SessionTrackerImpl的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           while (running) &#123;</span><br><span class="line">               //获取最近过期时间</span><br><span class="line">               long waitTime = sessionExpiryQueue.getWaitTime();</span><br><span class="line">               if (waitTime &gt; 0) &#123;</span><br><span class="line">                   Thread.sleep(waitTime);</span><br><span class="line">                   continue;</span><br><span class="line">               &#125;</span><br><span class="line">               //获取最近过期时间对应的Session集合</span><br><span class="line">               for (SessionImpl s : sessionExpiryQueue.poll()) &#123;</span><br><span class="line">               //关闭Session</span><br><span class="line">                   setSessionClosing(s.sessionId);</span><br><span class="line">               //调用ZooKeeperServer的expire方法，提交关闭session请求，关闭session</span><br><span class="line">                   expirer.expire(s);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (InterruptedException e) &#123;</span><br><span class="line">           handleException(this.getName(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="16、接（一、13）PrepRequestProcessor的run方法"><a href="#16、接（一、13）PrepRequestProcessor的run方法" class="headerlink" title="16、接（一、13）PrepRequestProcessor的run方法"></a>16、接（一、13）PrepRequestProcessor的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           while (true) &#123;</span><br><span class="line">               //获取提交到队列中请求</span><br><span class="line">               Request request = submittedRequests.take();</span><br><span class="line">               long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class="line">               if (request.type == OpCode.ping) &#123;</span><br><span class="line">                   traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;</span><br><span class="line">               &#125;</span><br><span class="line">               if (LOG.isTraceEnabled()) &#123;</span><br><span class="line">                   ZooTrace.logRequest(LOG, traceMask, &apos;P&apos;, request, &quot;&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">               if (Request.requestOfDeath == request) &#123;</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line">               //处理请求</span><br><span class="line">               pRequest(request);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; </span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（一、13）SyncRequestProcessor的run方法"><a href="#17、接（一、13）SyncRequestProcessor的run方法" class="headerlink" title="17、接（一、13）SyncRequestProcessor的run方法"></a>17、接（一、13）SyncRequestProcessor的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           int logCount = 0;</span><br><span class="line">           int randRoll = r.nextInt(snapCount/2);</span><br><span class="line">           while (true) &#123;</span><br><span class="line">               Request si = null;</span><br><span class="line">               //等待刷新到本地的磁盘为空</span><br><span class="line">               if (toFlush.isEmpty()) &#123;</span><br><span class="line">                   //从等待队列中获取待处理请求</span><br><span class="line">                   si = queuedRequests.take();</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   si = queuedRequests.poll();</span><br><span class="line">                   if (si == null) &#123;</span><br><span class="line">                       //将日志文件刷新到磁盘，调用下个处理器处理队列中的请求</span><br><span class="line">                       flush(toFlush);</span><br><span class="line">                       continue;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               //关闭请求</span><br><span class="line">               if (si == requestOfDeath) &#123;</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line">               if (si != null) &#123;</span><br><span class="line">                   //往日志文件文件尾部添加一条记录</span><br><span class="line">                   if (zks.getZKDatabase().append(si)) &#123;</span><br><span class="line">                       logCount++;</span><br><span class="line">                       //事务达到一定数量则保存快照</span><br><span class="line">                       if (logCount &gt; (snapCount / 2 + randRoll)) &#123;</span><br><span class="line">                           randRoll = r.nextInt(snapCount/2);</span><br><span class="line">                           //将日志文件刷新到磁盘，释放资源，之后的日志开新文件保存</span><br><span class="line">                           zks.getZKDatabase().rollLog();</span><br><span class="line">                           //创建快照文件</span><br><span class="line">                           if (snapInProcess != null &amp;&amp; snapInProcess.isAlive()) &#123;</span><br><span class="line">                               LOG.warn(&quot;Too busy to snap, skipping&quot;);</span><br><span class="line">                           &#125; else &#123;</span><br><span class="line">                               snapInProcess = new ZooKeeperThread(&quot;Snapshot Thread&quot;) &#123;</span><br><span class="line">                                       public void run() &#123;</span><br><span class="line">                                           try &#123;</span><br><span class="line">                                               zks.takeSnapshot();</span><br><span class="line">                                           &#125; catch(Exception e) &#123;</span><br><span class="line">                                               LOG.warn(&quot;Unexpected exception&quot;, e);</span><br><span class="line">                                           &#125;</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125;;</span><br><span class="line">                               snapInProcess.start();</span><br><span class="line">                           &#125;</span><br><span class="line">                           logCount = 0;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; else if (toFlush.isEmpty()) &#123;</span><br><span class="line">                       //如果本次请求是读请求，并且没有待刷新的请求，直接调用下个处理器</span><br><span class="line">                       if (nextProcessor != null) &#123;</span><br><span class="line">                           nextProcessor.processRequest(si);</span><br><span class="line">                           if (nextProcessor instanceof Flushable) &#123;</span><br><span class="line">                               ((Flushable)nextProcessor).flush();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       continue;</span><br><span class="line">                   &#125;</span><br><span class="line">                   //本次请求添加到待刷新队列</span><br><span class="line">                   toFlush.add(si);</span><br><span class="line">                   if (toFlush.size() &gt; 1000) &#123;</span><br><span class="line">                       //将日志文件刷新到磁盘，调用下个处理器处理队列中的请求</span><br><span class="line">                       flush(toFlush);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Throwable t) &#123;</span><br><span class="line">           handleException(this.getName(), t);</span><br><span class="line">       &#125; finally&#123;</span><br><span class="line">           running = false;</span><br><span class="line">       &#125;</span><br><span class="line">       LOG.info(&quot;SyncRequestProcessor exited!&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（一、4）实例化AcceptThread"><a href="#18、接（一、4）实例化AcceptThread" class="headerlink" title="18、接（一、4）实例化AcceptThread"></a>18、接（一、4）实例化AcceptThread</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public AcceptThread(ServerSocketChannel ss, InetSocketAddress addr,</span><br><span class="line">        Set&lt;SelectorThread&gt; selectorThreads) throws IOException &#123;</span><br><span class="line">    super(&quot;NIOServerCxnFactory.AcceptThread:&quot; + addr);</span><br><span class="line">    //NiO服务端ServerSocketChannel</span><br><span class="line">    this.acceptSocket = ss;</span><br><span class="line">    //注册到selector指定OP_ACCEPT事件,selector在父类AbstractSelectThread中</span><br><span class="line">    this.acceptKey =</span><br><span class="line">        acceptSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">    this.selectorThreads = Collections.unmodifiableList(</span><br><span class="line">        new ArrayList&lt;SelectorThread&gt;(selectorThreads));</span><br><span class="line">    selectorIterator = this.selectorThreads.iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、AcceptThread的run方法"><a href="#19、AcceptThread的run方法" class="headerlink" title="19、AcceptThread的run方法"></a>19、AcceptThread的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        while (!stopped &amp;&amp; !acceptSocket.socket().isClosed()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //处理连接</span><br><span class="line">                select();</span><br><span class="line">            &#125; catch (RuntimeException e) &#123;</span><br><span class="line">                LOG.warn(&quot;Ignoring unexpected runtime exception&quot;, e);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                LOG.warn(&quot;Ignoring unexpected exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        closeSelector();</span><br><span class="line">        // This will wake up the selector threads, and tell the</span><br><span class="line">        // worker thread pool to begin shutdown.</span><br><span class="line">        if (!reconfiguring) &#123;                    </span><br><span class="line">            NIOServerCnxnFactory.this.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、AcceptThread的select方法"><a href="#20、AcceptThread的select方法" class="headerlink" title="20、AcceptThread的select方法"></a>20、AcceptThread的select方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void select() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //等待事件就绪</span><br><span class="line">        selector.select();</span><br><span class="line">        //获取就绪的事件</span><br><span class="line">        Iterator&lt;SelectionKey&gt; selectedKeys =</span><br><span class="line">            selector.selectedKeys().iterator();</span><br><span class="line">        while (!stopped &amp;&amp; selectedKeys.hasNext()) &#123;</span><br><span class="line">            SelectionKey key = selectedKeys.next();</span><br><span class="line">            selectedKeys.remove();</span><br><span class="line"></span><br><span class="line">            if (!key.isValid()) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (key.isAcceptable()) &#123;</span><br><span class="line">                //处理接到的请求</span><br><span class="line">                if (!doAccept()) &#123;</span><br><span class="line">                    //如果获取连接失败，由于需要释放资源，等待一段时间。</span><br><span class="line">                    pauseAccept(10);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                LOG.warn(&quot;Unexpected ops in accept select &quot;</span><br><span class="line">                         + key.readyOps());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.warn(&quot;Ignoring IOException while selecting&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、接（一、4）实例化SelectorThread"><a href="#21、接（一、4）实例化SelectorThread" class="headerlink" title="21、接（一、4）实例化SelectorThread"></a>21、接（一、4）实例化SelectorThread</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public SelectorThread(int id) throws IOException &#123;</span><br><span class="line">    super(&quot;NIOServerCxnFactory.SelectorThread-&quot; + id);</span><br><span class="line">    this.id = id;</span><br><span class="line">    //接收到的客户端请求</span><br><span class="line">    acceptedQueue = new LinkedBlockingQueue&lt;SocketChannel&gt;();</span><br><span class="line">    //待修改连接指定等待事件的队列</span><br><span class="line">    updateQueue = new LinkedBlockingQueue&lt;SelectionKey&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、SelectorThread的run方法"><a href="#22、SelectorThread的run方法" class="headerlink" title="22、SelectorThread的run方法"></a>22、SelectorThread的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        while (!stopped) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //处理请求</span><br><span class="line">                select();</span><br><span class="line">                //封装获取到的连接</span><br><span class="line">                processAcceptedConnections();</span><br><span class="line">                //修改连接指定的事件</span><br><span class="line">                processInterestOpsUpdateRequests();</span><br><span class="line">            &#125; catch (RuntimeException e) &#123;</span><br><span class="line">                LOG.warn(&quot;Ignoring unexpected runtime exception&quot;, e);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                LOG.warn(&quot;Ignoring unexpected exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //关闭连接</span><br><span class="line">        for (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">            NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class="line">            if (cnxn.isSelectable()) &#123;</span><br><span class="line">                cnxn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            cleanupSelectionKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">        SocketChannel accepted;</span><br><span class="line">        //关闭尚未处理的连接</span><br><span class="line">        while ((accepted = acceptedQueue.poll()) != null) &#123;</span><br><span class="line">            fastCloseSock(accepted);</span><br><span class="line">        &#125;</span><br><span class="line">        updateQueue.clear();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        closeSelector();</span><br><span class="line">        // This will wake up the accept thread and the other selector</span><br><span class="line">        // threads, and tell the worker thread pool to begin shutdown.</span><br><span class="line">        NIOServerCnxnFactory.this.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、建立连接"><a href="#二、建立连接" class="headerlink" title="二、建立连接"></a>二、建立连接</h3><h4 id="1、接（一、20）AcceptThread的doAccept"><a href="#1、接（一、20）AcceptThread的doAccept" class="headerlink" title="1、接（一、20）AcceptThread的doAccept"></a>1、接（一、20）AcceptThread的doAccept</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private boolean doAccept() &#123;</span><br><span class="line">    boolean accepted = false;</span><br><span class="line">    SocketChannel sc = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取连接</span><br><span class="line">        sc = acceptSocket.accept();</span><br><span class="line">        accepted = true;</span><br><span class="line">        //获取连接的客户端地址            </span><br><span class="line">        InetAddress ia = sc.socket().getInetAddress();</span><br><span class="line">        //该客户端的连接数量</span><br><span class="line">        int cnxncount = getClientCnxnCount(ia);</span><br><span class="line">        if (maxClientCnxns &gt; 0 &amp;&amp; cnxncount &gt;= maxClientCnxns)&#123;</span><br><span class="line">            throw new IOException(&quot;Too many connections from &quot; + ia</span><br><span class="line">                                  + &quot; - max is &quot; + maxClientCnxns );</span><br><span class="line">        &#125;</span><br><span class="line">        sc.configureBlocking(false);</span><br><span class="line"></span><br><span class="line">        if (!selectorIterator.hasNext()) &#123;</span><br><span class="line">            selectorIterator = selectorThreads.iterator();</span><br><span class="line">        &#125;</span><br><span class="line">        //获取处理该次取到的SocketChannel的SelectorThread对象</span><br><span class="line">        SelectorThread selectorThread = selectorIterator.next();</span><br><span class="line">        //将获取到的SocketChannel加入到acceptedQueue队列中</span><br><span class="line">        if (!selectorThread.addAcceptedConnection(sc)) &#123;</span><br><span class="line">            throw new IOException(</span><br><span class="line">                &quot;Unable to add connection to selector queue&quot;</span><br><span class="line">                + (stopped ? &quot; (shutdown in progress)&quot; : &quot;&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        acceptErrorLogger.flush();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        // accept, maxClientCnxns, configureBlocking</span><br><span class="line">        acceptErrorLogger.rateLimitLog(</span><br><span class="line">            &quot;Error accepting new connection: &quot; + e.getMessage());</span><br><span class="line">        fastCloseSock(sc);</span><br><span class="line">    &#125;</span><br><span class="line">    return accepted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、selectorThread的processAcceptedConnections方法"><a href="#2、selectorThread的processAcceptedConnections方法" class="headerlink" title="2、selectorThread的processAcceptedConnections方法"></a>2、selectorThread的processAcceptedConnections方法</h4><p>selectorThread处理连接run方法首先经过processAcceptedConnections<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void processAcceptedConnections() &#123;</span><br><span class="line">    SocketChannel accepted;</span><br><span class="line">    while (!stopped &amp;&amp; (accepted = acceptedQueue.poll()) != null) &#123;</span><br><span class="line">        SelectionKey key = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //将获取到的SocketChannel注册到selector中，指定OP_READ事件</span><br><span class="line">            key = accepted.register(selector, SelectionKey.OP_READ);</span><br><span class="line">            //将连接包装成NIOServerCnxn对象</span><br><span class="line">            NIOServerCnxn cnxn = createConnection(accepted, key, this);</span><br><span class="line">            key.attach(cnxn);</span><br><span class="line"></span><br><span class="line">            addCnxn(cnxn);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            // register, createConnection</span><br><span class="line">            cleanupSelectionKey(key);</span><br><span class="line">            fastCloseSock(accepted);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、SelectorThread的addCnxn方法"><a href="#3、SelectorThread的addCnxn方法" class="headerlink" title="3、SelectorThread的addCnxn方法"></a>3、SelectorThread的addCnxn方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void addCnxn(NIOServerCnxn cnxn) &#123;</span><br><span class="line">    //获取客户端ip</span><br><span class="line">    InetAddress addr = cnxn.getSocketAddress();</span><br><span class="line">    //该客户端连接的集合</span><br><span class="line">    Set&lt;NIOServerCnxn&gt; set = ipMap.get(addr);</span><br><span class="line"></span><br><span class="line">    if (set == null) &#123;</span><br><span class="line">        set = Collections.newSetFromMap(</span><br><span class="line">            new ConcurrentHashMap&lt;NIOServerCnxn, Boolean&gt;(2));</span><br><span class="line">        //防止其他线程已经添加</span><br><span class="line">        Set&lt;NIOServerCnxn&gt; existingSet = ipMap.putIfAbsent(addr, set);</span><br><span class="line">        if (existingSet != null) &#123;</span><br><span class="line">            set = existingSet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //加入该ip的连接集合</span><br><span class="line">    set.add(cnxn);</span><br><span class="line">    //加入连接集合</span><br><span class="line">    cnxns.add(cnxn);</span><br><span class="line">    //该方法将cnxn添加到cnxnExpiryQueue的最新时间所对应的集合中，重原来的时间对应的集合中删除</span><br><span class="line">    touchCnxn(cnxn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、SelectorThread的select方法"><a href="#4、SelectorThread的select方法" class="headerlink" title="4、SelectorThread的select方法"></a>4、SelectorThread的select方法</h4><p>processAcceptedConnections处理完，select继续处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private void select() &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">             //等待事件就绪</span><br><span class="line">             selector.select();</span><br><span class="line">             //获取就绪事件</span><br><span class="line">             Set&lt;SelectionKey&gt; selected = selector.selectedKeys();</span><br><span class="line">             ArrayList&lt;SelectionKey&gt; selectedList =</span><br><span class="line">                 new ArrayList&lt;SelectionKey&gt;(selected);</span><br><span class="line">             Collections.shuffle(selectedList);</span><br><span class="line">             Iterator&lt;SelectionKey&gt; selectedKeys = selectedList.iterator();</span><br><span class="line">             while(!stopped &amp;&amp; selectedKeys.hasNext()) &#123;</span><br><span class="line">                 获取就绪事件的key</span><br><span class="line">                 SelectionKey key = selectedKeys.next();</span><br><span class="line">                 selected.remove(key);</span><br><span class="line"></span><br><span class="line">                 if (!key.isValid()) &#123;</span><br><span class="line">                     cleanupSelectionKey(key);</span><br><span class="line">                     continue;</span><br><span class="line">                 &#125;</span><br><span class="line">                 if (key.isReadable() || key.isWritable()) &#123;</span><br><span class="line">                     //处理就绪事件的key</span><br><span class="line">                     handleIO(key);</span><br><span class="line">                 &#125; else &#123;</span><br><span class="line">                     LOG.warn(&quot;Unexpected ops in select &quot; + key.readyOps());</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">             LOG.warn(&quot;Ignoring IOException while selecting&quot;, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、SelectorThread的shandleIO方法"><a href="#5、SelectorThread的shandleIO方法" class="headerlink" title="5、SelectorThread的shandleIO方法"></a>5、SelectorThread的shandleIO方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void handleIO(SelectionKey key) &#123;</span><br><span class="line">    IOWorkRequest workRequest = new IOWorkRequest(this, key);</span><br><span class="line">    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class="line"></span><br><span class="line">    // 正在处理中的连接不可宣</span><br><span class="line">    cnxn.disableSelectable();</span><br><span class="line">    key.interestOps(0);</span><br><span class="line">    //将cnxn更新到最新时间所对应下的连接集合中</span><br><span class="line">    touchCnxn(cnxn);</span><br><span class="line">    //WorkerService对象中有一个线程池集合，用于执行线程ScheduledWorkRequest，</span><br><span class="line">    //ScheduledWorkRequest线程run方法，调用IOWorkRequest的doWork方法</span><br><span class="line">    workerPool.schedule(workRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、IOWorkRequest的doWork方法"><a href="#6、IOWorkRequest的doWork方法" class="headerlink" title="6、IOWorkRequest的doWork方法"></a>6、IOWorkRequest的doWork方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void doWork() throws InterruptedException &#123;</span><br><span class="line">    if (!key.isValid()) &#123;</span><br><span class="line">        selectorThread.cleanupSelectionKey(key);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (key.isReadable() || key.isWritable()) &#123;</span><br><span class="line">        //处理key就绪的事件</span><br><span class="line">        cnxn.doIO(key);</span><br><span class="line"></span><br><span class="line">        // Check if we shutdown or doIO() closed this connection</span><br><span class="line">        if (stopped) &#123;</span><br><span class="line">            cnxn.close();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!key.isValid()) &#123;</span><br><span class="line">            selectorThread.cleanupSelectionKey(key);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        touchCnxn(cnxn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理完成标记可选</span><br><span class="line">    cnxn.enableSelectable();</span><br><span class="line">    //将key加入updateQueue队列中</span><br><span class="line">    if (!selectorThread.addInterestOpsUpdateRequest(key)) &#123;</span><br><span class="line">        cnxn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、NIOServerCnxn的doIO方法"><a href="#7、NIOServerCnxn的doIO方法" class="headerlink" title="7、NIOServerCnxn的doIO方法"></a>7、NIOServerCnxn的doIO方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">void doIO(SelectionKey k) throws InterruptedException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (isSocketOpen() == false) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //就绪事件为读事件</span><br><span class="line">        if (k.isReadable()) &#123;</span><br><span class="line">            //数据读入缓冲区incomingBuffer</span><br><span class="line">            int rc = sock.read(incomingBuffer);</span><br><span class="line">            if (rc &lt; 0) &#123;</span><br><span class="line">                throw new EndOfStreamException(</span><br><span class="line">                        &quot;Unable to read additional data from client sessionid 0x&quot;</span><br><span class="line">                        + Long.toHexString(sessionId)</span><br><span class="line">                        + &quot;, likely client has closed socket&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (incomingBuffer.remaining() == 0) &#123;</span><br><span class="line">                boolean isPayload;</span><br><span class="line">            //相等则说明是新请求</span><br><span class="line">                if (incomingBuffer == lenBuffer) &#123; // start of next request</span><br><span class="line">                    incomingBuffer.flip();</span><br><span class="line">                    //读取头四个字节，校检长度及请求类型</span><br><span class="line">                    isPayload = readLength(k);</span><br><span class="line">                    incomingBuffer.clear();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // continuation</span><br><span class="line">                    isPayload = true;</span><br><span class="line">                &#125;</span><br><span class="line">                if (isPayload) &#123; // not the case for 4letterword</span><br><span class="line">                    //处理请求</span><br><span class="line">                    readPayload();</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    // four letter words take care</span><br><span class="line">                    // need not do anything else</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //就绪事件为写事件</span><br><span class="line">        if (k.isWritable()) &#123;</span><br><span class="line">            handleWrite(k);</span><br><span class="line"></span><br><span class="line">            if (!initialized &amp;&amp; !getReadInterest() &amp;&amp; !getWriteInterest()) &#123;</span><br><span class="line">                throw new CloseRequestException(&quot;responded to info probe&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、NIOServerCnxn的readPayload方法"><a href="#8、NIOServerCnxn的readPayload方法" class="headerlink" title="8、NIOServerCnxn的readPayload方法"></a>8、NIOServerCnxn的readPayload方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private void readPayload() throws IOException, InterruptedException &#123;</span><br><span class="line">       if (incomingBuffer.remaining() != 0) &#123; // have we read length bytes?</span><br><span class="line">       //读取客户端数据</span><br><span class="line">           int rc = sock.read(incomingBuffer); // sock is non-blocking, so ok</span><br><span class="line">           if (rc &lt; 0) &#123;</span><br><span class="line">               throw new EndOfStreamException(</span><br><span class="line">                       &quot;Unable to read additional data from client sessionid 0x&quot;</span><br><span class="line">                       + Long.toHexString(sessionId)</span><br><span class="line">                       + &quot;, likely client has closed socket&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (incomingBuffer.remaining() == 0) &#123; // have we read length bytes?</span><br><span class="line">           //记录获取到的数据包个数</span><br><span class="line">       packetReceived();</span><br><span class="line">           incomingBuffer.flip();</span><br><span class="line">           if (!initialized) &#123;</span><br><span class="line">               //读取连接请求</span><br><span class="line">               readConnectRequest();</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               //读取请求</span><br><span class="line">               readRequest();</span><br><span class="line">           &#125;</span><br><span class="line">           lenBuffer.clear();</span><br><span class="line">       //处理完成,重置</span><br><span class="line">           incomingBuffer = lenBuffer;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="9、NIOServerCnxn的readConnectRequest方法"><a href="#9、NIOServerCnxn的readConnectRequest方法" class="headerlink" title="9、NIOServerCnxn的readConnectRequest方法"></a>9、NIOServerCnxn的readConnectRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void readConnectRequest() throws IOException, InterruptedException &#123;</span><br><span class="line">       if (!isZKServerRunning()) &#123;</span><br><span class="line">           throw new IOException(&quot;ZooKeeperServer not running&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //处理连接请求</span><br><span class="line">       zkServer.processConnectRequest(this, incomingBuffer);</span><br><span class="line">       initialized = true;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="10、ZooKeeperServer的processConnectRequest方法"><a href="#10、ZooKeeperServer的processConnectRequest方法" class="headerlink" title="10、ZooKeeperServer的processConnectRequest方法"></a>10、ZooKeeperServer的processConnectRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public void processConnectRequest(ServerCnxn cnxn, ByteBuffer incomingBuffer) throws IOException &#123;</span><br><span class="line">       BinaryInputArchive bia = BinaryInputArchive.getArchive(new ByteBufferInputStream(incomingBuffer));</span><br><span class="line">       ConnectRequest connReq = new ConnectRequest();</span><br><span class="line">       //反序列化请求数据</span><br><span class="line">       connReq.deserialize(bia, &quot;connect&quot;);</span><br><span class="line">       boolean readOnly = false;</span><br><span class="line">       try &#123;</span><br><span class="line">           readOnly = bia.readBool(&quot;readOnly&quot;);</span><br><span class="line">           cnxn.isOldClient = false;</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">       //客户端非只读，而服务端为只读服务器</span><br><span class="line">       if (!readOnly &amp;&amp; this instanceof ReadOnlyZooKeeperServer) &#123;</span><br><span class="line">           String msg = &quot;Refusing session request for not-read-only client &quot;</span><br><span class="line">               + cnxn.getRemoteSocketAddress();</span><br><span class="line">           LOG.info(msg);</span><br><span class="line">           throw new CloseRequestException(msg);</span><br><span class="line">       &#125;</span><br><span class="line">       //客户端的事务id大于服务端，需要重连其他服务器</span><br><span class="line">       if (connReq.getLastZxidSeen() &gt; zkDb.dataTree.lastProcessedZxid) &#123;</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">       int sessionTimeout = connReq.getTimeOut();</span><br><span class="line">       byte passwd[] = connReq.getPasswd();</span><br><span class="line">       int minSessionTimeout = getMinSessionTimeout();</span><br><span class="line">       if (sessionTimeout &lt; minSessionTimeout) &#123;</span><br><span class="line">           sessionTimeout = minSessionTimeout;</span><br><span class="line">       &#125;</span><br><span class="line">       int maxSessionTimeout = getMaxSessionTimeout();</span><br><span class="line">       if (sessionTimeout &gt; maxSessionTimeout) &#123;</span><br><span class="line">           sessionTimeout = maxSessionTimeout;</span><br><span class="line">       &#125;</span><br><span class="line">       //协商后的Session超时事件</span><br><span class="line">       cnxn.setSessionTimeout(sessionTimeout);</span><br><span class="line">       //停止接受新的请求，把SelectionKey加入updateQueue中，见（二、17）</span><br><span class="line">       cnxn.disableRecv();</span><br><span class="line">       long sessionId = connReq.getSessionId();</span><br><span class="line">       //sessionId == 0新客户端连接，否则短线重连</span><br><span class="line">       if (sessionId == 0) &#123;</span><br><span class="line">       //创建session</span><br><span class="line">           createSession(cnxn, passwd, sessionTimeout);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           long clientSessionId = connReq.getSessionId();</span><br><span class="line">           //sessionMap中移除sessionId，关闭旧连接</span><br><span class="line">           if (serverCnxnFactory != null) &#123;</span><br><span class="line">               serverCnxnFactory.closeSession(sessionId);</span><br><span class="line">           &#125;</span><br><span class="line">           if (secureServerCnxnFactory != null) &#123;</span><br><span class="line">               secureServerCnxnFactory.closeSession(sessionId);</span><br><span class="line">           &#125;</span><br><span class="line">       //添加新sessionId</span><br><span class="line">           cnxn.setSessionId(sessionId);</span><br><span class="line">           reopenSession(cnxn, sessionId, passwd, sessionTimeout);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="11、ZooKeeperServer的createSession方法"><a href="#11、ZooKeeperServer的createSession方法" class="headerlink" title="11、ZooKeeperServer的createSession方法"></a>11、ZooKeeperServer的createSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">createSession(ServerCnxn cnxn, byte passwd[], int timeout) &#123;</span><br><span class="line">       if (passwd == null) &#123;</span><br><span class="line">           passwd = new byte[0];</span><br><span class="line">       &#125;</span><br><span class="line">       //创建session</span><br><span class="line">       long sessionId = sessionTracker.createSession(timeout);</span><br><span class="line">       Random r = new Random(sessionId ^ superSecret);</span><br><span class="line">       r.nextBytes(passwd);</span><br><span class="line">       ByteBuffer to = ByteBuffer.allocate(4);</span><br><span class="line">       to.putInt(timeout);</span><br><span class="line">       //sessionMap中加入sessionId及本连接对象</span><br><span class="line">       cnxn.setSessionId(sessionId);</span><br><span class="line">       //创建Session请求</span><br><span class="line">       Request si = new Request(cnxn, sessionId, 0, OpCode.createSession, to, null);</span><br><span class="line">       setLocalSessionFlag(si);</span><br><span class="line">       //提交请求</span><br><span class="line">       submitRequest(si);</span><br><span class="line">       return sessionId;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="12、ZooKeeperServer的submitRequest方法"><a href="#12、ZooKeeperServer的submitRequest方法" class="headerlink" title="12、ZooKeeperServer的submitRequest方法"></a>12、ZooKeeperServer的submitRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public void submitRequest(Request si) &#123;</span><br><span class="line">       if (firstProcessor == null) &#123;</span><br><span class="line">           synchronized (this) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">               //等待初始化</span><br><span class="line">                   while (state == State.INITIAL) &#123;</span><br><span class="line">                       wait(1000);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                   LOG.warn(&quot;Unexpected interruption&quot;, e);</span><br><span class="line">               &#125;</span><br><span class="line">               if (firstProcessor == null || state != State.RUNNING) &#123;</span><br><span class="line">                   throw new RuntimeException(&quot;Not started&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       try &#123;</span><br><span class="line">           touch(si.cnxn);</span><br><span class="line">           boolean validpacket = Request.isValid(si.type);</span><br><span class="line">           if (validpacket) &#123;</span><br><span class="line">               //请求加入处理器待处理请求队列,处理器为prepRequestProcessor</span><br><span class="line">               firstProcessor.processRequest(si);</span><br><span class="line">               if (si.cnxn != null) &#123;</span><br><span class="line">               //正在处理的请求加一</span><br><span class="line">                   incInProcess();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               new UnimplementedRequestProcessor().processRequest(si);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; </span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="13、prepRequestProcessor的pRequest方法"><a href="#13、prepRequestProcessor的pRequest方法" class="headerlink" title="13、prepRequestProcessor的pRequest方法"></a>13、prepRequestProcessor的pRequest方法</h4><p>prepRequestProcessor从请求队列中获取请求后调用pRequest方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">protected void pRequest(Request request) throws RequestProcessorException &#123;</span><br><span class="line">       request.setHdr(null);</span><br><span class="line">       request.setTxn(null);</span><br><span class="line"></span><br><span class="line">       try &#123;</span><br><span class="line">           switch (request.type) &#123;</span><br><span class="line">           //为不同请求生成请求对象</span><br><span class="line">           case OpCode.createContainer:</span><br><span class="line">           case OpCode.create:</span><br><span class="line">           case OpCode.create2:</span><br><span class="line">               CreateRequest create2Request = new CreateRequest();</span><br><span class="line">               pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request, true);</span><br><span class="line">               break;</span><br><span class="line">           ...</span><br><span class="line">           //create/close session don&apos;t require request record</span><br><span class="line">           case OpCode.createSession:</span><br><span class="line">           case OpCode.closeSession:</span><br><span class="line">               if (!request.isLocalSession()) &#123;</span><br><span class="line">                   pRequest2Txn(request.type, zks.getNextZxid(), request,</span><br><span class="line">                                null, true);</span><br><span class="line">               &#125;</span><br><span class="line">               break;</span><br><span class="line"></span><br><span class="line">           //下列请求只需要验证Session</span><br><span class="line">           case OpCode.sync:</span><br><span class="line">           case OpCode.exists:</span><br><span class="line">           case OpCode.getData:</span><br><span class="line">           case OpCode.getACL:</span><br><span class="line">           case OpCode.getChildren:</span><br><span class="line">           case OpCode.getChildren2:</span><br><span class="line">           case OpCode.ping:</span><br><span class="line">           case OpCode.setWatches:</span><br><span class="line">           case OpCode.checkWatches:</span><br><span class="line">           case OpCode.removeWatches:</span><br><span class="line">               zks.sessionTracker.checkSession(request.sessionId,</span><br><span class="line">                       request.getOwner());</span><br><span class="line">               break;</span><br><span class="line">           default:</span><br><span class="line">               break;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; </span><br><span class="line">       ...</span><br><span class="line">       //获取事务zxid</span><br><span class="line">       request.zxid = zks.getZxid();</span><br><span class="line">       //提交到下个处理器处理</span><br><span class="line">       nextProcessor.processRequest(request);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="14、PrepRequestProcessor的pRequest2Txn方法"><a href="#14、PrepRequestProcessor的pRequest2Txn方法" class="headerlink" title="14、PrepRequestProcessor的pRequest2Txn方法"></a>14、PrepRequestProcessor的pRequest2Txn方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">protected void pRequest2Txn(int type, long zxid, Request request,</span><br><span class="line">                            Record record, boolean deserialize)</span><br><span class="line">    throws KeeperException, IOException, RequestProcessorException</span><br><span class="line">&#123;</span><br><span class="line">    // 创建事务头</span><br><span class="line">    request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,</span><br><span class="line">            Time.currentWallTime(), type));</span><br><span class="line"></span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        ...</span><br><span class="line">        //请求类型为创建会话请求</span><br><span class="line">        case OpCode.createSession:</span><br><span class="line">            request.request.rewind();</span><br><span class="line">            int to = request.request.getInt();</span><br><span class="line">            //创建会话请求</span><br><span class="line">            request.setTxn(new CreateSessionTxn(to));</span><br><span class="line">            request.request.rewind();</span><br><span class="line">            //往sessionTrackerImpl中添加新session</span><br><span class="line">            if (request.isLocalSession()) &#123;</span><br><span class="line">                // This will add to local session tracker if it is enabled</span><br><span class="line">                zks.sessionTracker.addSession(request.sessionId, to);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Explicitly add to global session if the flag is not set</span><br><span class="line">                zks.sessionTracker.addGlobalSession(request.sessionId, to);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置该session所属的客户端</span><br><span class="line">            zks.setOwner(request.sessionId, request.getOwner());</span><br><span class="line">            break;</span><br><span class="line">        // 关闭会话请求</span><br><span class="line">        case OpCode.closeSession:</span><br><span class="line">            //获取该session对应的临时节点</span><br><span class="line">            Set&lt;String&gt; es = zks.getZKDatabase()</span><br><span class="line">                    .getEphemerals(request.sessionId);</span><br><span class="line">            synchronized (zks.outstandingChanges) &#123;</span><br><span class="line">                for (ChangeRecord c : zks.outstandingChanges) &#123;</span><br><span class="line">                    if (c.stat == null) &#123;</span><br><span class="line">                        // Doing a delete</span><br><span class="line">                        es.remove(c.path);</span><br><span class="line">                    &#125; else if (c.stat.getEphemeralOwner() == request.sessionId) &#123;</span><br><span class="line">                        //添加到零时节点路径集合</span><br><span class="line">                        es.add(c.path);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                for (String path2Delete : es) &#123;</span><br><span class="line">                    //添加变更记录</span><br><span class="line">                    addChangeRecord(new ChangeRecord(request.getHdr().getZxid(), path2Delete, null, 0, null));</span><br><span class="line">                &#125;</span><br><span class="line">                //关闭session</span><br><span class="line">                zks.sessionTracker.setSessionClosing(request.sessionId);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        ...</span><br><span class="line">        default:</span><br><span class="line">            LOG.warn(&quot;unknown type &quot; + type);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、FinalRequestProcessor的processRequest方法"><a href="#15、FinalRequestProcessor的processRequest方法" class="headerlink" title="15、FinalRequestProcessor的processRequest方法"></a>15、FinalRequestProcessor的processRequest方法</h4><p>SyncRequestProcessor的获取到请求，添加完日志文件如（一、17），之后调用FinalRequestProcessor的processRequest方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">public void processRequest(Request request) &#123;</span><br><span class="line">    // request.addRQRec(&quot;&gt;final&quot;);</span><br><span class="line">    long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class="line">    if (request.type == OpCode.ping) &#123;</span><br><span class="line">        traceMask = ZooTrace.SERVER_PING_TRACE_MASK;</span><br><span class="line">    &#125;</span><br><span class="line">    ProcessTxnResult rc = null;</span><br><span class="line">    synchronized (zks.outstandingChanges) &#123;</span><br><span class="line">        // zookeeperserver处理请求</span><br><span class="line">        rc = zks.processTxn(request);</span><br><span class="line"></span><br><span class="line">        // request.hdr is set for write requests, which are the only ones</span><br><span class="line">        // that add to outstandingChanges.</span><br><span class="line">        if (request.getHdr() != null) &#123;</span><br><span class="line">            TxnHeader hdr = request.getHdr();</span><br><span class="line">            Record txn = request.getTxn();</span><br><span class="line">            long zxid = hdr.getZxid();</span><br><span class="line">            // outstandingChanges不为空且首个元素的zxid小于等于请求的zxid，移除首个元素</span><br><span class="line">            while (!zks.outstandingChanges.isEmpty()</span><br><span class="line">                   &amp;&amp; zks.outstandingChanges.get(0).zxid &lt;= zxid) &#123;</span><br><span class="line">                ChangeRecord cr = zks.outstandingChanges.remove(0);</span><br><span class="line">                if (zks.outstandingChangesForPath.get(cr.path) == cr) &#123;</span><br><span class="line">                    // 移除cr的路径对应的记录</span><br><span class="line">                    zks.outstandingChangesForPath.remove(cr.path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 判断是否是集群范围的请求</span><br><span class="line">        if (request.isQuorum()) &#123;</span><br><span class="line">            //加入集群最近Commit提议队列</span><br><span class="line">            zks.getZKDatabase().addCommittedProposal(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //关闭连接请求，连接已关闭</span><br><span class="line">    if (request.type == OpCode.closeSession &amp;&amp; connClosedByClient(request)) &#123;</span><br><span class="line">        //关闭Session</span><br><span class="line">        if (closeSession(zks.serverCnxnFactory, request.sessionId) ||</span><br><span class="line">                closeSession(zks.secureServerCnxnFactory, request.sessionId)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (request.cnxn == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    ServerCnxn cnxn = request.cnxn;</span><br><span class="line"></span><br><span class="line">    String lastOp = &quot;NA&quot;;</span><br><span class="line">    zks.decInProcess();</span><br><span class="line">    Code err = Code.OK;</span><br><span class="line">    Record rsp = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        ...</span><br><span class="line">        switch (request.type) &#123;</span><br><span class="line">        case OpCode.ping: &#123;</span><br><span class="line">            //更新等待时间</span><br><span class="line">            zks.serverStats().updateLatency(request.createTime);</span><br><span class="line">            lastOp = &quot;PING&quot;;</span><br><span class="line">            // 更新响应的状态</span><br><span class="line">            cnxn.updateStatsForResponse(request.cxid, request.zxid, lastOp,</span><br><span class="line">                    request.createTime, Time.currentElapsedTime());</span><br><span class="line">            // 发回响应</span><br><span class="line">            cnxn.sendResponse(new ReplyHeader(-2,</span><br><span class="line">                    zks.getZKDatabase().getDataTreeLastProcessedZxid(), 0), null, &quot;response&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        case OpCode.createSession: &#123;</span><br><span class="line">            zks.serverStats().updateLatency(request.createTime);</span><br><span class="line">            lastOp = &quot;SESS&quot;;</span><br><span class="line">            // 更新响应的状态</span><br><span class="line">            cnxn.updateStatsForResponse(request.cxid, request.zxid, lastOp,</span><br><span class="line">                    request.createTime, Time.currentElapsedTime());</span><br><span class="line">            //完成session的初始化</span><br><span class="line">            zks.finishSessionInit(request.cnxn, true);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="16、ZooKeeperServer的processTxn方法"><a href="#16、ZooKeeperServer的processTxn方法" class="headerlink" title="16、ZooKeeperServer的processTxn方法"></a>16、ZooKeeperServer的processTxn方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private ProcessTxnResult processTxn(Request request, TxnHeader hdr,</span><br><span class="line">                                    Record txn) &#123;</span><br><span class="line">    ProcessTxnResult rc;</span><br><span class="line">    int opCode = request != null ? request.type : hdr.getType();</span><br><span class="line">    long sessionId = request != null ? request.sessionId : hdr.getClientId();</span><br><span class="line">    //无请求头为读请求</span><br><span class="line">    if (hdr != null) &#123;</span><br><span class="line">        //处理普通请求</span><br><span class="line">        rc = getZKDatabase().processTxn(hdr, txn);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //读请求处理结果，空的，后续会处理。</span><br><span class="line">        rc = new ProcessTxnResult();</span><br><span class="line">    &#125;</span><br><span class="line">    if (opCode == OpCode.createSession) &#123;</span><br><span class="line">        if (hdr != null &amp;&amp; txn instanceof CreateSessionTxn) &#123;</span><br><span class="line">            CreateSessionTxn cst = (CreateSessionTxn) txn;</span><br><span class="line">            //添加session</span><br><span class="line">            sessionTracker.addGlobalSession(sessionId, cst.getTimeOut());</span><br><span class="line">        &#125; else if (request != null &amp;&amp; request.isLocalSession()) &#123;</span><br><span class="line">            request.request.rewind();</span><br><span class="line">            int timeout = request.request.getInt();</span><br><span class="line">            request.request.rewind();</span><br><span class="line">            //添加session</span><br><span class="line">            sessionTracker.addSession(request.sessionId, timeout);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (opCode == OpCode.closeSession) &#123;</span><br><span class="line">        //关闭session</span><br><span class="line">        sessionTracker.removeSession(sessionId);</span><br><span class="line">    &#125;</span><br><span class="line">    return rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（二、15）ZooKeeperServer的finishSessionInit方法"><a href="#17、接（二、15）ZooKeeperServer的finishSessionInit方法" class="headerlink" title="17、接（二、15）ZooKeeperServer的finishSessionInit方法"></a>17、接（二、15）ZooKeeperServer的finishSessionInit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public void finishSessionInit(ServerCnxn cnxn, boolean valid) &#123;</span><br><span class="line">    ...</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建连接请求返回</span><br><span class="line">        ConnectResponse rsp = new ConnectResponse(0, valid ? cnxn.getSessionTimeout()</span><br><span class="line">                : 0, valid ? cnxn.getSessionId() : 0, // send 0 if session is no</span><br><span class="line">                        // longer valid</span><br><span class="line">                        valid ? generatePasswd(cnxn.getSessionId()) : new byte[16]);</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">        bos.writeInt(-1, &quot;len&quot;);</span><br><span class="line">        rsp.serialize(bos, &quot;connect&quot;);</span><br><span class="line">        if (!cnxn.isOldClient) &#123;</span><br><span class="line">            bos.writeBool(</span><br><span class="line">                    this instanceof ReadOnlyZooKeeperServer, &quot;readOnly&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        baos.close();</span><br><span class="line">        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());</span><br><span class="line">        bb.putInt(bb.remaining() - 4).rewind();</span><br><span class="line">        //发送返回数据包裹</span><br><span class="line">        cnxn.sendBuffer(bb);</span><br><span class="line"></span><br><span class="line">        if (valid) &#123;</span><br><span class="line">            //连接已完成，允许接受新请求</span><br><span class="line">            cnxn.enableRecv();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cnxn.sendBuffer(ServerCnxnFactory.closeConn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        cnxn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、SelectorThread的processInterestOpsUpdateRequests方法"><a href="#18、SelectorThread的processInterestOpsUpdateRequests方法" class="headerlink" title="18、SelectorThread的processInterestOpsUpdateRequests方法"></a>18、SelectorThread的processInterestOpsUpdateRequests方法</h4><p>连接建立完成，允许key接受读取事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void processInterestOpsUpdateRequests() &#123;</span><br><span class="line">    SelectionKey key;</span><br><span class="line">    while (!stopped &amp;&amp; (key = updateQueue.poll()) != null) &#123;</span><br><span class="line">        if (!key.isValid()) &#123;</span><br><span class="line">            cleanupSelectionKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">        NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class="line">        if (cnxn.isSelectable()) &#123;</span><br><span class="line">            //key指定事件</span><br><span class="line">            key.interestOps(cnxn.getInterestOps());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，连接就建立完成了。</p><h3 id="三、create请求处理过程"><a href="#三、create请求处理过程" class="headerlink" title="三、create请求处理过程"></a>三、create请求处理过程</h3><h4 id="1、接（二、8）NIOServerCnxn的readRequest-方法"><a href="#1、接（二、8）NIOServerCnxn的readRequest-方法" class="headerlink" title="1、接（二、8）NIOServerCnxn的readRequest 方法"></a>1、接（二、8）NIOServerCnxn的readRequest 方法</h4><p>处理普通连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private void readRequest() throws IOException &#123;</span><br><span class="line">    zkServer.processPacket(this, incomingBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ZooKeeperServer的processPacket方法"><a href="#2、ZooKeeperServer的processPacket方法" class="headerlink" title="2、ZooKeeperServer的processPacket方法"></a>2、ZooKeeperServer的processPacket方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void processPacket(ServerCnxn cnxn, ByteBuffer incomingBuffer) throws IOException &#123;</span><br><span class="line">    // We have the request, now process and setup for next</span><br><span class="line">    InputStream bais = new ByteBufferInputStream(incomingBuffer);</span><br><span class="line">    BinaryInputArchive bia = BinaryInputArchive.getArchive(bais);</span><br><span class="line">    RequestHeader h = new RequestHeader();</span><br><span class="line">    h.deserialize(bia, &quot;header&quot;);</span><br><span class="line">    incomingBuffer = incomingBuffer.slice();</span><br><span class="line">    if (h.getType() == OpCode.auth) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (h.getType() == OpCode.sasl) &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //封装请求</span><br><span class="line">            Request si = new Request(cnxn, cnxn.getSessionId(), h.getXid(),</span><br><span class="line">              h.getType(), incomingBuffer, cnxn.getAuthInfo());</span><br><span class="line">            si.setOwner(ServerCnxn.me);</span><br><span class="line">            setLocalSessionFlag(si);</span><br><span class="line">            //将请求加入处理器等待队列（见二、12）</span><br><span class="line">            submitRequest(si);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //提交但还未返回的请求数增加1</span><br><span class="line">    cnxn.incrOutstandingRequests(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、PrepRequestProcessor的pRequest2Txn方法"><a href="#3、PrepRequestProcessor的pRequest2Txn方法" class="headerlink" title="3、PrepRequestProcessor的pRequest2Txn方法"></a>3、PrepRequestProcessor的pRequest2Txn方法</h4><p>前面和创建session请求相同，直到pRequest2Txn<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected void pRequest2Txn(int type, long zxid, Request request,</span><br><span class="line">                            Record record, boolean deserialize)</span><br><span class="line">    throws KeeperException, IOException, RequestProcessorException</span><br><span class="line">&#123;</span><br><span class="line">    request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,</span><br><span class="line">            Time.currentWallTime(), type));</span><br><span class="line"></span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case OpCode.create:</span><br><span class="line">        case OpCode.create2:</span><br><span class="line">        case OpCode.createTTL:</span><br><span class="line">        case OpCode.createContainer: &#123;</span><br><span class="line">            //处理增加请求</span><br><span class="line">            pRequest2TxnCreate(type, request, record, deserialize);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        default:</span><br><span class="line">            LOG.warn(&quot;unknown type &quot; + type);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、PrepRequestProcessor的pRequest2TxnCreate方法"><a href="#4、PrepRequestProcessor的pRequest2TxnCreate方法" class="headerlink" title="4、PrepRequestProcessor的pRequest2TxnCreate方法"></a>4、PrepRequestProcessor的pRequest2TxnCreate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">private void pRequest2TxnCreate(int type, Request request, Record record, boolean deserialize) throws IOException, KeeperException &#123;</span><br><span class="line">    if (deserialize) &#123;</span><br><span class="line">        ByteBufferInputStream.byteBuffer2Record(request.request, record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int flags;</span><br><span class="line">    String path;</span><br><span class="line">    List&lt;ACL&gt; acl;</span><br><span class="line">    byte[] data;</span><br><span class="line">    long ttl;</span><br><span class="line">    if (type == OpCode.createTTL) &#123;</span><br><span class="line">        CreateTTLRequest createTtlRequest = (CreateTTLRequest)record;</span><br><span class="line">        flags = createTtlRequest.getFlags();</span><br><span class="line">        path = createTtlRequest.getPath();</span><br><span class="line">        acl = createTtlRequest.getAcl();</span><br><span class="line">        data = createTtlRequest.getData();</span><br><span class="line">        ttl = createTtlRequest.getTtl();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        CreateRequest createRequest = (CreateRequest)record;</span><br><span class="line">        flags = createRequest.getFlags();</span><br><span class="line">        path = createRequest.getPath();</span><br><span class="line">        acl = createRequest.getAcl();</span><br><span class="line">        data = createRequest.getData();</span><br><span class="line">        ttl = -1;</span><br><span class="line">    &#125;</span><br><span class="line">    CreateMode createMode = CreateMode.fromFlag(flags);</span><br><span class="line">    validateCreateRequest(path, createMode, request, ttl);</span><br><span class="line">    String parentPath = validatePathForCreate(path, request.sessionId);</span><br><span class="line"></span><br><span class="line">    List&lt;ACL&gt; listACL = fixupACL(path, request.authInfo, acl);</span><br><span class="line">    //父节点的最新变化记录</span><br><span class="line">    ChangeRecord parentRecord = getRecordForPath(parentPath);</span><br><span class="line">    checkACL(zks, request.cnxn, parentRecord.acl, ZooDefs.Perms.CREATE, request.authInfo, path, listACL);</span><br><span class="line">    //父节点修改次数</span><br><span class="line">    int parentCVersion = parentRecord.stat.getCversion();</span><br><span class="line">    //按顺序创建</span><br><span class="line">    if (createMode.isSequential()) &#123;</span><br><span class="line">        path = path + String.format(Locale.ENGLISH, &quot;%010d&quot;, parentCVersion);</span><br><span class="line">    &#125;</span><br><span class="line">    validatePath(path, request.sessionId);</span><br><span class="line">    try &#123;</span><br><span class="line">        if (getRecordForPath(path) != null) &#123;</span><br><span class="line">            throw new KeeperException.NodeExistsException(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (KeeperException.NoNodeException e) &#123;</span><br><span class="line">        // ignore this one</span><br><span class="line">    &#125;</span><br><span class="line">    //临时节点不允许创建子节点</span><br><span class="line">    boolean ephemeralParent = EphemeralType.get(parentRecord.stat.getEphemeralOwner()) == EphemeralType.NORMAL;</span><br><span class="line">    if (ephemeralParent) &#123;</span><br><span class="line">        throw new KeeperException.NoChildrenForEphemeralsException(path);</span><br><span class="line">    &#125;</span><br><span class="line">    //子节点修改次数</span><br><span class="line">    int newCversion = parentRecord.stat.getCversion()+1;</span><br><span class="line">    //创建具体事务</span><br><span class="line">    if (type == OpCode.createContainer) &#123;</span><br><span class="line">        request.setTxn(new CreateContainerTxn(path, data, listACL, newCversion));</span><br><span class="line">    &#125; else if (type == OpCode.createTTL) &#123;</span><br><span class="line">        request.setTxn(new CreateTTLTxn(path, data, listACL, newCversion, ttl));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        request.setTxn(new CreateTxn(path, data, listACL, createMode.isEphemeral(),</span><br><span class="line">                newCversion));</span><br><span class="line">    &#125;</span><br><span class="line">    StatPersisted s = new StatPersisted();</span><br><span class="line">    if (createMode.isEphemeral()) &#123;</span><br><span class="line">        s.setEphemeralOwner(request.sessionId);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建最新的父节点变化记录</span><br><span class="line">    parentRecord = parentRecord.duplicate(request.getHdr().getZxid());</span><br><span class="line">    parentRecord.childCount++;</span><br><span class="line">    parentRecord.stat.setCversion(newCversion);</span><br><span class="line">    //添加父节点最新的变化记录</span><br><span class="line">    addChangeRecord(parentRecord);</span><br><span class="line">    //添加本节点最新的变化记录</span><br><span class="line">    addChangeRecord(new ChangeRecord(request.getHdr().getZxid(), path, s, 0, listACL));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、FinalRequestProcessor的processRequest方法"><a href="#5、FinalRequestProcessor的processRequest方法" class="headerlink" title="5、FinalRequestProcessor的processRequest方法"></a>5、FinalRequestProcessor的processRequest方法</h4><p>SyncRequestProcessor处理也与创建session相同，直到FinalRequestProcessor的processRequest方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">public void processRequest(Request request) &#123;</span><br><span class="line">    ...</span><br><span class="line">    ProcessTxnResult rc = null;</span><br><span class="line">    synchronized (zks.outstandingChanges) &#123;</span><br><span class="line">        //处理请求</span><br><span class="line">        rc = zks.processTxn(request);</span><br><span class="line"></span><br><span class="line">        // request.hdr is set for write requests, which are the only ones</span><br><span class="line">        // that add to outstandingChanges.</span><br><span class="line">        if (request.getHdr() != null) &#123;</span><br><span class="line">            TxnHeader hdr = request.getHdr();</span><br><span class="line">            Record txn = request.getTxn();</span><br><span class="line">            long zxid = hdr.getZxid();</span><br><span class="line">            while (!zks.outstandingChanges.isEmpty()</span><br><span class="line">                   &amp;&amp; zks.outstandingChanges.get(0).zxid &lt;= zxid) &#123;</span><br><span class="line">                ChangeRecord cr = zks.outstandingChanges.remove(0);</span><br><span class="line">                if (cr.zxid &lt; zxid) &#123;</span><br><span class="line">                    LOG.warn(&quot;Zxid outstanding &quot; + cr.zxid</span><br><span class="line">                             + &quot; is less than current &quot; + zxid);</span><br><span class="line">                &#125;</span><br><span class="line">                if (zks.outstandingChangesForPath.get(cr.path) == cr) &#123;</span><br><span class="line">                    zks.outstandingChangesForPath.remove(cr.path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // do not add non quorum packets to the queue.</span><br><span class="line">        if (request.isQuorum()) &#123;</span><br><span class="line">            zks.getZKDatabase().addCommittedProposal(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    try &#123;</span><br><span class="line">        ...</span><br><span class="line">        switch (request.type) &#123;</span><br><span class="line">        ...</span><br><span class="line">        case OpCode.create: &#123;</span><br><span class="line">            lastOp = &quot;CREA&quot;;</span><br><span class="line">            //创建请求返回</span><br><span class="line">            rsp = new CreateResponse(rc.path);</span><br><span class="line">            err = Code.get(rc.err);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        case OpCode.create2:</span><br><span class="line">        case OpCode.createTTL:</span><br><span class="line">        case OpCode.createContainer: &#123;</span><br><span class="line">            lastOp = &quot;CREA&quot;;</span><br><span class="line">            //创建请求返回</span><br><span class="line">            rsp = new Create2Response(rc.path, rc.stat);</span><br><span class="line">            err = Code.get(rc.err);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch ...</span><br><span class="line">    //获取最近的一个事务编号</span><br><span class="line">    long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();</span><br><span class="line">    //创建返回头</span><br><span class="line">    ReplyHeader hdr =</span><br><span class="line">        new ReplyHeader(request.cxid, lastZxid, err.intValue());</span><br><span class="line"></span><br><span class="line">    zks.serverStats().updateLatency(request.createTime);</span><br><span class="line">    //更新响应状态</span><br><span class="line">    cnxn.updateStatsForResponse(request.cxid, lastZxid, lastOp,</span><br><span class="line">                request.createTime, Time.currentElapsedTime());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //返回数据</span><br><span class="line">        cnxn.sendResponse(hdr, rsp, &quot;response&quot;);</span><br><span class="line">        if (request.type == OpCode.closeSession) &#123;</span><br><span class="line">            cnxn.sendCloseSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.error(&quot;FIXMSG&quot;,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、DataTree的processTxn方法"><a href="#6、DataTree的processTxn方法" class="headerlink" title="6、DataTree的processTxn方法"></a>6、DataTree的processTxn方法</h4><p>之后与（二、15）同，接（二、16）依次调用ZKDatabase、DataTree的processTxn方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public ProcessTxnResult processTxn(TxnHeader header, Record txn)</span><br><span class="line">&#123;</span><br><span class="line">    ProcessTxnResult rc = new ProcessTxnResult();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        rc.clientId = header.getClientId();</span><br><span class="line">        rc.cxid = header.getCxid();</span><br><span class="line">        rc.zxid = header.getZxid();</span><br><span class="line">        rc.type = header.getType();</span><br><span class="line">        rc.err = 0;</span><br><span class="line">        rc.multiResult = null;</span><br><span class="line">        switch (header.getType()) &#123;</span><br><span class="line">            case OpCode.create:</span><br><span class="line">                CreateTxn createTxn = (CreateTxn) txn;</span><br><span class="line">                rc.path = createTxn.getPath();</span><br><span class="line">                createNode(</span><br><span class="line">                        createTxn.getPath(),</span><br><span class="line">                        createTxn.getData(),</span><br><span class="line">                        createTxn.getAcl(),</span><br><span class="line">                        createTxn.getEphemeral() ? header.getClientId() : 0,</span><br><span class="line">                        createTxn.getParentCVersion(),</span><br><span class="line">                        header.getZxid(), header.getTime(), null);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch </span><br><span class="line">    ...</span><br><span class="line">    //更新最新处理Zxid</span><br><span class="line">    if (rc.zxid &gt; lastProcessedZxid) &#123;</span><br><span class="line">        lastProcessedZxid = rc.zxid;</span><br><span class="line">    &#125;</span><br><span class="line">    //要创建的节点已存在</span><br><span class="line">    if (header.getType() == OpCode.create &amp;&amp;</span><br><span class="line">            rc.err == Code.NODEEXISTS.intValue()) &#123;</span><br><span class="line">        int lastSlash = rc.path.lastIndexOf(&apos;/&apos;);</span><br><span class="line">        String parentName = rc.path.substring(0, lastSlash);</span><br><span class="line">        CreateTxn cTxn = (CreateTxn)txn;</span><br><span class="line">        try &#123;</span><br><span class="line">            //更新节点相关信息（修改次数、Zxid）</span><br><span class="line">            setCversionPzxid(parentName, cTxn.getParentCVersion(),</span><br><span class="line">                    header.getZxid());</span><br><span class="line">        &#125; catch (KeeperException.NoNodeException e) &#123;</span><br><span class="line">            LOG.error(&quot;Failed to set parent cversion for: &quot; +</span><br><span class="line">                  parentName, e);</span><br><span class="line">            rc.err = e.code().intValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (rc.err != Code.OK.intValue()) &#123;</span><br><span class="line">        LOG.debug(&quot;Ignoring processTxn failure hdr: &quot; + header.getType() +</span><br><span class="line">              &quot; : error: &quot; + rc.err);</span><br><span class="line">    &#125;</span><br><span class="line">    return rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7、DataTree的createNode方法"><a href="#7、DataTree的createNode方法" class="headerlink" title="7、DataTree的createNode方法"></a>7、DataTree的createNode方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">public void createNode(final String path, byte data[], List&lt;ACL&gt; acl,</span><br><span class="line">        long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat)</span><br><span class="line">        throws KeeperException.NoNodeException,</span><br><span class="line">        KeeperException.NodeExistsException &#123;</span><br><span class="line">    int lastSlash = path.lastIndexOf(&apos;/&apos;);</span><br><span class="line">    String parentName = path.substring(0, lastSlash);</span><br><span class="line">    String childName = path.substring(lastSlash + 1);</span><br><span class="line">    StatPersisted stat = new StatPersisted();</span><br><span class="line">    stat.setCtime(time);</span><br><span class="line">    stat.setMtime(time);</span><br><span class="line">    stat.setCzxid(zxid);</span><br><span class="line">    stat.setMzxid(zxid);</span><br><span class="line">    stat.setPzxid(zxid);</span><br><span class="line">    stat.setVersion(0);</span><br><span class="line">    stat.setAversion(0);</span><br><span class="line">    stat.setEphemeralOwner(ephemeralOwner);</span><br><span class="line">    //父节点</span><br><span class="line">    DataNode parent = nodes.get(parentName);</span><br><span class="line">    if (parent == null) &#123;</span><br><span class="line">        throw new KeeperException.NoNodeException();</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (parent) &#123;</span><br><span class="line">        //父节点的子节点集合</span><br><span class="line">        Set&lt;String&gt; children = parent.getChildren();</span><br><span class="line">        if (children.contains(childName)) &#123;</span><br><span class="line">            throw new KeeperException.NodeExistsException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (parentCVersion == -1) &#123;</span><br><span class="line">            parentCVersion = parent.stat.getCversion();</span><br><span class="line">            parentCVersion++;</span><br><span class="line">        &#125;</span><br><span class="line">        parent.stat.setCversion(parentCVersion);</span><br><span class="line">        parent.stat.setPzxid(zxid);</span><br><span class="line">        Long longval = aclCache.convertAcls(acl);</span><br><span class="line">        //创建节点</span><br><span class="line">        DataNode child = new DataNode(data, longval, stat);</span><br><span class="line">        //添加子节点名</span><br><span class="line">        parent.addChild(childName);</span><br><span class="line">        //添加子节点</span><br><span class="line">        nodes.put(path, child);</span><br><span class="line">        //节点类型</span><br><span class="line">        EphemeralType ephemeralType = EphemeralType.get(ephemeralOwner);</span><br><span class="line">        if (ephemeralType == EphemeralType.CONTAINER) &#123;</span><br><span class="line">            containers.add(path);</span><br><span class="line">        &#125; else if (ephemeralType == EphemeralType.TTL) &#123;</span><br><span class="line">            ttls.add(path);</span><br><span class="line">        &#125; else if (ephemeralOwner != 0) &#123;</span><br><span class="line">            //添加入零时节点</span><br><span class="line">            HashSet&lt;String&gt; list = ephemerals.get(ephemeralOwner);</span><br><span class="line">            if (list == null) &#123;</span><br><span class="line">                list = new HashSet&lt;String&gt;();</span><br><span class="line">                ephemerals.put(ephemeralOwner, list);</span><br><span class="line">            &#125;</span><br><span class="line">            synchronized (list) &#123;</span><br><span class="line">                list.add(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (outputStat != null) &#123;</span><br><span class="line">            child.copyStat(outputStat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // now check if its one of the zookeeper node child</span><br><span class="line">    if (parentName.startsWith(quotaZookeeper)) &#123;</span><br><span class="line">        // now check if its the limit node</span><br><span class="line">        if (Quotas.limitNode.equals(childName)) &#123;</span><br><span class="line">            // this is the limit node</span><br><span class="line">            // get the parent and add it to the trie</span><br><span class="line">            pTrie.addPath(parentName.substring(quotaZookeeper.length()));</span><br><span class="line">        &#125;</span><br><span class="line">        if (Quotas.statNode.equals(childName)) &#123;</span><br><span class="line">            updateQuotaForPath(parentName</span><br><span class="line">                    .substring(quotaZookeeper.length()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // also check to update the quotas for this node</span><br><span class="line">    String lastPrefix = getMaxPrefixWithQuota(path);</span><br><span class="line">    if(lastPrefix != null) &#123;</span><br><span class="line">        // ok we have some match and need to update</span><br><span class="line">        updateCount(lastPrefix, 1);</span><br><span class="line">        updateBytes(lastPrefix, data == null ? 0 : data.length);</span><br><span class="line">    &#125;</span><br><span class="line">    //触发该事件对应的监听器</span><br><span class="line">    dataWatches.triggerWatch(path, Event.EventType.NodeCreated);</span><br><span class="line">    childWatches.triggerWatch(parentName.equals(&quot;&quot;) ? &quot;/&quot; : parentName,</span><br><span class="line">            Event.EventType.NodeChildrenChanged);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建节点到这里就结束了</p><h3 id="四、exists请求添加监听器，处理过程"><a href="#四、exists请求添加监听器，处理过程" class="headerlink" title="四、exists请求添加监听器，处理过程"></a>四、exists请求添加监听器，处理过程</h3><h4 id="1、接（三、5）PrepRequestProcessor的processRequest方法"><a href="#1、接（三、5）PrepRequestProcessor的processRequest方法" class="headerlink" title="1、接（三、5）PrepRequestProcessor的processRequest方法"></a>1、接（三、5）PrepRequestProcessor的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public void processRequest(Request request) &#123;</span><br><span class="line">    ...</span><br><span class="line">    try &#123;</span><br><span class="line">        ...</span><br><span class="line">        switch (request.type) &#123;</span><br><span class="line">        ...</span><br><span class="line">        case OpCode.exists: &#123;</span><br><span class="line">            lastOp = &quot;EXIS&quot;;</span><br><span class="line">            // TODO we need to figure out the security requirement for this!</span><br><span class="line">            ExistsRequest existsRequest = new ExistsRequest();</span><br><span class="line">            ByteBufferInputStream.byteBuffer2Record(request.request,</span><br><span class="line">                    existsRequest);</span><br><span class="line">            String path = existsRequest.getPath();</span><br><span class="line">            if (path.indexOf(&apos;\0&apos;) != -1) &#123;</span><br><span class="line">                throw new KeeperException.BadArgumentsException();</span><br><span class="line">            &#125;</span><br><span class="line">            //注册监听器</span><br><span class="line">            Stat stat = zks.getZKDatabase().statNode(path, existsRequest</span><br><span class="line">                    .getWatch() ? cnxn : null);</span><br><span class="line">            rsp = new ExistsResponse(stat);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();</span><br><span class="line">    ReplyHeader hdr =</span><br><span class="line">        new ReplyHeader(request.cxid, lastZxid, err.intValue());</span><br><span class="line"></span><br><span class="line">    zks.serverStats().updateLatency(request.createTime);</span><br><span class="line">    cnxn.updateStatsForResponse(request.cxid, lastZxid, lastOp,</span><br><span class="line">                request.createTime, Time.currentElapsedTime());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //发送返回数据</span><br><span class="line">        cnxn.sendResponse(hdr, rsp, &quot;response&quot;);</span><br><span class="line">        if (request.type == OpCode.closeSession) &#123;</span><br><span class="line">            cnxn.sendCloseSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.error(&quot;FIXMSG&quot;,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DataTree的statNode方法"><a href="#2、DataTree的statNode方法" class="headerlink" title="2、DataTree的statNode方法"></a>2、DataTree的statNode方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Stat statNode(String path, Watcher watcher)</span><br><span class="line">        throws KeeperException.NoNodeException &#123;</span><br><span class="line">    Stat stat = new Stat();</span><br><span class="line">    //快速获取节点</span><br><span class="line">    DataNode n = nodes.get(path);</span><br><span class="line">    if (watcher != null) &#123;</span><br><span class="line">        //监听器添加到集合中</span><br><span class="line">        dataWatches.addWatch(path, watcher);</span><br><span class="line">    &#125;</span><br><span class="line">    if (n == null) &#123;</span><br><span class="line">        throw new KeeperException.NoNodeException();</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (n) &#123;</span><br><span class="line">        //获取节点状态信息</span><br><span class="line">        n.copyStat(stat);</span><br><span class="line">        return stat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册监听器，到这儿就结束了。<br>单机版服务端源码介绍到此就结束了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、服务器启动过程&quot;&gt;&lt;a href=&quot;#一、服务器启动过程&quot; class=&quot;headerlink&quot; title=&quot;一、服务器启动过程&quot;&gt;&lt;/a&gt;一、服务器启动过程&lt;/h3&gt;&lt;h4 id=&quot;1、ZooKeeperServerMain的nitializeAndRun
      
    
    </summary>
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>zookeeper源码分布式服务端（2）</title>
    <link href="http://yoursite.com/2020/01/13/zookeeper%E6%BA%90%E7%A0%81/zookeeper%E6%BA%90%E7%A0%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2020/01/13/zookeeper源码/zookeeper源码分布式服务端（2）/</id>
    <published>2020-01-13T14:32:38.116Z</published>
    <updated>2018-08-06T12:47:07.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、分布式CREATE事务处理过程Leader部分"><a href="#一、分布式CREATE事务处理过程Leader部分" class="headerlink" title="一、分布式CREATE事务处理过程Leader部分"></a>一、分布式CREATE事务处理过程Leader部分</h3><h4 id="1、LeaderRequestProcessor的processRequest方法"><a href="#1、LeaderRequestProcessor的processRequest方法" class="headerlink" title="1、LeaderRequestProcessor的processRequest方法"></a>1、LeaderRequestProcessor的processRequest方法</h4><p>前面与单机版类似，分布式Leader的firstProcessor为LeaderRequestProcessor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void processRequest(Request request)</span><br><span class="line">        throws RequestProcessorException &#123;</span><br><span class="line">    Request upgradeRequest = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        upgradeRequest = lzks.checkUpgradeSession(request);</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">    if (upgradeRequest != null) &#123;</span><br><span class="line">        nextProcessor.processRequest(upgradeRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    //PrepRequestProcessor继续处理请求</span><br><span class="line">    nextProcessor.processRequest(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、PrepRequestProcessor的run方法"><a href="#2、PrepRequestProcessor的run方法" class="headerlink" title="2、PrepRequestProcessor的run方法"></a>2、PrepRequestProcessor的run方法</h4><p>leader接受到follower转发的事务后PrepRequestProcessor来处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Request request = submittedRequests.take();</span><br><span class="line">            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class="line">            if (request.type == OpCode.ping) &#123;</span><br><span class="line">                traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;</span><br><span class="line">            &#125;</span><br><span class="line">            if (Request.requestOfDeath == request) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            pRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RequestProcessorException e) &#123;</span><br><span class="line">        handleException(this.getName(), e);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        handleException(this.getName(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    LOG.info(&quot;PrepRequestProcessor exited loop!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>pRequest(request)与单机版类似，调用ProposalRequestProcessor继续处理request</p><h4 id="3、ProposalRequestProcessor的processRequest方法"><a href="#3、ProposalRequestProcessor的processRequest方法" class="headerlink" title="3、ProposalRequestProcessor的processRequest方法"></a>3、ProposalRequestProcessor的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void processRequest(Request request) throws RequestProcessorException &#123;</span><br><span class="line">    if (request instanceof LearnerSyncRequest)&#123;</span><br><span class="line">        zks.getLeader().processSync((LearnerSyncRequest)request);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //先交给CommitProcessor处理下，request加入queuedRequests队列</span><br><span class="line">        nextProcessor.processRequest(request);</span><br><span class="line">        if (request.getHdr() != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //发起一个事务投票</span><br><span class="line">                zks.getLeader().propose(request);</span><br><span class="line">            &#125; catch (XidRolloverException e) &#123;</span><br><span class="line">                throw new RequestProcessorException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            //事务写进log，并完成投票</span><br><span class="line">            syncProcessor.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、CommitProcessor的run方法"><a href="#4、CommitProcessor的run方法" class="headerlink" title="4、CommitProcessor的run方法"></a>4、CommitProcessor的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        int requestsToProcess = 0;</span><br><span class="line">        boolean commitIsWaiting = false;</span><br><span class="line">        do &#123;</span><br><span class="line">            //有投票完成的事务需要commit</span><br><span class="line">            commitIsWaiting = !committedRequests.isEmpty();</span><br><span class="line">            //需要处理的事务</span><br><span class="line">            requestsToProcess =  queuedRequests.size();</span><br><span class="line">            if (requestsToProcess == 0 &amp;&amp; !commitIsWaiting)&#123;</span><br><span class="line">                synchronized (this) &#123;</span><br><span class="line">                    //没有事务待处理，等待</span><br><span class="line">                    while (!stopped &amp;&amp; requestsToProcess == 0</span><br><span class="line">                            &amp;&amp; !commitIsWaiting) &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                        commitIsWaiting = !committedRequests.isEmpty();</span><br><span class="line">                        requestsToProcess = queuedRequests.size();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            Request request = null;</span><br><span class="line">            while (!stopped &amp;&amp; requestsToProcess &gt; 0</span><br><span class="line">                    &amp;&amp; (request = queuedRequests.poll()) != null) &#123;</span><br><span class="line">                requestsToProcess--;</span><br><span class="line">                //事务请求需要投票,或该session有事务请求，则非事务请求也要按顺序处理</span><br><span class="line">                if (needCommit(request)</span><br><span class="line">                        || pendingRequests.containsKey(request.sessionId)) &#123;</span><br><span class="line">                    // Add request to pending</span><br><span class="line">                    LinkedList&lt;Request&gt; requests = pendingRequests</span><br><span class="line">                            .get(request.sessionId);</span><br><span class="line">                    if (requests == null) &#123;</span><br><span class="line">                        requests = new LinkedList&lt;Request&gt;();</span><br><span class="line">                        pendingRequests.put(request.sessionId, requests);</span><br><span class="line">                    &#125;</span><br><span class="line">                    requests.addLast(request);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    //ToBeAppliedRequestProcessor继续处理</span><br><span class="line">                    sendToNextProcessor(request);</span><br><span class="line">                &#125;</span><br><span class="line">                if (!pendingRequests.isEmpty() &amp;&amp; !committedRequests.isEmpty())&#123;</span><br><span class="line">                    //有投票完成，待处理的事务</span><br><span class="line">                    commitIsWaiting = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (commitIsWaiting &amp;&amp; !stopped)&#123;</span><br><span class="line">                //有事务正在处理，等待</span><br><span class="line">                waitForEmptyPool();</span><br><span class="line"></span><br><span class="line">                if (stopped)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Process committed head</span><br><span class="line">                if ((request = committedRequests.poll()) == null) &#123;</span><br><span class="line">                    throw new IOException(&quot;Error: committed head is null&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //该session下所有待处理的请求</span><br><span class="line">                LinkedList&lt;Request&gt; sessionQueue = pendingRequests</span><br><span class="line">                        .get(request.sessionId);</span><br><span class="line">                if (sessionQueue != null) &#123;</span><br><span class="line">                    // If session queue != null, then it is also not empty.</span><br><span class="line">                    Request topPending = sessionQueue.poll();</span><br><span class="line">                    if (request.cxid != topPending.cxid) &#123;</span><br><span class="line">                        sessionQueue.addFirst(topPending);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        topPending.setHdr(request.getHdr());</span><br><span class="line">                        topPending.setTxn(request.getTxn());</span><br><span class="line">                        topPending.zxid = request.zxid;</span><br><span class="line">                        request = topPending;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //ToBeAppliedRequestProcessor继续处理</span><br><span class="line">                sendToNextProcessor(request);</span><br><span class="line"></span><br><span class="line">                waitForEmptyPool();</span><br><span class="line"></span><br><span class="line">                //继续处理该session下的非事务请求</span><br><span class="line">                if (sessionQueue != null) &#123;</span><br><span class="line">                    while (!stopped &amp;&amp; !sessionQueue.isEmpty()</span><br><span class="line">                            &amp;&amp; !needCommit(sessionQueue.peek())) &#123;</span><br><span class="line">                        sendToNextProcessor(sessionQueue.poll());</span><br><span class="line">                    &#125;</span><br><span class="line">                    // Remove empty queues</span><br><span class="line">                    if (sessionQueue.isEmpty()) &#123;</span><br><span class="line">                        pendingRequests.remove(request.sessionId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; while (!stoppedMainLoop);</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        handleException(this.getName(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    LOG.info(&quot;CommitProcessor exited loop!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、3）Leader的propose方法"><a href="#5、接（一、3）Leader的propose方法" class="headerlink" title="5、接（一、3）Leader的propose方法"></a>5、接（一、3）Leader的propose方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public Proposal propose(Request request) throws XidRolloverException &#123;</span><br><span class="line">    //事务zxid超过32位，重新选举Leader</span><br><span class="line">    if ((request.zxid &amp; 0xffffffffL) == 0xffffffffL) &#123;</span><br><span class="line">        String msg =</span><br><span class="line">                &quot;zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start&quot;;</span><br><span class="line">        shutdown(msg);</span><br><span class="line">        throw new XidRolloverException(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">    try &#123;</span><br><span class="line">        request.getHdr().serialize(boa, &quot;hdr&quot;);</span><br><span class="line">        if (request.getTxn() != null) &#123;</span><br><span class="line">            request.getTxn().serialize(boa, &quot;txn&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        baos.close();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        LOG.warn(&quot;This really should be impossible&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line">    QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, request.zxid,</span><br><span class="line">            baos.toByteArray(), null);</span><br><span class="line"></span><br><span class="line">    Proposal p = new Proposal();</span><br><span class="line">    p.packet = pp;</span><br><span class="line">    p.request = request;                </span><br><span class="line">    </span><br><span class="line">    synchronized(this) &#123;</span><br><span class="line">       p.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class="line">               </span><br><span class="line">       if (request.getHdr().getType() == OpCode.reconfig)&#123;</span><br><span class="line">           self.setLastSeenQuorumVerifier(request.qv, true);                       </span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       if (self.getQuorumVerifier().getVersion()&lt;self.getLastSeenQuorumVerifier().getVersion()) &#123;</span><br><span class="line">           p.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class="line">       &#125;</span><br><span class="line">               </span><br><span class="line">        lastProposed = p.packet.getZxid();</span><br><span class="line">        //leader发起提议的集合</span><br><span class="line">        outstandingProposals.put(lastProposed, p);</span><br><span class="line">        //向follower发送提议</span><br><span class="line">        sendPacket(pp);</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、3）AckRequestProcessor的processRequest方法"><a href="#6、接（一、3）AckRequestProcessor的processRequest方法" class="headerlink" title="6、接（一、3）AckRequestProcessor的processRequest方法"></a>6、接（一、3）AckRequestProcessor的processRequest方法</h4><p>syncProcessor将事务写入日志与单机版相同，之后AckRequestProcessor继续处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void processRequest(Request request) &#123;</span><br><span class="line">    QuorumPeer self = leader.self;</span><br><span class="line">    if(self != null)</span><br><span class="line">        //处理投票</span><br><span class="line">        leader.processAck(self.getId(), request.zxid, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7、Leader的processAck方法"><a href="#7、Leader的processAck方法" class="headerlink" title="7、Leader的processAck方法"></a>7、Leader的processAck方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">synchronized public void processAck(long sid, long zxid, SocketAddress followerAddr) &#123;        </span><br><span class="line">    if (!allowedToCommit) return; // last op committed was a leader change - from now on </span><br><span class="line">                                 // the new leader should commit       </span><br><span class="line">    if ((zxid &amp; 0xffffffffL) == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;     </span><br><span class="line">    //没有待处理的提议   </span><br><span class="line">    if (outstandingProposals.size() == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //提议已被处理</span><br><span class="line">    if (lastCommitted &gt;= zxid) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //待投票的提议</span><br><span class="line">    Proposal p = outstandingProposals.get(zxid);</span><br><span class="line">    if (p == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //向提议中添加服务器</span><br><span class="line">    p.addAck(sid);        </span><br><span class="line">    //尝试提交事务</span><br><span class="line">    boolean hasCommitted = tryToCommit(p, zxid, followerAddr);</span><br><span class="line"></span><br><span class="line">    if (hasCommitted &amp;&amp; p.request!=null &amp;&amp; p.request.getHdr().getType() == OpCode.reconfig)&#123;</span><br><span class="line">           long curZxid = zxid;</span><br><span class="line">       while (allowedToCommit &amp;&amp; hasCommitted &amp;&amp; p!=null)&#123;</span><br><span class="line">           curZxid++;</span><br><span class="line">           p = outstandingProposals.get(curZxid);</span><br><span class="line">           if (p !=null) hasCommitted = tryToCommit(p, curZxid, null);             </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、Leader的tryToCommit方法"><a href="#8、Leader的tryToCommit方法" class="headerlink" title="8、Leader的tryToCommit方法"></a>8、Leader的tryToCommit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">synchronized public boolean tryToCommit(Proposal p, long zxid, SocketAddress followerAddr) &#123;       </span><br><span class="line">   </span><br><span class="line">   if (outstandingProposals.containsKey(zxid - 1)) return false;</span><br><span class="line">   </span><br><span class="line">   //判断是否超过半数follower完成投票</span><br><span class="line">    if (!p.hasAllQuorums()) &#123;</span><br><span class="line">       return false;                 </span><br><span class="line">    &#125;  </span><br><span class="line">    //从待投票的集合中移除</span><br><span class="line">    outstandingProposals.remove(zxid);</span><br><span class="line">    </span><br><span class="line">    if (p.request != null) &#123;</span><br><span class="line">         //已投票待commit的request</span><br><span class="line">         toBeApplied.add(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (p.request == null) &#123;</span><br><span class="line">        LOG.warn(&quot;Going to commmit null: &quot; + p);</span><br><span class="line">    &#125; else if (p.request.getHdr().getType() == OpCode.reconfig) &#123;       </span><br><span class="line">        Long designatedLeader = getDesignatedLeader(p, zxid);</span><br><span class="line">       </span><br><span class="line">        QuorumVerifier newQV = p.qvAcksetPairs.get(p.qvAcksetPairs.size()-1).getQuorumVerifier();</span><br><span class="line">   </span><br><span class="line">        self.processReconfig(newQV, designatedLeader, zk.getZxid(), true);</span><br><span class="line"></span><br><span class="line">        if (designatedLeader != self.getId()) &#123;</span><br><span class="line">            allowedToCommit = false;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        commitAndActivate(zxid, designatedLeader);</span><br><span class="line">        informAndActivate(p, designatedLeader);</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //向follower发送commit</span><br><span class="line">        commit(zxid);</span><br><span class="line">        inform(p);</span><br><span class="line">    &#125;</span><br><span class="line">    //commit该事务</span><br><span class="line">    zk.commitProcessor.commit(p.request);</span><br><span class="line">    if(pendingSyncs.containsKey(zxid))&#123;</span><br><span class="line">        for(LearnerSyncRequest r: pendingSyncs.remove(zxid)) &#123;</span><br><span class="line">            sendSync(r);</span><br><span class="line">        &#125;               </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    return  true;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、CommitProcessor的commit方法"><a href="#9、CommitProcessor的commit方法" class="headerlink" title="9、CommitProcessor的commit方法"></a>9、CommitProcessor的commit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void commit(Request request) &#123;</span><br><span class="line">    if (stopped || request == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //事务加入已commit集合</span><br><span class="line">    committedRequests.add(request);</span><br><span class="line">    wakeup();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、4）ToBeAppliedRequestProcessor的processRequest方法"><a href="#10、接（一、4）ToBeAppliedRequestProcessor的processRequest方法" class="headerlink" title="10、接（一、4）ToBeAppliedRequestProcessor的processRequest方法"></a>10、接（一、4）ToBeAppliedRequestProcessor的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void processRequest(Request request) throws RequestProcessorException &#123;</span><br><span class="line">        //FinalRequestProcessor处理请求，修改内存db结构，与单机版相同</span><br><span class="line">        next.processRequest(request);</span><br><span class="line"></span><br><span class="line">        // 事务请求,处理完内存之后将事务提议从toBeApplied集合中删除</span><br><span class="line">        if (request.getHdr() != null) &#123;</span><br><span class="line">            long zxid = request.getHdr().getZxid();</span><br><span class="line">            Iterator&lt;Proposal&gt; iter = leader.toBeApplied.iterator();</span><br><span class="line">            if (iter.hasNext()) &#123;</span><br><span class="line">                Proposal p = iter.next();</span><br><span class="line">                if (p.request != null &amp;&amp; p.request.zxid == zxid) &#123;</span><br><span class="line">                    iter.remove();</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="二、分布式CREATE事务处理过程Follower部分"><a href="#二、分布式CREATE事务处理过程Follower部分" class="headerlink" title="二、分布式CREATE事务处理过程Follower部分"></a>二、分布式CREATE事务处理过程Follower部分</h3><h4 id="1、FollowerRequestProcessor的run方法"><a href="#1、FollowerRequestProcessor的run方法" class="headerlink" title="1、FollowerRequestProcessor的run方法"></a>1、FollowerRequestProcessor的run方法</h4><p>前面的处理于单机版相同，分布式Follower的firstProcessor为FollowerRequestProcessor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        while (!finished) &#123;</span><br><span class="line">            Request request = queuedRequests.take();</span><br><span class="line">            if (request == Request.requestOfDeath) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //先交给CommitProcessor，最终投票通过后，会通过CommitProcessor的commit方法最终提交事务 </span><br><span class="line">            nextProcessor.processRequest(request);</span><br><span class="line"></span><br><span class="line">            //只有事务请求才转发给leader，进行投票  </span><br><span class="line">            switch (request.type) &#123;</span><br><span class="line">            case OpCode.sync:</span><br><span class="line">                zks.pendingSyncs.add(request);</span><br><span class="line">                zks.getFollower().request(request);</span><br><span class="line">                break;</span><br><span class="line">            case OpCode.create:</span><br><span class="line">            case OpCode.create2:</span><br><span class="line">            case OpCode.createTTL:</span><br><span class="line">            case OpCode.createContainer:</span><br><span class="line">            case OpCode.delete:</span><br><span class="line">            case OpCode.deleteContainer:</span><br><span class="line">            case OpCode.setData:</span><br><span class="line">            case OpCode.reconfig:</span><br><span class="line">            case OpCode.setACL:</span><br><span class="line">            case OpCode.multi:</span><br><span class="line">            case OpCode.check:</span><br><span class="line">                zks.getFollower().request(request);</span><br><span class="line">                break;</span><br><span class="line">            case OpCode.createSession:</span><br><span class="line">            case OpCode.closeSession:</span><br><span class="line">                // Don&apos;t forward local sessions to the leader.</span><br><span class="line">                if (!request.isLocalSession()) &#123;</span><br><span class="line">                    zks.getFollower().request(request);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        handleException(this.getName(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、Learner的request方法"><a href="#2、Learner的request方法" class="headerlink" title="2、Learner的request方法"></a>2、Learner的request方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void request(Request request) throws IOException &#123;</span><br><span class="line">    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">    DataOutputStream oa = new DataOutputStream(baos);</span><br><span class="line">    oa.writeLong(request.sessionId);</span><br><span class="line">    oa.writeInt(request.cxid);</span><br><span class="line">    oa.writeInt(request.type);</span><br><span class="line">    if (request.request != null) &#123;</span><br><span class="line">        request.request.rewind();</span><br><span class="line">        int len = request.request.remaining();</span><br><span class="line">        byte b[] = new byte[len];</span><br><span class="line">        request.request.get(b);</span><br><span class="line">        request.request.rewind();</span><br><span class="line">        oa.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">    oa.close();</span><br><span class="line">    QuorumPacket qp = new QuorumPacket(Leader.REQUEST, -1, baos</span><br><span class="line">            .toByteArray(), request.authInfo);</span><br><span class="line">    //转发事务请求给leader</span><br><span class="line">    writePacket(qp, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Follower的readPacket方法"><a href="#3、Follower的readPacket方法" class="headerlink" title="3、Follower的readPacket方法"></a>3、Follower的readPacket方法</h4><p>Follower的followLeader的中的主循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void readPacket(QuorumPacket pp) throws IOException &#123;</span><br><span class="line">    synchronized (leaderIs) &#123;</span><br><span class="line">        //读取leader返回数据</span><br><span class="line">        leaderIs.readRecord(pp, &quot;packet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    long traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;</span><br><span class="line">    if (pp.getType() == Leader.PING) &#123;</span><br><span class="line">        traceMask = ZooTrace.SERVER_PING_TRACE_MASK;</span><br><span class="line">    &#125;</span><br><span class="line">    if (LOG.isTraceEnabled()) &#123;</span><br><span class="line">        ZooTrace.logQuorumPacket(LOG, traceMask, &apos;i&apos;, pp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、Follower的processPacket方法"><a href="#4、Follower的processPacket方法" class="headerlink" title="4、Follower的processPacket方法"></a>4、Follower的processPacket方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">protected void processPacket(QuorumPacket qp) throws Exception&#123;</span><br><span class="line">     switch (qp.getType()) &#123;</span><br><span class="line">     case Leader.PING:            </span><br><span class="line">         ping(qp);            </span><br><span class="line">         break;</span><br><span class="line">     case Leader.PROPOSAL:           </span><br><span class="line">         TxnHeader hdr = new TxnHeader();</span><br><span class="line">         Record txn = SerializeUtils.deserializeTxn(qp.getData(), hdr);</span><br><span class="line">         lastQueued = hdr.getZxid();</span><br><span class="line">         </span><br><span class="line">         if (hdr.getType() == OpCode.reconfig)&#123;</span><br><span class="line">            SetDataTxn setDataTxn = (SetDataTxn) txn;       </span><br><span class="line">            QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData()));</span><br><span class="line">            self.setLastSeenQuorumVerifier(qv, true);                               </span><br><span class="line">         &#125;</span><br><span class="line">         //添加日志文件，并完成投票</span><br><span class="line">         fzk.logRequest(hdr, txn);</span><br><span class="line">         break;</span><br><span class="line">     case Leader.COMMIT:</span><br><span class="line">         //Leader完成事务投票，发来commit</span><br><span class="line">         fzk.commit(qp.getZxid());</span><br><span class="line">         break;            </span><br><span class="line">     case Leader.COMMITANDACTIVATE:</span><br><span class="line">        // get the new configuration from the request</span><br><span class="line">        Request request = fzk.pendingTxns.element();</span><br><span class="line">        SetDataTxn setDataTxn = (SetDataTxn) request.getTxn();                                                                                                      </span><br><span class="line">        QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData()));                                </span><br><span class="line"> </span><br><span class="line">        // get new designated leader from (current) leader&apos;s message</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(qp.getData());    </span><br><span class="line">        long suggestedLeaderId = buffer.getLong();</span><br><span class="line">         boolean majorChange = </span><br><span class="line">                self.processReconfig(qv, suggestedLeaderId, qp.getZxid(), true);</span><br><span class="line">        // commit (writes the new config to ZK tree (/zookeeper/config)                     </span><br><span class="line">        fzk.commit(qp.getZxid());</span><br><span class="line">         if (majorChange) &#123;</span><br><span class="line">            throw new Exception(&quot;changes proposed in reconfig&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">     case Leader.UPTODATE:</span><br><span class="line">         LOG.error(&quot;Received an UPTODATE message after Follower started&quot;);</span><br><span class="line">         break;</span><br><span class="line">     case Leader.REVALIDATE:</span><br><span class="line">         revalidate(qp);</span><br><span class="line">         break;</span><br><span class="line">     case Leader.SYNC:</span><br><span class="line">         fzk.sync();</span><br><span class="line">         break;</span><br><span class="line">     default:</span><br><span class="line">         LOG.warn(&quot;Unknown packet type: &#123;&#125;&quot;, LearnerHandler.packetToString(qp));</span><br><span class="line">         break;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="5、FollowerZooKeeperServer的logRequest方法"><a href="#5、FollowerZooKeeperServer的logRequest方法" class="headerlink" title="5、FollowerZooKeeperServer的logRequest方法"></a>5、FollowerZooKeeperServer的logRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void logRequest(TxnHeader hdr, Record txn) &#123;</span><br><span class="line">    Request request = new Request(hdr.getClientId(), hdr.getCxid(), hdr.getType(), hdr, txn, hdr.getZxid());</span><br><span class="line">    if ((request.zxid &amp; 0xffffffffL) != 0) &#123;</span><br><span class="line">        pendingTxns.add(request);</span><br><span class="line">    &#125;</span><br><span class="line">    syncProcessor.processRequest(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Follower的SyncRequestProcessor与Leader相同，后续处理器为SendAckRequestProcessor</p><h4 id="6、SendAckRequestProcessor的processRequest方法"><a href="#6、SendAckRequestProcessor的processRequest方法" class="headerlink" title="6、SendAckRequestProcessor的processRequest方法"></a>6、SendAckRequestProcessor的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void processRequest(Request si) &#123;</span><br><span class="line">    if(si.type != OpCode.sync)&#123;</span><br><span class="line">        QuorumPacket qp = new QuorumPacket(Leader.ACK, si.getHdr().getZxid(), null,</span><br><span class="line">            null);</span><br><span class="line">        try &#123;</span><br><span class="line">            //向leader发送事务成功的投票信息</span><br><span class="line">            learner.writePacket(qp, false);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>follower接到Leader发来的commit之后，CommitProcessor完成commit，FinalRequestProcessor将事务写进内存db。<br>Create事务到此就结束了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、分布式CREATE事务处理过程Leader部分&quot;&gt;&lt;a href=&quot;#一、分布式CREATE事务处理过程Leader部分&quot; class=&quot;headerlink&quot; title=&quot;一、分布式CREATE事务处理过程Leader部分&quot;&gt;&lt;/a&gt;一、分布式CREATE
      
    
    </summary>
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>zookeeper源码分布式服务端（1）</title>
    <link href="http://yoursite.com/2020/01/13/zookeeper%E6%BA%90%E7%A0%81/zookeeper%E6%BA%90%E7%A0%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2020/01/13/zookeeper源码/zookeeper源码分布式服务端（1）/</id>
    <published>2020-01-13T14:32:38.113Z</published>
    <updated>2018-08-05T12:05:28.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、LEADER选举过程"><a href="#一、LEADER选举过程" class="headerlink" title="一、LEADER选举过程"></a>一、LEADER选举过程</h3><h4 id="1、QuorumPeerMain的runFromConfig方法"><a href="#1、QuorumPeerMain的runFromConfig方法" class="headerlink" title="1、QuorumPeerMain的runFromConfig方法"></a>1、QuorumPeerMain的runFromConfig方法</h4><p>分布式zookeeper启动入口为QuorumPeerMain的main方法，之后调用了runFromConfig方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public void runFromConfig(QuorumPeerConfig config)</span><br><span class="line">        throws IOException, AdminServerException</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  try &#123;</span><br><span class="line">      ServerCnxnFactory cnxnFactory = null;</span><br><span class="line">      ServerCnxnFactory secureCnxnFactory = null;</span><br><span class="line">      //创建连接工厂与单机版相同</span><br><span class="line">      if (config.getClientPortAddress() != null) &#123;</span><br><span class="line">          cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">          cnxnFactory.configure(config.getClientPortAddress(),</span><br><span class="line">                  config.getMaxClientCnxns(),</span><br><span class="line">                  false);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (config.getSecureClientPortAddress() != null) &#123;</span><br><span class="line">          secureCnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">          secureCnxnFactory.configure(config.getSecureClientPortAddress(),</span><br><span class="line">                  config.getMaxClientCnxns(),</span><br><span class="line">                  true);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      quorumPeer = getQuorumPeer();</span><br><span class="line">      //设置日志及快照文件</span><br><span class="line">      quorumPeer.setTxnFactory(new FileTxnSnapLog(</span><br><span class="line">                  config.getDataLogDir(),</span><br><span class="line">                  config.getDataDir()));</span><br><span class="line">      quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());</span><br><span class="line">      quorumPeer.enableLocalSessionsUpgrading(</span><br><span class="line">          config.isLocalSessionsUpgradingEnabled());</span><br><span class="line">      //集群机器地址</span><br><span class="line">      quorumPeer.setQuorumPeers(config.getAllMembers());</span><br><span class="line">      //leader选择器类型</span><br><span class="line">      quorumPeer.setElectionType(config.getElectionAlg());</span><br><span class="line">      //本机的集群编号</span><br><span class="line">      quorumPeer.setMyid(config.getServerId());</span><br><span class="line">      //服务器单位时间</span><br><span class="line">      quorumPeer.setTickTime(config.getTickTime());</span><br><span class="line">      quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());</span><br><span class="line">      quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());</span><br><span class="line">      //LF初始通信时限</span><br><span class="line">      quorumPeer.setInitLimit(config.getInitLimit());</span><br><span class="line">      //LF同步通信时限</span><br><span class="line">      quorumPeer.setSyncLimit(config.getSyncLimit());</span><br><span class="line">      quorumPeer.setConfigFileName(config.getConfigFilename());</span><br><span class="line">      //内存数据</span><br><span class="line">      quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));</span><br><span class="line">      //投票决定方式，默认超过半数就通过  </span><br><span class="line">      quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);</span><br><span class="line">      if (config.getLastSeenQuorumVerifier()!=null) &#123;</span><br><span class="line">          quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);</span><br><span class="line">      &#125;</span><br><span class="line">      quorumPeer.initConfigInZKDatabase();</span><br><span class="line">      //设置连接工厂</span><br><span class="line">      quorumPeer.setCnxnFactory(cnxnFactory);</span><br><span class="line">      quorumPeer.setSecureCnxnFactory(secureCnxnFactory);</span><br><span class="line">      quorumPeer.setLearnerType(config.getPeerType());</span><br><span class="line">      quorumPeer.setSyncEnabled(config.getSyncEnabled());</span><br><span class="line">      quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());</span><br><span class="line"></span><br><span class="line">      // sets quorum sasl authentication configurations</span><br><span class="line">      quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);</span><br><span class="line">      if(quorumPeer.isQuorumSaslAuthEnabled())&#123;</span><br><span class="line">          quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);</span><br><span class="line">          quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);</span><br><span class="line">          quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);</span><br><span class="line">          quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);</span><br><span class="line">          quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);</span><br><span class="line">      &#125;</span><br><span class="line">      quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);</span><br><span class="line">      quorumPeer.initialize();</span><br><span class="line">      //启动主线程 </span><br><span class="line">      quorumPeer.start();</span><br><span class="line">      quorumPeer.join();</span><br><span class="line">  &#125; catch (InterruptedException e) &#123;</span><br><span class="line">      // warn, but generally this is ok</span><br><span class="line">      LOG.warn(&quot;Quorum Peer interrupted&quot;, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、QuorumPeer的start方法"><a href="#2、QuorumPeer的start方法" class="headerlink" title="2、QuorumPeer的start方法"></a>2、QuorumPeer的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void start() &#123;</span><br><span class="line">    if (!getView().containsKey(myid)) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;My id &quot; + myid + &quot; not in the peer list&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //恢复本机数据</span><br><span class="line">    loadDataBase();</span><br><span class="line">    //启动连接工厂</span><br><span class="line">    startServerCnxnFactory();</span><br><span class="line">    try &#123;</span><br><span class="line">        //内嵌的管理控制台是通过jetty启动,占用8080 端口</span><br><span class="line">        adminServer.start();</span><br><span class="line">    &#125; catch (AdminServerException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    //开始投票</span><br><span class="line">    startLeaderElection();</span><br><span class="line">    //主流程</span><br><span class="line">    super.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、QuorumPeer的startLeaderElection方法"><a href="#3、QuorumPeer的startLeaderElection方法" class="headerlink" title="3、QuorumPeer的startLeaderElection方法"></a>3、QuorumPeer的startLeaderElection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">synchronized public void startLeaderElection() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (getPeerState() == ServerState.LOOKING) &#123;</span><br><span class="line">            //首次投票给自己</span><br><span class="line">            currentVote = new Vote(myid, getLastLoggedZxid(), getCurrentEpoch());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch(IOException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">        throw re;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建选举器</span><br><span class="line">    this.electionAlg = createElectionAlgorithm(electionType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、QuorumPeer的createElectionAlgorithm方法"><a href="#4、QuorumPeer的createElectionAlgorithm方法" class="headerlink" title="4、QuorumPeer的createElectionAlgorithm方法"></a>4、QuorumPeer的createElectionAlgorithm方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> protected Election createElectionAlgorithm(int electionAlgorithm)&#123;</span><br><span class="line">    Election le=null;</span><br><span class="line">    //TODO: use a factory rather than a switch</span><br><span class="line">    switch (electionAlgorithm) &#123;</span><br><span class="line">    case 1:</span><br><span class="line">        le = new AuthFastLeaderElection(this);</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        le = new AuthFastLeaderElection(this, true);</span><br><span class="line">        break;</span><br><span class="line">    case 3:</span><br><span class="line">        //leader选举通信管理类</span><br><span class="line">        qcm = createCnxnManager();</span><br><span class="line">        QuorumCnxManager.Listener listener = qcm.listener;</span><br><span class="line">        if(listener != null)&#123;</span><br><span class="line">            //启动已绑定3888端口的选举线程，等待集群其他机器连接</span><br><span class="line">            listener.start();</span><br><span class="line">            //基于TCP的选举算法</span><br><span class="line">            FastLeaderElection fle = new FastLeaderElection(this, qcm);</span><br><span class="line">            fle.start();</span><br><span class="line">            le = fle;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            LOG.error(&quot;Null listener when initializing cnx manager&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        assert false;</span><br><span class="line">    &#125;</span><br><span class="line">    return le;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、实例化QuorumCnxManager"><a href="#5、实例化QuorumCnxManager" class="headerlink" title="5、实例化QuorumCnxManager"></a>5、实例化QuorumCnxManager</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public QuorumCnxManager(QuorumPeer self,</span><br><span class="line">                        final long mySid,</span><br><span class="line">                        Map&lt;Long,QuorumPeer.QuorumServer&gt; view,</span><br><span class="line">                        QuorumAuthServer authServer,</span><br><span class="line">                        QuorumAuthLearner authLearner,</span><br><span class="line">                        int socketTimeout,</span><br><span class="line">                        boolean listenOnAllIPs,</span><br><span class="line">                        int quorumCnxnThreadsSize,</span><br><span class="line">                        boolean quorumSaslAuthEnabled) &#123;</span><br><span class="line">    //接收到的投票消息队列</span><br><span class="line">    this.recvQueue = new ArrayBlockingQueue&lt;Message&gt;(RECV_CAPACITY);</span><br><span class="line">    //往其他服务器待发送消息队列</span><br><span class="line">    this.queueSendMap = new ConcurrentHashMap&lt;Long, ArrayBlockingQueue&lt;ByteBuffer&gt;&gt;();</span><br><span class="line">    //往其他服务器发送消息线程</span><br><span class="line">    this.senderWorkerMap = new ConcurrentHashMap&lt;Long, SendWorker&gt;();</span><br><span class="line">    //往其他服务器发送的最新消息</span><br><span class="line">    this.lastMessageSent = new ConcurrentHashMap&lt;Long, ByteBuffer&gt;();</span><br><span class="line">    </span><br><span class="line">    String cnxToValue = System.getProperty(&quot;zookeeper.cnxTimeout&quot;);</span><br><span class="line">    if(cnxToValue != null)&#123;</span><br><span class="line">        this.cnxTO = Integer.parseInt(cnxToValue);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    this.self = self;</span><br><span class="line"></span><br><span class="line">    this.mySid = mySid;</span><br><span class="line">    this.socketTimeout = socketTimeout;</span><br><span class="line">    this.view = view;</span><br><span class="line">    //各服务器ip</span><br><span class="line">    this.listenOnAllIPs = listenOnAllIPs;</span><br><span class="line"></span><br><span class="line">    initializeAuth(mySid, authServer, authLearner, quorumCnxnThreadsSize,</span><br><span class="line">            quorumSaslAuthEnabled);</span><br><span class="line"></span><br><span class="line">    //等待其他服务器连接的线程</span><br><span class="line">    listener = new Listener();</span><br><span class="line">    listener.setName(&quot;QuorumPeerListener&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、4）Listener的run方法"><a href="#6、接（一、4）Listener的run方法" class="headerlink" title="6、接（一、4）Listener的run方法"></a>6、接（一、4）Listener的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    //重连次数</span><br><span class="line">    int numRetries = 0;</span><br><span class="line">    InetSocketAddress addr;</span><br><span class="line">    Socket client = null;</span><br><span class="line">    while((!shutdown) &amp;&amp; (numRetries &lt; 3))&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //启动Socket服务端</span><br><span class="line">            ss = new ServerSocket();</span><br><span class="line">            ss.setReuseAddress(true);</span><br><span class="line">            if (self.getQuorumListenOnAllIPs()) &#123;</span><br><span class="line">                int port = self.getElectionAddress().getPort();</span><br><span class="line">                addr = new InetSocketAddress(port);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Resolve hostname for this server in case the</span><br><span class="line">                // underlying ip address has changed.</span><br><span class="line">                self.recreateSocketAddresses(self.getId());</span><br><span class="line">                addr = self.getElectionAddress();</span><br><span class="line">            &#125;</span><br><span class="line">            setName(addr.toString());</span><br><span class="line">            ss.bind(addr);</span><br><span class="line">            while (!shutdown) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    client = ss.accept();</span><br><span class="line">                    setSockOpts(client);</span><br><span class="line">                    LOG.info(&quot;Received connection request &quot;</span><br><span class="line">                             + client.getRemoteSocketAddress());</span><br><span class="line">                    if (quorumSaslAuthEnabled) &#123;</span><br><span class="line">                        receiveConnectionAsync(client);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //处理接收到的连接</span><br><span class="line">                        receiveConnection(client);</span><br><span class="line">                    &#125;</span><br><span class="line">                    numRetries = 0;</span><br><span class="line">                &#125; catch (SocketTimeoutException e) &#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            if (shutdown) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            numRetries++;</span><br><span class="line">            try &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch </span><br><span class="line">            ...</span><br><span class="line">            closeSocket(client);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、Listener的receiveConnection方法"><a href="#7、Listener的receiveConnection方法" class="headerlink" title="7、Listener的receiveConnection方法"></a>7、Listener的receiveConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void receiveConnection(final Socket sock) &#123;</span><br><span class="line">    DataInputStream din = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        din = new DataInputStream(</span><br><span class="line">                new BufferedInputStream(sock.getInputStream()));</span><br><span class="line">        //处理收到连接的数据</span><br><span class="line">        handleConnection(sock, din);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        closeSocket(sock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、Listener的handleConnection方法"><a href="#8、Listener的handleConnection方法" class="headerlink" title="8、Listener的handleConnection方法"></a>8、Listener的handleConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">private void handleConnection(Socket sock, DataInputStream din)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    Long sid = null, protocolVersion = null;</span><br><span class="line">    InetSocketAddress electionAddr = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //协议版本号</span><br><span class="line">        protocolVersion = din.readLong();</span><br><span class="line">        if (protocolVersion &gt;= 0) &#123; // this is a server id and not a protocol version</span><br><span class="line">            sid = protocolVersion;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                InitialMessage init = InitialMessage.parse(protocolVersion, din);</span><br><span class="line">                sid = init.sid;</span><br><span class="line">                //连接地址</span><br><span class="line">                electionAddr = init.electionAddr;</span><br><span class="line">            &#125; catch (InitialMessage.InitialMessageException ex) &#123;</span><br><span class="line">                LOG.error(ex.toString());</span><br><span class="line">                closeSocket(sock);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //连接的是只读服务器</span><br><span class="line">        if (sid == QuorumPeer.OBSERVER_ID) &#123;</span><br><span class="line">            sid = observerCounter.getAndDecrement();</span><br><span class="line">            LOG.info(&quot;Setting arbitrary identifier to observer: &quot; + sid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        closeSocket(sock);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // do authenticating learner</span><br><span class="line">    authServer.authenticate(sock, din);</span><br><span class="line"></span><br><span class="line">    //由序号大的服务器向小的发起连接</span><br><span class="line">    if (sid &lt; self.getId()) &#123;</span><br><span class="line">        //关掉发送消息线程</span><br><span class="line">        SendWorker sw = senderWorkerMap.get(sid);</span><br><span class="line">        if (sw != null) &#123;</span><br><span class="line">            sw.finish();</span><br><span class="line">        &#125;</span><br><span class="line">        //关闭连接</span><br><span class="line">        closeSocket(sock);</span><br><span class="line"></span><br><span class="line">        if (electionAddr != null) &#123;</span><br><span class="line">            //发起连接</span><br><span class="line">            connectOne(sid, electionAddr);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            connectOne(sid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123; // Otherwise start worker threads to receive data.</span><br><span class="line">        //发送消息线程</span><br><span class="line">        SendWorker sw = new SendWorker(sock, sid);</span><br><span class="line">        //接受消息线程</span><br><span class="line">        RecvWorker rw = new RecvWorker(sock, din, sid, sw);</span><br><span class="line">        sw.setRecv(rw);</span><br><span class="line"></span><br><span class="line">        SendWorker vsw = senderWorkerMap.get(sid);</span><br><span class="line">        //关闭旧线程</span><br><span class="line">        if (vsw != null) &#123;</span><br><span class="line">            vsw.finish();</span><br><span class="line">        &#125;</span><br><span class="line">        //添加新线程</span><br><span class="line">        senderWorkerMap.put(sid, sw);</span><br><span class="line">        //等待发送的投票信息</span><br><span class="line">        queueSendMap.putIfAbsent(sid,</span><br><span class="line">                new ArrayBlockingQueue&lt;ByteBuffer&gt;(SEND_CAPACITY));</span><br><span class="line">        </span><br><span class="line">        sw.start();</span><br><span class="line">        rw.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、Listener的connectOne方法"><a href="#9、Listener的connectOne方法" class="headerlink" title="9、Listener的connectOne方法"></a>9、Listener的connectOne方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">synchronized private boolean connectOne(long sid, InetSocketAddress electionAddr)&#123;</span><br><span class="line">    if (senderWorkerMap.get(sid) != null) &#123;</span><br><span class="line">        //发送消息线程已存在，则已连接上</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Socket sock = null;</span><br><span class="line">    try &#123;</span><br><span class="line">         sock = new Socket();</span><br><span class="line">         setSockOpts(sock);</span><br><span class="line">         //发起连接</span><br><span class="line">         sock.connect(electionAddr, cnxTO);</span><br><span class="line">        if (quorumSaslAuthEnabled) &#123;</span><br><span class="line">            initiateConnectionAsync(sock, sid);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //初始化连接</span><br><span class="line">            initiateConnection(sock, sid);</span><br><span class="line">        &#125;</span><br><span class="line">         return true;</span><br><span class="line">     &#125; catch (UnresolvedAddressException e) &#123;</span><br><span class="line">         closeSocket(sock);</span><br><span class="line">         throw e;</span><br><span class="line">     &#125; catch (IOException e) &#123;</span><br><span class="line">         closeSocket(sock);</span><br><span class="line">         return false;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、Listener的startConnection方法"><a href="#10、Listener的startConnection方法" class="headerlink" title="10、Listener的startConnection方法"></a>10、Listener的startConnection方法</h4><p>initiateConnection方法调用startConnection方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">private boolean startConnection(Socket sock, Long sid)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    DataOutputStream dout = null;</span><br><span class="line">    DataInputStream din = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        BufferedOutputStream buf = new BufferedOutputStream(sock.getOutputStream());</span><br><span class="line">        dout = new DataOutputStream(buf);</span><br><span class="line">        //发送协议版本号</span><br><span class="line">        dout.writeLong(PROTOCOL_VERSION);</span><br><span class="line">        //发送服务器编号</span><br><span class="line">        dout.writeLong(self.getId());</span><br><span class="line">        String addr = self.getElectionAddress().getHostString() + &quot;:&quot; + self.getElectionAddress().getPort();</span><br><span class="line">        byte[] addr_bytes = addr.getBytes();</span><br><span class="line">        //发送本机地址</span><br><span class="line">        dout.writeInt(addr_bytes.length);</span><br><span class="line">        dout.write(addr_bytes);</span><br><span class="line">        dout.flush();</span><br><span class="line"></span><br><span class="line">        din = new DataInputStream(</span><br><span class="line">                new BufferedInputStream(sock.getInputStream()));</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        closeSocket(sock);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // authenticate learner</span><br><span class="line">    QuorumPeer.QuorumServer qps = self.getVotingView().get(sid);</span><br><span class="line">    if (qps != null) &#123;</span><br><span class="line">        // TODO - investigate why reconfig makes qps null.</span><br><span class="line">        authLearner.authenticate(sock, qps.hostname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 序号大的服务器向序号小的服务器发起连接</span><br><span class="line">    if (sid &gt; self.getId()) &#123;</span><br><span class="line">        closeSocket(sock);</span><br><span class="line">        // Otherwise proceed with the connection</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //发送数据线程</span><br><span class="line">        SendWorker sw = new SendWorker(sock, sid);</span><br><span class="line">        //接受数据线程</span><br><span class="line">        RecvWorker rw = new RecvWorker(sock, din, sid, sw);</span><br><span class="line">        sw.setRecv(rw);</span><br><span class="line"></span><br><span class="line">        SendWorker vsw = senderWorkerMap.get(sid);</span><br><span class="line">        </span><br><span class="line">        if(vsw != null)</span><br><span class="line">            vsw.finish();</span><br><span class="line">        //发送消息线程Map</span><br><span class="line">        senderWorkerMap.put(sid, sw);</span><br><span class="line">        queueSendMap.putIfAbsent(sid, new ArrayBlockingQueue&lt;ByteBuffer&gt;(</span><br><span class="line">                    SEND_CAPACITY));</span><br><span class="line">        </span><br><span class="line">        sw.start();</span><br><span class="line">        rw.start();</span><br><span class="line">        </span><br><span class="line">        return true;    </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="11、SendWorker的run方法"><a href="#11、SendWorker的run方法" class="headerlink" title="11、SendWorker的run方法"></a>11、SendWorker的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    //线程数量加一</span><br><span class="line">    threadCnt.incrementAndGet();</span><br><span class="line">    try &#123;</span><br><span class="line">        //待发送的数据队列</span><br><span class="line">        ArrayBlockingQueue&lt;ByteBuffer&gt; bq = queueSendMap.get(sid);</span><br><span class="line">        if (bq == null || isSendQueueEmpty(bq)) &#123;</span><br><span class="line">            //无待发送数据，发送上次发送的数据</span><br><span class="line">            ByteBuffer b = lastMessageSent.get(sid);</span><br><span class="line">            if (b != null) &#123;</span><br><span class="line">                send(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        this.finish();</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    try &#123;</span><br><span class="line">        while (running &amp;&amp; !shutdown &amp;&amp; sock != null) &#123;</span><br><span class="line">            ByteBuffer b = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                ArrayBlockingQueue&lt;ByteBuffer&gt; bq = queueSendMap</span><br><span class="line">                          .get(sid);</span><br><span class="line">                if (bq != null) &#123;</span><br><span class="line">                    //获取待发送数据</span><br><span class="line">                    b = pollSendQueue(bq, 1000, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(b != null)&#123;</span><br><span class="line">                    lastMessageSent.put(sid, b);</span><br><span class="line">                    //发送数据</span><br><span class="line">                    send(b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    this.finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（一、10）RecvWorker的run方法"><a href="#12、接（一、10）RecvWorker的run方法" class="headerlink" title="12、接（一、10）RecvWorker的run方法"></a>12、接（一、10）RecvWorker的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    //线程数量加一</span><br><span class="line">    threadCnt.incrementAndGet();</span><br><span class="line">    try &#123;</span><br><span class="line">        while (running &amp;&amp; !shutdown &amp;&amp; sock != null) &#123;</span><br><span class="line">            //消息长度</span><br><span class="line">            int length = din.readInt();</span><br><span class="line">            if (length &lt;= 0 || length &gt; PACKETMAXSIZE) &#123;</span><br><span class="line">                throw new IOException(</span><br><span class="line">                        &quot;Received packet with invalid packet: &quot;</span><br><span class="line">                                + length);</span><br><span class="line">            &#125;</span><br><span class="line">            /**</span><br><span class="line">             * Allocates a new ByteBuffer to receive the message</span><br><span class="line">             */</span><br><span class="line">            byte[] msgArray = new byte[length];</span><br><span class="line">            din.readFully(msgArray, 0, length);</span><br><span class="line">            ByteBuffer message = ByteBuffer.wrap(msgArray);</span><br><span class="line">            //读取到的数据包转换成投票消息加入队列</span><br><span class="line">            addToRecvQueue(new Message(message.duplicate(), sid));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        ...</span><br><span class="line">        sw.finish();</span><br><span class="line">        closeSocket(sock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（一、4）FastLeaderElection实例化"><a href="#13、接（一、4）FastLeaderElection实例化" class="headerlink" title="13、接（一、4）FastLeaderElection实例化"></a>13、接（一、4）FastLeaderElection实例化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public FastLeaderElection(QuorumPeer self, QuorumCnxManager manager)&#123;</span><br><span class="line">    this.stop = false;</span><br><span class="line">    this.manager = manager;</span><br><span class="line">    starter(self, manager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、FastLeaderElection的starter方法"><a href="#14、FastLeaderElection的starter方法" class="headerlink" title="14、FastLeaderElection的starter方法"></a>14、FastLeaderElection的starter方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void starter(QuorumPeer self, QuorumCnxManager manager) &#123;</span><br><span class="line">    this.self = self;</span><br><span class="line">    proposedLeader = -1;</span><br><span class="line">    proposedZxid = -1;</span><br><span class="line"></span><br><span class="line">    //待发送的消息队列</span><br><span class="line">    sendqueue = new LinkedBlockingQueue&lt;ToSend&gt;();</span><br><span class="line">    //接收到的消息队列</span><br><span class="line">    recvqueue = new LinkedBlockingQueue&lt;Notification&gt;();</span><br><span class="line">    this.messenger = new Messenger(manager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、Messenger的start方法"><a href="#15、Messenger的start方法" class="headerlink" title="15、Messenger的start方法"></a>15、Messenger的start方法</h4><p>FastLeaderElection的start方法调用Messenger的start方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void start()&#123;</span><br><span class="line">    //WorkerSender发送投票消息线程</span><br><span class="line">    this.wsThread.start();</span><br><span class="line">    //WorkerReceiver接受投票消息线程</span><br><span class="line">    this.wrThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="16、WorkerSender的run方法"><a href="#16、WorkerSender的run方法" class="headerlink" title="16、WorkerSender的run方法"></a>16、WorkerSender的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    while (!stop) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //从待发送消息队列获取消息</span><br><span class="line">            ToSend m = sendqueue.poll(3000, TimeUnit.MILLISECONDS);</span><br><span class="line">            if(m == null) continue;</span><br><span class="line">            //处理待发送消息</span><br><span class="line">            process(m);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、WorkerSender的process方法"><a href="#17、WorkerSender的process方法" class="headerlink" title="17、WorkerSender的process方法"></a>17、WorkerSender的process方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void process(ToSend m) &#123;</span><br><span class="line">    //待发送投票消息转换为字节数据</span><br><span class="line">    ByteBuffer requestBuffer = buildMsg(m.state.ordinal(),</span><br><span class="line">                                        m.leader,</span><br><span class="line">                                        m.zxid,</span><br><span class="line">                                        m.electionEpoch,</span><br><span class="line">                                        m.peerEpoch,</span><br><span class="line">                                        m.configData);</span><br><span class="line">    //发送处理转换后的数据</span><br><span class="line">    manager.toSend(m.sid, requestBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、WorkerSender的toSend方法"><a href="#18、WorkerSender的toSend方法" class="headerlink" title="18、WorkerSender的toSend方法"></a>18、WorkerSender的toSend方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void toSend(Long sid, ByteBuffer b) &#123;</span><br><span class="line">    if (this.mySid == sid) &#123;</span><br><span class="line">        //发送给自己的数据，直接添加入接受到的数据队列</span><br><span class="line">         b.position(0);</span><br><span class="line">         addToRecvQueue(new Message(b.duplicate(), sid));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //Start a new connection if doesn&apos;t have one already.</span><br><span class="line">          </span><br><span class="line">        ArrayBlockingQueue&lt;ByteBuffer&gt; bq = new ArrayBlockingQueue&lt;ByteBuffer&gt;(</span><br><span class="line">            SEND_CAPACITY);</span><br><span class="line">        //如果没有，添加该服务器待发送数据队列</span><br><span class="line">        ArrayBlockingQueue&lt;ByteBuffer&gt; oldq = queueSendMap.putIfAbsent(sid, bq);</span><br><span class="line">        //将待发送数据加入队列</span><br><span class="line">        if (oldq != null) &#123;</span><br><span class="line">            addToSendQueue(oldq, b);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            addToSendQueue(bq, b);</span><br><span class="line">        &#125;</span><br><span class="line">        //发起连接</span><br><span class="line">        connectOne(sid);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、（接一、15）WorkerReceiver的run方法"><a href="#19、（接一、15）WorkerReceiver的run方法" class="headerlink" title="19、（接一、15）WorkerReceiver的run方法"></a>19、（接一、15）WorkerReceiver的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    Message response;</span><br><span class="line">    while (!stop) &#123;</span><br><span class="line">        // Sleeps on receive</span><br><span class="line">        try &#123;</span><br><span class="line">            //接收到的数据</span><br><span class="line">            response = manager.pollRecvQueue(3000, TimeUnit.MILLISECONDS);</span><br><span class="line">            if(response == null) continue;</span><br><span class="line"></span><br><span class="line">            // The current protocol and two previous generations all send at least 28 bytes</span><br><span class="line">            if (response.buffer.capacity() &lt; 28) &#123;</span><br><span class="line">                LOG.error(&quot;Got a short response: &quot; + response.buffer.capacity());</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // this is the backwardCompatibility mode in place before ZK-107</span><br><span class="line">            // It is for a version of the protocol in which we didn&apos;t send peer epoch</span><br><span class="line">            // With peer epoch and version the message became 40 bytes</span><br><span class="line">            boolean backCompatibility28 = (response.buffer.capacity() == 28);</span><br><span class="line"></span><br><span class="line">            // this is the backwardCompatibility mode for no version information</span><br><span class="line">            boolean backCompatibility40 = (response.buffer.capacity() == 40);</span><br><span class="line">            </span><br><span class="line">            response.buffer.clear();</span><br><span class="line"></span><br><span class="line">            //实例化消息对象</span><br><span class="line">            Notification n = new Notification();</span><br><span class="line"></span><br><span class="line">            int rstate = response.buffer.getInt();</span><br><span class="line">            long rleader = response.buffer.getLong();</span><br><span class="line">            long rzxid = response.buffer.getLong();</span><br><span class="line">            long relectionEpoch = response.buffer.getLong();</span><br><span class="line">            long rpeerepoch;</span><br><span class="line"></span><br><span class="line">            int version = 0x0;</span><br><span class="line">            if (!backCompatibility28) &#123;</span><br><span class="line">                rpeerepoch = response.buffer.getLong();</span><br><span class="line">                if (!backCompatibility40) &#123;</span><br><span class="line">                    /*</span><br><span class="line">                     * Version added in 3.4.6</span><br><span class="line">                     */</span><br><span class="line">                    </span><br><span class="line">                    version = response.buffer.getInt();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    LOG.info(&quot;Backward compatibility mode (36 bits), server id: &#123;&#125;&quot;, response.sid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                LOG.info(&quot;Backward compatibility mode (28 bits), server id: &#123;&#125;&quot;, response.sid);</span><br><span class="line">                rpeerepoch = ZxidUtils.getEpochFromZxid(rzxid);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            QuorumVerifier rqv = null;</span><br><span class="line"></span><br><span class="line">            //消息中含有配置文件</span><br><span class="line">            if (version &gt; 0x1) &#123;</span><br><span class="line">                ...  </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                LOG.info(&quot;Backward compatibility mode (before reconfig), server id: &#123;&#125;&quot;, response.sid);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            //该服务器不具有选举权限</span><br><span class="line">            if(!self.getCurrentAndNextConfigVoters().contains(response.sid)) &#123;</span><br><span class="line">                Vote current = self.getCurrentVote();</span><br><span class="line">                QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class="line">                ToSend notmsg = new ToSend(ToSend.mType.notification,</span><br><span class="line">                        current.getId(),</span><br><span class="line">                        current.getZxid(),</span><br><span class="line">                        logicalclock.get(),</span><br><span class="line">                        self.getPeerState(),</span><br><span class="line">                        response.sid,</span><br><span class="line">                        current.getPeerEpoch(),</span><br><span class="line">                        qv.toString().getBytes());</span><br><span class="line">                //直接发送本机的投票信息</span><br><span class="line">                sendqueue.offer(notmsg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //投票服务器的状态</span><br><span class="line">                QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class="line">                switch (rstate) &#123;</span><br><span class="line">                case 0:</span><br><span class="line">                    ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class="line">                    break;</span><br><span class="line">                case 1:</span><br><span class="line">                    ackstate = QuorumPeer.ServerState.FOLLOWING;</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    ackstate = QuorumPeer.ServerState.LEADING;</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    ackstate = QuorumPeer.ServerState.OBSERVING;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //初始化投票信息</span><br><span class="line">                n.leader = rleader;</span><br><span class="line">                n.zxid = rzxid;</span><br><span class="line">                n.electionEpoch = relectionEpoch;</span><br><span class="line">                n.state = ackstate;</span><br><span class="line">                n.sid = response.sid;</span><br><span class="line">                n.peerEpoch = rpeerepoch;</span><br><span class="line">                n.version = version;</span><br><span class="line">                n.qv = rqv;</span><br><span class="line">                //本机是选举状态</span><br><span class="line">                if(self.getPeerState() == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class="line">                    //消息添加到接受队列</span><br><span class="line">                    recvqueue.offer(n);</span><br><span class="line">                    //发送消息的服务器为选举状态</span><br><span class="line">                    if((ackstate == QuorumPeer.ServerState.LOOKING)</span><br><span class="line">                            &amp;&amp; (n.electionEpoch &lt; logicalclock.get()))&#123;</span><br><span class="line">                        Vote v = getVote();</span><br><span class="line">                        QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class="line">                        ToSend notmsg = new ToSend(ToSend.mType.notification,</span><br><span class="line">                                v.getId(),</span><br><span class="line">                                v.getZxid(),</span><br><span class="line">                                logicalclock.get(),</span><br><span class="line">                                self.getPeerState(),</span><br><span class="line">                                response.sid,</span><br><span class="line">                                v.getPeerEpoch(),</span><br><span class="line">                                qv.toString().getBytes());</span><br><span class="line">                        //发送本机的选票</span><br><span class="line">                        sendqueue.offer(notmsg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //本机非选举状态直接发送当前选举结果</span><br><span class="line">                    Vote current = self.getCurrentVote();</span><br><span class="line">                    if(ackstate == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class="line">                        if(LOG.isDebugEnabled())&#123;</span><br><span class="line">                            LOG.debug(&quot;Sending new notification. My id =&#123;&#125; recipient=&#123;&#125; zxid=0x&#123;&#125; leader=&#123;&#125; config version = &#123;&#125;&quot;,</span><br><span class="line">                                    self.getId(),</span><br><span class="line">                                    response.sid,</span><br><span class="line">                                    Long.toHexString(current.getZxid()),</span><br><span class="line">                                    current.getId(),</span><br><span class="line">                                    Long.toHexString(self.getQuorumVerifier().getVersion()));</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class="line">                        ToSend notmsg = new ToSend(</span><br><span class="line">                                ToSend.mType.notification,</span><br><span class="line">                                current.getId(),</span><br><span class="line">                                current.getZxid(),</span><br><span class="line">                                current.getElectionEpoch(),</span><br><span class="line">                                self.getPeerState(),</span><br><span class="line">                                response.sid,</span><br><span class="line">                                current.getPeerEpoch(),</span><br><span class="line">                                qv.toString().getBytes());</span><br><span class="line">                        sendqueue.offer(notmsg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、接（一、2）QuorumPeer的run方法"><a href="#20、接（一、2）QuorumPeer的run方法" class="headerlink" title="20、接（一、2）QuorumPeer的run方法"></a>20、接（一、2）QuorumPeer的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    updateThreadName();</span><br><span class="line">    ...</span><br><span class="line">    try &#123;</span><br><span class="line">        /*</span><br><span class="line">         * Main loop</span><br><span class="line">         */</span><br><span class="line">        while (running) &#123;</span><br><span class="line">            //本机状态</span><br><span class="line">            switch (getPeerState()) &#123;</span><br><span class="line">            case LOOKING:</span><br><span class="line">                //本机为只读服务器</span><br><span class="line">                if (Boolean.getBoolean(&quot;readonlymode.enabled&quot;)) &#123;</span><br><span class="line">                    LOG.info(&quot;Attempting to start ReadOnlyZooKeeperServer&quot;);</span><br><span class="line"></span><br><span class="line">                    // Create read-only server but don&apos;t start it immediately</span><br><span class="line">                    final ReadOnlyZooKeeperServer roZk =</span><br><span class="line">                        new ReadOnlyZooKeeperServer(logFactory, this, this.zkDb);</span><br><span class="line"></span><br><span class="line">                    //等待两秒钟启动服务器</span><br><span class="line">                    Thread roZkMgr = new Thread() &#123;</span><br><span class="line">                        public void run() &#123;</span><br><span class="line">                            try &#123;</span><br><span class="line">                                // lower-bound grace period to 2 secs</span><br><span class="line">                                sleep(Math.max(2000, tickTime));</span><br><span class="line">                                if (ServerState.LOOKING.equals(getPeerState())) &#123;</span><br><span class="line">                                    roZk.startup();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                                LOG.info(&quot;Interrupted while attempting to start ReadOnlyZooKeeperServer, not started&quot;);</span><br><span class="line">                            &#125; catch (Exception e) &#123;</span><br><span class="line">                                LOG.error(&quot;FAILED to start ReadOnlyZooKeeperServer&quot;, e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        roZkMgr.start();</span><br><span class="line">                        reconfigFlagClear();</span><br><span class="line">                        if (shuttingDownLE) &#123;</span><br><span class="line">                            shuttingDownLE = false;</span><br><span class="line">                            startLeaderElection();</span><br><span class="line">                        &#125;</span><br><span class="line">                        //选举并设置当前投票</span><br><span class="line">                        setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        LOG.warn(&quot;Unexpected exception&quot;, e);</span><br><span class="line">                        setPeerState(ServerState.LOOKING);</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        roZkMgr.interrupt();</span><br><span class="line">                        roZk.shutdown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        reconfigFlagClear();</span><br><span class="line">                        if (shuttingDownLE) &#123;</span><br><span class="line">                           shuttingDownLE = false;</span><br><span class="line">                           startLeaderElection();</span><br><span class="line">                           &#125;</span><br><span class="line">                        //选举并设置当前选举结果</span><br><span class="line">                        setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        LOG.warn(&quot;Unexpected exception&quot;, e);</span><br><span class="line">                        setPeerState(ServerState.LOOKING);</span><br><span class="line">                    &#125;                        </span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case OBSERVING:</span><br><span class="line">                try &#123;</span><br><span class="line">                    LOG.info(&quot;OBSERVING&quot;);</span><br><span class="line">                    setObserver(makeObserver(logFactory));</span><br><span class="line">                    //只读服务器初始化</span><br><span class="line">                    observer.observeLeader();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    LOG.warn(&quot;Unexpected exception&quot;,e );</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    observer.shutdown();</span><br><span class="line">                    setObserver(null);  </span><br><span class="line">                   updateServerState();</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case FOLLOWING:</span><br><span class="line">                try &#123;</span><br><span class="line">                   LOG.info(&quot;FOLLOWING&quot;);</span><br><span class="line">                    setFollower(makeFollower(logFactory));</span><br><span class="line">                    //初始化</span><br><span class="line">                    follower.followLeader();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                   LOG.warn(&quot;Unexpected exception&quot;,e);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                   follower.shutdown();</span><br><span class="line">                   setFollower(null);</span><br><span class="line">                   updateServerState();</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case LEADING:</span><br><span class="line">                LOG.info(&quot;LEADING&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    setLeader(makeLeader(logFactory));</span><br><span class="line">                    //初始化</span><br><span class="line">                    leader.lead();</span><br><span class="line">                    setLeader(null);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    LOG.warn(&quot;Unexpected exception&quot;,e);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    if (leader != null) &#123;</span><br><span class="line">                        leader.shutdown(&quot;Forcing shutdown&quot;);</span><br><span class="line">                        setLeader(null);</span><br><span class="line">                    &#125;</span><br><span class="line">                    updateServerState();</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            start_fle = Time.currentElapsedTime();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、FastLeaderElection的lookForLeader方法选举LEADER"><a href="#21、FastLeaderElection的lookForLeader方法选举LEADER" class="headerlink" title="21、FastLeaderElection的lookForLeader方法选举LEADER"></a>21、FastLeaderElection的lookForLeader方法选举LEADER</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">public Vote lookForLeader() throws InterruptedException &#123;</span><br><span class="line">    ...</span><br><span class="line">    //选举开始时间</span><br><span class="line">    if (self.start_fle == 0) &#123;</span><br><span class="line">       self.start_fle = Time.currentElapsedTime();</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //收到的投票</span><br><span class="line">        Map&lt;Long, Vote&gt; recvset = new HashMap&lt;Long, Vote&gt;();</span><br><span class="line">        Map&lt;Long, Vote&gt; outofelection = new HashMap&lt;Long, Vote&gt;();</span><br><span class="line"></span><br><span class="line">        int notTimeout = finalizeWait;</span><br><span class="line"></span><br><span class="line">        synchronized(this)&#123;</span><br><span class="line">            //选举轮次加一</span><br><span class="line">            logicalclock.incrementAndGet();</span><br><span class="line">            //更新投票提议，默认投自己</span><br><span class="line">            updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //广播本机选票</span><br><span class="line">        sendNotifications();</span><br><span class="line">        //本机处于选举状态且为停止</span><br><span class="line">        while ((self.getPeerState() == ServerState.LOOKING) &amp;&amp;</span><br><span class="line">                (!stop))&#123;</span><br><span class="line">            //取出接收到的消息</span><br><span class="line">            Notification n = recvqueue.poll(notTimeout,</span><br><span class="line">                    TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">            //未收到投票</span><br><span class="line">            if(n == null)&#123;</span><br><span class="line">                //投票已发送</span><br><span class="line">                if(manager.haveDelivered())&#123;</span><br><span class="line">                    //重新发送</span><br><span class="line">                    sendNotifications();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //投票未发送，重新连接</span><br><span class="line">                    manager.connectAll();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                /*</span><br><span class="line">                 * Exponential backoff</span><br><span class="line">                 */</span><br><span class="line">                int tmpTimeOut = notTimeout*2;</span><br><span class="line">                notTimeout = (tmpTimeOut &lt; maxNotificationInterval?</span><br><span class="line">                        tmpTimeOut : maxNotificationInterval);</span><br><span class="line">                LOG.info(&quot;Notification time out: &quot; + notTimeout);</span><br><span class="line">            &#125; </span><br><span class="line">            else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) &#123;</span><br><span class="line">                switch (n.state) &#123;</span><br><span class="line">                //投票的服务器处于选举状态</span><br><span class="line">                case LOOKING:</span><br><span class="line">                    //-1说明加载数据出错，不处理</span><br><span class="line">                    if (getInitLastLoggedZxid() == -1) &#123;</span><br><span class="line">                        LOG.debug(&quot;Ignoring notification as our zxid is -1&quot;);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (n.zxid == -1) &#123;</span><br><span class="line">                        LOG.debug(&quot;Ignoring notification from member with -1 zxid&quot; + n.sid);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //发消息的服务器选举轮次大于本机轮次</span><br><span class="line">                    if (n.electionEpoch &gt; logicalclock.get()) &#123;</span><br><span class="line">                        //更新轮次</span><br><span class="line">                        logicalclock.set(n.electionEpoch);</span><br><span class="line">                        //废弃所有收到的选票</span><br><span class="line">                        recvset.clear();</span><br><span class="line">                        //选举PK，更新当前的提议为胜出者</span><br><span class="line">                        if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class="line">                                getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class="line">                            updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            updateProposal(getInitId(),</span><br><span class="line">                                    getInitLastLoggedZxid(),</span><br><span class="line">                                    getPeerEpoch());</span><br><span class="line">                        &#125;</span><br><span class="line">                        //发送选票</span><br><span class="line">                        sendNotifications();</span><br><span class="line">                    &#125; else if (n.electionEpoch &lt; logicalclock.get()) &#123;</span><br><span class="line">                        //发消息的服务器选举轮次小于本机轮次，不处理，跳出switch</span><br><span class="line">                        break;</span><br><span class="line">                    &#125; else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class="line">                            proposedLeader, proposedZxid, proposedEpoch)) &#123;</span><br><span class="line">                        //同一轮次，选票PK，更新胜出者为当前提议</span><br><span class="line">                        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                        //发送消息</span><br><span class="line">                        sendNotifications();</span><br><span class="line">                    &#125;</span><br><span class="line">                    //当前选票信息，添加到map中</span><br><span class="line">                    recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class="line">                    //若当前提议超过半数</span><br><span class="line">                    if (termPredicate(recvset,</span><br><span class="line">                            new Vote(proposedLeader, proposedZxid,</span><br><span class="line">                                    logicalclock.get(), proposedEpoch))) &#123;</span><br><span class="line"></span><br><span class="line">                        //检查投票中，是否有PK胜出当前提议的投票</span><br><span class="line">                        while((n = recvqueue.poll(finalizeWait,</span><br><span class="line">                                TimeUnit.MILLISECONDS)) != null)&#123;</span><br><span class="line">                            if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class="line">                                    proposedLeader, proposedZxid, proposedEpoch))&#123;</span><br><span class="line">                                recvqueue.put(n);</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        if (n == null) &#123;</span><br><span class="line">                            //当前提议为最终结果，若提以为自己，则本机当选LEADER</span><br><span class="line">                            self.setPeerState((proposedLeader == self.getId()) ?</span><br><span class="line">                                    ServerState.LEADING: learningState());</span><br><span class="line">                            //设置最终选票</span><br><span class="line">                            Vote endVote = new Vote(proposedLeader,</span><br><span class="line">                                    proposedZxid, proposedEpoch);</span><br><span class="line">                            //清除选票容器</span><br><span class="line">                            leaveInstance(endVote);</span><br><span class="line">                            //返回最终选票</span><br><span class="line">                            return endVote;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                case OBSERVING:</span><br><span class="line">                    //当前状态为观察者，不参与处理</span><br><span class="line">                    break;</span><br><span class="line">                case FOLLOWING:</span><br><span class="line">                case LEADING:</span><br><span class="line">                    //发出消息的服务器，与本机轮次相同</span><br><span class="line">                    if(n.electionEpoch == logicalclock.get())&#123;</span><br><span class="line">                        //保存收到的选票</span><br><span class="line">                        recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class="line">                        //若n的选票超过半数，并且n的状态为Leader，并且n不为本机，则更新本机状态、选举结果</span><br><span class="line">                        if(termPredicate(recvset, new Vote(n.leader,</span><br><span class="line">                                        n.zxid, n.electionEpoch, n.peerEpoch, n.state))</span><br><span class="line">                                        &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class="line">                            self.setPeerState((n.leader == self.getId()) ?</span><br><span class="line">                                    ServerState.LEADING: learningState());</span><br><span class="line"></span><br><span class="line">                            Vote endVote = new Vote(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                            leaveInstance(endVote);</span><br><span class="line">                            return endVote;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    outofelection.put(n.sid, new Vote(n.leader, </span><br><span class="line">                            IGNOREVALUE, IGNOREVALUE, n.peerEpoch, n.state));</span><br><span class="line">                    if (termPredicate(outofelection, new Vote(n.leader,</span><br><span class="line">                            IGNOREVALUE, IGNOREVALUE, n.peerEpoch, n.state))</span><br><span class="line">                            &amp;&amp; checkLeader(outofelection, n.leader, IGNOREVALUE)) &#123;</span><br><span class="line">                        synchronized(this)&#123;</span><br><span class="line">                            logicalclock.set(n.electionEpoch);</span><br><span class="line">                            self.setPeerState((n.leader == self.getId()) ?</span><br><span class="line">                                    ServerState.LEADING: learningState());</span><br><span class="line">                        &#125;</span><br><span class="line">                        Vote endVote = new Vote(n.leader, n.zxid, n.peerEpoch);</span><br><span class="line">                        leaveInstance(endVote);</span><br><span class="line">                        return endVote;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    LOG.warn(&quot;Notification state unrecoginized: &quot; + n.state</span><br><span class="line">                          + &quot; (n.state), &quot; + n.sid + &quot; (n.sid)&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                LOG.warn(&quot;Ignoring notification from non-cluster member &quot; + n.sid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此leader选举就完成了;</p><h3 id="二、LEADER初始化过程"><a href="#二、LEADER初始化过程" class="headerlink" title="二、LEADER初始化过程"></a>二、LEADER初始化过程</h3><h4 id="1、实例化Leader"><a href="#1、实例化Leader" class="headerlink" title="1、实例化Leader"></a>1、实例化Leader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Leader(QuorumPeer self,LeaderZooKeeperServer zk) throws IOException &#123;</span><br><span class="line">    this.self = self;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (self.getQuorumListenOnAllIPs()) &#123;</span><br><span class="line">            ss = new ServerSocket(self.getQuorumAddress().getPort());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //socket服务器等待follower连接</span><br><span class="line">            ss = new ServerSocket();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.setReuseAddress(true);</span><br><span class="line">        if (!self.getQuorumListenOnAllIPs()) &#123;</span><br><span class="line">            //监听地址</span><br><span class="line">            ss.bind(self.getQuorumAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (BindException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">        throw e;</span><br><span class="line">    &#125;</span><br><span class="line">    //leader服务器</span><br><span class="line">    this.zk = zk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、LEADER的lead方法"><a href="#2、LEADER的lead方法" class="headerlink" title="2、LEADER的lead方法"></a>2、LEADER的lead方法</h4><p>lead方法实现初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">void lead() throws IOException, InterruptedException &#123;</span><br><span class="line">    self.end_fle = Time.currentElapsedTime();</span><br><span class="line">    //leader选举所花的时间</span><br><span class="line">    long electionTimeTaken = self.end_fle - self.start_fle;</span><br><span class="line">    self.setElectionTimeTaken(electionTimeTaken);</span><br><span class="line">    self.start_fle = 0;</span><br><span class="line">    self.end_fle = 0;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //leader计时器</span><br><span class="line">        self.tick.set(0);</span><br><span class="line">        //恢复数据</span><br><span class="line">        zk.loadData();</span><br><span class="line">        //leader服务器最新的事务状态</span><br><span class="line">        leaderStateSummary = new StateSummary(self.getCurrentEpoch(), zk.getLastProcessedZxid());</span><br><span class="line"></span><br><span class="line">        // 等待follower接入的线程</span><br><span class="line">        cnxAcceptor = new LearnerCnxAcceptor();</span><br><span class="line">        cnxAcceptor.start();</span><br><span class="line">        //等待足够多的follower进来，代表自己确实是leader，此处lead线程可能会等待 </span><br><span class="line">        //返回最新的批次加一</span><br><span class="line">        long epoch = getEpochToPropose(self.getId(), self.getAcceptedEpoch());</span><br><span class="line">        //用最新的批次创建事务序号</span><br><span class="line">        zk.setZxid(ZxidUtils.makeZxid(epoch, 0));</span><br><span class="line"></span><br><span class="line">        synchronized(this)&#123;</span><br><span class="line">            //最新提交的事务序号</span><br><span class="line">            lastProposed = zk.getZxid();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newLeaderProposal.packet = new QuorumPacket(NEWLEADER, zk.getZxid(),</span><br><span class="line">               null, null);</span><br><span class="line"></span><br><span class="line">        //新批次的事务序号不是从零开始</span><br><span class="line">        if ((newLeaderProposal.packet.getZxid() &amp; 0xffffffffL) != 0) &#123;</span><br><span class="line">            LOG.info(&quot;NEWLEADER proposal has Zxid of &quot;</span><br><span class="line">                    + Long.toHexString(newLeaderProposal.packet.getZxid()));</span><br><span class="line">        &#125;</span><br><span class="line">        //校验器</span><br><span class="line">        QuorumVerifier lastSeenQV = self.getLastSeenQuorumVerifier();</span><br><span class="line">        QuorumVerifier curQV = self.getQuorumVerifier();</span><br><span class="line">        if (curQV.getVersion() == 0 &amp;&amp; curQV.getVersion() == lastSeenQV.getVersion()) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               QuorumVerifier newQV = self.configFromString(curQV.toString());</span><br><span class="line">               newQV.setVersion(zk.getZxid());</span><br><span class="line">               self.setLastSeenQuorumVerifier(newQV, true);    </span><br><span class="line">           &#125; catch (Exception e) &#123;</span><br><span class="line">               throw new IOException(e);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newLeaderProposal.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class="line">        if (self.getLastSeenQuorumVerifier().getVersion() &gt; self.getQuorumVerifier().getVersion())&#123;</span><br><span class="line">           newLeaderProposal.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         //等待足够多的follower确认，leader的事务为最新的事务</span><br><span class="line">         waitForEpochAck(self.getId(), leaderStateSummary);</span><br><span class="line">         //设置当前批次</span><br><span class="line">         self.setCurrentEpoch(epoch);    </span><br><span class="line">        </span><br><span class="line">         try &#123;</span><br><span class="line">             //等待最少半数follower同步数据完成</span><br><span class="line">             waitForNewLeaderAck(self.getId(), zk.getZxid(), LearnerType.PARTICIPANT);</span><br><span class="line">         &#125; catch (InterruptedException e) &#123;</span><br><span class="line">             ...</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         //启动LeaderZooKeeperServer</span><br><span class="line">         startZkServer();</span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">        // We ping twice a tick, so we only update the tick every other</span><br><span class="line">        // iteration</span><br><span class="line">        boolean tickSkip = true;</span><br><span class="line">        // If not null then shutdown this leader</span><br><span class="line">        String shutdownMessage = null;</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            synchronized (this) &#123;</span><br><span class="line">                long start = Time.currentElapsedTime();</span><br><span class="line">                long cur = start;</span><br><span class="line">                long end = start + self.tickTime / 2;</span><br><span class="line">                while (cur &lt; end) &#123;</span><br><span class="line">                    //等待</span><br><span class="line">                    wait(end - cur);</span><br><span class="line">                    cur = Time.currentElapsedTime();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (!tickSkip) &#123;</span><br><span class="line">                    计时器加一</span><br><span class="line">                    self.tick.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //未超时的服务器的id集合</span><br><span class="line">                SyncedLearnerTracker syncedAckSet = new SyncedLearnerTracker();</span><br><span class="line">                syncedAckSet.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class="line">                if (self.getLastSeenQuorumVerifier() != null</span><br><span class="line">                        &amp;&amp; self.getLastSeenQuorumVerifier().getVersion() &gt; self</span><br><span class="line">                                .getQuorumVerifier().getVersion()) &#123;</span><br><span class="line">                    syncedAckSet.addQuorumVerifier(self</span><br><span class="line">                            .getLastSeenQuorumVerifier());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                syncedAckSet.addAck(self.getId());</span><br><span class="line"></span><br><span class="line">                for (LearnerHandler f : getLearners()) &#123;</span><br><span class="line">                    //连接未超时</span><br><span class="line">                    if (f.synced()) &#123;</span><br><span class="line">                        syncedAckSet.addAck(f.getSid());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // check leader running status</span><br><span class="line">                if (!this.isRunning()) &#123;</span><br><span class="line">                    // set shutdown flag</span><br><span class="line">                    shutdownMessage = &quot;Unexpected internal error&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //未超时的连接小于半数，则退出主循环</span><br><span class="line">                if (!tickSkip &amp;&amp; !syncedAckSet.hasAllQuorums()) &#123;</span><br><span class="line">                    shutdownMessage = &quot;Not sufficient followers synced, only synced with sids: [ &quot;</span><br><span class="line">                            + syncedAckSet.ackSetsToString() + &quot; ]&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                tickSkip = !tickSkip;</span><br><span class="line">            &#125;</span><br><span class="line">            for (LearnerHandler f : getLearners()) &#123;</span><br><span class="line">                //心跳检测</span><br><span class="line">                f.ping();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (shutdownMessage != null) &#123;</span><br><span class="line">            shutdown(shutdownMessage);</span><br><span class="line">            // leader goes in looking state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        zk.unregisterJMX(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、LearnerCnxAcceptor线程的run方法"><a href="#3、LearnerCnxAcceptor线程的run方法" class="headerlink" title="3、LearnerCnxAcceptor线程的run方法"></a>3、LearnerCnxAcceptor线程的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        while (!stop) &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                //接受follower连接</span><br><span class="line">                Socket s = ss.accept();</span><br><span class="line">                // start with the initLimit, once the ack is processed</span><br><span class="line">                // in LearnerHandler switch to the syncLimit</span><br><span class="line">                s.setSoTimeout(self.tickTime * self.initLimit);</span><br><span class="line">                s.setTcpNoDelay(nodelay);</span><br><span class="line"></span><br><span class="line">                BufferedInputStream is = new BufferedInputStream(</span><br><span class="line">                        s.getInputStream());</span><br><span class="line">                //处理follower数据的线程</span><br><span class="line">                LearnerHandler fh = new LearnerHandler(s, is, Leader.this);</span><br><span class="line">                fh.start();</span><br><span class="line">            &#125; catch</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        LOG.warn(&quot;Exception while accepting follower&quot;, e.getMessage());</span><br><span class="line">        handleException(this.getName(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、LearnerHandler线程的run方法"><a href="#4、LearnerHandler线程的run方法" class="headerlink" title="4、LearnerHandler线程的run方法"></a>4、LearnerHandler线程的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        leader.addLearnerHandler(this);</span><br><span class="line">        //超时时间</span><br><span class="line">        tickOfNextAckDeadline = leader.self.tick.get()</span><br><span class="line">                + leader.self.initLimit + leader.self.syncLimit;</span><br><span class="line"></span><br><span class="line">        ia = BinaryInputArchive.getArchive(bufferedInput);</span><br><span class="line">        bufferedOutput = new BufferedOutputStream(sock.getOutputStream());</span><br><span class="line">        oa = BinaryOutputArchive.getArchive(bufferedOutput);</span><br><span class="line"></span><br><span class="line">        QuorumPacket qp = new QuorumPacket();</span><br><span class="line">        ia.readRecord(qp, &quot;packet&quot;);</span><br><span class="line">        //检查数据类型</span><br><span class="line">        if(qp.getType() != Leader.FOLLOWERINFO &amp;&amp; qp.getType() != Leader.OBSERVERINFO)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        byte learnerInfoData[] = qp.getData();</span><br><span class="line">        if (learnerInfoData != null) &#123;</span><br><span class="line">            ByteBuffer bbsid = ByteBuffer.wrap(learnerInfoData);</span><br><span class="line">            if (learnerInfoData.length &gt;= 8) &#123;</span><br><span class="line">                this.sid = bbsid.getLong();</span><br><span class="line">            &#125;</span><br><span class="line">            if (learnerInfoData.length &gt;= 12) &#123;</span><br><span class="line">                this.version = bbsid.getInt(); // protocolVersion</span><br><span class="line">            &#125;</span><br><span class="line">            if (learnerInfoData.length &gt;= 20) &#123;</span><br><span class="line">                long configVersion = bbsid.getLong();</span><br><span class="line">                if (configVersion &gt; leader.self.getQuorumVerifier().getVersion()) &#123;</span><br><span class="line">                    throw new IOException(&quot;Follower is ahead of the leader (has a later activated configuration)&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.sid = leader.followerCounter.getAndDecrement();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        if (qp.getType() == Leader.OBSERVERINFO) &#123;</span><br><span class="line">              learnerType = LearnerType.OBSERVER;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //follwer的最新批次</span><br><span class="line">        long lastAcceptedEpoch = ZxidUtils.getEpochFromZxid(qp.getZxid());</span><br><span class="line"></span><br><span class="line">        long peerLastZxid;</span><br><span class="line">        StateSummary ss = null;</span><br><span class="line">        long zxid = qp.getZxid();</span><br><span class="line">        //等待足够多的follower进来，代表自己确实是leader，此处lead线程可能会等待 </span><br><span class="line">        //返回最新的批次加一</span><br><span class="line">        long newEpoch = leader.getEpochToPropose(this.getSid(), lastAcceptedEpoch);</span><br><span class="line">        //最新批次事务序号</span><br><span class="line">        long newLeaderZxid = ZxidUtils.makeZxid(newEpoch, 0);</span><br><span class="line"></span><br><span class="line">        if (this.getVersion() &lt; 0x10000) &#123;</span><br><span class="line">            // we are going to have to extrapolate the epoch information</span><br><span class="line">            long epoch = ZxidUtils.getEpochFromZxid(zxid);</span><br><span class="line">            //该follower的最新事务批次、最大事务序号</span><br><span class="line">            ss = new StateSummary(epoch, zxid);</span><br><span class="line">            //确认follower的事务序号小于leader，需等待半数follower完成</span><br><span class="line">            leader.waitForEpochAck(this.getSid(), ss);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            byte ver[] = new byte[4];</span><br><span class="line">            ByteBuffer.wrap(ver).putInt(0x10000);</span><br><span class="line">            QuorumPacket newEpochPacket = new QuorumPacket(Leader.LEADERINFO, newLeaderZxid, ver, null);</span><br><span class="line">            oa.writeRecord(newEpochPacket, &quot;packet&quot;);</span><br><span class="line">            bufferedOutput.flush();</span><br><span class="line">            QuorumPacket ackEpochPacket = new QuorumPacket();</span><br><span class="line">            ia.readRecord(ackEpochPacket, &quot;packet&quot;);</span><br><span class="line">            if (ackEpochPacket.getType() != Leader.ACKEPOCH) &#123;</span><br><span class="line">                LOG.error(ackEpochPacket.toString()</span><br><span class="line">                        + &quot; is not ACKEPOCH&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            ByteBuffer bbepoch = ByteBuffer.wrap(ackEpochPacket.getData());</span><br><span class="line">            ss = new StateSummary(bbepoch.getInt(), ackEpochPacket.getZxid());</span><br><span class="line">            leader.waitForEpochAck(this.getSid(), ss);</span><br><span class="line">        &#125;</span><br><span class="line">        //该follwer最新的事务序号</span><br><span class="line">        peerLastZxid = ss.getLastZxid();</span><br><span class="line">       </span><br><span class="line">        //向该follower同步数据</span><br><span class="line">        boolean needSnap = syncFollower(peerLastZxid, leader.zk.getZKDatabase(), leader);</span><br><span class="line">    </span><br><span class="line">        // 发送newleader给follower</span><br><span class="line">        if (getVersion() &lt; 0x10000) &#123;</span><br><span class="line">            QuorumPacket newLeaderQP = new QuorumPacket(Leader.NEWLEADER,</span><br><span class="line">                    newLeaderZxid, null, null);</span><br><span class="line">            oa.writeRecord(newLeaderQP, &quot;packet&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            QuorumPacket newLeaderQP = new QuorumPacket(Leader.NEWLEADER,</span><br><span class="line">                    newLeaderZxid, leader.self.getLastSeenQuorumVerifier()</span><br><span class="line">                            .toString().getBytes(), null);</span><br><span class="line">            queuedPackets.add(newLeaderQP);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedOutput.flush();</span><br><span class="line"></span><br><span class="line">        /* if we are not truncating or sending a diff just send a snapshot */</span><br><span class="line">        if (needSnap) &#123;</span><br><span class="line">            boolean exemptFromThrottle = getLearnerType() != LearnerType.OBSERVER;</span><br><span class="line">            LearnerSnapshot snapshot = </span><br><span class="line">                    leader.getLearnerSnapshotThrottler().beginSnapshot(exemptFromThrottle);</span><br><span class="line">            try &#123;</span><br><span class="line">                long zxidToSend = leader.zk.getZKDatabase().getDataTreeLastProcessedZxid();</span><br><span class="line">                oa.writeRecord(new QuorumPacket(Leader.SNAP, zxidToSend, null, null), &quot;packet&quot;);</span><br><span class="line">                bufferedOutput.flush();</span><br><span class="line"></span><br><span class="line">                // 向follower发送快照</span><br><span class="line">                leader.zk.getZKDatabase().serializeSnapshot(oa);</span><br><span class="line">                oa.writeString(&quot;BenWasHere&quot;, &quot;signature&quot;);</span><br><span class="line">                bufferedOutput.flush();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                snapshot.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 启动发送数据包的线程,发送queuedPackets中数据</span><br><span class="line">        startSendingPackets();</span><br><span class="line">        </span><br><span class="line">        /*</span><br><span class="line">         * Have to wait for the first ACK, wait until</span><br><span class="line">         * the leader is ready, and only then we can</span><br><span class="line">         * start processing messages.</span><br><span class="line">         */</span><br><span class="line">        qp = new QuorumPacket();</span><br><span class="line">        ia.readRecord(qp, &quot;packet&quot;);</span><br><span class="line">        if(qp.getType() != Leader.ACK)&#123;</span><br><span class="line">            ...</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //follower同步数据完成，检查follower最新事务序号是否与leader相同，等待半数follower完成</span><br><span class="line">        leader.waitForNewLeaderAck(getSid(), qp.getZxid(), getLearnerType());</span><br><span class="line"></span><br><span class="line">        //等待时间限制</span><br><span class="line">        syncLimitCheck.start();</span><br><span class="line">        </span><br><span class="line">        // now that the ack has been processed expect the syncLimit</span><br><span class="line">        sock.setSoTimeout(leader.self.tickTime * leader.self.syncLimit);</span><br><span class="line"></span><br><span class="line">        //等待LeaderZooKeeperServer启动</span><br><span class="line">        synchronized(leader.zk)&#123;</span><br><span class="line">            while(!leader.zk.isRunning() &amp;&amp; !this.isInterrupted())&#123;</span><br><span class="line">                leader.zk.wait(20);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //通知follower退出同步数据循环     </span><br><span class="line">        queuedPackets.add(new QuorumPacket(Leader.UPTODATE, -1, null, null));</span><br><span class="line">        //主循环</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            qp = new QuorumPacket();</span><br><span class="line">            //读取follower发来的数据</span><br><span class="line">            ia.readRecord(qp, &quot;packet&quot;);</span><br><span class="line"></span><br><span class="line">            long traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;</span><br><span class="line">            if (qp.getType() == Leader.PING) &#123;</span><br><span class="line">                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;</span><br><span class="line">            &#125;</span><br><span class="line">            tickOfNextAckDeadline = leader.self.tick.get() + leader.self.syncLimit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ByteBuffer bb;</span><br><span class="line">            long sessionId;</span><br><span class="line">            int cxid;</span><br><span class="line">            int type;</span><br><span class="line"></span><br><span class="line">            switch (qp.getType()) &#123;</span><br><span class="line">            case Leader.ACK:</span><br><span class="line">                //刷新时间</span><br><span class="line">                syncLimitCheck.updateAck(qp.getZxid());</span><br><span class="line">                //处理follower对提议返回的投票</span><br><span class="line">                leader.processAck(this.sid, qp.getZxid(), sock.getLocalSocketAddress());</span><br><span class="line">                break;</span><br><span class="line">            case Leader.PING:</span><br><span class="line">                // 心跳信息</span><br><span class="line">                ByteArrayInputStream bis = new ByteArrayInputStream(qp</span><br><span class="line">                        .getData());</span><br><span class="line">                DataInputStream dis = new DataInputStream(bis);</span><br><span class="line">                while (dis.available() &gt; 0) &#123;</span><br><span class="line">                    long sess = dis.readLong();</span><br><span class="line">                    int to = dis.readInt();</span><br><span class="line">                    //更新session的有效时间</span><br><span class="line">                    leader.zk.touch(sess, to);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case Leader.REVALIDATE:</span><br><span class="line">                bis = new ByteArrayInputStream(qp.getData());</span><br><span class="line">                dis = new DataInputStream(bis);</span><br><span class="line">                long id = dis.readLong();</span><br><span class="line">                int to = dis.readInt();</span><br><span class="line">                ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class="line">                DataOutputStream dos = new DataOutputStream(bos);</span><br><span class="line">                dos.writeLong(id);</span><br><span class="line">                boolean valid = leader.zk.checkIfValidGlobalSession(id, to);</span><br><span class="line">                if (valid) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //set the session owner</span><br><span class="line">                        // as the follower that</span><br><span class="line">                        // owns the session</span><br><span class="line">                        leader.zk.setOwner(id, this);</span><br><span class="line">                    &#125; catch (SessionExpiredException e) &#123;</span><br><span class="line">                        LOG.error(&quot;Somehow session &quot; + Long.toHexString(id) +</span><br><span class="line">                                &quot; expired right after being renewed! (impossible)&quot;, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dos.writeBoolean(valid);</span><br><span class="line">                qp.setData(bos.toByteArray());</span><br><span class="line">                queuedPackets.add(qp);</span><br><span class="line">                break;</span><br><span class="line">            case Leader.REQUEST:</span><br><span class="line">              //Follower转发过来的请求</span><br><span class="line">                bb = ByteBuffer.wrap(qp.getData());</span><br><span class="line">                sessionId = bb.getLong();</span><br><span class="line">                cxid = bb.getInt();</span><br><span class="line">                type = bb.getInt();</span><br><span class="line">                bb = bb.slice();</span><br><span class="line">                Request si;</span><br><span class="line">                if(type == OpCode.sync)&#123;</span><br><span class="line">                    si = new LearnerSyncRequest(this, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    si = new Request(null, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class="line">                &#125;</span><br><span class="line">                si.setOwner(this);</span><br><span class="line">                //调用prepRequestProcessor处理request</span><br><span class="line">                leader.zk.submitLearnerRequest(si);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                LOG.warn(&quot;unexpected quorum packet, type: &#123;&#125;&quot;, packetToString(qp));</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch</span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、Leader的getEpochToPropose方法"><a href="#5、Leader的getEpochToPropose方法" class="headerlink" title="5、Leader的getEpochToPropose方法"></a>5、Leader的getEpochToPropose方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public long getEpochToPropose(long sid, long lastAcceptedEpoch) throws InterruptedException, IOException &#123;</span><br><span class="line">        synchronized(connectingFollowers) &#123;</span><br><span class="line">            if (!waitingForNewEpoch) &#123;</span><br><span class="line">                return epoch;</span><br><span class="line">            &#125;</span><br><span class="line">            //follower最新批次大于等于当前批次</span><br><span class="line">            if (lastAcceptedEpoch &gt;= epoch) &#123;</span><br><span class="line">                epoch = lastAcceptedEpoch+1;</span><br><span class="line">            &#125;</span><br><span class="line">            //已连接的follower集合</span><br><span class="line">            connectingFollowers.add(sid);</span><br><span class="line">            QuorumVerifier verifier = self.getQuorumVerifier();</span><br><span class="line">            //已连接的follower是否超过半数</span><br><span class="line">            if (connectingFollowers.contains(self.getId()) &amp;&amp;</span><br><span class="line">                                            verifier.containsQuorum(connectingFollowers)) &#123;</span><br><span class="line">                waitingForNewEpoch = false;</span><br><span class="line">                self.setAcceptedEpoch(epoch);</span><br><span class="line">                connectingFollowers.notifyAll();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //不超过半数，则等待其他follower接入</span><br><span class="line">                long start = Time.currentElapsedTime();</span><br><span class="line">                long cur = start;</span><br><span class="line">                long end = start + self.getInitLimit()*self.getTickTime();</span><br><span class="line">                while(waitingForNewEpoch &amp;&amp; cur &lt; end) &#123;</span><br><span class="line">                    connectingFollowers.wait(end - cur);</span><br><span class="line">                    cur = Time.currentElapsedTime();</span><br><span class="line">                &#125;</span><br><span class="line">                if (waitingForNewEpoch) &#123;</span><br><span class="line">                    throw new InterruptedException(&quot;Timeout while waiting for epoch from quorum&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return epoch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（二、4）Leader的waitForEpochAck方法"><a href="#6、接（二、4）Leader的waitForEpochAck方法" class="headerlink" title="6、接（二、4）Leader的waitForEpochAck方法"></a>6、接（二、4）Leader的waitForEpochAck方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public void waitForEpochAck(long id, StateSummary ss) throws IOException, InterruptedException &#123;</span><br><span class="line">    synchronized(electingFollowers) &#123;</span><br><span class="line">        if (electionFinished) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if (ss.getCurrentEpoch() != -1) &#123;</span><br><span class="line">            //follower的事务大于leader</span><br><span class="line">            if (ss.isMoreRecentThan(leaderStateSummary)) &#123;</span><br><span class="line">                throw new IOException(&quot;Follower is ahead of the leader, leader summary: &quot; </span><br><span class="line">                                                + leaderStateSummary.getCurrentEpoch()</span><br><span class="line">                                                + &quot; (current epoch), &quot;</span><br><span class="line">                                                + leaderStateSummary.getLastZxid()</span><br><span class="line">                                                + &quot; (last zxid)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (ss.getLastZxid() != -1) &#123;</span><br><span class="line">                //已完成确认的follower的集合</span><br><span class="line">                electingFollowers.add(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        QuorumVerifier verifier = self.getQuorumVerifier();</span><br><span class="line">        //是否有半数的follower完成确认</span><br><span class="line">        if (electingFollowers.contains(self.getId()) &amp;&amp; verifier.containsQuorum(electingFollowers)) &#123;</span><br><span class="line">            electionFinished = true;</span><br><span class="line">            electingFollowers.notifyAll();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            long start = Time.currentElapsedTime();</span><br><span class="line">            long cur = start;</span><br><span class="line">            long end = start + self.getInitLimit()*self.getTickTime();</span><br><span class="line">            while(!electionFinished &amp;&amp; cur &lt; end) &#123;</span><br><span class="line">                electingFollowers.wait(end - cur);</span><br><span class="line">                cur = Time.currentElapsedTime();</span><br><span class="line">            &#125;</span><br><span class="line">            if (!electionFinished) &#123;</span><br><span class="line">                throw new InterruptedException(&quot;Timeout while waiting for epoch to be acked by quorum&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（二、4）LearnerHandler的syncFollower方法"><a href="#7、接（二、4）LearnerHandler的syncFollower方法" class="headerlink" title="7、接（二、4）LearnerHandler的syncFollower方法"></a>7、接（二、4）LearnerHandler的syncFollower方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">public boolean syncFollower(long peerLastZxid, ZKDatabase db, Leader leader) &#123;</span><br><span class="line">    //follower的事务于leader一致</span><br><span class="line">    boolean isPeerNewEpochZxid = (peerLastZxid &amp; 0xffffffffL) == 0;</span><br><span class="line">    //follower的当前事务序号</span><br><span class="line">    long currentZxid = peerLastZxid;</span><br><span class="line">    boolean needSnap = true;</span><br><span class="line">    boolean txnLogSyncEnabled = db.isTxnLogSyncEnabled();</span><br><span class="line">    ReentrantReadWriteLock lock = db.getLogLock();</span><br><span class="line">    ReadLock rl = lock.readLock();</span><br><span class="line">    try &#123;</span><br><span class="line">        rl.lock();</span><br><span class="line">        long maxCommittedLog = db.getmaxCommittedLog();</span><br><span class="line">        long minCommittedLog = db.getminCommittedLog();</span><br><span class="line">        long lastProcessedZxid = db.getDataTreeLastProcessedZxid();</span><br><span class="line"></span><br><span class="line">        //最近一段时间内执行的事务</span><br><span class="line">        if (db.getCommittedLog().isEmpty()) &#123;</span><br><span class="line">            minCommittedLog = lastProcessedZxid;</span><br><span class="line">            maxCommittedLog = lastProcessedZxid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (forceSnapSync) &#123;</span><br><span class="line">            // Force leader to use snapshot to sync with follower</span><br><span class="line">            LOG.warn(&quot;Forcing snapshot sync - should not see this in production&quot;);</span><br><span class="line">        &#125; else if (lastProcessedZxid == peerLastZxid) &#123;</span><br><span class="line">            //follower的事务与leader相等，无需同步，将Leader.DIFF类型的数据包，加入待发送队列</span><br><span class="line">            queueOpPacket(Leader.DIFF, peerLastZxid);</span><br><span class="line">            needOpPacket = false;</span><br><span class="line">            needSnap = false;</span><br><span class="line">        &#125; else if (peerLastZxid &gt; maxCommittedLog &amp;&amp; !isPeerNewEpochZxid) &#123;</span><br><span class="line">            // follower事务序号超出了leader，废弃掉超出的部分</span><br><span class="line">            queueOpPacket(Leader.TRUNC, maxCommittedLog);</span><br><span class="line">            currentZxid = maxCommittedLog;</span><br><span class="line">            needOpPacket = false;</span><br><span class="line">            needSnap = false;</span><br><span class="line">        &#125; else if ((maxCommittedLog &gt;= peerLastZxid)</span><br><span class="line">                &amp;&amp; (minCommittedLog &lt;= peerLastZxid)) &#123;</span><br><span class="line">            //Follower的事务序号在CommittedLog之间</span><br><span class="line">            Iterator&lt;Proposal&gt; itr = db.getCommittedLog().iterator();</span><br><span class="line">            //向follower同步事务</span><br><span class="line">            currentZxid = queueCommittedProposals(itr, peerLastZxid,</span><br><span class="line">                                                 null, maxCommittedLog);</span><br><span class="line">            needSnap = false;</span><br><span class="line">        &#125; else if (peerLastZxid &lt; minCommittedLog &amp;&amp; txnLogSyncEnabled) &#123;</span><br><span class="line">            //从事务日志中可取回的事务的数量限制</span><br><span class="line">            long sizeLimit = db.calculateTxnLogSizeLimit();</span><br><span class="line">            //若peerLastZxid超出当前限制，则返回null</span><br><span class="line">            Iterator&lt;Proposal&gt; txnLogItr = db.getProposalsFromTxnLog(</span><br><span class="line">                    peerLastZxid, sizeLimit);</span><br><span class="line">            if (txnLogItr.hasNext()) &#123;</span><br><span class="line">                //同步事务</span><br><span class="line">                currentZxid = queueCommittedProposals(txnLogItr, peerLastZxid,</span><br><span class="line">                                                     minCommittedLog, maxCommittedLog);</span><br><span class="line"></span><br><span class="line">                //同步事务</span><br><span class="line">                Iterator&lt;Proposal&gt; committedLogItr = db.getCommittedLog().iterator();</span><br><span class="line">                currentZxid = queueCommittedProposals(committedLogItr, currentZxid,</span><br><span class="line">                                                     null, maxCommittedLog);</span><br><span class="line">                needSnap = false;</span><br><span class="line">            &#125;</span><br><span class="line">            // closing the resources</span><br><span class="line">            if (txnLogItr instanceof TxnLogProposalIterator) &#123;</span><br><span class="line">                TxnLogProposalIterator txnProposalItr = (TxnLogProposalIterator) txnLogItr;</span><br><span class="line">                txnProposalItr.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            LOG.warn(&quot;Unhandled scenario for peer sid: &quot; +  getSid());</span><br><span class="line">        &#125;</span><br><span class="line">        //处理leader中未完成的事务，将handler加入集合</span><br><span class="line">        leaderLastZxid = leader.startForwarding(this, currentZxid);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        rl.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (needOpPacket &amp;&amp; !needSnap) &#123;</span><br><span class="line">        // This should never happen, but we should fall back to sending</span><br><span class="line">        // snapshot just in case. 事务同步失败，直接同步快照</span><br><span class="line">        needSnap = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return needSnap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、LearnerHandler的queueCommittedProposals方法"><a href="#8、LearnerHandler的queueCommittedProposals方法" class="headerlink" title="8、LearnerHandler的queueCommittedProposals方法"></a>8、LearnerHandler的queueCommittedProposals方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">protected long queueCommittedProposals(Iterator&lt;Proposal&gt; itr,</span><br><span class="line">        long peerLastZxid, Long maxZxid, Long lastCommittedZxid) &#123;</span><br><span class="line">    //follower的事务序号，已更新为最新</span><br><span class="line">    boolean isPeerNewEpochZxid = (peerLastZxid &amp; 0xffffffffL) == 0;</span><br><span class="line">    long queuedZxid = peerLastZxid;</span><br><span class="line">    // as we look through proposals, this variable keeps track of previous</span><br><span class="line">    // proposal Id.</span><br><span class="line">    long prevProposalZxid = -1;</span><br><span class="line">    while (itr.hasNext()) &#123;</span><br><span class="line">        //取出下个事务</span><br><span class="line">        Proposal propose = itr.next();</span><br><span class="line"></span><br><span class="line">        long packetZxid = propose.packet.getZxid();</span><br><span class="line">        //同步事务序号的上限</span><br><span class="line">        if ((maxZxid != null) &amp;&amp; (packetZxid &gt; maxZxid)) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        // 小于follower的事务无需同步</span><br><span class="line">        if (packetZxid &lt; peerLastZxid) &#123;</span><br><span class="line">            prevProposalZxid = packetZxid;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //默认true</span><br><span class="line">        if (needOpPacket) &#123;</span><br><span class="line"></span><br><span class="line">            // follower同步完成</span><br><span class="line">            if (packetZxid == peerLastZxid) &#123;</span><br><span class="line">                //通知follower，无需同步snaphot</span><br><span class="line">                queueOpPacket(Leader.DIFF, lastCommittedZxid);</span><br><span class="line">                needOpPacket = false;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //follower事务序号为最新批次序号，无需同步</span><br><span class="line">            if (isPeerNewEpochZxid) &#123;</span><br><span class="line">               queueOpPacket(Leader.DIFF, lastCommittedZxid);</span><br><span class="line">               needOpPacket = false;</span><br><span class="line">            &#125; else if (packetZxid &gt; peerLastZxid  ) &#123;</span><br><span class="line">                //不是同一批次，无法同步</span><br><span class="line">                if (ZxidUtils.getEpochFromZxid(packetZxid) !=</span><br><span class="line">                        ZxidUtils.getEpochFromZxid(peerLastZxid)) &#123;</span><br><span class="line">                    return queuedZxid;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //废弃掉follower的peerLastZxid之后的事务</span><br><span class="line">                queueOpPacket(Leader.TRUNC, prevProposalZxid);</span><br><span class="line">                needOpPacket = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (packetZxid &lt;= queuedZxid) &#123;</span><br><span class="line">            // We can get here, if we don&apos;t have op packet to queue</span><br><span class="line">            // or there is a duplicate txn in a given iterator</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //向follower发出事务提议</span><br><span class="line">        queuePacket(propose.packet);</span><br><span class="line">        //向follower发出事务确认</span><br><span class="line">        queueOpPacket(Leader.COMMIT, packetZxid);</span><br><span class="line">        queuedZxid = packetZxid;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (needOpPacket &amp;&amp; isPeerNewEpochZxid) &#123;</span><br><span class="line">        queueOpPacket(Leader.DIFF, lastCommittedZxid);</span><br><span class="line">        needOpPacket = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return queuedZxid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（二、7）Leader的startForwarding方法"><a href="#9、接（二、7）Leader的startForwarding方法" class="headerlink" title="9、接（二、7）Leader的startForwarding方法"></a>9、接（二、7）Leader的startForwarding方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">synchronized public long startForwarding(LearnerHandler handler,</span><br><span class="line">        long lastSeenZxid) &#123;</span><br><span class="line">    //leader有尚未</span><br><span class="line">    if (lastProposed &gt; lastSeenZxid) &#123;</span><br><span class="line">        //leader中完成投票，并未commit的事务</span><br><span class="line">        for (Proposal p : toBeApplied) &#123;</span><br><span class="line">            if (p.packet.getZxid() &lt;= lastSeenZxid) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            handler.queuePacket(p.packet);</span><br><span class="line">            QuorumPacket qp = new QuorumPacket(Leader.COMMIT, p.packet</span><br><span class="line">                    .getZxid(), null, null);</span><br><span class="line">            handler.queuePacket(qp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (handler.getLearnerType() == LearnerType.PARTICIPANT) &#123;</span><br><span class="line">            //尚未投票通过的提议</span><br><span class="line">            List&lt;Long&gt;zxids = new ArrayList&lt;Long&gt;(outstandingProposals.keySet());</span><br><span class="line">            Collections.sort(zxids);</span><br><span class="line">            for (Long zxid: zxids) &#123;</span><br><span class="line">                if (zxid &lt;= lastSeenZxid) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                handler.queuePacket(outstandingProposals.get(zxid).packet);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (handler.getLearnerType() == LearnerType.PARTICIPANT) </span><br><span class="line">        addForwardingFollower(handler);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        addObserverLearnerHandler(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return lastProposed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（二、2）Leader的startZkServer方法"><a href="#10、接（二、2）Leader的startZkServer方法" class="headerlink" title="10、接（二、2）Leader的startZkServer方法"></a>10、接（二、2）Leader的startZkServer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private synchronized void startZkServer() &#123;</span><br><span class="line">    // Update lastCommitted and Db&apos;s zxid to a value representing the new epoch</span><br><span class="line">    lastCommitted = zk.getZxid();</span><br><span class="line"></span><br><span class="line">    QuorumVerifier newQV = self.getLastSeenQuorumVerifier();</span><br><span class="line">    </span><br><span class="line">    //获取最合适的备用Leader服务器的id</span><br><span class="line">    Long designatedLeader = getDesignatedLeader(newLeaderProposal, zk.getZxid());                                         </span><br><span class="line"></span><br><span class="line">    self.processReconfig(newQV, designatedLeader, zk.getZxid(), true);</span><br><span class="line">    if (designatedLeader != self.getId()) &#123;</span><br><span class="line">        allowedToCommit = false;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动leader服务器</span><br><span class="line">    zk.startup();</span><br><span class="line">    self.updateElectionVote(getEpoch());</span><br><span class="line"></span><br><span class="line">    zk.getZKDatabase().setlastProcessedZxid(zk.getZxid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、ZooKeeperServer的startup方法"><a href="#11、ZooKeeperServer的startup方法" class="headerlink" title="11、ZooKeeperServer的startup方法"></a>11、ZooKeeperServer的startup方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  public synchronized void startup() &#123;</span><br><span class="line">    if (sessionTracker == null) &#123;</span><br><span class="line">        createSessionTracker();</span><br><span class="line">    &#125;</span><br><span class="line">    startSessionTracker();</span><br><span class="line">    //启动处理器</span><br><span class="line">    setupRequestProcessors();</span><br><span class="line"></span><br><span class="line">    registerJMX();</span><br><span class="line"></span><br><span class="line">    setState(State.RUNNING);</span><br><span class="line">    notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、LeaderZooKeeperServer的setupRequestProcessors方法"><a href="#12、LeaderZooKeeperServer的setupRequestProcessors方法" class="headerlink" title="12、LeaderZooKeeperServer的setupRequestProcessors方法"></a>12、LeaderZooKeeperServer的setupRequestProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void setupRequestProcessors() &#123;</span><br><span class="line">    RequestProcessor finalProcessor = new FinalRequestProcessor(this);</span><br><span class="line">    RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor(finalProcessor, getLeader());</span><br><span class="line">    commitProcessor = new CommitProcessor(toBeAppliedProcessor,</span><br><span class="line">            Long.toString(getServerId()), false,</span><br><span class="line">            getZooKeeperServerListener());</span><br><span class="line">    commitProcessor.start();</span><br><span class="line">    ProposalRequestProcessor proposalProcessor = new ProposalRequestProcessor(this,</span><br><span class="line">            commitProcessor);</span><br><span class="line">    proposalProcessor.initialize();</span><br><span class="line">    prepRequestProcessor = new PrepRequestProcessor(this, proposalProcessor);</span><br><span class="line">    prepRequestProcessor.start();</span><br><span class="line">    firstProcessor = new LeaderRequestProcessor(this, prepRequestProcessor);</span><br><span class="line"></span><br><span class="line">    setupContainerManager();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leader初始化结束</p><p>###三、FOLLOWER初始化过程</p><h4 id="1、FOLLOWER的followLeader方法"><a href="#1、FOLLOWER的followLeader方法" class="headerlink" title="1、FOLLOWER的followLeader方法"></a>1、FOLLOWER的followLeader方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">void followLeader() throws InterruptedException &#123;</span><br><span class="line">    self.end_fle = Time.currentElapsedTime();</span><br><span class="line">    long electionTimeTaken = self.end_fle - self.start_fle;</span><br><span class="line">    self.setElectionTimeTaken(electionTimeTaken);</span><br><span class="line">    self.start_fle = 0;</span><br><span class="line">    self.end_fle = 0;</span><br><span class="line">    fzk.registerJMX(new FollowerBean(this, zk), self.jmxLocalPeerBean);</span><br><span class="line">    try &#123;</span><br><span class="line">        //找到leader服务器id</span><br><span class="line">        QuorumServer leaderServer = findLeader();</span><br><span class="line">        try &#123;</span><br><span class="line">            //连接leader服务器</span><br><span class="line">            connectToLeader(leaderServer.addr, leaderServer.hostname);</span><br><span class="line">            //follower注册到leader服务器，返回leader最新的事务zxid</span><br><span class="line">            long newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO);</span><br><span class="line"></span><br><span class="line">            //check to see if the leader zxid is lower than ours</span><br><span class="line">            //this should never happen but is just a safety check</span><br><span class="line">            long newEpoch = ZxidUtils.getEpochFromZxid(newEpochZxid);</span><br><span class="line">            if (newEpoch &lt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">                LOG.error(&quot;Proposed leader epoch &quot; + ZxidUtils.zxidToString(newEpochZxid)</span><br><span class="line">                        + &quot; is less than our accepted epoch &quot; + ZxidUtils.zxidToString(self.getAcceptedEpoch()));</span><br><span class="line">                throw new IOException(&quot;Error: Epoch of leader is lower&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //和Leader同步数据</span><br><span class="line">            syncWithLeader(newEpochZxid);                </span><br><span class="line">            QuorumPacket qp = new QuorumPacket();</span><br><span class="line">            //主循环</span><br><span class="line">            while (this.isRunning()) &#123;</span><br><span class="line">                readPacket(qp);</span><br><span class="line">                processPacket(qp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            ...</span><br><span class="line">            // clear pending revalidations</span><br><span class="line">            pendingRevalidations.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        zk.unregisterJMX((Learner)this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、FOLLOWER的registerWithLeader方法"><a href="#2、FOLLOWER的registerWithLeader方法" class="headerlink" title="2、FOLLOWER的registerWithLeader方法"></a>2、FOLLOWER的registerWithLeader方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">protected long registerWithLeader(int pktType) throws IOException&#123;</span><br><span class="line">    //将follower的事务序号及follower的id</span><br><span class="line">    long lastLoggedZxid = self.getLastLoggedZxid();</span><br><span class="line">    QuorumPacket qp = new QuorumPacket();                </span><br><span class="line">    qp.setType(pktType);</span><br><span class="line">    qp.setZxid(ZxidUtils.makeZxid(self.getAcceptedEpoch(), 0));</span><br><span class="line"></span><br><span class="line">    //Add sid to payload</span><br><span class="line">    LearnerInfo li = new LearnerInfo(self.getId(), 0x10000, self.getQuorumVerifier().getVersion());</span><br><span class="line">    ByteArrayOutputStream bsid = new ByteArrayOutputStream();</span><br><span class="line">    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(bsid);</span><br><span class="line">    boa.writeRecord(li, &quot;LearnerInfo&quot;);</span><br><span class="line">    qp.setData(bsid.toByteArray());</span><br><span class="line">    //发送数据包</span><br><span class="line">    writePacket(qp, true);</span><br><span class="line">    //读取返回信息</span><br><span class="line">    readPacket(qp);        </span><br><span class="line">    final long newEpoch = ZxidUtils.getEpochFromZxid(qp.getZxid());</span><br><span class="line">    if (qp.getType() == Leader.LEADERINFO) &#123;</span><br><span class="line">        // we are connected to a 1.0 server so accept the new epoch and read the next packet</span><br><span class="line">        leaderProtocolVersion = ByteBuffer.wrap(qp.getData()).getInt();</span><br><span class="line">        byte epochBytes[] = new byte[4];</span><br><span class="line">        final ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);</span><br><span class="line">        if (newEpoch &gt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">            //更新事务批次</span><br><span class="line">            wrappedEpochBytes.putInt((int)self.getCurrentEpoch());</span><br><span class="line">            self.setAcceptedEpoch(newEpoch);</span><br><span class="line">        &#125; else if (newEpoch == self.getAcceptedEpoch()) &#123;</span><br><span class="line">            wrappedEpochBytes.putInt(-1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IOException(&quot;Leaders epoch, &quot; + newEpoch + &quot; is less than accepted epoch, &quot; + self.getAcceptedEpoch());</span><br><span class="line">        &#125;</span><br><span class="line">        QuorumPacket ackNewEpoch = new QuorumPacket(Leader.ACKEPOCH, lastLoggedZxid, epochBytes, null);</span><br><span class="line">        writePacket(ackNewEpoch, true);</span><br><span class="line">        //返回leader的最新事务zxid</span><br><span class="line">        return ZxidUtils.makeZxid(newEpoch, 0);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (newEpoch &gt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">            //更新事务批次</span><br><span class="line">            self.setAcceptedEpoch(newEpoch);</span><br><span class="line">        &#125;</span><br><span class="line">        if (qp.getType() != Leader.NEWLEADER) &#123;</span><br><span class="line">            LOG.error(&quot;First packet should have been NEWLEADER&quot;);</span><br><span class="line">            throw new IOException(&quot;First packet should have been NEWLEADER&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //返回leader的最新事务zxid</span><br><span class="line">        return qp.getZxid();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（三、1）FOLLOWER的syncWithLeader方法"><a href="#3、接（三、1）FOLLOWER的syncWithLeader方法" class="headerlink" title="3、接（三、1）FOLLOWER的syncWithLeader方法"></a>3、接（三、1）FOLLOWER的syncWithLeader方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">protected void syncWithLeader(long newLeaderZxid) throws Exception&#123;</span><br><span class="line">    QuorumPacket ack = new QuorumPacket(Leader.ACK, 0, null, null);</span><br><span class="line">    QuorumPacket qp = new QuorumPacket();</span><br><span class="line">    long newEpoch = ZxidUtils.getEpochFromZxid(newLeaderZxid);</span><br><span class="line">    </span><br><span class="line">    QuorumVerifier newLeaderQV = null;</span><br><span class="line">    </span><br><span class="line">    boolean snapshotNeeded = true;</span><br><span class="line">    boolean syncSnapshot = false;</span><br><span class="line">    readPacket(qp);</span><br><span class="line">    LinkedList&lt;Long&gt; packetsCommitted = new LinkedList&lt;Long&gt;();</span><br><span class="line">    LinkedList&lt;PacketInFlight&gt; packetsNotCommitted = new LinkedList&lt;PacketInFlight&gt;();</span><br><span class="line">    synchronized (zk) &#123;</span><br><span class="line">        if (qp.getType() == Leader.DIFF) &#123;</span><br><span class="line">            //无需同步snaphot</span><br><span class="line">            snapshotNeeded = false;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (qp.getType() == Leader.SNAP) &#123;</span><br><span class="line">            //Leader给follower发送的是SNAP文件</span><br><span class="line">            //follower将SNAP文件替换到内存</span><br><span class="line">            zk.getZKDatabase().deserializeSnapshot(leaderIs);</span><br><span class="line">            ...</span><br><span class="line">            zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());</span><br><span class="line"></span><br><span class="line">            syncSnapshot = true;</span><br><span class="line">        &#125; else if (qp.getType() == Leader.TRUNC) &#123;</span><br><span class="line">            //follower废弃大于Zxid的事务</span><br><span class="line">            boolean truncated=zk.getZKDatabase().truncateLog(qp.getZxid());</span><br><span class="line">            zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        zk.getZKDatabase().initConfigInZKDatabase(self.getQuorumVerifier());</span><br><span class="line">        //创建Session管理器</span><br><span class="line">        zk.createSessionTracker();            </span><br><span class="line">        long lastQueued = 0;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        boolean isPreZAB1_0 = true;</span><br><span class="line">        //同步SNAP则不需要同步事务</span><br><span class="line">        boolean writeToTxnLog = !snapshotNeeded;</span><br><span class="line">        //开始同步事务</span><br><span class="line">        outerLoop:</span><br><span class="line">        while (self.isRunning()) &#123;</span><br><span class="line">            readPacket(qp);</span><br><span class="line">            switch(qp.getType()) &#123;</span><br><span class="line">            case Leader.PROPOSAL:</span><br><span class="line">                //leader发来的提议</span><br><span class="line">                PacketInFlight pif = new PacketInFlight();</span><br><span class="line">                pif.hdr = new TxnHeader();</span><br><span class="line">                pif.rec = SerializeUtils.deserializeTxn(qp.getData(), pif.hdr);</span><br><span class="line">                //加入到未commit队列</span><br><span class="line">                packetsNotCommitted.add(pif);</span><br><span class="line">                break;</span><br><span class="line">            case Leader.COMMIT:</span><br><span class="line">            case Leader.COMMITANDACTIVATE:</span><br><span class="line">                pif = packetsNotCommitted.peekFirst();</span><br><span class="line">                //已同步snaphot则不需同步事务</span><br><span class="line">                if (!writeToTxnLog) &#123;</span><br><span class="line">                    if (pif.hdr.getZxid() != qp.getZxid()) &#123;</span><br><span class="line">                        LOG.warn(&quot;Committing &quot; + qp.getZxid() + &quot;, but next proposal is &quot; + pif.hdr.getZxid());</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //事务处理到内存db</span><br><span class="line">                        zk.processTxn(pif.hdr, pif.rec);</span><br><span class="line">                        packetsNotCommitted.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    packetsCommitted.add(qp.getZxid());</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case Leader.INFORM:</span><br><span class="line">            case Leader.INFORMANDACTIVATE:</span><br><span class="line">                ...                   </span><br><span class="line">                break;                </span><br><span class="line">            case Leader.UPTODATE:</span><br><span class="line">                ...</span><br><span class="line">                self.setZooKeeperServer(zk);</span><br><span class="line">                self.adminServer.setZooKeeperServer(zk);</span><br><span class="line">                //跳出同步数据循环</span><br><span class="line">                break outerLoop;</span><br><span class="line">            case Leader.NEWLEADER: // Getting NEWLEADER here instead of in discovery </span><br><span class="line">                // means this is Zab 1.0</span><br><span class="line">               if (qp.getData()!=null &amp;&amp; qp.getData().length &gt; 1) &#123;</span><br><span class="line">                   try &#123;                       </span><br><span class="line">                       QuorumVerifier qv = self.configFromString(new String(qp.getData()));</span><br><span class="line">                       self.setLastSeenQuorumVerifier(qv, true);</span><br><span class="line">                       newLeaderQV = qv;</span><br><span class="line">                   &#125; catch (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               //将从leader获取到的内存文件保存到磁盘</span><br><span class="line">               if (snapshotNeeded) &#123;</span><br><span class="line">                   zk.takeSnapshot(syncSnapshot);</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">                self.setCurrentEpoch(newEpoch);</span><br><span class="line">                writeToTxnLog = true; //Anything after this needs to go to the transaction log, not applied directly in memory</span><br><span class="line">                isPreZAB1_0 = false;</span><br><span class="line">                //同步数据完成给leader发送确认信息</span><br><span class="line">                writePacket(new QuorumPacket(Leader.ACK, newLeaderZxid, null, null), true);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ack.setZxid(ZxidUtils.makeZxid(newEpoch, 0));</span><br><span class="line">    //同步数据完成给leader发送确认信息</span><br><span class="line">    writePacket(ack, true);</span><br><span class="line">    sock.setSoTimeout(self.tickTime * self.syncLimit);</span><br><span class="line">    //启动FollowerZooKeeperServer</span><br><span class="line">    zk.startup();</span><br><span class="line">    //更新选票事务批次</span><br><span class="line">    self.updateElectionVote(newEpoch);</span><br><span class="line"></span><br><span class="line">    // We need to log the stuff that came in between the snapshot and the uptodate</span><br><span class="line">    if (zk instanceof FollowerZooKeeperServer) &#123;</span><br><span class="line">        FollowerZooKeeperServer fzk = (FollowerZooKeeperServer)zk;</span><br><span class="line">        //处理未投票事务</span><br><span class="line">        for(PacketInFlight p: packetsNotCommitted) &#123;</span><br><span class="line">            fzk.logRequest(p.hdr, p.rec);</span><br><span class="line">        &#125;</span><br><span class="line">        for(Long zxid: packetsCommitted) &#123;</span><br><span class="line">            //处理已投票事务</span><br><span class="line">            fzk.commit(zxid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (zk instanceof ObserverZooKeeperServer) &#123;</span><br><span class="line">        ObserverZooKeeperServer ozk = (ObserverZooKeeperServer) zk;</span><br><span class="line">        for (PacketInFlight p : packetsNotCommitted) &#123;</span><br><span class="line">            Long zxid = packetsCommitted.peekFirst();</span><br><span class="line">            if (p.hdr.getZxid() != zxid) &#123;</span><br><span class="line">                // log warning message if there is no matching commit</span><br><span class="line">                // old leader send outstanding proposal to observer</span><br><span class="line">                LOG.warn(&quot;Committing &quot; + Long.toHexString(zxid)</span><br><span class="line">                        + &quot;, but next proposal is &quot;</span><br><span class="line">                        + Long.toHexString(p.hdr.getZxid()));</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            packetsCommitted.remove();</span><br><span class="line">            Request request = new Request(null, p.hdr.getClientId(),</span><br><span class="line">                    p.hdr.getCxid(), p.hdr.getType(), null, null);</span><br><span class="line">            request.setTxn(p.rec);</span><br><span class="line">            request.setHdr(p.hdr);</span><br><span class="line">            ozk.commitRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // New server type need to handle in-flight packets</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Unknown server type&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、FollowerZooKeeperServer的setupRequestProcessors方法"><a href="#4、FollowerZooKeeperServer的setupRequestProcessors方法" class="headerlink" title="4、FollowerZooKeeperServer的setupRequestProcessors方法"></a>4、FollowerZooKeeperServer的setupRequestProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void setupRequestProcessors() &#123;</span><br><span class="line">    RequestProcessor finalProcessor = new FinalRequestProcessor(this);</span><br><span class="line">    commitProcessor = new CommitProcessor(finalProcessor,</span><br><span class="line">            Long.toString(getServerId()), true, getZooKeeperServerListener());</span><br><span class="line">    commitProcessor.start();</span><br><span class="line">    firstProcessor = new FollowerRequestProcessor(this, commitProcessor);</span><br><span class="line">    ((FollowerRequestProcessor) firstProcessor).start();</span><br><span class="line">    syncProcessor = new SyncRequestProcessor(this,</span><br><span class="line">            new SendAckRequestProcessor((Learner)getFollower()));</span><br><span class="line">    syncProcessor.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>follower的初始化，到这儿就结束了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、LEADER选举过程&quot;&gt;&lt;a href=&quot;#一、LEADER选举过程&quot; class=&quot;headerlink&quot; title=&quot;一、LEADER选举过程&quot;&gt;&lt;/a&gt;一、LEADER选举过程&lt;/h3&gt;&lt;h4 id=&quot;1、QuorumPeerMain的runFromC
      
    
    </summary>
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码项目部署</title>
    <link href="http://yoursite.com/2020/01/13/tomcat%E6%BA%90%E7%A0%81/Tomcat%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/01/13/tomcat源码/Tomcat源码项目部署/</id>
    <published>2020-01-13T14:32:38.076Z</published>
    <updated>2018-07-13T13:31:05.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、项目部署"><a href="#一、项目部署" class="headerlink" title="一、项目部署"></a>一、项目部署</h3><h4 id="1、HostConfig的lifecycleEvent方法"><a href="#1、HostConfig的lifecycleEvent方法" class="headerlink" title="1、HostConfig的lifecycleEvent方法"></a>1、HostConfig的lifecycleEvent方法</h4><p>HostConfig为StandardHost容器的监听器，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void lifecycleEvent(LifecycleEvent event) &#123;</span><br><span class="line"></span><br><span class="line">    // Identify the host we are associated with</span><br><span class="line">    try &#123;</span><br><span class="line">        host = (Host) event.getLifecycle();</span><br><span class="line">        if (host instanceof StandardHost) &#123;</span><br><span class="line">            //是否复制xml到$CATALINA_HOME/conf/[enginename]/[hostname]/，默认false</span><br><span class="line">            setCopyXML(((StandardHost) host).isCopyXML());</span><br><span class="line">            //是否部署context descriptor，只包含Context元素的xml格式的部署文件</span><br><span class="line">            setDeployXML(((StandardHost) host).isDeployXML());</span><br><span class="line">            //是否解压war包，默认true</span><br><span class="line">            setUnpackWARs(((StandardHost) host).isUnpackWARs());</span><br><span class="line">            //设置默认的Context为StandardContext</span><br><span class="line">            setContextClass(((StandardHost) host).getContextClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (ClassCastException e) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.cce&quot;, event.getLifecycle()), e);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process the event that has occurred</span><br><span class="line">    if (event.getType().equals(Lifecycle.PERIODIC_EVENT)) &#123;</span><br><span class="line">        check();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</span><br><span class="line">        //校验appBaseFile、hostConfigBase文件夹</span><br><span class="line">        beforeStart();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.START_EVENT)) &#123;</span><br><span class="line">        //部署web项目</span><br><span class="line">        start();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.STOP_EVENT)) &#123;</span><br><span class="line">        //从MBeanServer中移除HostConfig</span><br><span class="line">        stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、HostConfig的start方法"><a href="#2、HostConfig的start方法" class="headerlink" title="2、HostConfig的start方法"></a>2、HostConfig的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(sm.getString(&quot;hostConfig.start&quot;));</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //向MBeanServer中注册HostConfig</span><br><span class="line">        ObjectName hostON = host.getObjectName();</span><br><span class="line">        oname = new ObjectName</span><br><span class="line">            (hostON.getDomain() + &quot;:type=Deployer,host=&quot; + host.getName());</span><br><span class="line">        Registry.getRegistry(null, null).registerComponent</span><br><span class="line">            (this, oname, this.getClass().getName());</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.jmx.register&quot;, oname), e);</span><br><span class="line">    &#125;</span><br><span class="line">    //appBaseFile不为文件夹，则不立即部署</span><br><span class="line">    if (!host.getAppBaseFile().isDirectory()) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.appBase&quot;, host.getName(),</span><br><span class="line">                host.getAppBaseFile().getPath()));</span><br><span class="line">        host.setDeployOnStartup(false);</span><br><span class="line">        host.setAutoDeploy(false);</span><br><span class="line">    &#125;</span><br><span class="line">    //是否启动时部署</span><br><span class="line">    if (host.getDeployOnStartup())</span><br><span class="line">        //部署web项目</span><br><span class="line">        deployApps();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、HostConfig的deployApps方法"><a href="#3、HostConfig的deployApps方法" class="headerlink" title="3、HostConfig的deployApps方法"></a>3、HostConfig的deployApps方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void deployApps() &#123;</span><br><span class="line">    //项目文件夹，默认webapps</span><br><span class="line">    File appBase = host.getAppBaseFile();</span><br><span class="line">    //部署xml文件目录，默认$CATALINA_HOME/conf/[enginename]/[hostname]/</span><br><span class="line">    File configBase = host.getConfigBaseFile();</span><br><span class="line">    //获取webapps文件夹下的待部署项目</span><br><span class="line">    String[] filteredAppPaths = filterAppPaths(appBase.list());</span><br><span class="line">    // Deploy XML descriptors from configBase</span><br><span class="line">    //部署xml文件</span><br><span class="line">    deployDescriptors(configBase, configBase.list());</span><br><span class="line">    // Deploy WARs</span><br><span class="line">    //部署war包</span><br><span class="line">    deployWARs(appBase, filteredAppPaths);</span><br><span class="line">    // Deploy expanded folders</span><br><span class="line">    //部署项目文件夹</span><br><span class="line">    deployDirectories(appBase, filteredAppPaths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、HostConfig的deployDirectories方法"><a href="#4、HostConfig的deployDirectories方法" class="headerlink" title="4、HostConfig的deployDirectories方法"></a>4、HostConfig的deployDirectories方法</h4><p>以部署文件夹项目为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">protected void deployDirectories(File appBase, String[] files) &#123;</span><br><span class="line"></span><br><span class="line">    if (files == null)</span><br><span class="line">        return;</span><br><span class="line">    //获取线程池</span><br><span class="line">    ExecutorService es = host.getStartStopExecutor();</span><br><span class="line">    List&lt;Future&lt;?&gt;&gt; results = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        if (files[i].equalsIgnoreCase(&quot;META-INF&quot;))</span><br><span class="line">            continue;</span><br><span class="line">        if (files[i].equalsIgnoreCase(&quot;WEB-INF&quot;))</span><br><span class="line">            continue;</span><br><span class="line">        //创建文件的file引用</span><br><span class="line">        File dir = new File(appBase, files[i]);</span><br><span class="line">        if (dir.isDirectory()) &#123;</span><br><span class="line">            //根据文件夹的名字来设置context的名字</span><br><span class="line">            ContextName cn = new ContextName(files[i], false);</span><br><span class="line">            //已部署</span><br><span class="line">            if (isServiced(cn.getName()) || deploymentExists(cn.getName()))</span><br><span class="line">                continue;</span><br><span class="line">            //部署该项目</span><br><span class="line">            results.add(es.submit(new DeployDirectory(this, cn, dir)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (Future&lt;?&gt; result : results) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //阻塞等待</span><br><span class="line">            result.get();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    &quot;hostConfig.deployDir.threaded.error&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、DeployDirectory的run方法"><a href="#5、DeployDirectory的run方法" class="headerlink" title="5、DeployDirectory的run方法"></a>5、DeployDirectory的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    //部署项目</span><br><span class="line">    config.deployDirectory(cn, dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、HostConfig的deployDirectory方法"><a href="#6、HostConfig的deployDirectory方法" class="headerlink" title="6、HostConfig的deployDirectory方法"></a>6、HostConfig的deployDirectory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">protected void deployDirectory(ContextName cn, File dir) &#123;</span><br><span class="line"></span><br><span class="line">    long startTime = 0;</span><br><span class="line">    // Deploy the application in this directory</span><br><span class="line">    if( log.isInfoEnabled() ) &#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        //打印正在部署</span><br><span class="line">        log.info(sm.getString(&quot;hostConfig.deployDir&quot;,</span><br><span class="line">                dir.getAbsolutePath()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Context context = null;</span><br><span class="line">    //当前context的配置文件，&quot;META-INF/context.xml&quot;</span><br><span class="line">    File xml = new File(dir, Constants.ApplicationContextXml);</span><br><span class="line">    //获取host的配置文件夹里面当前context的配置</span><br><span class="line">    File xmlCopy = new File(host.getConfigBaseFile(), cn.getBaseName() + &quot;.xml&quot;);</span><br><span class="line">    //已经部署的app</span><br><span class="line">    DeployedApplication deployedApp;</span><br><span class="line">    //是否复制xml</span><br><span class="line">    boolean copyThisXml = isCopyXML();</span><br><span class="line">    //是否用dir下的xml部署</span><br><span class="line">    boolean deployThisXML = isDeployThisXML(dir, cn);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">            synchronized (digesterLock) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //解析context.xml，默认返回StandardContext</span><br><span class="line">                    context = (Context) digester.parse(xml);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    log.error(sm.getString(</span><br><span class="line">                            &quot;hostConfig.deployDescriptor.error&quot;,</span><br><span class="line">                            xml), e);</span><br><span class="line">                    context = new FailedContext();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    digester.reset();</span><br><span class="line">                    if (context == null) &#123;</span><br><span class="line">                        context = new FailedContext();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //是否将context.xml复制到host的配置文件夹里</span><br><span class="line">            if (copyThisXml == false &amp;&amp; context instanceof StandardContext) &#123;</span><br><span class="line">                // Host is using default value. Context may override it.</span><br><span class="line">                copyThisXml = ((StandardContext) context).getCopyXML();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (copyThisXml) &#123;</span><br><span class="line">                Files.copy(xml.toPath(), xmlCopy.toPath());</span><br><span class="line">                context.setConfigFile(xmlCopy.toURI().toURL());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                context.setConfigFile(xml.toURI().toURL());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (!deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">            // Block deployment as META-INF/context.xml may contain security</span><br><span class="line">            // configuration necessary for a secure deployment.</span><br><span class="line">            log.error(sm.getString(&quot;hostConfig.deployDescriptor.blocked&quot;,</span><br><span class="line">                    cn.getPath(), xml, xmlCopy));</span><br><span class="line">            context = new FailedContext();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //未发现context.xml，直接实例化StandardContext</span><br><span class="line">            context = (Context) Class.forName(contextClass).getConstructor().newInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        //添加ContextConfig监听器</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(host.getConfigClass());</span><br><span class="line">        LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();</span><br><span class="line">        context.addLifecycleListener(listener);</span><br><span class="line">        //设置当前context的名字</span><br><span class="line">        context.setName(cn.getName());</span><br><span class="line">        //应用所在的路径</span><br><span class="line">        context.setPath(cn.getPath());</span><br><span class="line">        //当前版本</span><br><span class="line">        context.setWebappVersion(cn.getVersion());</span><br><span class="line">        //设置自定义的项目路径</span><br><span class="line">        context.setDocBase(cn.getBaseName());</span><br><span class="line">        //在host添加context,并启动context</span><br><span class="line">        host.addChild(context);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.deployDir.error&quot;,</span><br><span class="line">                dir.getAbsolutePath()), t);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        deployedApp = new DeployedApplication(cn.getName(),</span><br><span class="line">                xml.exists() &amp;&amp; deployThisXML &amp;&amp; copyThisXml);</span><br><span class="line"></span><br><span class="line">        // Fake re-deploy resource to detect if a WAR is added at a later</span><br><span class="line">        // point</span><br><span class="line">        deployedApp.redeployResources.put(dir.getAbsolutePath() + &quot;.war&quot;,</span><br><span class="line">                Long.valueOf(0));</span><br><span class="line">        deployedApp.redeployResources.put(dir.getAbsolutePath(),</span><br><span class="line">                Long.valueOf(dir.lastModified()));</span><br><span class="line">        if (deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">            if (copyThisXml) &#123;</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xmlCopy.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(xmlCopy.lastModified()));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xml.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(xml.lastModified()));</span><br><span class="line">                // Fake re-deploy resource to detect if a context.xml file is</span><br><span class="line">                // added at a later point</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xmlCopy.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(0));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Fake re-deploy resource to detect if a context.xml file is</span><br><span class="line">            // added at a later point</span><br><span class="line">            deployedApp.redeployResources.put(</span><br><span class="line">                    xmlCopy.getAbsolutePath(),</span><br><span class="line">                    Long.valueOf(0));</span><br><span class="line">            if (!xml.exists()) &#123;</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xml.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(0));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addWatchedResources(deployedApp, dir.getAbsolutePath(), context);</span><br><span class="line">        // Add the global redeploy resources (which are never deleted) at</span><br><span class="line">        // the end so they don&apos;t interfere with the deletion process</span><br><span class="line">        addGlobalRedeployResources(deployedApp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deployed.put(cn.getName(), deployedApp);</span><br><span class="line"></span><br><span class="line">    if( log.isInfoEnabled() ) &#123;</span><br><span class="line">        log.info(sm.getString(&quot;hostConfig.deployDir.finished&quot;,</span><br><span class="line">                dir.getAbsolutePath(), Long.valueOf(System.currentTimeMillis() - startTime)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、StandardContext的startInternal方法"><a href="#7、StandardContext的startInternal方法" class="headerlink" title="7、StandardContext的startInternal方法"></a>7、StandardContext的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    if(log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Starting &quot; + getBaseName());</span><br><span class="line"></span><br><span class="line">    // Send j2ee.state.starting notification</span><br><span class="line">    //广播启动的JMX通知</span><br><span class="line">    if (this.getObjectName() != null) &#123;</span><br><span class="line">        Notification notification = new Notification(&quot;j2ee.state.starting&quot;,</span><br><span class="line">                this.getObjectName(), sequenceNumber.getAndIncrement());</span><br><span class="line">        broadcaster.sendNotification(notification);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置配置标记为否</span><br><span class="line">    setConfigured(false);</span><br><span class="line">    boolean ok = true;</span><br><span class="line"></span><br><span class="line">    // Currently this is effectively a NO-OP but needs to be called to</span><br><span class="line">    // ensure the NamingResources follows the correct lifecycle</span><br><span class="line">    //启动当前维护的JNDI资源</span><br><span class="line">    if (namingResources != null) &#123;</span><br><span class="line">        namingResources.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Post work directory</span><br><span class="line">    //初始化临时工作目录workDir,默认为$CATALINA-BASE/work/&lt;Engine名称&gt;/&lt;Host名称&gt;/&lt;Context名称&gt;</span><br><span class="line">    postWorkDirectory();</span><br><span class="line"></span><br><span class="line">    // Add missing components as necessary</span><br><span class="line">    //初始化WebResouceRoot并启动,WebResouceRoot维护了Web应用的资源（Class文件、Jar包以及其他资源文件）</span><br><span class="line">    if (getResources() == null) &#123;   // (1) Required by Loader</span><br><span class="line">        if (log.isDebugEnabled())</span><br><span class="line">            log.debug(&quot;Configuring default Resources&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            setResources(new StandardRoot(this));</span><br><span class="line">        &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;standardContext.resourcesInit&quot;), e);</span><br><span class="line">            ok = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        resourcesStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (getLoader() == null) &#123;</span><br><span class="line">        //创建Web应用类加载器webappLoader,启动后创建Web应用类加载器ParallelWebappClassLoader</span><br><span class="line">        WebappLoader webappLoader = new WebappLoader(getParentClassLoader());</span><br><span class="line">        webappLoader.setDelegate(getDelegate());</span><br><span class="line">        setLoader(webappLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // An explicit cookie processor hasn&apos;t been specified; use the default</span><br><span class="line">    // 创建Cookie处理器，默认为Rfc6265CookieProcessor。</span><br><span class="line">    if (cookieProcessor == null) &#123;</span><br><span class="line">        cookieProcessor = new Rfc6265CookieProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize character set mapper</span><br><span class="line">    // 设置字符集映射,默认CharsetMapper</span><br><span class="line">    getCharsetMapper();</span><br><span class="line"></span><br><span class="line">    // Validate required extensions</span><br><span class="line">    // 检测web应用依赖</span><br><span class="line">    boolean dependencyCheck = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        dependencyCheck = ExtensionValidator.validateApplication(getResources(), this);</span><br><span class="line">    &#125; catch (IOException ioe) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;standardContext.extensionValidationError&quot;), ioe);</span><br><span class="line">        dependencyCheck = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!dependencyCheck) &#123;</span><br><span class="line">        // do not make application available if dependency check fails</span><br><span class="line">        ok = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Reading the &quot;catalina.useNaming&quot; environment variable</span><br><span class="line">    // 注册NamingContextListener</span><br><span class="line">    String useNamingProperty = System.getProperty(&quot;catalina.useNaming&quot;);</span><br><span class="line">    if ((useNamingProperty != null)</span><br><span class="line">        &amp;&amp; (useNamingProperty.equals(&quot;false&quot;))) &#123;</span><br><span class="line">        useNaming = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ok &amp;&amp; isUseNaming()) &#123;</span><br><span class="line">        if (getNamingContextListener() == null) &#123;</span><br><span class="line">            NamingContextListener ncl = new NamingContextListener();</span><br><span class="line">            ncl.setName(getNamingContextName());</span><br><span class="line">            ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());</span><br><span class="line">            addLifecycleListener(ncl);</span><br><span class="line">            setNamingContextListener(ncl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Standard container startup</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Processing standard container startup&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Binding thread</span><br><span class="line">    // ParallelWebappClassLoader绑定到当前线程</span><br><span class="line">    ClassLoader oldCCL = bindThread();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            // Start our subordinate components, if any</span><br><span class="line">            Loader loader = getLoader();</span><br><span class="line">            if (loader instanceof Lifecycle) &#123;</span><br><span class="line">                ((Lifecycle) loader).start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // since the loader just started, the webapp classloader is now</span><br><span class="line">            // created.</span><br><span class="line">            // 设置ParallelWebappClassLoader属性</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesRmiTargets&quot;,</span><br><span class="line">                    getClearReferencesRmiTargets());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesStopThreads&quot;,</span><br><span class="line">                    getClearReferencesStopThreads());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesStopTimerThreads&quot;,</span><br><span class="line">                    getClearReferencesStopTimerThreads());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesHttpClientKeepAliveThread&quot;,</span><br><span class="line">                    getClearReferencesHttpClientKeepAliveThread());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesObjectStreamClassCaches&quot;,</span><br><span class="line">                    getClearReferencesObjectStreamClassCaches());</span><br><span class="line"></span><br><span class="line">            // By calling unbindThread and bindThread in a row, we setup the</span><br><span class="line">            // current Thread CCL to be the webapp classloader</span><br><span class="line">            unbindThread(oldCCL);</span><br><span class="line">            oldCCL = bindThread();</span><br><span class="line"></span><br><span class="line">            // Initialize logger again. Other components might have used it</span><br><span class="line">            // too early, so it should be reset.</span><br><span class="line">            logger = null;</span><br><span class="line">            getLogger();</span><br><span class="line">            //启动安全组件</span><br><span class="line">            Realm realm = getRealmInternal();</span><br><span class="line">            if(null != realm) &#123;</span><br><span class="line">                if (realm instanceof Lifecycle) &#123;</span><br><span class="line">                    ((Lifecycle) realm).start();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Place the CredentialHandler into the ServletContext so</span><br><span class="line">                // applications can have access to it. Wrap it in a &quot;safe&quot;</span><br><span class="line">                // handler so application&apos;s can&apos;t modify it.</span><br><span class="line">                CredentialHandler safeHandler = new CredentialHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean matches(String inputCredentials, String storedCredentials) &#123;</span><br><span class="line">                        return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public String mutate(String inputCredentials) &#123;</span><br><span class="line">                        return getRealmInternal().getCredentialHandler().mutate(inputCredentials);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Notify our interested LifecycleListeners</span><br><span class="line">            // 广播&quot;configure_start&quot;事件</span><br><span class="line">            fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);</span><br><span class="line"></span><br><span class="line">            // Start our child containers, if not already started</span><br><span class="line">            // 启动子容器Wrapper</span><br><span class="line">            for (Container child : findChildren()) &#123;</span><br><span class="line">                if (!child.getState().isAvailable()) &#123;</span><br><span class="line">                    child.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Start the Valves in our pipeline (including the basic),</span><br><span class="line">            // if any</span><br><span class="line">            //启动pipeline</span><br><span class="line">            if (pipeline instanceof Lifecycle) &#123;</span><br><span class="line">                ((Lifecycle) pipeline).start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Acquire clustered manager</span><br><span class="line">            // 创建会话管理器</span><br><span class="line">            Manager contextManager = null;</span><br><span class="line">            Manager manager = getManager();</span><br><span class="line">            if (manager == null) &#123;</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;standardContext.cluster.noManager&quot;,</span><br><span class="line">                            Boolean.valueOf((getCluster() != null)),</span><br><span class="line">                            Boolean.valueOf(distributable)));</span><br><span class="line">                &#125;</span><br><span class="line">                if ( (getCluster() != null) &amp;&amp; distributable) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        contextManager = getCluster().createManager(getName());</span><br><span class="line">                    &#125; catch (Exception ex) &#123;</span><br><span class="line">                        log.error(&quot;standardContext.clusterFail&quot;, ex);</span><br><span class="line">                        ok = false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    contextManager = new StandardManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Configure default manager if none was specified</span><br><span class="line">            if (contextManager != null) &#123;</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;standardContext.manager&quot;,</span><br><span class="line">                            contextManager.getClass().getName()));</span><br><span class="line">                &#125;</span><br><span class="line">                setManager(contextManager);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (manager!=null &amp;&amp; (getCluster() != null) &amp;&amp; distributable) &#123;</span><br><span class="line">                //let the cluster know that there is a context that is distributable</span><br><span class="line">                //and that it has its own manager</span><br><span class="line">                getCluster().registerManager(manager);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!getConfigured()) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;standardContext.configurationFail&quot;));</span><br><span class="line">            ok = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // We put the resources into the servlet context</span><br><span class="line">        // 将Context的Web资源集合添加到ServletContext</span><br><span class="line">        if (ok)</span><br><span class="line">            getServletContext().setAttribute</span><br><span class="line">                (Globals.RESOURCES_ATTR, getResources());</span><br><span class="line">        //创建实例管理器instanceManager，用于创建对象实例，如Servlet、Filter等</span><br><span class="line">        if (ok ) &#123;</span><br><span class="line">            if (getInstanceManager() == null) &#123;</span><br><span class="line">                javax.naming.Context context = null;</span><br><span class="line">                if (isUseNaming() &amp;&amp; getNamingContextListener() != null) &#123;</span><br><span class="line">                    context = getNamingContextListener().getEnvContext();</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;String, Map&lt;String, String&gt;&gt; injectionMap = buildInjectionMap(</span><br><span class="line">                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());</span><br><span class="line">                setInstanceManager(new DefaultInstanceManager(context,</span><br><span class="line">                        injectionMap, this, this.getClass().getClassLoader()));</span><br><span class="line">            &#125;</span><br><span class="line">            getServletContext().setAttribute(</span><br><span class="line">                    InstanceManager.class.getName(), getInstanceManager());</span><br><span class="line">            InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Create context attributes that will be required</span><br><span class="line">        // 将Jar包扫描器添加到ServletContext</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            getServletContext().setAttribute(</span><br><span class="line">                    JarScanner.class.getName(), getJarScanner());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Set up the context init params</span><br><span class="line">        // 合并参数</span><br><span class="line">        mergeParameters();</span><br><span class="line"></span><br><span class="line">        // Call ServletContainerInitializers</span><br><span class="line">        // 启动添加到Context的ServletContainerInitializer</span><br><span class="line">        for (Map.Entry&lt;ServletContainerInitializer, Set&lt;Class&lt;?&gt;&gt;&gt; entry :</span><br><span class="line">            initializers.entrySet()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                entry.getKey().onStartup(entry.getValue(),</span><br><span class="line">                        getServletContext());</span><br><span class="line">            &#125; catch (ServletException e) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.sciFail&quot;), e);</span><br><span class="line">                ok = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Configure and call application event listeners</span><br><span class="line">        // 实例化应用类监听器ApplicationListener</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            if (!listenerStart()) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.listenerFail&quot;));</span><br><span class="line">                ok = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Check constraints for uncovered HTTP methods</span><br><span class="line">        // Needs to be after SCIs and listeners as they may programmatically</span><br><span class="line">        // change constraints</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            checkConstraintsForUncoveredMethods(findConstraints());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Start manager</span><br><span class="line">            // 启动会话管理器</span><br><span class="line">            Manager manager = getManager();</span><br><span class="line">            if (manager instanceof Lifecycle) &#123;</span><br><span class="line">                ((Lifecycle) manager).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch(Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;standardContext.managerFail&quot;), e);</span><br><span class="line">            ok = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Configure and call application filters</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            // 实例化FilterConfig、Filter并调用Filter.init()</span><br><span class="line">            if (!filterStart()) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.filterFail&quot;));</span><br><span class="line">                ok = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Load and initialize all &quot;load on startup&quot; servlets</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            // 对于loadOnStartup大于等于0的Wrapper，调用Wrapper.load()，</span><br><span class="line">            // 该方法负责实例化Servlet，并调用Servlet.init()进行初始化</span><br><span class="line">            if (!loadOnStartup(findChildren()))&#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.servletFail&quot;));</span><br><span class="line">                ok = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Start ContainerBackgroundProcessor thread</span><br><span class="line">        // 启动后台线程</span><br><span class="line">        super.threadStart();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Unbinding thread</span><br><span class="line">        unbindThread(oldCCL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Set available status depending upon startup success</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        if (log.isDebugEnabled())</span><br><span class="line">            log.debug(&quot;Starting completed&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.error(sm.getString(&quot;standardContext.startFailed&quot;, getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    startTime=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    // Send j2ee.state.running notification</span><br><span class="line">    // 发布正在运行的JMX通知</span><br><span class="line">    if (ok &amp;&amp; (this.getObjectName() != null)) &#123;</span><br><span class="line">        Notification notification =</span><br><span class="line">            new Notification(&quot;j2ee.state.running&quot;, this.getObjectName(),</span><br><span class="line">                             sequenceNumber.getAndIncrement());</span><br><span class="line">        broadcaster.sendNotification(notification);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // The WebResources implementation caches references to JAR files. On</span><br><span class="line">    // some platforms these references may lock the JAR files. Since web</span><br><span class="line">    // application start is likely to have read from lots of JARs, trigger</span><br><span class="line">    // a clean-up now.</span><br><span class="line">    // 释放资源，如关闭jar文件</span><br><span class="line">    getResources().gc();</span><br><span class="line"></span><br><span class="line">    // Reinitializing if something went wrong</span><br><span class="line">    // 设置Context状态</span><br><span class="line">    if (!ok) &#123;</span><br><span class="line">        setState(LifecycleState.FAILED);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ContextConfig的lifecycleEvent方法"><a href="#7、ContextConfig的lifecycleEvent方法" class="headerlink" title="7、ContextConfig的lifecycleEvent方法"></a>7、ContextConfig的lifecycleEvent方法</h4><p>监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void lifecycleEvent(LifecycleEvent event) &#123;</span><br><span class="line"></span><br><span class="line">    // Identify the context we are associated with</span><br><span class="line">    try &#123;</span><br><span class="line">        context = (Context) event.getLifecycle();</span><br><span class="line">    &#125; catch (ClassCastException e) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;contextConfig.cce&quot;, event.getLifecycle()), e);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process the event that has occurred</span><br><span class="line">    if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) &#123;</span><br><span class="line">        //解析web.xml</span><br><span class="line">        configureStart();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</span><br><span class="line">        //如需要，解压war包将Context的docBase设置为解压后的路径，将Web应用目录复制到临时文件夹下防止对资源加锁</span><br><span class="line">        beforeStart();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.AFTER_START_EVENT)) &#123;</span><br><span class="line">        // Restore docBase for management tools</span><br><span class="line">        if (originalDocBase != null) &#123;</span><br><span class="line">            context.setDocBase(originalDocBase);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.CONFIGURE_STOP_EVENT)) &#123;</span><br><span class="line">        configureStop();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) &#123;</span><br><span class="line">        //解析context.xml</span><br><span class="line">        init();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.AFTER_DESTROY_EVENT)) &#123;</span><br><span class="line">        destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、ContextConfig的init方法"><a href="#8、ContextConfig的init方法" class="headerlink" title="8、ContextConfig的init方法"></a>8、ContextConfig的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected void init() &#123;</span><br><span class="line">    // Called from StandardContext.init()</span><br><span class="line">    // 创建解析规则</span><br><span class="line">    Digester contextDigester = createContextDigester();</span><br><span class="line">    contextDigester.getParser();</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;contextConfig.init&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    context.setConfigured(false);</span><br><span class="line">    ok = true;</span><br><span class="line">    //解析context.xml</span><br><span class="line">    contextConfig(contextDigester);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ContextConfig的contextConfig方法"><a href="#9、ContextConfig的contextConfig方法" class="headerlink" title="9、ContextConfig的contextConfig方法"></a>9、ContextConfig的contextConfig方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">protected void contextConfig(Digester digester) &#123;</span><br><span class="line"></span><br><span class="line">    String defaultContextXml = null;</span><br><span class="line">    // Open the default context.xml file, if it exists</span><br><span class="line">    if (context instanceof StandardContext) &#123;</span><br><span class="line">        defaultContextXml = ((StandardContext)context).getDefaultContextXml();</span><br><span class="line">    &#125;</span><br><span class="line">    // set the default if we don&apos;t have any overrides</span><br><span class="line">    if (defaultContextXml == null) &#123;</span><br><span class="line">        //Catalina容器级默认配置文件,&quot;conf/context.xml&quot;</span><br><span class="line">        defaultContextXml = Constants.DefaultContextXml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!context.getOverride()) &#123;</span><br><span class="line">        File defaultContextFile = new File(defaultContextXml);</span><br><span class="line">        if (!defaultContextFile.isAbsolute()) &#123;</span><br><span class="line">            defaultContextFile =</span><br><span class="line">                    new File(context.getCatalinaBase(), defaultContextXml);</span><br><span class="line">        &#125;</span><br><span class="line">        if (defaultContextFile.exists()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                URL defaultContextUrl = defaultContextFile.toURI().toURL();</span><br><span class="line">                //覆盖Context属性</span><br><span class="line">                processContextConfig(digester, defaultContextUrl);</span><br><span class="line">            &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        &quot;contextConfig.badUrl&quot;, defaultContextFile), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //Host级的默认配置,context.xml.default</span><br><span class="line">        File hostContextFile = new File(getHostConfigBase(), Constants.HostContextXml);</span><br><span class="line">        if (hostContextFile.exists()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                URL hostContextUrl = hostContextFile.toURI().toURL();</span><br><span class="line">                //覆盖Context属性</span><br><span class="line">                processContextConfig(digester, hostContextUrl);</span><br><span class="line">            &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        &quot;contextConfig.badUrl&quot;, hostContextFile), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //Web应用配置,context.xml</span><br><span class="line">    if (context.getConfigFile() != null) &#123;</span><br><span class="line">        //覆盖Context属性</span><br><span class="line">        processContextConfig(digester, context.getConfigFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、7）ContextConfig的configureStart方法"><a href="#10、接（一、7）ContextConfig的configureStart方法" class="headerlink" title="10、接（一、7）ContextConfig的configureStart方法"></a>10、接（一、7）ContextConfig的configureStart方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">protected synchronized void configureStart() &#123;</span><br><span class="line">    // Called from StandardContext.start()</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;contextConfig.start&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;contextConfig.xmlSettings&quot;,</span><br><span class="line">                context.getName(),</span><br><span class="line">                Boolean.valueOf(context.getXmlValidation()),</span><br><span class="line">                Boolean.valueOf(context.getXmlNamespaceAware())));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析web.xml</span><br><span class="line">    webConfig();</span><br><span class="line"></span><br><span class="line">    if (!context.getIgnoreAnnotations()) &#123;</span><br><span class="line">        //处理Listener，Filter，Servet的class，field，method，  </span><br><span class="line">        //EJB,JSR 250类注解问题，@Resource等注解  </span><br><span class="line">        applicationAnnotationsConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        //配置安全角色信息</span><br><span class="line">        validateSecurityRoles();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Configure an authenticator if we need one</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        authenticatorConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Dump the contents of this pipeline if requested</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Pipeline Configuration:&quot;);</span><br><span class="line">        Pipeline pipeline = context.getPipeline();</span><br><span class="line">        Valve valves[] = null;</span><br><span class="line">        if (pipeline != null) &#123;</span><br><span class="line">            valves = pipeline.getValves();</span><br><span class="line">        &#125;</span><br><span class="line">        if (valves != null) &#123;</span><br><span class="line">            for (int i = 0; i &lt; valves.length; i++) &#123;</span><br><span class="line">                log.debug(&quot;  &quot; + valves[i].getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(&quot;======================&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Make our application available if no problems were encountered</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        context.setConfigured(true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.error(sm.getString(&quot;contextConfig.unavailable&quot;));</span><br><span class="line">        context.setConfigured(false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、ContextConfig的webConfig方法"><a href="#11、ContextConfig的webConfig方法" class="headerlink" title="11、ContextConfig的webConfig方法"></a>11、ContextConfig的webConfig方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">protected void webConfig() &#123;</span><br><span class="line">    /*</span><br><span class="line">     * Anything and everything can override the global and host defaults.</span><br><span class="line">     * This is implemented in two parts</span><br><span class="line">     * - Handle as a web fragment that gets added after everything else so</span><br><span class="line">     *   everything else takes priority</span><br><span class="line">     * - Mark Servlets as overridable so SCI configuration can replace</span><br><span class="line">     *   configuration from the defaults</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * The rules for annotation scanning are not as clear-cut as one might</span><br><span class="line">     * think. Tomcat implements the following process:</span><br><span class="line">     * - As per SRV.1.6.2, Tomcat will scan for annotations regardless of</span><br><span class="line">     *   which Servlet spec version is declared in web.xml. The EG has</span><br><span class="line">     *   confirmed this is the expected behaviour.</span><br><span class="line">     * - As per http://java.net/jira/browse/SERVLET_SPEC-36, if the main</span><br><span class="line">     *   web.xml is marked as metadata-complete, JARs are still processed</span><br><span class="line">     *   for SCIs.</span><br><span class="line">     * - If metadata-complete=true and an absolute ordering is specified,</span><br><span class="line">     *   JARs excluded from the ordering are also excluded from the SCI</span><br><span class="line">     *   processing.</span><br><span class="line">     * - If an SCI has a @HandlesType annotation then all classes (except</span><br><span class="line">     *   those in JARs excluded from an absolute ordering) need to be</span><br><span class="line">     *   scanned to check if they match.</span><br><span class="line">     */</span><br><span class="line">    // 创建web.xml解析器</span><br><span class="line">    WebXmlParser webXmlParser = new WebXmlParser(context.getXmlNamespaceAware(),</span><br><span class="line">            context.getXmlValidation(), context.getXmlBlockExternal());</span><br><span class="line"></span><br><span class="line">    Set&lt;WebXml&gt; defaults = new HashSet&lt;&gt;();</span><br><span class="line">    //从Catalina、Host获取默认WebXML（conf/web.xml、web.xml.default），通过Digester解析，添加到defaults</span><br><span class="line">    defaults.add(getDefaultWebXmlFragment(webXmlParser));</span><br><span class="line"></span><br><span class="line">    WebXml webXml = createWebXml();</span><br><span class="line"></span><br><span class="line">    // Parse context level web.xml</span><br><span class="line">    //解析WepApp的WebXML（/WEB-INF/web.xml）</span><br><span class="line">    InputSource contextWebXml = getContextWebXmlSource();</span><br><span class="line">    if (!webXmlParser.parseWebXml(contextWebXml, webXml, false)) &#123;</span><br><span class="line">        ok = false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 初始化ApplicationContext并返回ApplicationContextFacade</span><br><span class="line">    ServletContext sContext = context.getServletContext();</span><br><span class="line"></span><br><span class="line">    // Ordering is important here</span><br><span class="line"></span><br><span class="line">    // Step 1. Identify all the JARs packaged with the application and those</span><br><span class="line">    // provided by the container. If any of the application JARs have a</span><br><span class="line">    // web-fragment.xml it will be parsed at this point. web-fragment.xml</span><br><span class="line">    // files are ignored for container provided JARs.</span><br><span class="line">    // 扫描应用打包的所有Jar,检索Jar包里面的web.xml配置并解析</span><br><span class="line">    Map&lt;String,WebXml&gt; fragments = processJarsForWebFragments(webXml, webXmlParser);</span><br><span class="line"></span><br><span class="line">    // Step 2. Order the fragments.</span><br><span class="line">    // 对web配置进行排序</span><br><span class="line">    Set&lt;WebXml&gt; orderedFragments = null;</span><br><span class="line">    orderedFragments = WebXml.orderWebFragments(webXml, fragments, sContext);</span><br><span class="line"></span><br><span class="line">    // Step 3. Look for ServletContainerInitializer implementations</span><br><span class="line">    // 基于SPI机制查找ServletContainerInitializer的实现</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        processServletContainerInitializers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if  (!webXml.isMetadataComplete() || typeInitializerMap.size() &gt; 0) &#123;</span><br><span class="line">        // Step 4. Process /WEB-INF/classes for annotations and</span><br><span class="line">        // @HandlesTypes matches</span><br><span class="line">        Map&lt;String,JavaClassCacheEntry&gt; javaClassCache = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //处理/WEB-INF/classes下面的类的注解</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            WebResource[] webResources =</span><br><span class="line">                    context.getResources().listResources(&quot;/WEB-INF/classes&quot;);</span><br><span class="line"></span><br><span class="line">            for (WebResource webResource : webResources) &#123;</span><br><span class="line">                // Skip the META-INF directory from any JARs that have been</span><br><span class="line">                // expanded in to WEB-INF/classes (sometimes IDEs do this).</span><br><span class="line">                if (&quot;META-INF&quot;.equals(webResource.getName())) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                processAnnotationsWebResource(webResource, webXml,</span><br><span class="line">                        webXml.isMetadataComplete(), javaClassCache);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Step 5. Process JARs for annotations and</span><br><span class="line">        // @HandlesTypes matches - only need to process those fragments we</span><br><span class="line">        // are going to use (remember orderedFragments includes any</span><br><span class="line">        // container fragments)</span><br><span class="line">        // 处理Jar包中的注解类</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            processAnnotations(</span><br><span class="line">                    orderedFragments, webXml.isMetadataComplete(), javaClassCache);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Cache, if used, is no longer required so clear it</span><br><span class="line">        javaClassCache.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!webXml.isMetadataComplete()) &#123;</span><br><span class="line">        // Step 6. Merge web-fragment.xml files into the main web.xml</span><br><span class="line">        // file.</span><br><span class="line">        // 将jar包web配置合并</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            ok = webXml.merge(orderedFragments);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Step 7. Apply global defaults</span><br><span class="line">        // Have to merge defaults before JSP conversion since defaults</span><br><span class="line">        // provide JSP servlet definition.</span><br><span class="line">        // 将默认web配置合并</span><br><span class="line">        webXml.merge(defaults);</span><br><span class="line"></span><br><span class="line">        // Step 8. Convert explicitly mentioned jsps to servlets</span><br><span class="line">        // 将JSP转换为Servlet</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            convertJsps(webXml);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Step 9. Apply merged web.xml to Context</span><br><span class="line">        // 将web配置应用到Context容器</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            configureContext(webXml);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        webXml.merge(defaults);</span><br><span class="line">        convertJsps(webXml);</span><br><span class="line">        configureContext(webXml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (context.getLogEffectiveWebXml()) &#123;</span><br><span class="line">        log.info(&quot;web.xml:\n&quot; + webXml.toXml());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Always need to look for static resources</span><br><span class="line">    // Step 10. Look for static resources packaged in JARs</span><br><span class="line">    // 检索Jar包中的静态资源</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        // Spec does not define an order.</span><br><span class="line">        // Use ordered JARs followed by remaining JARs</span><br><span class="line">        Set&lt;WebXml&gt; resourceJars = new LinkedHashSet&lt;&gt;();</span><br><span class="line">        for (WebXml fragment : orderedFragments) &#123;</span><br><span class="line">            resourceJars.add(fragment);</span><br><span class="line">        &#125;</span><br><span class="line">        for (WebXml fragment : fragments.values()) &#123;</span><br><span class="line">            if (!resourceJars.contains(fragment)) &#123;</span><br><span class="line">                resourceJars.add(fragment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        processResourceJARs(resourceJars);</span><br><span class="line">        // See also StandardContext.resourcesStart() for</span><br><span class="line">        // WEB-INF/classes/META-INF/resources configuration</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Step 11. Apply the ServletContainerInitializer config to the</span><br><span class="line">    // context</span><br><span class="line">    // 将ServletContainerInitializer配置到上下文</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        for (Map.Entry&lt;ServletContainerInitializer,</span><br><span class="line">                Set&lt;Class&lt;?&gt;&gt;&gt; entry :</span><br><span class="line">                    initializerClassMap.entrySet()) &#123;</span><br><span class="line">            if (entry.getValue().isEmpty()) &#123;</span><br><span class="line">                context.addServletContainerInitializer(</span><br><span class="line">                        entry.getKey(), null);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                context.addServletContainerInitializer(</span><br><span class="line">                        entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、ContextConfig的configureContext方法"><a href="#12、ContextConfig的configureContext方法" class="headerlink" title="12、ContextConfig的configureContext方法"></a>12、ContextConfig的configureContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">private void configureContext(WebXml webxml) &#123;</span><br><span class="line">    // As far as possible, process in alphabetical order so it is easy to</span><br><span class="line">    // check everything is present</span><br><span class="line">    // Some validation depends on correct public ID</span><br><span class="line">    // 设置xml的publicId</span><br><span class="line">    context.setPublicId(webxml.getPublicId());</span><br><span class="line"></span><br><span class="line">    // Everything else in order</span><br><span class="line">    context.setEffectiveMajorVersion(webxml.getMajorVersion());</span><br><span class="line">    context.setEffectiveMinorVersion(webxml.getMinorVersion());</span><br><span class="line"></span><br><span class="line">    for (Entry&lt;String, String&gt; entry : webxml.getContextParams().entrySet()) &#123;</span><br><span class="line">        context.addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    context.setDenyUncoveredHttpMethods(</span><br><span class="line">            webxml.getDenyUncoveredHttpMethods());</span><br><span class="line">    context.setDisplayName(webxml.getDisplayName());</span><br><span class="line">    context.setDistributable(webxml.isDistributable());</span><br><span class="line">    for (ContextLocalEjb ejbLocalRef : webxml.getEjbLocalRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addLocalEjb(ejbLocalRef);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextEjb ejbRef : webxml.getEjbRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addEjb(ejbRef);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextEnvironment environment : webxml.getEnvEntries().values()) &#123;</span><br><span class="line">        context.getNamingResources().addEnvironment(environment);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ErrorPage errorPage : webxml.getErrorPages().values()) &#123;</span><br><span class="line">        context.addErrorPage(errorPage);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置过滤器</span><br><span class="line">    for (FilterDef filter : webxml.getFilters().values()) &#123;</span><br><span class="line">        if (filter.getAsyncSupported() == null) &#123;</span><br><span class="line">            filter.setAsyncSupported(&quot;false&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        context.addFilterDef(filter);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置过滤器映射</span><br><span class="line">    for (FilterMap filterMap : webxml.getFilterMappings()) &#123;</span><br><span class="line">        context.addFilterMap(filterMap);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置JspConfigDescriptorImpl</span><br><span class="line">    context.setJspConfigDescriptor(webxml.getJspConfigDescriptor());</span><br><span class="line">    //设置web监听器</span><br><span class="line">    for (String listener : webxml.getListeners()) &#123;</span><br><span class="line">        context.addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getLocaleEncodingMappings().entrySet()) &#123;</span><br><span class="line">        context.addLocaleEncodingMappingParameter(entry.getKey(),</span><br><span class="line">                entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    // Prevents IAE</span><br><span class="line">    if (webxml.getLoginConfig() != null) &#123;</span><br><span class="line">        context.setLoginConfig(webxml.getLoginConfig());</span><br><span class="line">    &#125;</span><br><span class="line">    for (MessageDestinationRef mdr :</span><br><span class="line">            webxml.getMessageDestinationRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addMessageDestinationRef(mdr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // messageDestinations were ignored in Tomcat 6, so ignore here</span><br><span class="line"></span><br><span class="line">    context.setIgnoreAnnotations(webxml.isMetadataComplete());</span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getMimeMappings().entrySet()) &#123;</span><br><span class="line">        context.addMimeMapping(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    // Name is just used for ordering</span><br><span class="line">    for (ContextResourceEnvRef resource :</span><br><span class="line">            webxml.getResourceEnvRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addResourceEnvRef(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextResource resource : webxml.getResourceRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addResource(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    boolean allAuthenticatedUsersIsAppRole =</span><br><span class="line">            webxml.getSecurityRoles().contains(</span><br><span class="line">                    SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS);</span><br><span class="line">    for (SecurityConstraint constraint : webxml.getSecurityConstraints()) &#123;</span><br><span class="line">        if (allAuthenticatedUsersIsAppRole) &#123;</span><br><span class="line">            constraint.treatAllAuthenticatedUsersAsApplicationRole();</span><br><span class="line">        &#125;</span><br><span class="line">        context.addConstraint(constraint);</span><br><span class="line">    &#125;</span><br><span class="line">    for (String role : webxml.getSecurityRoles()) &#123;</span><br><span class="line">        context.addSecurityRole(role);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextService service : webxml.getServiceRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addService(service);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置servlet</span><br><span class="line">    for (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">        Wrapper wrapper = context.createWrapper();</span><br><span class="line">        // Description is ignored</span><br><span class="line">        // Display name is ignored</span><br><span class="line">        // Icons are ignored</span><br><span class="line"></span><br><span class="line">        // jsp-file gets passed to the JSP Servlet as an init-param</span><br><span class="line">        //设置LoadOnStartup值</span><br><span class="line">        if (servlet.getLoadOnStartup() != null) &#123;</span><br><span class="line">            wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (servlet.getEnabled() != null) &#123;</span><br><span class="line">            wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setName(servlet.getServletName());</span><br><span class="line">        Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">        for (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">            wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">        Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">        for (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">            wrapper.addSecurityReference(</span><br><span class="line">                    roleRef.getName(), roleRef.getLink());</span><br><span class="line">        &#125;</span><br><span class="line">        //设置ServletClass</span><br><span class="line">        wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">        MultipartDef multipartdef = servlet.getMultipartDef();</span><br><span class="line">        if (multipartdef != null) &#123;</span><br><span class="line">            if (multipartdef.getMaxFileSize() != null &amp;&amp;</span><br><span class="line">                    multipartdef.getMaxRequestSize()!= null &amp;&amp;</span><br><span class="line">                    multipartdef.getFileSizeThreshold() != null) &#123;</span><br><span class="line">                wrapper.setMultipartConfigElement(new MultipartConfigElement(</span><br><span class="line">                        multipartdef.getLocation(),</span><br><span class="line">                        Long.parseLong(multipartdef.getMaxFileSize()),</span><br><span class="line">                        Long.parseLong(multipartdef.getMaxRequestSize()),</span><br><span class="line">                        Integer.parseInt(</span><br><span class="line">                                multipartdef.getFileSizeThreshold())));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                wrapper.setMultipartConfigElement(new MultipartConfigElement(</span><br><span class="line">                        multipartdef.getLocation()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //设置是否支持异步任务</span><br><span class="line">        if (servlet.getAsyncSupported() != null) &#123;</span><br><span class="line">            wrapper.setAsyncSupported(</span><br><span class="line">                    servlet.getAsyncSupported().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">        //context中添加子容器wrapper</span><br><span class="line">        context.addChild(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">        context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    SessionConfig sessionConfig = webxml.getSessionConfig();</span><br><span class="line">    //设置Session相关属性</span><br><span class="line">    if (sessionConfig != null) &#123;</span><br><span class="line">        //设置session超时时间</span><br><span class="line">        if (sessionConfig.getSessionTimeout() != null) &#123;</span><br><span class="line">            context.setSessionTimeout(</span><br><span class="line">                    sessionConfig.getSessionTimeout().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        SessionCookieConfig scc =</span><br><span class="line">            context.getServletContext().getSessionCookieConfig();</span><br><span class="line">        scc.setName(sessionConfig.getCookieName());</span><br><span class="line">        scc.setDomain(sessionConfig.getCookieDomain());</span><br><span class="line">        scc.setPath(sessionConfig.getCookiePath());</span><br><span class="line">        scc.setComment(sessionConfig.getCookieComment());</span><br><span class="line">        if (sessionConfig.getCookieHttpOnly() != null) &#123;</span><br><span class="line">            scc.setHttpOnly(sessionConfig.getCookieHttpOnly().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (sessionConfig.getCookieSecure() != null) &#123;</span><br><span class="line">            scc.setSecure(sessionConfig.getCookieSecure().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (sessionConfig.getCookieMaxAge() != null) &#123;</span><br><span class="line">            scc.setMaxAge(sessionConfig.getCookieMaxAge().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (sessionConfig.getSessionTrackingModes().size() &gt; 0) &#123;</span><br><span class="line">            context.getServletContext().setSessionTrackingModes(</span><br><span class="line">                    sessionConfig.getSessionTrackingModes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Context doesn&apos;t use version directly</span><br><span class="line">    // 设置welcomeFile</span><br><span class="line">    for (String welcomeFile : webxml.getWelcomeFiles()) &#123;</span><br><span class="line">        /*</span><br><span class="line">         * The following will result in a welcome file of &quot;&quot; so don&apos;t add</span><br><span class="line">         * that to the context</span><br><span class="line">         * &lt;welcome-file-list&gt;</span><br><span class="line">         *   &lt;welcome-file/&gt;</span><br><span class="line">         * &lt;/welcome-file-list&gt;</span><br><span class="line">         */</span><br><span class="line">        if (welcomeFile != null &amp;&amp; welcomeFile.length() &gt; 0) &#123;</span><br><span class="line">            //添加welcomeFile，并广播该事件</span><br><span class="line">            context.addWelcomeFile(welcomeFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Do this last as it depends on servlets</span><br><span class="line">    // 添加jsp映射</span><br><span class="line">    for (JspPropertyGroup jspPropertyGroup :</span><br><span class="line">            webxml.getJspPropertyGroups()) &#123;</span><br><span class="line">        String jspServletName = context.findServletMapping(&quot;*.jsp&quot;);</span><br><span class="line">        if (jspServletName == null) &#123;</span><br><span class="line">            jspServletName = &quot;jsp&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (context.findChild(jspServletName) != null) &#123;</span><br><span class="line">            for (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                context.addServletMappingDecoded(urlPattern, jspServletName, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if(log.isDebugEnabled()) &#123;</span><br><span class="line">                for (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                    log.debug(&quot;Skipping &quot; + urlPattern + &quot; , no servlet &quot; +</span><br><span class="line">                            jspServletName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getPostConstructMethods().entrySet()) &#123;</span><br><span class="line">        context.addPostConstructMethod(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">        webxml.getPreDestroyMethods().entrySet()) &#123;</span><br><span class="line">        context.addPreDestroyMethod(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（一、7）StandardManager的startInternal方法"><a href="#13、接（一、7）StandardManager的startInternal方法" class="headerlink" title="13、接（一、7）StandardManager的startInternal方法"></a>13、接（一、7）StandardManager的startInternal方法</h4><p>启动会话管理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line">    //父类启动方法，创建sessionIdGenerator</span><br><span class="line">    super.startInternal();</span><br><span class="line"></span><br><span class="line">    // Load unloaded sessions, if any</span><br><span class="line">    try &#123;</span><br><span class="line">        //加载磁盘中的sessions</span><br><span class="line">        load();</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(sm.getString(&quot;standardManager.managerLoad&quot;), t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="14、StandardManager的doLoad方法"><a href="#14、StandardManager的doLoad方法" class="headerlink" title="14、StandardManager的doLoad方法"></a>14、StandardManager的doLoad方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">protected void doLoad() throws ClassNotFoundException, IOException &#123;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Start: Loading persisted sessions&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize our internal data structures</span><br><span class="line">    sessions.clear();</span><br><span class="line"></span><br><span class="line">    // Open an input stream to the specified pathname, if any</span><br><span class="line">    // 磁盘中的session文件，SESSIONS.ser</span><br><span class="line">    File file = file();</span><br><span class="line">    if (file == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;standardManager.loading&quot;, pathname));</span><br><span class="line">    &#125;</span><br><span class="line">    Loader loader = null;</span><br><span class="line">    ClassLoader classLoader = null;</span><br><span class="line">    Log logger = null;</span><br><span class="line">    try (FileInputStream fis = new FileInputStream(file.getAbsolutePath());</span><br><span class="line">            BufferedInputStream bis = new BufferedInputStream(fis)) &#123;</span><br><span class="line">        Context c = getContext();</span><br><span class="line">        loader = c.getLoader();</span><br><span class="line">        logger = c.getLogger();</span><br><span class="line">        if (loader != null) &#123;</span><br><span class="line">            classLoader = loader.getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        if (classLoader == null) &#123;</span><br><span class="line">            classLoader = getClass().getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Load the previously unloaded active sessions</span><br><span class="line">        synchronized (sessions) &#123;</span><br><span class="line">            try (ObjectInputStream ois = new CustomObjectInputStream(bis, classLoader, logger,</span><br><span class="line">                    getSessionAttributeValueClassNamePattern(),</span><br><span class="line">                    getWarnOnSessionAttributeFilterFailure())) &#123;</span><br><span class="line">                //磁盘中的session数量</span><br><span class="line">                Integer count = (Integer) ois.readObject();</span><br><span class="line">                int n = count.intValue();</span><br><span class="line">                if (log.isDebugEnabled())</span><br><span class="line">                    log.debug(&quot;Loading &quot; + n + &quot; persisted sessions&quot;);</span><br><span class="line">                for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">                    //创建session</span><br><span class="line">                    StandardSession session = getNewSession();</span><br><span class="line">                    //读取磁盘中的session文件</span><br><span class="line">                    session.readObjectData(ois);</span><br><span class="line">                    session.setManager(this);</span><br><span class="line">                    sessions.put(session.getIdInternal(), session);</span><br><span class="line">                    session.activate();</span><br><span class="line">                    if (!session.isValidInternal()) &#123;</span><br><span class="line">                        // If session is already invalid,</span><br><span class="line">                        // expire session to prevent memory leak.</span><br><span class="line">                        session.setValid(true);</span><br><span class="line">                        session.expire();</span><br><span class="line">                    &#125;</span><br><span class="line">                    sessionCounter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                // Delete the persistent storage file</span><br><span class="line">                if (file.exists()) &#123;</span><br><span class="line">                    file.delete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(&quot;No persisted data file found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Finish: Loading persisted sessions&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、后台线程"><a href="#二、后台线程" class="headerlink" title="二、后台线程"></a>二、后台线程</h3><h4 id="1、ContainerBackgroundProcessor的run方法"><a href="#1、ContainerBackgroundProcessor的run方法" class="headerlink" title="1、ContainerBackgroundProcessor的run方法"></a>1、ContainerBackgroundProcessor的run方法</h4><p>后台线程，实现热部署、管理过期session<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    Throwable t = null;</span><br><span class="line">    String unexpectedDeathMessage = sm.getString(</span><br><span class="line">            &quot;containerBase.backgroundProcess.unexpectedThreadDeath&quot;,</span><br><span class="line">            Thread.currentThread().getName());</span><br><span class="line">    try &#123;</span><br><span class="line">        while (!threadDone) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //后台线程执行间隔</span><br><span class="line">                Thread.sleep(backgroundProcessorDelay * 1000L);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">            if (!threadDone) &#123;</span><br><span class="line">                //部署容器</span><br><span class="line">                processChildren(ContainerBase.this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RuntimeException|Error e) &#123;</span><br><span class="line">        t = e;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (!threadDone) &#123;</span><br><span class="line">            log.error(unexpectedDeathMessage, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ContainerBackgroundProcessor的processChildren方法"><a href="#2、ContainerBackgroundProcessor的processChildren方法" class="headerlink" title="2、ContainerBackgroundProcessor的processChildren方法"></a>2、ContainerBackgroundProcessor的processChildren方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">protected void processChildren(Container container) &#123;</span><br><span class="line">    ClassLoader originalClassLoader = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (container instanceof Context) &#123;</span><br><span class="line">            Loader loader = ((Context) container).getLoader();</span><br><span class="line">            // Loader will be null for FailedContext instances</span><br><span class="line">            if (loader == null) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Ensure background processing for Contexts and Wrappers</span><br><span class="line">            // is performed under the web app&apos;s class loader</span><br><span class="line">            // 设置类加载器，ParallelWebappClassLoader</span><br><span class="line">            originalClassLoader = ((Context) container).bind(false, null);</span><br><span class="line">        &#125;</span><br><span class="line">        //容器后台线程</span><br><span class="line">        container.backgroundProcess();</span><br><span class="line">        //子容器后台线程</span><br><span class="line">        Container[] children = container.findChildren();</span><br><span class="line">        for (int i = 0; i &lt; children.length; i++) &#123;</span><br><span class="line">            if (children[i].getBackgroundProcessorDelay() &lt;= 0) &#123;</span><br><span class="line">                processChildren(children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(&quot;Exception invoking periodic operation: &quot;, t);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (container instanceof Context) &#123;</span><br><span class="line">            ((Context) container).unbind(false, originalClassLoader);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、StandardContext的backgroundProcess方法"><a href="#3、StandardContext的backgroundProcess方法" class="headerlink" title="3、StandardContext的backgroundProcess方法"></a>3、StandardContext的backgroundProcess方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void backgroundProcess() &#123;</span><br><span class="line"></span><br><span class="line">    if (!getState().isAvailable())</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    Loader loader = getLoader();</span><br><span class="line">    if (loader != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //重启context</span><br><span class="line">            loader.backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.loader&quot;, loader), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Manager manager = getManager();</span><br><span class="line">    if (manager != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //失效过期的session</span><br><span class="line">            manager.backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.manager&quot;, manager),</span><br><span class="line">                    e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    WebResourceRoot resources = getResources();</span><br><span class="line">    if (resources != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //清除过期的Web应用的资源缓存</span><br><span class="line">            resources.backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.resources&quot;,</span><br><span class="line">                    resources), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    InstanceManager instanceManager = getInstanceManager();</span><br><span class="line">    if (instanceManager instanceof DefaultInstanceManager) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //清除annotationCache中，过期的key</span><br><span class="line">            ((DefaultInstanceManager)instanceManager).backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.instanceManager&quot;,</span><br><span class="line">                    resources), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //执行cluster、realm、Valve的后台线程</span><br><span class="line">    super.backgroundProcess();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、注册容器映射"><a href="#三、注册容器映射" class="headerlink" title="三、注册容器映射"></a>三、注册容器映射</h3><h4 id="1、MapperListener的containerEvent方法"><a href="#1、MapperListener的containerEvent方法" class="headerlink" title="1、MapperListener的containerEvent方法"></a>1、MapperListener的containerEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void containerEvent(ContainerEvent event) &#123;</span><br><span class="line">    //添加容器事件</span><br><span class="line">    if (Container.ADD_CHILD_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        Container child = (Container) event.getData();</span><br><span class="line">        //给子容器注册监听器</span><br><span class="line">        addListeners(child);</span><br><span class="line">        // If child is started then it is too late for life-cycle listener</span><br><span class="line">        // to register the child so register it here</span><br><span class="line">        if (child.getState().isAvailable()) &#123;</span><br><span class="line">            if (child instanceof Host) &#123;</span><br><span class="line">                //注册Host</span><br><span class="line">                registerHost((Host) child);</span><br><span class="line">            &#125; else if (child instanceof Context) &#123;</span><br><span class="line">                //注册Context</span><br><span class="line">                registerContext((Context) child);</span><br><span class="line">            &#125; else if (child instanceof Wrapper) &#123;</span><br><span class="line">                // Only if the Context has started. If it has not, then it</span><br><span class="line">                // will have its own &quot;after_start&quot; life-cycle event later.</span><br><span class="line">                if (child.getParent().getState().isAvailable()) &#123;</span><br><span class="line">                    //注册Wrapper</span><br><span class="line">                    registerWrapper((Wrapper) child);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    //移除容器事件</span><br><span class="line">    &#125; else if (Container.REMOVE_CHILD_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        Container child = (Container) event.getData();</span><br><span class="line">        removeListeners(child);</span><br><span class="line">        // No need to unregister - life-cycle listener will handle this when</span><br><span class="line">        // the child stops</span><br><span class="line">    //添加Host别名事件</span><br><span class="line">    &#125; else if (Host.ADD_ALIAS_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically adding host aliases</span><br><span class="line">        mapper.addHostAlias(((Host) event.getSource()).getName(),</span><br><span class="line">                event.getData().toString());</span><br><span class="line">    //移除Host别名事件</span><br><span class="line">    &#125; else if (Host.REMOVE_ALIAS_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically removing host aliases</span><br><span class="line">        mapper.removeHostAlias(event.getData().toString());</span><br><span class="line">    //warper添加mapping事件</span><br><span class="line">    &#125; else if (Wrapper.ADD_MAPPING_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically adding wrappers</span><br><span class="line">        //获取warpper对象</span><br><span class="line">        Wrapper wrapper = (Wrapper) event.getSource();</span><br><span class="line">        //获取warpper所属的context</span><br><span class="line">        Context context = (Context) wrapper.getParent();</span><br><span class="line">        //获取context的path</span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String version = context.getWebappVersion();</span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line">        String wrapperName = wrapper.getName();</span><br><span class="line">        //要map的路径</span><br><span class="line">        String mapping = (String) event.getData();</span><br><span class="line">        boolean jspWildCard = (&quot;jsp&quot;.equals(wrapperName)</span><br><span class="line">                &amp;&amp; mapping.endsWith(&quot;/*&quot;));</span><br><span class="line">        //注册warpper</span><br><span class="line">        mapper.addWrapper(hostName, contextPath, version, mapping, wrapper,</span><br><span class="line">                jspWildCard, context.isResourceOnlyServlet(wrapperName));</span><br><span class="line">    //warper移除mapping事件</span><br><span class="line">    &#125; else if (Wrapper.REMOVE_MAPPING_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically removing wrappers</span><br><span class="line">        Wrapper wrapper = (Wrapper) event.getSource();</span><br><span class="line"></span><br><span class="line">        Context context = (Context) wrapper.getParent();</span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String version = context.getWebappVersion();</span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String mapping = (String) event.getData();</span><br><span class="line"></span><br><span class="line">        mapper.removeWrapper(hostName, contextPath, version, mapping);</span><br><span class="line">    //addWelcomeFile事件</span><br><span class="line">    &#125; else if (Context.ADD_WELCOME_FILE_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically adding welcome files</span><br><span class="line">        Context context = (Context) event.getSource();</span><br><span class="line"></span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String welcomeFile = (String) event.getData();</span><br><span class="line"></span><br><span class="line">        mapper.addWelcomeFile(hostName, contextPath,</span><br><span class="line">                context.getWebappVersion(), welcomeFile);</span><br><span class="line">    &#125; else if (Context.REMOVE_WELCOME_FILE_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically removing welcome files</span><br><span class="line">        Context context = (Context) event.getSource();</span><br><span class="line"></span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String welcomeFile = (String) event.getData();</span><br><span class="line"></span><br><span class="line">        mapper.removeWelcomeFile(hostName, contextPath,</span><br><span class="line">                context.getWebappVersion(), welcomeFile);</span><br><span class="line">    &#125; else if (Context.CLEAR_WELCOME_FILES_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically clearing welcome files</span><br><span class="line">        Context context = (Context) event.getSource();</span><br><span class="line"></span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mapper.clearWelcomeFiles(hostName, contextPath,</span><br><span class="line">                context.getWebappVersion());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、MapperListener的registerContext方法"><a href="#2、MapperListener的registerContext方法" class="headerlink" title="2、MapperListener的registerContext方法"></a>2、MapperListener的registerContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private void registerContext(Context context) &#123;</span><br><span class="line">    //获取context的path</span><br><span class="line">    String contextPath = context.getPath();</span><br><span class="line">    if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">        contextPath = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取host</span><br><span class="line">    Host host = (Host)context.getParent();</span><br><span class="line">    //获取root</span><br><span class="line">    WebResourceRoot resources = context.getResources();</span><br><span class="line">    //获取welcomeFile</span><br><span class="line">    String[] welcomeFiles = context.findWelcomeFiles();</span><br><span class="line">    List&lt;WrapperMappingInfo&gt; wrappers = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    //获取warpper中的mapping信息</span><br><span class="line">    for (Container container : context.findChildren()) &#123;</span><br><span class="line">        prepareWrapperMappingInfo(context, (Wrapper) container, wrappers);</span><br><span class="line"></span><br><span class="line">        if(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(&quot;mapperListener.registerWrapper&quot;,</span><br><span class="line">                    container.getName(), contextPath, service));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加context的map，容器按name排序存放在Mapper中</span><br><span class="line">    mapper.addContextVersion(host.getName(), host, contextPath,</span><br><span class="line">            context.getWebappVersion(), context, welcomeFiles, resources,</span><br><span class="line">            wrappers);</span><br><span class="line"></span><br><span class="line">    if(log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;mapperListener.registerContext&quot;,</span><br><span class="line">                contextPath, service));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、MapperListener的registerContext方法"><a href="#3、MapperListener的registerContext方法" class="headerlink" title="3、MapperListener的registerContext方法"></a>3、MapperListener的registerContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void registerWrapper(Wrapper wrapper) &#123;</span><br><span class="line">    //获取所属的context对象</span><br><span class="line">    Context context = (Context) wrapper.getParent();</span><br><span class="line">    //获取context的path</span><br><span class="line">    String contextPath = context.getPath();</span><br><span class="line">    if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">        contextPath = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //webapp的版本</span><br><span class="line">    String version = context.getWebappVersion();</span><br><span class="line">    String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">    List&lt;WrapperMappingInfo&gt; wrappers = new ArrayList&lt;&gt;();</span><br><span class="line">    //获取warpper中的mapping信息</span><br><span class="line">    prepareWrapperMappingInfo(context, wrapper, wrappers);</span><br><span class="line">    //添加warpper的map，容器按name排序存放在Mapper中</span><br><span class="line">    mapper.addWrappers(hostName, contextPath, version, wrappers);</span><br><span class="line"></span><br><span class="line">    if(log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;mapperListener.registerWrapper&quot;,</span><br><span class="line">                wrapper.getName(), contextPath, service));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、项目部署&quot;&gt;&lt;a href=&quot;#一、项目部署&quot; class=&quot;headerlink&quot; title=&quot;一、项目部署&quot;&gt;&lt;/a&gt;一、项目部署&lt;/h3&gt;&lt;h4 id=&quot;1、HostConfig的lifecycleEvent方法&quot;&gt;&lt;a href=&quot;#1、HostCo
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码请求处理过程</title>
    <link href="http://yoursite.com/2020/01/13/tomcat%E6%BA%90%E7%A0%81/Tomcat%E6%BA%90%E7%A0%81%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/13/tomcat源码/Tomcat源码请求处理过程/</id>
    <published>2020-01-13T14:32:38.072Z</published>
    <updated>2018-07-11T12:41:46.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、请求处理过程"><a href="#一、请求处理过程" class="headerlink" title="一、请求处理过程"></a>一、请求处理过程</h3><h4 id="1、NioEndpoint的setSocketOptions方法"><a href="#1、NioEndpoint的setSocketOptions方法" class="headerlink" title="1、NioEndpoint的setSocketOptions方法"></a>1、NioEndpoint的setSocketOptions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">protected boolean setSocketOptions(SocketChannel socket) &#123;</span><br><span class="line">    // Process the connection</span><br><span class="line">    try &#123;</span><br><span class="line">        //disable blocking, APR style, we are gonna be polling it</span><br><span class="line">        //设置非阻塞</span><br><span class="line">        socket.configureBlocking(false);</span><br><span class="line">        Socket sock = socket.socket();</span><br><span class="line">        //设置属性</span><br><span class="line">        socketProperties.setProperties(sock);</span><br><span class="line">        //获取NioChannel</span><br><span class="line">        NioChannel channel = nioChannels.pop();</span><br><span class="line">        if (channel == null) &#123;</span><br><span class="line">            SocketBufferHandler bufhandler = new SocketBufferHandler(</span><br><span class="line">                    socketProperties.getAppReadBufSize(),</span><br><span class="line">                    socketProperties.getAppWriteBufSize(),</span><br><span class="line">                    socketProperties.getDirectBuffer());</span><br><span class="line">            if (isSSLEnabled()) &#123;</span><br><span class="line">                channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //创建NioChannel</span><br><span class="line">                channel = new NioChannel(socket, bufhandler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //重置NioChannel</span><br><span class="line">            channel.setIOChannel(socket);</span><br><span class="line">            channel.reset();</span><br><span class="line">        &#125;</span><br><span class="line">        //依次向Poller中注册channel</span><br><span class="line">        getPoller0().register(channel);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        try &#123;</span><br><span class="line">            log.error(&quot;&quot;,t);</span><br><span class="line">        &#125; catch (Throwable tt) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(tt);</span><br><span class="line">        &#125;</span><br><span class="line">        // Tell to close the socket</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Poller的register方法"><a href="#2、Poller的register方法" class="headerlink" title="2、Poller的register方法"></a>2、Poller的register方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void register(final NioChannel socket) &#123;</span><br><span class="line">    socket.setPoller(this);</span><br><span class="line">    NioSocketWrapper ka = new NioSocketWrapper(socket, NioEndpoint.this);</span><br><span class="line">    socket.setSocketWrapper(ka);</span><br><span class="line">    ka.setPoller(this);</span><br><span class="line">    //超时时间</span><br><span class="line">    ka.setReadTimeout(getSocketProperties().getSoTimeout());</span><br><span class="line">    ka.setWriteTimeout(getSocketProperties().getSoTimeout());</span><br><span class="line">    //连接存活时间，默认100s</span><br><span class="line">    ka.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());</span><br><span class="line">    ka.setSecure(isSSLEnabled());</span><br><span class="line">    ka.setReadTimeout(getConnectionTimeout());</span><br><span class="line">    ka.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">    //获取任务缓存</span><br><span class="line">    PollerEvent r = eventCache.pop();</span><br><span class="line">    //设置interestOps</span><br><span class="line">    ka.interestOps(SelectionKey.OP_READ);//this is what OP_REGISTER turns into.</span><br><span class="line">    //创建或重置任务</span><br><span class="line">    if ( r==null) r = new PollerEvent(socket,ka,OP_REGISTER);</span><br><span class="line">    else r.reset(socket,ka,OP_REGISTER);</span><br><span class="line">    //往Poller任务队列中添加</span><br><span class="line">    addEvent(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Poller的run方法"><a href="#3、Poller的run方法" class="headerlink" title="3、Poller的run方法"></a>3、Poller的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    // Loop until destroy() is called</span><br><span class="line">    while (true) &#123;</span><br><span class="line"></span><br><span class="line">        boolean hasEvents = false;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            if (!close) &#123;</span><br><span class="line">                //注册PollerEvent中的任务</span><br><span class="line">                hasEvents = events();</span><br><span class="line">                //查看就绪事件个数</span><br><span class="line">                if (wakeupCounter.getAndSet(-1) &gt; 0) &#123;</span><br><span class="line">                    //if we are here, means we have other stuff to do</span><br><span class="line">                    //do a non blocking select</span><br><span class="line">                    keyCount = selector.selectNow();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    keyCount = selector.select(selectorTimeout);</span><br><span class="line">                &#125;</span><br><span class="line">                //重置wakeupCounter</span><br><span class="line">                wakeupCounter.set(0);</span><br><span class="line">            &#125;</span><br><span class="line">            //关闭Poller</span><br><span class="line">            if (close) &#123;</span><br><span class="line">                events();</span><br><span class="line">                timeout(0, false);</span><br><span class="line">                try &#123;</span><br><span class="line">                    //关闭selector</span><br><span class="line">                    selector.close();</span><br><span class="line">                &#125; catch (IOException ioe) &#123;</span><br><span class="line">                    log.error(sm.getString(&quot;endpoint.nio.selectorCloseFail&quot;), ioe);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable x) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(x);</span><br><span class="line">            log.error(&quot;&quot;,x);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //either we timed out or we woke up, process events first</span><br><span class="line">        if ( keyCount == 0 ) hasEvents = (hasEvents | events());</span><br><span class="line">        //获取就绪的事件</span><br><span class="line">        Iterator&lt;SelectionKey&gt; iterator = keyCount &gt; 0 ? selector.selectedKeys().iterator() : null;</span><br><span class="line">        // Walk through the collection of ready keys and dispatch</span><br><span class="line">        // any active event.</span><br><span class="line">        while (iterator != null &amp;&amp; iterator.hasNext()) &#123;</span><br><span class="line">            SelectionKey sk = iterator.next();</span><br><span class="line">            NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();</span><br><span class="line">            // Attachment may be null if another thread has called</span><br><span class="line">            // cancelledKey()</span><br><span class="line">            // 去除并处理该事件</span><br><span class="line">            if (attachment == null) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">                processKey(sk, attachment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;//while</span><br><span class="line"></span><br><span class="line">        //process timeouts</span><br><span class="line">        timeout(keyCount,hasEvents);</span><br><span class="line">    &#125;//while</span><br><span class="line">    //stopLatch减一</span><br><span class="line">    getStopLatch().countDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、Poller的events方法"><a href="#4、Poller的events方法" class="headerlink" title="4、Poller的events方法"></a>4、Poller的events方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean events() &#123;</span><br><span class="line">    boolean result = false;</span><br><span class="line"></span><br><span class="line">    PollerEvent pe = null;</span><br><span class="line">    for (int i = 0, size = events.size(); i &lt; size &amp;&amp; (pe = events.poll()) != null; i++ ) &#123;</span><br><span class="line">        result = true;</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册任务</span><br><span class="line">            pe.run();</span><br><span class="line">            //重置PollerEvent</span><br><span class="line">            pe.reset();</span><br><span class="line">            if (running &amp;&amp; !paused) &#123;</span><br><span class="line">                //加入缓存</span><br><span class="line">                eventCache.push(pe);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch ( Throwable x ) &#123;</span><br><span class="line">            log.error(&quot;&quot;,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、PollerEvent的run方法"><a href="#5、PollerEvent的run方法" class="headerlink" title="5、PollerEvent的run方法"></a>5、PollerEvent的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    if (interestOps == OP_REGISTER) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //向Poller的selector中注册OP_READ，关注读数据就绪事件 </span><br><span class="line">            socket.getIOChannel().register(</span><br><span class="line">                    socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class="line">        &#125; catch (Exception x) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;endpoint.nio.registerFail&quot;), x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //获取注册到该Poller的selector上的key</span><br><span class="line">        final SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line">        try &#123;</span><br><span class="line">            //该key已关闭</span><br><span class="line">            if (key == null) &#123;</span><br><span class="line">                // The key was cancelled (e.g. due to socket closure)</span><br><span class="line">                // and removed from the selector while it was being</span><br><span class="line">                // processed. Count down the connections at this point</span><br><span class="line">                // since it won&apos;t have been counted down when the socket</span><br><span class="line">                // closed.</span><br><span class="line">                // 连接数减一</span><br><span class="line">                socket.socketWrapper.getEndpoint().countDownConnection();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                final NioSocketWrapper socketWrapper = (NioSocketWrapper) key.attachment();</span><br><span class="line">                if (socketWrapper != null) &#123;</span><br><span class="line">                    //we are registering the key to start with, reset the fairness counter.</span><br><span class="line">                    //向Poller的selector中添加注册interestOps，添加关注interestOps数据就绪事件</span><br><span class="line">                    int ops = key.interestOps() | interestOps;</span><br><span class="line">                    socketWrapper.interestOps(ops);</span><br><span class="line">                    key.interestOps(ops);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //关闭该key</span><br><span class="line">                    socket.getPoller().cancelledKey(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (CancelledKeyException ckx) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                socket.getPoller().cancelledKey(key);</span><br><span class="line">            &#125; catch (Exception ignore) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、3）Poller的processKey方法"><a href="#6、接（一、3）Poller的processKey方法" class="headerlink" title="6、接（一、3）Poller的processKey方法"></a>6、接（一、3）Poller的processKey方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">protected void processKey(SelectionKey sk, NioSocketWrapper attachment) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //Poller已关闭，关闭该key</span><br><span class="line">        if ( close ) &#123;</span><br><span class="line">            cancelledKey(sk);</span><br><span class="line">        &#125; else if ( sk.isValid() &amp;&amp; attachment != null ) &#123;</span><br><span class="line">            //读数据事件或者写数据事件就绪</span><br><span class="line">            if (sk.isReadable() || sk.isWritable() ) &#123;</span><br><span class="line">                //以文件形式发送给客户端</span><br><span class="line">                if ( attachment.getSendfileData() != null ) &#123;</span><br><span class="line">                    processSendfile(sk,attachment, false);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //去除对于已就绪事件的关注，防止socket变脏</span><br><span class="line">                    unreg(sk, attachment, sk.readyOps());</span><br><span class="line">                    boolean closeSocket = false;</span><br><span class="line">                    // Read goes before write</span><br><span class="line">                    // 处理读数据</span><br><span class="line">                    if (sk.isReadable()) &#123;</span><br><span class="line">                        if (!processSocket(attachment, SocketEvent.OPEN_READ, true)) &#123;</span><br><span class="line">                            closeSocket = true;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 处理写数据</span><br><span class="line">                    if (!closeSocket &amp;&amp; sk.isWritable()) &#123;</span><br><span class="line">                        if (!processSocket(attachment, SocketEvent.OPEN_WRITE, true)) &#123;</span><br><span class="line">                            closeSocket = true;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //关闭socket</span><br><span class="line">                    if (closeSocket) &#123;</span><br><span class="line">                        cancelledKey(sk);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //invalid key</span><br><span class="line">            //关闭key</span><br><span class="line">            cancelledKey(sk);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch ( CancelledKeyException ckx ) &#123;</span><br><span class="line">        //关闭key</span><br><span class="line">        cancelledKey(sk);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(&quot;&quot;,t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractEndpoint的processKey方法"><a href="#7、AbstractEndpoint的processKey方法" class="headerlink" title="7、AbstractEndpoint的processKey方法"></a>7、AbstractEndpoint<s>的processKey方法</s></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public boolean processSocket(SocketWrapperBase&lt;S&gt; socketWrapper,</span><br><span class="line">        SocketEvent event, boolean dispatch) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (socketWrapper == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //获取处理器</span><br><span class="line">        SocketProcessorBase&lt;S&gt; sc = processorCache.pop();</span><br><span class="line">        //创建或重置处理器，默认SocketProcessor</span><br><span class="line">        if (sc == null) &#123;</span><br><span class="line">            sc = createSocketProcessor(socketWrapper, event);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sc.reset(socketWrapper, event);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行处理器</span><br><span class="line">        Executor executor = getExecutor();</span><br><span class="line">        if (dispatch &amp;&amp; executor != null) &#123;</span><br><span class="line">            executor.execute(sc);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sc.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RejectedExecutionException ree) &#123;</span><br><span class="line">        getLog().warn(sm.getString(&quot;endpoint.executor.fail&quot;, socketWrapper) , ree);</span><br><span class="line">        return false;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        // This means we got an OOM or similar creating a thread, or that</span><br><span class="line">        // the pool and its queue are full</span><br><span class="line">        getLog().error(sm.getString(&quot;endpoint.process.fail&quot;), t);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、SocketProcessor的doRun方法"><a href="#8、SocketProcessor的doRun方法" class="headerlink" title="8、SocketProcessor的doRun方法"></a>8、SocketProcessor的doRun方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doRun() &#123;</span><br><span class="line">    NioChannel socket = socketWrapper.getSocket();</span><br><span class="line">    //获取注册到Poller的selector中的key</span><br><span class="line">    SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        int handshake = -1;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            if (key != null) &#123;</span><br><span class="line">                //默认返回true</span><br><span class="line">                if (socket.isHandshakeComplete()) &#123;</span><br><span class="line">                    // No TLS handshaking required. Let the handler</span><br><span class="line">                    // process this socket / event combination.</span><br><span class="line">                    handshake = 0;</span><br><span class="line">                &#125; else if (event == SocketEvent.STOP || event == SocketEvent.DISCONNECT ||</span><br><span class="line">                        event == SocketEvent.ERROR) &#123;</span><br><span class="line">                    // Unable to complete the TLS handshake. Treat it as</span><br><span class="line">                    // if the handshake failed.</span><br><span class="line">                    handshake = -1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    handshake = socket.handshake(key.isReadable(), key.isWritable());</span><br><span class="line">                    // The handshake process reads/writes from/to the</span><br><span class="line">                    // socket. status may therefore be OPEN_WRITE once</span><br><span class="line">                    // the handshake completes. However, the handshake</span><br><span class="line">                    // happens when the socket is opened so the status</span><br><span class="line">                    // must always be OPEN_READ after it completes. It</span><br><span class="line">                    // is OK to always set this as it is only used if</span><br><span class="line">                    // the handshake completes.</span><br><span class="line">                    event = SocketEvent.OPEN_READ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException x) &#123;</span><br><span class="line">            handshake = -1;</span><br><span class="line">            if (log.isDebugEnabled()) log.debug(&quot;Error during SSL handshake&quot;,x);</span><br><span class="line">        &#125; catch (CancelledKeyException ckx) &#123;</span><br><span class="line">            handshake = -1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (handshake == 0) &#123;</span><br><span class="line">            SocketState state = SocketState.OPEN;</span><br><span class="line">            // Process the request from this socket</span><br><span class="line">            if (event == null) &#123;</span><br><span class="line">                state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //获取ConnectionHandler，处理socket</span><br><span class="line">                state = getHandler().process(socketWrapper, event);</span><br><span class="line">            &#125;</span><br><span class="line">            if (state == SocketState.CLOSED) &#123;</span><br><span class="line">                //关闭socket</span><br><span class="line">                close(socket, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (handshake == -1 ) &#123;</span><br><span class="line">            //关闭socket</span><br><span class="line">            close(socket, key);</span><br><span class="line">        &#125; else if (handshake == SelectionKey.OP_READ)&#123;</span><br><span class="line">            //注册关注读数据就绪事件</span><br><span class="line">            socketWrapper.registerReadInterest();</span><br><span class="line">        &#125; else if (handshake == SelectionKey.OP_WRITE)&#123;</span><br><span class="line">            //注册关注写数据就绪事件</span><br><span class="line">            socketWrapper.registerWriteInterest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (CancelledKeyException cx) &#123;</span><br><span class="line">        socket.getPoller().cancelledKey(key);</span><br><span class="line">    &#125; catch (VirtualMachineError vme) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(vme);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        log.error(&quot;&quot;, t);</span><br><span class="line">        socket.getPoller().cancelledKey(key);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        socketWrapper = null;</span><br><span class="line">        event = null;</span><br><span class="line">        //return to cache</span><br><span class="line">        if (running &amp;&amp; !paused) &#123;</span><br><span class="line">            processorCache.push(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ConnectionHandler的process方法"><a href="#9、ConnectionHandler的process方法" class="headerlink" title="9、ConnectionHandler的process方法"></a>9、ConnectionHandler的process方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SocketState process(SocketWrapperBase&lt;S&gt; wrapper, SocketEvent status) &#123;</span><br><span class="line">    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">        getLog().debug(sm.getString(&quot;abstractConnectionHandler.process&quot;,</span><br><span class="line">                wrapper.getSocket(), status));</span><br><span class="line">    &#125;</span><br><span class="line">    // Socket已关闭</span><br><span class="line">    if (wrapper == null) &#123;</span><br><span class="line">        // Nothing to do. Socket has been closed.</span><br><span class="line">        return SocketState.CLOSED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    S socket = wrapper.getSocket();</span><br><span class="line"></span><br><span class="line">    //获取socket对应的处理器，获取到说明该请求为异步任务</span><br><span class="line">    Processor processor = connections.get(socket);</span><br><span class="line">    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">        getLog().debug(sm.getString(&quot;abstractConnectionHandler.connectionsGet&quot;,</span><br><span class="line">                processor, socket));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (processor != null) &#123;</span><br><span class="line">        // Make sure an async timeout doesn&apos;t fire</span><br><span class="line">        //从等待处理完成的异步任务集合中，去除该socket的异步任务</span><br><span class="line">        getProtocol().removeWaitingProcessor(processor);</span><br><span class="line">    &#125; else if (status == SocketEvent.DISCONNECT || status == SocketEvent.ERROR) &#123;</span><br><span class="line">        // Nothing to do. Endpoint requested a close and there is no</span><br><span class="line">        // longer a processor associated with this socket.</span><br><span class="line">        return SocketState.CLOSED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ContainerThreadMarker.set();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (processor == null) &#123;</span><br><span class="line">            //获取协商协议</span><br><span class="line">            String negotiatedProtocol = wrapper.getNegotiatedProtocol();</span><br><span class="line">            if (negotiatedProtocol != null) &#123;</span><br><span class="line">                UpgradeProtocol upgradeProtocol =</span><br><span class="line">                        getProtocol().getNegotiatedProtocol(negotiatedProtocol);</span><br><span class="line">                if (upgradeProtocol != null) &#123;</span><br><span class="line">                    processor = upgradeProtocol.getProcessor(</span><br><span class="line">                            wrapper, getProtocol().getAdapter());</span><br><span class="line">                &#125; else if (negotiatedProtocol.equals(&quot;http/1.1&quot;)) &#123;</span><br><span class="line">                    // Explicitly negotiated the default protocol.</span><br><span class="line">                    // Obtain a processor below.</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // TODO:</span><br><span class="line">                    // OpenSSL 1.0.2&apos;s ALPN callback doesn&apos;t support</span><br><span class="line">                    // failing the handshake with an error if no</span><br><span class="line">                    // protocol can be negotiated. Therefore, we need to</span><br><span class="line">                    // fail the connection here. Once this is fixed,</span><br><span class="line">                    // replace the code below with the commented out</span><br><span class="line">                    // block.</span><br><span class="line">                    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                        getLog().debug(sm.getString(</span><br><span class="line">                            &quot;abstractConnectionHandler.negotiatedProcessor.fail&quot;,</span><br><span class="line">                            negotiatedProtocol));</span><br><span class="line">                    &#125;</span><br><span class="line">                    return SocketState.CLOSED;</span><br><span class="line">                    /*</span><br><span class="line">                     * To replace the code above once OpenSSL 1.1.0 is</span><br><span class="line">                     * used.</span><br><span class="line">                    // Failed to create processor. This is a bug.</span><br><span class="line">                    throw new IllegalStateException(sm.getString(</span><br><span class="line">                            &quot;abstractConnectionHandler.negotiatedProcessor.fail&quot;,</span><br><span class="line">                            negotiatedProtocol));</span><br><span class="line">                    */</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (processor == null) &#123;</span><br><span class="line">            //从队列中获取processor,processor在处理完任务之后会被重置并加入该队列</span><br><span class="line">            processor = recycledProcessors.pop();</span><br><span class="line">            if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                getLog().debug(sm.getString(&quot;abstractConnectionHandler.processorPop&quot;,</span><br><span class="line">                        processor));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //创建处理器，默认Http11Processor</span><br><span class="line">        if (processor == null) &#123;</span><br><span class="line">            processor = getProtocol().createProcessor();</span><br><span class="line">            register(processor);</span><br><span class="line">        &#125;</span><br><span class="line">        //是否支持ssl协议</span><br><span class="line">        processor.setSslSupport(</span><br><span class="line">                wrapper.getSslSupport(getProtocol().getClientCertProvider()));</span><br><span class="line"></span><br><span class="line">        // Associate the processor with the connection</span><br><span class="line">        // 建立socket与processor映射</span><br><span class="line">        connections.put(socket, processor);</span><br><span class="line"></span><br><span class="line">        SocketState state = SocketState.CLOSED;</span><br><span class="line">        do &#123;</span><br><span class="line">            //处理socket</span><br><span class="line">            state = processor.process(wrapper, status);</span><br><span class="line">            //使用HTTP/2协议处理该请求</span><br><span class="line">            if (state == SocketState.UPGRADING) &#123;</span><br><span class="line">                // Get the HTTP upgrade handler</span><br><span class="line">                UpgradeToken upgradeToken = processor.getUpgradeToken();</span><br><span class="line">                // Retrieve leftover input</span><br><span class="line">                ByteBuffer leftOverInput = processor.getLeftoverInput();</span><br><span class="line">                if (upgradeToken == null) &#123;</span><br><span class="line">                    // Assume direct HTTP/2 connection</span><br><span class="line">                    UpgradeProtocol upgradeProtocol = getProtocol().getUpgradeProtocol(&quot;h2c&quot;);</span><br><span class="line">                    if (upgradeProtocol != null) &#123;</span><br><span class="line">                        processor = upgradeProtocol.getProcessor(</span><br><span class="line">                                wrapper, getProtocol().getAdapter());</span><br><span class="line">                        wrapper.unRead(leftOverInput);</span><br><span class="line">                        // Associate with the processor with the connection</span><br><span class="line">                        connections.put(socket, processor);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                            getLog().debug(sm.getString(</span><br><span class="line">                                &quot;abstractConnectionHandler.negotiatedProcessor.fail&quot;,</span><br><span class="line">                                &quot;h2c&quot;));</span><br><span class="line">                        &#125;</span><br><span class="line">                        return SocketState.CLOSED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    HttpUpgradeHandler httpUpgradeHandler = upgradeToken.getHttpUpgradeHandler();</span><br><span class="line">                    // Release the Http11 processor to be re-used</span><br><span class="line">                    release(processor);</span><br><span class="line">                    // Create the upgrade processor</span><br><span class="line">                    processor = getProtocol().createUpgradeProcessor(wrapper, upgradeToken);</span><br><span class="line">                    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                        getLog().debug(sm.getString(&quot;abstractConnectionHandler.upgradeCreate&quot;,</span><br><span class="line">                                processor, wrapper));</span><br><span class="line">                    &#125;</span><br><span class="line">                    wrapper.unRead(leftOverInput);</span><br><span class="line">                    // Mark the connection as upgraded</span><br><span class="line">                    wrapper.setUpgraded(true);</span><br><span class="line">                    // Associate with the processor with the connection</span><br><span class="line">                    connections.put(socket, processor);</span><br><span class="line">                    // Initialise the upgrade handler (which may trigger</span><br><span class="line">                    // some IO using the new protocol which is why the lines</span><br><span class="line">                    // above are necessary)</span><br><span class="line">                    // This cast should be safe. If it fails the error</span><br><span class="line">                    // handling for the surrounding try/catch will deal with</span><br><span class="line">                    // it.</span><br><span class="line">                    if (upgradeToken.getInstanceManager() == null) &#123;</span><br><span class="line">                        httpUpgradeHandler.init((WebConnection) processor);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        ClassLoader oldCL = upgradeToken.getContextBind().bind(false, null);</span><br><span class="line">                        try &#123;</span><br><span class="line">                            httpUpgradeHandler.init((WebConnection) processor);</span><br><span class="line">                        &#125; finally &#123;</span><br><span class="line">                            upgradeToken.getContextBind().unbind(false, oldCL);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; while ( state == SocketState.UPGRADING);</span><br><span class="line"></span><br><span class="line">        //该请求为异步任务</span><br><span class="line">        if (state == SocketState.LONG) &#123;</span><br><span class="line">            // In the middle of processing a request/response. Keep the</span><br><span class="line">            // socket associated with the processor. Exact requirements</span><br><span class="line">            // depend on type of long poll</span><br><span class="line">            longPoll(wrapper, processor);</span><br><span class="line">            if (processor.isAsync()) &#123;</span><br><span class="line">                //异步任务把processor添加到等待队列中继续处理读写，异步任务即使用业务线程池处理任务，</span><br><span class="line">                //这样不会占用Executor线程数，可以增加系统的吞吐量</span><br><span class="line">                getProtocol().addWaitingProcessor(processor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (state == SocketState.OPEN) &#123;</span><br><span class="line">            // In keep-alive but between requests. OK to recycle</span><br><span class="line">            // processor. Continue to poll for the next request.</span><br><span class="line">            //请求已处理完且为http长连接，回收processor对象，然后再将channel注册到poller上面去继续等待，  </span><br><span class="line">            //一个http连接可以发送多次请求</span><br><span class="line">            connections.remove(socket);</span><br><span class="line">            release(processor);</span><br><span class="line">            wrapper.registerReadInterest();</span><br><span class="line">        &#125; else if (state == SocketState.SENDFILE) &#123;</span><br><span class="line">            // Sendfile in progress. If it fails, the socket will be</span><br><span class="line">            // closed. If it works, the socket either be added to the</span><br><span class="line">            // poller (or equivalent) to await more data or processed</span><br><span class="line">            // if there are any pipe-lined requests remaining.</span><br><span class="line">        &#125; else if (state == SocketState.UPGRADED) &#123;</span><br><span class="line">            // Don&apos;t add sockets back to the poller if this was a</span><br><span class="line">            // non-blocking write otherwise the poller may trigger</span><br><span class="line">            // multiple read events which may lead to thread starvation</span><br><span class="line">            // in the connector. The write() method will add this socket</span><br><span class="line">            // to the poller if necessary.</span><br><span class="line">            if (status != SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">                longPoll(wrapper, processor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (state == SocketState.SUSPENDED) &#123;</span><br><span class="line">            // Don&apos;t add sockets back to the poller.</span><br><span class="line">            // The resumeProcessing() method will add this socket</span><br><span class="line">            // to the poller.</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Connection closed. OK to recycle the processor. Upgrade</span><br><span class="line">            // processors are not recycled.</span><br><span class="line">            // 重置处理器，并关闭连接</span><br><span class="line">            connections.remove(socket);</span><br><span class="line">            if (processor.isUpgrade()) &#123;</span><br><span class="line">                UpgradeToken upgradeToken = processor.getUpgradeToken();</span><br><span class="line">                HttpUpgradeHandler httpUpgradeHandler = upgradeToken.getHttpUpgradeHandler();</span><br><span class="line">                InstanceManager instanceManager = upgradeToken.getInstanceManager();</span><br><span class="line">                if (instanceManager == null) &#123;</span><br><span class="line">                    httpUpgradeHandler.destroy();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ClassLoader oldCL = upgradeToken.getContextBind().bind(false, null);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        httpUpgradeHandler.destroy();</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            instanceManager.destroyInstance(httpUpgradeHandler);</span><br><span class="line">                        &#125; catch (Throwable e) &#123;</span><br><span class="line">                            ExceptionUtils.handleThrowable(e);</span><br><span class="line">                            getLog().error(sm.getString(&quot;abstractConnectionHandler.error&quot;), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        upgradeToken.getContextBind().unbind(false, oldCL);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                release(processor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return state;</span><br><span class="line">    &#125; catch(java.net.SocketException e) &#123;</span><br><span class="line">        // SocketExceptions are normal</span><br><span class="line">        getLog().debug(sm.getString(</span><br><span class="line">                &quot;abstractConnectionHandler.socketexception.debug&quot;), e);</span><br><span class="line">    &#125; catch (java.io.IOException e) &#123;</span><br><span class="line">        // IOExceptions are normal</span><br><span class="line">        getLog().debug(sm.getString(</span><br><span class="line">                &quot;abstractConnectionHandler.ioexception.debug&quot;), e);</span><br><span class="line">    &#125; catch (ProtocolException e) &#123;</span><br><span class="line">        // Protocol exceptions normally mean the client sent invalid or</span><br><span class="line">        // incomplete data.</span><br><span class="line">        getLog().debug(sm.getString(</span><br><span class="line">                &quot;abstractConnectionHandler.protocolexception.debug&quot;), e);</span><br><span class="line">    &#125;</span><br><span class="line">    // Future developers: if you discover any other</span><br><span class="line">    // rare-but-nonfatal exceptions, catch them here, and log as</span><br><span class="line">    // above.</span><br><span class="line">    catch (Throwable e) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(e);</span><br><span class="line">        // any other exception or error is odd. Here we log it</span><br><span class="line">        // with &quot;ERROR&quot; level, so it will show up even on</span><br><span class="line">        // less-than-verbose logs.</span><br><span class="line">        getLog().error(sm.getString(&quot;abstractConnectionHandler.error&quot;), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        ContainerThreadMarker.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Make sure socket/processor is removed from the list of current</span><br><span class="line">    // connections</span><br><span class="line">    // 重置处理器，并关闭连接</span><br><span class="line">    connections.remove(socket);</span><br><span class="line">    release(processor);</span><br><span class="line">    return SocketState.CLOSED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AbstractProcessorLight的process方法"><a href="#10、AbstractProcessorLight的process方法" class="headerlink" title="10、AbstractProcessorLight的process方法"></a>10、AbstractProcessorLight的process方法</h4><p>Http11Processor的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SocketState process(SocketWrapperBase&lt;?&gt; socketWrapper, SocketEvent status)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    SocketState state = SocketState.CLOSED;</span><br><span class="line">    Iterator&lt;DispatchType&gt; dispatches = null;</span><br><span class="line">    do &#123;</span><br><span class="line">        if (dispatches != null) &#123;</span><br><span class="line">            DispatchType nextDispatch = dispatches.next();</span><br><span class="line">            // 异步任务的后续处理,处理read或者write</span><br><span class="line">            state = dispatch(nextDispatch.getSocketStatus());</span><br><span class="line">        &#125; else if (status == SocketEvent.DISCONNECT) &#123;</span><br><span class="line">            // Do nothing here, just wait for it to get recycled</span><br><span class="line">        &#125; else if (isAsync() || isUpgrade() || state == SocketState.ASYNC_END) &#123;</span><br><span class="line">            //异步任务的后续处理，直接返回给客户端结果或转发请求给其他的servlet。</span><br><span class="line">            state = dispatch(status);</span><br><span class="line">            if (state == SocketState.OPEN) &#123;</span><br><span class="line">                // There may be pipe-lined data to read. If the data isn&apos;t</span><br><span class="line">                // processed now, execution will exit this loop and call</span><br><span class="line">                // release() which will recycle the processor (and input</span><br><span class="line">                // buffer) deleting any pipe-lined data. To avoid this,</span><br><span class="line">                // process it now.</span><br><span class="line">                // 异步任务处理完成，处理新请求</span><br><span class="line">                state = service(socketWrapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (status == SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">            // Extra write event likely after async, ignore</span><br><span class="line">            state = SocketState.LONG;</span><br><span class="line">        &#125; else if (status == SocketEvent.OPEN_READ)&#123;</span><br><span class="line">            //读取socket的数据封装成request和response对象，然后把这个两个对象交给容器</span><br><span class="line">            state = service(socketWrapper);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Default to closing the socket if the SocketEvent passed in</span><br><span class="line">            // is not consistent with the current state of the Processor</span><br><span class="line">            state = SocketState.CLOSED;</span><br><span class="line">        &#125;</span><br><span class="line">        //异步任务，如果已处理完毕，则返回ASYNC_END，</span><br><span class="line">        //如果未处理完毕，释放当前占用的容器线程池，等待异步servlet通知容器线程池重新处理servlet</span><br><span class="line">        if (state != SocketState.CLOSED &amp;&amp; isAsync()) &#123;</span><br><span class="line">            state = asyncPostProcess();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">            getLog().debug(&quot;Socket: [&quot; + socketWrapper +</span><br><span class="line">                    &quot;], Status in: [&quot; + status +</span><br><span class="line">                    &quot;], State out: [&quot; + state + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (dispatches == null || !dispatches.hasNext()) &#123;</span><br><span class="line">            // Only returns non-null iterator if there are</span><br><span class="line">            // dispatches to process.</span><br><span class="line">            // 获取待后续处理的异步任务</span><br><span class="line">            dispatches = getIteratorAndClearDispatches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (state == SocketState.ASYNC_END ||</span><br><span class="line">            dispatches != null &amp;&amp; state != SocketState.CLOSED);</span><br><span class="line"></span><br><span class="line">    return state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="11、Http11Processor的service方法"><a href="#11、Http11Processor的service方法" class="headerlink" title="11、Http11Processor的service方法"></a>11、Http11Processor的service方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SocketState service(SocketWrapperBase&lt;?&gt; socketWrapper)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    RequestInfo rp = request.getRequestProcessor();</span><br><span class="line">    rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);</span><br><span class="line"></span><br><span class="line">    // Setting up the I/O</span><br><span class="line">    setSocketWrapper(socketWrapper);</span><br><span class="line">    //初始化读缓冲区</span><br><span class="line">    inputBuffer.init(socketWrapper);</span><br><span class="line">    //初始化写缓冲区</span><br><span class="line">    outputBuffer.init(socketWrapper);</span><br><span class="line"></span><br><span class="line">    // Flags</span><br><span class="line">    // 是否为http长连接</span><br><span class="line">    keepAlive = true;</span><br><span class="line">    openSocket = false;</span><br><span class="line">    //读是否完成</span><br><span class="line">    readComplete = true;</span><br><span class="line">    boolean keptAlive = false;</span><br><span class="line">    SendfileState sendfileState = SendfileState.DONE;</span><br><span class="line"></span><br><span class="line">    while (!getErrorState().isError() &amp;&amp; keepAlive &amp;&amp; !isAsync() &amp;&amp; upgradeToken == null &amp;&amp;</span><br><span class="line">            sendfileState == SendfileState.DONE &amp;&amp; !endpoint.isPaused()) &#123;</span><br><span class="line"></span><br><span class="line">        // Parsing the request header</span><br><span class="line">        try &#123;</span><br><span class="line">            //读取请求行</span><br><span class="line">            if (!inputBuffer.parseRequestLine(keptAlive)) &#123;</span><br><span class="line">                if (inputBuffer.getParsingRequestLinePhase() == -1) &#123;</span><br><span class="line">                    // 使用http2.0</span><br><span class="line">                    return SocketState.UPGRADING;</span><br><span class="line">                &#125; else if (handleIncompleteRequestLineRead()) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //已挂起</span><br><span class="line">            if (endpoint.isPaused()) &#123;</span><br><span class="line">                // 503 - Service unavailable</span><br><span class="line">                // 503 网站不可用</span><br><span class="line">                response.setStatus(503);</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CLEAN, null);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 默认http长连接</span><br><span class="line">                keptAlive = true;</span><br><span class="line">                // Set this every time in case limit has been changed via JMX</span><br><span class="line">                //设置header个数的限制</span><br><span class="line">                request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());</span><br><span class="line">                // 循环解析所有的header name和value对，并添加到MimeHeaders的headers数组中</span><br><span class="line">                if (!inputBuffer.parseHeaders()) &#123;</span><br><span class="line">                    // We&apos;ve read part of the request, don&apos;t recycle it</span><br><span class="line">                    // instead associate it with the socket</span><br><span class="line">                    openSocket = true;</span><br><span class="line">                    readComplete = false;</span><br><span class="line">                    //读取失败</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                if (!disableUploadTimeout) &#123;</span><br><span class="line">                    //设置upload超时时间</span><br><span class="line">                    socketWrapper.setReadTimeout(connectionUploadTimeout);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(sm.getString(&quot;http11processor.header.parse&quot;), e);</span><br><span class="line">            &#125;</span><br><span class="line">            setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);</span><br><span class="line">            break;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            UserDataHelper.Mode logMode = userDataHelper.getNextMode();</span><br><span class="line">            if (logMode != null) &#123;</span><br><span class="line">                String message = sm.getString(&quot;http11processor.header.parse&quot;);</span><br><span class="line">                switch (logMode) &#123;</span><br><span class="line">                    case INFO_THEN_DEBUG:</span><br><span class="line">                        message += sm.getString(&quot;http11processor.fallToDebug&quot;);</span><br><span class="line">                        //$FALL-THROUGH$</span><br><span class="line">                    case INFO:</span><br><span class="line">                        log.info(message, t);</span><br><span class="line">                        break;</span><br><span class="line">                    case DEBUG:</span><br><span class="line">                        log.debug(message, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 400 - Bad Request</span><br><span class="line">            response.setStatus(400);</span><br><span class="line">            setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">            getAdapter().log(request, response, 0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Has an upgrade been requested?</span><br><span class="line">        // 获取header中的Connection，若存在Connection的值为upgrade，则认为http2.0</span><br><span class="line">        Enumeration&lt;String&gt; connectionValues = request.getMimeHeaders().values(&quot;Connection&quot;);</span><br><span class="line">        boolean foundUpgrade = false;</span><br><span class="line">        while (connectionValues.hasMoreElements() &amp;&amp; !foundUpgrade) &#123;</span><br><span class="line">            foundUpgrade = connectionValues.nextElement().toLowerCase(</span><br><span class="line">                    Locale.ENGLISH).contains(&quot;upgrade&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (foundUpgrade) &#123;</span><br><span class="line">            // Check the protocol</span><br><span class="line">            String requestedProtocol = request.getHeader(&quot;Upgrade&quot;);</span><br><span class="line"></span><br><span class="line">            UpgradeProtocol upgradeProtocol = httpUpgradeProtocols.get(requestedProtocol);</span><br><span class="line">            if (upgradeProtocol != null) &#123;</span><br><span class="line">                if (upgradeProtocol.accept(request)) &#123;</span><br><span class="line">                    // TODO Figure out how to handle request bodies at this</span><br><span class="line">                    // point.</span><br><span class="line">                    response.setStatus(HttpServletResponse.SC_SWITCHING_PROTOCOLS);</span><br><span class="line">                    response.setHeader(&quot;Connection&quot;, &quot;Upgrade&quot;);</span><br><span class="line">                    response.setHeader(&quot;Upgrade&quot;, requestedProtocol);</span><br><span class="line">                    action(ActionCode.CLOSE,  null);</span><br><span class="line">                    getAdapter().log(request, response, 0);</span><br><span class="line"></span><br><span class="line">                    InternalHttpUpgradeHandler upgradeHandler =</span><br><span class="line">                            upgradeProtocol.getInternalUpgradeHandler(</span><br><span class="line">                                    getAdapter(), cloneRequest(request));</span><br><span class="line">                    UpgradeToken upgradeToken = new UpgradeToken(upgradeHandler, null, null);</span><br><span class="line">                    action(ActionCode.UPGRADE, upgradeToken);</span><br><span class="line">                    return SocketState.UPGRADING;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!getErrorState().isError()) &#123;</span><br><span class="line">            // Setting up filters, and parse some request headers</span><br><span class="line">            rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);</span><br><span class="line">            try &#123;</span><br><span class="line">                //预处理请求</span><br><span class="line">                prepareRequest();</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;http11processor.request.prepare&quot;), t);</span><br><span class="line">                &#125;</span><br><span class="line">                // 500 - Internal Server Error</span><br><span class="line">                response.setStatus(500);</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">                getAdapter().log(request, response, 0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //长连接数量限制</span><br><span class="line">        if (maxKeepAliveRequests == 1) &#123;</span><br><span class="line">            keepAlive = false;</span><br><span class="line">        &#125; else if (maxKeepAliveRequests &gt; 0 &amp;&amp;</span><br><span class="line">                socketWrapper.decrementKeepAlive() &lt;= 0) &#123;</span><br><span class="line">            keepAlive = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Process the request in the adapter</span><br><span class="line">        if (!getErrorState().isError()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);</span><br><span class="line">                //获取CoyoteAdapter处理请求</span><br><span class="line">                getAdapter().service(request, response);</span><br><span class="line">                // Handle when the response was committed before a serious</span><br><span class="line">                // error occurred.  Throwing a ServletException should both</span><br><span class="line">                // set the status to 500 and set the errorException.</span><br><span class="line">                // If we fail here, then the response is likely already</span><br><span class="line">                // committed, so we can&apos;t try and set headers.</span><br><span class="line">                if(keepAlive &amp;&amp; !getErrorState().isError() &amp;&amp; !isAsync() &amp;&amp;</span><br><span class="line">                        statusDropsConnection(response.getStatus())) &#123;</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CLEAN, null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedIOException e) &#123;</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);</span><br><span class="line">            &#125; catch (HeadersTooLargeException e) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;http11processor.request.process&quot;), e);</span><br><span class="line">                // The response should not have been committed but check it</span><br><span class="line">                // anyway to be safe</span><br><span class="line">                if (response.isCommitted()) &#123;</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_NOW, e);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    response.reset();</span><br><span class="line">                    response.setStatus(500);</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CLEAN, e);</span><br><span class="line">                    response.setHeader(&quot;Connection&quot;, &quot;close&quot;); // TODO: Remove</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(sm.getString(&quot;http11processor.request.process&quot;), t);</span><br><span class="line">                // 500 - Internal Server Error</span><br><span class="line">                response.setStatus(500);</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">                getAdapter().log(request, response, 0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Finish the handling of the request</span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);</span><br><span class="line">        //不是异步任务，请求处理结束</span><br><span class="line">        if (!isAsync()) &#123;</span><br><span class="line">            // If this is an async request then the request ends when it has</span><br><span class="line">            // been completed. The AsyncContext is responsible for calling</span><br><span class="line">            // endRequest() in that case.</span><br><span class="line">            endRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);</span><br><span class="line"></span><br><span class="line">        // If there was an error, make sure the request is counted as</span><br><span class="line">        // and error, and update the statistics counter</span><br><span class="line">        if (getErrorState().isError()) &#123;</span><br><span class="line">            response.setStatus(500);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 重置，处理下一个请求</span><br><span class="line">        if (!isAsync() || getErrorState().isError()) &#123;</span><br><span class="line">            request.updateCounters();</span><br><span class="line">            if (getErrorState().isIoAllowed()) &#123;</span><br><span class="line">                inputBuffer.nextRequest();</span><br><span class="line">                outputBuffer.nextRequest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //设置Upload超时时间</span><br><span class="line">        if (!disableUploadTimeout) &#123;</span><br><span class="line">            int soTimeout = endpoint.getConnectionTimeout();</span><br><span class="line">            if(soTimeout &gt; 0) &#123;</span><br><span class="line">                socketWrapper.setReadTimeout(soTimeout);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                socketWrapper.setReadTimeout(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);</span><br><span class="line">        //tomcat默认设置是当数据大小达到48kb时，将启用文件传输</span><br><span class="line">        sendfileState = processSendfile(socketWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);</span><br><span class="line"></span><br><span class="line">    if (getErrorState().isError() || endpoint.isPaused()) &#123;</span><br><span class="line">        return SocketState.CLOSED;</span><br><span class="line">    &#125; else if (isAsync()) &#123;</span><br><span class="line">        return SocketState.LONG;</span><br><span class="line">    &#125; else if (isUpgrade()) &#123;</span><br><span class="line">        return SocketState.UPGRADING;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (sendfileState == SendfileState.PENDING) &#123;</span><br><span class="line">            return SocketState.SENDFILE;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (openSocket) &#123;</span><br><span class="line">                if (readComplete) &#123;</span><br><span class="line">                    return SocketState.OPEN;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return SocketState.LONG;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return SocketState.CLOSED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、CoyoteAdapter的service方法"><a href="#12、CoyoteAdapter的service方法" class="headerlink" title="12、CoyoteAdapter的service方法"></a>12、CoyoteAdapter的service方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void service(org.apache.coyote.Request req, org.apache.coyote.Response res)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    Request request = (Request) req.getNote(ADAPTER_NOTES);</span><br><span class="line">    Response response = (Response) res.getNote(ADAPTER_NOTES);</span><br><span class="line">    // 创建request及response</span><br><span class="line">    if (request == null) &#123;</span><br><span class="line">        // Create objects</span><br><span class="line">        request = connector.createRequest();</span><br><span class="line">        request.setCoyoteRequest(req);</span><br><span class="line">        response = connector.createResponse();</span><br><span class="line">        response.setCoyoteResponse(res);</span><br><span class="line"></span><br><span class="line">        // Link objects</span><br><span class="line">        request.setResponse(response);</span><br><span class="line">        response.setRequest(request);</span><br><span class="line"></span><br><span class="line">        // Set as notes</span><br><span class="line">        req.setNote(ADAPTER_NOTES, request);</span><br><span class="line">        res.setNote(ADAPTER_NOTES, response);</span><br><span class="line"></span><br><span class="line">        // Set query string encoding</span><br><span class="line">        req.getParameters().setQueryStringCharset(connector.getURICharset());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (connector.getXpoweredBy()) &#123;</span><br><span class="line">        response.addHeader(&quot;X-Powered-By&quot;, POWERED_BY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean async = false;</span><br><span class="line">    boolean postParseSuccess = false;</span><br><span class="line"></span><br><span class="line">    req.getRequestProcessor().setWorkerThreadName(THREAD_NAME.get());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Parse and set Catalina and configuration specific</span><br><span class="line">        // request parameters</span><br><span class="line">        // 处理请求，解析请求url中的参数，由Mapper中查找请求对应的host、context、wrapper</span><br><span class="line">        // 获取Path或Cookies中的sessionID存入request中</span><br><span class="line">        postParseSuccess = postParseRequest(req, request, res, response);</span><br><span class="line">        if (postParseSuccess) &#123;</span><br><span class="line">            //check valves if we support async</span><br><span class="line">            //设置是否支持异步任务</span><br><span class="line">            request.setAsyncSupported(</span><br><span class="line">                    connector.getService().getContainer().getPipeline().isAsyncSupported());</span><br><span class="line">            // Calling the container</span><br><span class="line">            //获取Engine的管道的value链，默认只有StandardEngineValve，执行invoke方法</span><br><span class="line">            connector.getService().getContainer().getPipeline().getFirst().invoke(</span><br><span class="line">                    request, response);</span><br><span class="line">        &#125;</span><br><span class="line">        if (request.isAsync()) &#123;</span><br><span class="line">            async = true;</span><br><span class="line">            ReadListener readListener = req.getReadListener();</span><br><span class="line">            if (readListener != null &amp;&amp; request.isFinished()) &#123;</span><br><span class="line">                // Possible the all data may have been read during service()</span><br><span class="line">                // method so this needs to be checked here</span><br><span class="line">                ClassLoader oldCL = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    oldCL = request.getContext().bind(false, null);</span><br><span class="line">                    if (req.sendAllDataReadEvent()) &#123;</span><br><span class="line">                        req.getReadListener().onAllDataRead();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    request.getContext().unbind(false, oldCL);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Throwable throwable =</span><br><span class="line">                    (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span><br><span class="line"></span><br><span class="line">            // If an async request was started, is not going to end once</span><br><span class="line">            // this container thread finishes and an error occurred, trigger</span><br><span class="line">            // the async error process</span><br><span class="line">            if (!request.isAsyncCompleting() &amp;&amp; throwable != null) &#123;</span><br><span class="line">                request.getAsyncContextInternal().setErrorState(throwable, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //请求处理结束，发送返回</span><br><span class="line">            request.finishRequest();</span><br><span class="line">            response.finishResponse();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        // Ignore</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        AtomicBoolean error = new AtomicBoolean(false);</span><br><span class="line">        res.action(ActionCode.IS_ERROR, error);</span><br><span class="line"></span><br><span class="line">        if (request.isAsyncCompleting() &amp;&amp; error.get()) &#123;</span><br><span class="line">            // Connection will be forcibly closed which will prevent</span><br><span class="line">            // completion happening at the usual point. Need to trigger</span><br><span class="line">            // call to onComplete() here.</span><br><span class="line">            res.action(ActionCode.ASYNC_POST_PROCESS,  null);</span><br><span class="line">            async = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Access log</span><br><span class="line">        if (!async &amp;&amp; postParseSuccess) &#123;</span><br><span class="line">            // Log only if processing was invoked.</span><br><span class="line">            // If postParseRequest() failed, it has already logged it.</span><br><span class="line">            Context context = request.getContext();</span><br><span class="line">            // If the context is null, it is likely that the endpoint was</span><br><span class="line">            // shutdown, this connection closed and the request recycled in</span><br><span class="line">            // a different thread. That thread will have updated the access</span><br><span class="line">            // log so it is OK not to update the access log here in that</span><br><span class="line">            // case.</span><br><span class="line">            if (context != null) &#123;</span><br><span class="line">                context.logAccess(request, response,</span><br><span class="line">                        System.currentTimeMillis() - req.getStartTime(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        req.getRequestProcessor().setWorkerThreadName(null);</span><br><span class="line"></span><br><span class="line">        // Recycle the wrapper request and response</span><br><span class="line">        if (!async) &#123;</span><br><span class="line">            request.recycle();</span><br><span class="line">            response.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、StandardEngineValve的invoke方法"><a href="#13、StandardEngineValve的invoke方法" class="headerlink" title="13、StandardEngineValve的invoke方法"></a>13、StandardEngineValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void invoke(Request request, Response response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Select the Host to be used for this Request</span><br><span class="line">    Host host = request.getHost();</span><br><span class="line">    if (host == null) &#123;</span><br><span class="line">        response.sendError</span><br><span class="line">            (HttpServletResponse.SC_BAD_REQUEST,</span><br><span class="line">             sm.getString(&quot;standardEngine.noHost&quot;,</span><br><span class="line">                          request.getServerName()));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Ask this Host to process this request</span><br><span class="line">    //获取Host的管道的value链，默认只有StandardHostValve，执行invoke方法 </span><br><span class="line">    host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、StandardHostValve的invoke方法"><a href="#14、StandardHostValve的invoke方法" class="headerlink" title="14、StandardHostValve的invoke方法"></a>14、StandardHostValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void invoke(Request request, Response response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Select the Context to be used for this Request</span><br><span class="line">    Context context = request.getContext();</span><br><span class="line">    if (context == null) &#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,</span><br><span class="line">             sm.getString(&quot;standardHost.noContext&quot;));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(context.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean asyncAtStart = request.isAsync();</span><br><span class="line">    boolean asyncDispatching = request.isAsyncDispatching();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        context.bind(Globals.IS_SECURITY_ENABLED, MY_CLASSLOADER);</span><br><span class="line"></span><br><span class="line">        if (!asyncAtStart &amp;&amp; !context.fireRequestInitEvent(request.getRequest())) &#123;</span><br><span class="line">            // Don&apos;t fire listeners during async processing (the listener</span><br><span class="line">            // fired for the request that called startAsync()).</span><br><span class="line">            // If a request init listener throws an exception, the request</span><br><span class="line">            // is aborted.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Ask this Context to process this request. Requests that are in</span><br><span class="line">        // async mode and are not being dispatched to this resource must be</span><br><span class="line">        // in error and have been routed here to check for application</span><br><span class="line">        // defined error pages.</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!asyncAtStart || asyncDispatching) &#123;</span><br><span class="line">                //获取Context的管道的value链，默认只有StandardContextValve，执行invoke方法 </span><br><span class="line">                context.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Make sure this request/response is here because an error</span><br><span class="line">                // report is required.</span><br><span class="line">                if (!response.isErrorReportRequired()) &#123;</span><br><span class="line">                    throw new IllegalStateException(sm.getString(&quot;standardHost.asyncStateError&quot;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            container.getLogger().error(&quot;Exception Processing &quot; + request.getRequestURI(), t);</span><br><span class="line">            // If a new error occurred while trying to report a previous</span><br><span class="line">            // error allow the original error to be reported.</span><br><span class="line">            if (!response.isErrorReportRequired()) &#123;</span><br><span class="line">                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);</span><br><span class="line">                throwable(request, response, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Now that the request/response pair is back under container</span><br><span class="line">        // control lift the suspension so that the error handling can</span><br><span class="line">        // complete and/or the container can flush any remaining data</span><br><span class="line">        response.setSuspended(false);</span><br><span class="line"></span><br><span class="line">        Throwable t = (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span><br><span class="line"></span><br><span class="line">        // Protect against NPEs if the context was destroyed during a</span><br><span class="line">        // long running request.</span><br><span class="line">        if (!context.getState().isAvailable()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Look for (and render if found) an application level error page</span><br><span class="line">        // 发送错误信息</span><br><span class="line">        if (response.isErrorReportRequired()) &#123;</span><br><span class="line">            if (t != null) &#123;</span><br><span class="line">                throwable(request, response, t);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                status(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 广播request销毁事件</span><br><span class="line">        if (!request.isAsync() &amp;&amp; !asyncAtStart) &#123;</span><br><span class="line">            context.fireRequestDestroyEvent(request.getRequest());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Access a session (if present) to update last accessed time, based</span><br><span class="line">        // on a strict interpretation of the specification</span><br><span class="line">        // 更新session的时间</span><br><span class="line">        if (ACCESS_SESSION) &#123;</span><br><span class="line">            request.getSession(false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.unbind(Globals.IS_SECURITY_ENABLED, MY_CLASSLOADER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、StandardContextValve的invoke方法"><a href="#15、StandardContextValve的invoke方法" class="headerlink" title="15、StandardContextValve的invoke方法"></a>15、StandardContextValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void invoke(Request request, Response response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Disallow any direct access to resources under WEB-INF or META-INF</span><br><span class="line">    MessageBytes requestPathMB = request.getRequestPathMB();</span><br><span class="line">    // 不允许直接访问该目录的资源</span><br><span class="line">    if ((requestPathMB.startsWithIgnoreCase(&quot;/META-INF/&quot;, 0))</span><br><span class="line">            || (requestPathMB.equalsIgnoreCase(&quot;/META-INF&quot;))</span><br><span class="line">            || (requestPathMB.startsWithIgnoreCase(&quot;/WEB-INF/&quot;, 0))</span><br><span class="line">            || (requestPathMB.equalsIgnoreCase(&quot;/WEB-INF&quot;))) &#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Select the Wrapper to be used for this Request</span><br><span class="line">    // 检查是否找到wrapper</span><br><span class="line">    Wrapper wrapper = request.getWrapper();</span><br><span class="line">    if (wrapper == null || wrapper.isUnavailable()) &#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Acknowledge the request</span><br><span class="line">    try &#123;</span><br><span class="line">        //确认已收到该请求</span><br><span class="line">        response.sendAcknowledgement();</span><br><span class="line">    &#125; catch (IOException ioe) &#123;</span><br><span class="line">        container.getLogger().error(sm.getString(</span><br><span class="line">                &quot;standardContextValve.acknowledgeException&quot;), ioe);</span><br><span class="line">        request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);</span><br><span class="line">        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置是否支持异步任务</span><br><span class="line">    if (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(wrapper.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line">    //获取Wrapper的管道的value链，默认只有StandardWrapperValve，执行invoke方法 </span><br><span class="line">    wrapper.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、StandardWrapperValve的invoke方法"><a href="#16、StandardWrapperValve的invoke方法" class="headerlink" title="16、StandardWrapperValve的invoke方法"></a>16、StandardWrapperValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> public final void invoke(Request request, Response response)</span><br><span class="line">     throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">     // Initialize local variables we may need</span><br><span class="line">     boolean unavailable = false;</span><br><span class="line">     Throwable throwable = null;</span><br><span class="line">     // This should be a Request attribute...</span><br><span class="line">     long t1=System.currentTimeMillis();</span><br><span class="line">     requestCount.incrementAndGet();</span><br><span class="line">     StandardWrapper wrapper = (StandardWrapper) getContainer();</span><br><span class="line">     Servlet servlet = null;</span><br><span class="line">     Context context = (Context) wrapper.getParent();</span><br><span class="line"></span><br><span class="line">     // Check for the application being marked unavailable</span><br><span class="line">     if (!context.getState().isAvailable()) &#123;</span><br><span class="line">         response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                        sm.getString(&quot;standardContext.isUnavailable&quot;));</span><br><span class="line">         unavailable = true;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Check for the servlet being marked unavailable</span><br><span class="line">     if (!unavailable &amp;&amp; wrapper.isUnavailable()) &#123;</span><br><span class="line">         container.getLogger().info(sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                 wrapper.getName()));</span><br><span class="line">         long available = wrapper.getAvailable();</span><br><span class="line">         if ((available &gt; 0L) &amp;&amp; (available &lt; Long.MAX_VALUE)) &#123;</span><br><span class="line">             response.setDateHeader(&quot;Retry-After&quot;, available);</span><br><span class="line">             response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                     sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                             wrapper.getName()));</span><br><span class="line">         &#125; else if (available == Long.MAX_VALUE) &#123;</span><br><span class="line">             response.sendError(HttpServletResponse.SC_NOT_FOUND,</span><br><span class="line">                     sm.getString(&quot;standardWrapper.notFound&quot;,</span><br><span class="line">                             wrapper.getName()));</span><br><span class="line">         &#125;</span><br><span class="line">         unavailable = true;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Allocate a servlet instance to process this request</span><br><span class="line">     try &#123;</span><br><span class="line">         if (!unavailable) &#123;</span><br><span class="line">             // 获取wrapper中的servlet</span><br><span class="line">             servlet = wrapper.allocate();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (UnavailableException e) &#123;</span><br><span class="line">         container.getLogger().error(</span><br><span class="line">                 sm.getString(&quot;standardWrapper.allocateException&quot;,</span><br><span class="line">                         wrapper.getName()), e);</span><br><span class="line">         long available = wrapper.getAvailable();</span><br><span class="line">         if ((available &gt; 0L) &amp;&amp; (available &lt; Long.MAX_VALUE)) &#123;</span><br><span class="line">             response.setDateHeader(&quot;Retry-After&quot;, available);</span><br><span class="line">             response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                        sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125; else if (available == Long.MAX_VALUE) &#123;</span><br><span class="line">             response.sendError(HttpServletResponse.SC_NOT_FOUND,</span><br><span class="line">                        sm.getString(&quot;standardWrapper.notFound&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (ServletException e) &#123;</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.allocateException&quot;,</span><br><span class="line">                          wrapper.getName()), StandardWrapper.getRootCause(e));</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.allocateException&quot;,</span><br><span class="line">                          wrapper.getName()), e);</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">         servlet = null;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     MessageBytes requestPathMB = request.getRequestPathMB();</span><br><span class="line">     DispatcherType dispatcherType = DispatcherType.REQUEST;</span><br><span class="line">     if (request.getDispatcherType()==DispatcherType.ASYNC) dispatcherType = DispatcherType.ASYNC;</span><br><span class="line">     //request对象设置请求类型和请求路径属性</span><br><span class="line">     request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,dispatcherType);</span><br><span class="line">     request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,requestPathMB);</span><br><span class="line"></span><br><span class="line">     // Create the filter chain for this request</span><br><span class="line">     // 创建过滤器链，添加匹配的过滤器、servlet</span><br><span class="line">     ApplicationFilterChain filterChain =</span><br><span class="line">             ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line"></span><br><span class="line">     // Call the filter chain for this request</span><br><span class="line">     // NOTE: This also calls the servlet&apos;s service() method</span><br><span class="line">     try &#123;</span><br><span class="line">         if ((servlet != null) &amp;&amp; (filterChain != null)) &#123;</span><br><span class="line">             // Swallow output if needed</span><br><span class="line">             if (context.getSwallowOutput()) &#123;</span><br><span class="line">                 try &#123;</span><br><span class="line">                     SystemLogHandler.startCapture();</span><br><span class="line">                     //处理异步任务请求转发</span><br><span class="line">                     if (request.isAsyncDispatching()) &#123;</span><br><span class="line">                         request.getAsyncContextInternal().doInternalDispatch();</span><br><span class="line">                     &#125; else &#123;</span><br><span class="line">                         //执行过滤器及servlet的service方法</span><br><span class="line">                         filterChain.doFilter(request.getRequest(),</span><br><span class="line">                                 response.getResponse());</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125; finally &#123;</span><br><span class="line">                     String log = SystemLogHandler.stopCapture();</span><br><span class="line">                     if (log != null &amp;&amp; log.length() &gt; 0) &#123;</span><br><span class="line">                         context.getLogger().info(log);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; else &#123;</span><br><span class="line">                 if (request.isAsyncDispatching()) &#123;</span><br><span class="line">                     request.getAsyncContextInternal().doInternalDispatch();</span><br><span class="line">                 &#125; else &#123;</span><br><span class="line">                     filterChain.doFilter</span><br><span class="line">                         (request.getRequest(), response.getResponse());</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (ClientAbortException e) &#123;</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (IOException e) &#123;</span><br><span class="line">         container.getLogger().error(sm.getString(</span><br><span class="line">                 &quot;standardWrapper.serviceException&quot;, wrapper.getName(),</span><br><span class="line">                 context.getName()), e);</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (UnavailableException e) &#123;</span><br><span class="line">         container.getLogger().error(sm.getString(</span><br><span class="line">                 &quot;standardWrapper.serviceException&quot;, wrapper.getName(),</span><br><span class="line">                 context.getName()), e);</span><br><span class="line">         //            throwable = e;</span><br><span class="line">         //            exception(request, response, e);</span><br><span class="line">         wrapper.unavailable(e);</span><br><span class="line">         long available = wrapper.getAvailable();</span><br><span class="line">         if ((available &gt; 0L) &amp;&amp; (available &lt; Long.MAX_VALUE)) &#123;</span><br><span class="line">             response.setDateHeader(&quot;Retry-After&quot;, available);</span><br><span class="line">             response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                        sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125; else if (available == Long.MAX_VALUE) &#123;</span><br><span class="line">             response.sendError(HttpServletResponse.SC_NOT_FOUND,</span><br><span class="line">                         sm.getString(&quot;standardWrapper.notFound&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125;</span><br><span class="line">         // Do not save exception in &apos;throwable&apos;, because we</span><br><span class="line">         // do not want to do exception(request, response, e) processing</span><br><span class="line">     &#125; catch (ServletException e) &#123;</span><br><span class="line">         Throwable rootCause = StandardWrapper.getRootCause(e);</span><br><span class="line">         if (!(rootCause instanceof ClientAbortException)) &#123;</span><br><span class="line">             container.getLogger().error(sm.getString(</span><br><span class="line">                     &quot;standardWrapper.serviceExceptionRoot&quot;,</span><br><span class="line">                     wrapper.getName(), context.getName(), e.getMessage()),</span><br><span class="line">                     rootCause);</span><br><span class="line">         &#125;</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(</span><br><span class="line">                 &quot;standardWrapper.serviceException&quot;, wrapper.getName(),</span><br><span class="line">                 context.getName()), e);</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Release the filter chain (if any) for this request</span><br><span class="line">     // 清空对Servlet、Filter的引用</span><br><span class="line">     if (filterChain != null) &#123;</span><br><span class="line">         filterChain.release();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Deallocate the allocated servlet instance</span><br><span class="line">     try &#123;</span><br><span class="line">         // servlet加入instancePool</span><br><span class="line">         if (servlet != null) &#123;</span><br><span class="line">             wrapper.deallocate(servlet);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.deallocateException&quot;,</span><br><span class="line">                          wrapper.getName()), e);</span><br><span class="line">         if (throwable == null) &#123;</span><br><span class="line">             throwable = e;</span><br><span class="line">             exception(request, response, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // If this servlet has been marked permanently unavailable,</span><br><span class="line">     // unload it and release this instance</span><br><span class="line">     try &#123;</span><br><span class="line">         if ((servlet != null) &amp;&amp;</span><br><span class="line">             (wrapper.getAvailable() == Long.MAX_VALUE)) &#123;</span><br><span class="line">             wrapper.unload();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.unloadException&quot;,</span><br><span class="line">                          wrapper.getName()), e);</span><br><span class="line">         if (throwable == null) &#123;</span><br><span class="line">             throwable = e;</span><br><span class="line">             exception(request, response, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     long t2=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">     long time=t2-t1;</span><br><span class="line">     processingTime += time;</span><br><span class="line">     if( time &gt; maxTime) maxTime=time;</span><br><span class="line">     if( time &lt; minTime) minTime=time;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="17、ApplicationFilterChain的internalDoFilter方法"><a href="#17、ApplicationFilterChain的internalDoFilter方法" class="headerlink" title="17、ApplicationFilterChain的internalDoFilter方法"></a>17、ApplicationFilterChain的internalDoFilter方法</h4><p>ApplicationFilterChain的doFilter方法，实际调用了internalDoFilter方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">private void internalDoFilter(ServletRequest request,</span><br><span class="line">                              ServletResponse response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Call the next filter if there is one</span><br><span class="line">    // 依次执行filter的doFilter方法</span><br><span class="line">    if (pos &lt; n) &#123;</span><br><span class="line">        ApplicationFilterConfig filterConfig = filters[pos++];</span><br><span class="line">        try &#123;</span><br><span class="line">            Filter filter = filterConfig.getFilter();</span><br><span class="line"></span><br><span class="line">            if (request.isAsyncSupported() &amp;&amp; &quot;false&quot;.equalsIgnoreCase(</span><br><span class="line">                    filterConfig.getFilterDef().getAsyncSupported())) &#123;</span><br><span class="line">                request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);</span><br><span class="line">            &#125;</span><br><span class="line">            if( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                final ServletRequest req = request;</span><br><span class="line">                final ServletResponse res = response;</span><br><span class="line">                Principal principal =</span><br><span class="line">                    ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line"></span><br><span class="line">                Object[] args = new Object[]&#123;req, res, this&#125;;</span><br><span class="line">                SecurityUtil.doAsPrivilege (&quot;doFilter&quot;, filter, classType, args, principal);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                filter.doFilter(request, response, this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">            ExceptionUtils.handleThrowable(e);</span><br><span class="line">            throw new ServletException(sm.getString(&quot;filterChain.filter&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // We fell off the end of the chain -- call the servlet instance</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置最近处理请求</span><br><span class="line">        if (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">            lastServicedRequest.set(request);</span><br><span class="line">            lastServicedResponse.set(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (request.isAsyncSupported() &amp;&amp; !servletSupportsAsync) &#123;</span><br><span class="line">            request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,</span><br><span class="line">                    Boolean.FALSE);</span><br><span class="line">        &#125;</span><br><span class="line">        // Use potentially wrapped request from this point</span><br><span class="line">        if ((request instanceof HttpServletRequest) &amp;&amp;</span><br><span class="line">                (response instanceof HttpServletResponse) &amp;&amp;</span><br><span class="line">                Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">            final ServletRequest req = request;</span><br><span class="line">            final ServletResponse res = response;</span><br><span class="line">            Principal principal =</span><br><span class="line">                ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line">            Object[] args = new Object[]&#123;req, res&#125;;</span><br><span class="line">            //执行servlet的service方法</span><br><span class="line">            SecurityUtil.doAsPrivilege(&quot;service&quot;,</span><br><span class="line">                                       servlet,</span><br><span class="line">                                       classTypeUsedInService,</span><br><span class="line">                                       args,</span><br><span class="line">                                       principal);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //执行servlet的service方法</span><br><span class="line">            servlet.service(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">        ExceptionUtils.handleThrowable(e);</span><br><span class="line">        throw new ServletException(sm.getString(&quot;filterChain.servlet&quot;), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //清空最近处理请求</span><br><span class="line">        if (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">            lastServicedRequest.set(null);</span><br><span class="line">            lastServicedResponse.set(null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二、session创建"><a href="#二、session创建" class="headerlink" title="二、session创建"></a>二、session创建</h3><h4 id="1、Request的getSession方法"><a href="#1、Request的getSession方法" class="headerlink" title="1、Request的getSession方法"></a>1、Request的getSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public HttpSession getSession(boolean create) &#123;</span><br><span class="line">    //获取session，参数为不存在时是否创建</span><br><span class="line">    Session session = doGetSession(create);</span><br><span class="line">    if (session == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return session.getSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Request的doGetSession方法"><a href="#2、Request的doGetSession方法" class="headerlink" title="2、Request的doGetSession方法"></a>2、Request的doGetSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">protected Session doGetSession(boolean create) &#123;</span><br><span class="line"></span><br><span class="line">    // There cannot be a session if no context has been assigned yet</span><br><span class="line">    Context context = getContext();</span><br><span class="line">    if (context == null) &#123;</span><br><span class="line">        return (null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return the current session if it exists and is valid</span><br><span class="line">    //判断当前Request对象是否已经存在有效的Session，如果存在则返回此Session</span><br><span class="line">    if ((session != null) &amp;&amp; !session.isValid()) &#123;</span><br><span class="line">        session = null;</span><br><span class="line">    &#125;</span><br><span class="line">    if (session != null) &#123;</span><br><span class="line">        return (session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return the requested session if it exists and is valid</span><br><span class="line">    // 获取Session管理器，默认StandardManager</span><br><span class="line">    Manager manager = context.getManager();</span><br><span class="line">    if (manager == null) &#123;</span><br><span class="line">        return (null);      // Sessions are not supported</span><br><span class="line">    &#125;</span><br><span class="line">    // 从StandardManager的Session缓存中获取Session，如果有则返回此Session</span><br><span class="line">    if (requestedSessionId != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            session = manager.findSession(requestedSessionId);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            session = null;</span><br><span class="line">        &#125;</span><br><span class="line">        if ((session != null) &amp;&amp; !session.isValid()) &#123;</span><br><span class="line">            session = null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (session != null) &#123;</span><br><span class="line">            // 更新Session的访问时间以及访问次数</span><br><span class="line">            session.access();</span><br><span class="line">            return (session);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create a new session if requested and the response is not committed</span><br><span class="line">    // 是否创建session</span><br><span class="line">    if (!create) &#123;</span><br><span class="line">        return (null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //请求处理结束，输出流已关闭</span><br><span class="line">    if (response != null</span><br><span class="line">            &amp;&amp; context.getServletContext()</span><br><span class="line">                    .getEffectiveSessionTrackingModes()</span><br><span class="line">                    .contains(SessionTrackingMode.COOKIE)</span><br><span class="line">            &amp;&amp; response.getResponse().isCommitted()) &#123;</span><br><span class="line">        throw new IllegalStateException(</span><br><span class="line">                sm.getString(&quot;coyoteRequest.sessionCreateCommitted&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Re-use session IDs provided by the client in very limited</span><br><span class="line">    // circumstances.</span><br><span class="line">    // 获取sessionid</span><br><span class="line">    String sessionId = getRequestedSessionId();</span><br><span class="line">    if (requestedSessionSSL) &#123;</span><br><span class="line">        // If the session ID has been obtained from the SSL handshake then</span><br><span class="line">        // use it.</span><br><span class="line">    &#125; else if ((&quot;/&quot;.equals(context.getSessionCookiePath())</span><br><span class="line">            &amp;&amp; isRequestedSessionIdFromCookie())) &#123;</span><br><span class="line">        /* This is the common(ish) use case: using the same session ID with</span><br><span class="line">         * multiple web applications on the same host. Typically this is</span><br><span class="line">         * used by Portlet implementations. It only works if sessions are</span><br><span class="line">         * tracked via cookies. The cookie must have a path of &quot;/&quot; else it</span><br><span class="line">         * won&apos;t be provided for requests to all web applications.</span><br><span class="line">         *</span><br><span class="line">         * Any session ID provided by the client should be for a session</span><br><span class="line">         * that already exists somewhere on the host. Check if the context</span><br><span class="line">         * is configured for this to be confirmed.</span><br><span class="line">         */</span><br><span class="line">        if (context.getValidateClientProvidedNewSessionId()) &#123;</span><br><span class="line">            boolean found = false;</span><br><span class="line">            for (Container container : getHost().findChildren()) &#123;</span><br><span class="line">                Manager m = ((Context) container).getManager();</span><br><span class="line">                if (m != null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        if (m.findSession(sessionId) != null) &#123;</span><br><span class="line">                            found = true;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        // Ignore. Problems with this manager will be</span><br><span class="line">                        // handled elsewhere.</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!found) &#123;</span><br><span class="line">                sessionId = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        sessionId = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建Session</span><br><span class="line">    session = manager.createSession(sessionId);</span><br><span class="line"></span><br><span class="line">    // Creating a new session cookie based on that session</span><br><span class="line">    // 创建保存Session ID的Cookie</span><br><span class="line">    if (session != null</span><br><span class="line">            &amp;&amp; context.getServletContext()</span><br><span class="line">                    .getEffectiveSessionTrackingModes()</span><br><span class="line">                    .contains(SessionTrackingMode.COOKIE)) &#123;</span><br><span class="line">        Cookie cookie =</span><br><span class="line">            ApplicationSessionCookieConfig.createSessionCookie(</span><br><span class="line">                    context, session.getIdInternal(), isSecure());</span><br><span class="line">        response.addSessionCookieInternal(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (session == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //更新Session的访问时间以及访问次数</span><br><span class="line">    session.access();</span><br><span class="line">    return session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ManagerBase的createSession方法"><a href="#3、ManagerBase的createSession方法" class="headerlink" title="3、ManagerBase的createSession方法"></a>3、ManagerBase的createSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Session createSession(String sessionId) &#123;</span><br><span class="line"></span><br><span class="line">    if ((maxActiveSessions &gt;= 0) &amp;&amp;</span><br><span class="line">            (getActiveSessions() &gt;= maxActiveSessions)) &#123;</span><br><span class="line">        rejectedSessions++;</span><br><span class="line">        throw new TooManyActiveSessionsException(</span><br><span class="line">                sm.getString(&quot;managerBase.createSession.ise&quot;),</span><br><span class="line">                maxActiveSessions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Recycle or create a Session instance</span><br><span class="line">    //创建session，默认StandardSession</span><br><span class="line">    Session session = createEmptySession();</span><br><span class="line"></span><br><span class="line">    // Initialize the properties of the new session and return it</span><br><span class="line">    // 新session</span><br><span class="line">    session.setNew(true);</span><br><span class="line">    // 有效</span><br><span class="line">    session.setValid(true);</span><br><span class="line">    // 创建时间</span><br><span class="line">    session.setCreationTime(System.currentTimeMillis());</span><br><span class="line">    // 超时时间</span><br><span class="line">    session.setMaxInactiveInterval(getContext().getSessionTimeout() * 60);</span><br><span class="line">    // 创建sessionId</span><br><span class="line">    String id = sessionId;</span><br><span class="line">    if (id == null) &#123;</span><br><span class="line">        id = generateSessionId();</span><br><span class="line">    &#125;</span><br><span class="line">    session.setId(id);</span><br><span class="line">    //创建session个数</span><br><span class="line">    sessionCounter++;</span><br><span class="line"></span><br><span class="line">    SessionTiming timing = new SessionTiming(session.getCreationTime(), 0);</span><br><span class="line">    synchronized (sessionCreationTiming) &#123;</span><br><span class="line">        sessionCreationTiming.add(timing);</span><br><span class="line">        sessionCreationTiming.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    return (session);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、异步任务"><a href="#三、异步任务" class="headerlink" title="三、异步任务"></a>三、异步任务</h3><h4 id="1、AsyncContextImpl的complete方法"><a href="#1、AsyncContextImpl的complete方法" class="headerlink" title="1、AsyncContextImpl的complete方法"></a>1、AsyncContextImpl的complete方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void complete() &#123;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        logDebug(&quot;complete   &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    check();</span><br><span class="line">    //更改任务状态</span><br><span class="line">    request.getCoyoteRequest().action(ActionCode.ASYNC_COMPLETE, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DISPATCHED：普通servlet结束的状态</span><br><span class="line">STARTING：servlet开始异步时的状态</span><br><span class="line">STARTED：当前servlet已经开始异步，释放容器线程之前异步servlet并未结束的状态</span><br><span class="line">MUST_COMPLETE：释放容器线程之前，异步servlet已经结束的状态（complete函数）</span><br><span class="line">COMPLETING：异步servlet并未dispatch到其他servlet上，然后异步结束的状态</span><br><span class="line">TIMING_OUT：当前异步servlet已经超时的状态</span><br><span class="line">MUST_DISPATCH：释放容器线程之前，异步servlet dispatch到其他servlet上的状态</span><br><span class="line">DISPATCHING：异步servlet结束，dispatch到其他servlet上的状态</span><br><span class="line">ERROR：异步servlet异常的状态</span><br></pre></td></tr></table></figure></p><h4 id="2、Request的action方法"><a href="#2、Request的action方法" class="headerlink" title="2、Request的action方法"></a>2、Request的action方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void action(ActionCode actionCode, Object param) &#123;</span><br><span class="line">    if (hook != null) &#123;</span><br><span class="line">        if (param == null) &#123;</span><br><span class="line">            hook.action(actionCode, this);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            hook.action(actionCode, param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractProcessor的action方法"><a href="#3、AbstractProcessor的action方法" class="headerlink" title="3、AbstractProcessor的action方法"></a>3、AbstractProcessor的action方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void action(ActionCode actionCode, Object param) &#123;</span><br><span class="line">    switch (actionCode) &#123;</span><br><span class="line">    ...</span><br><span class="line">    case ASYNC_COMPLETE: &#123;</span><br><span class="line">        //清空dispatches</span><br><span class="line">        clearDispatches();</span><br><span class="line">        //更改请求状态</span><br><span class="line">        if (asyncStateMachine.asyncComplete()) &#123;</span><br><span class="line">            //再次调用processSocket</span><br><span class="line">            processSocketEvent(SocketEvent.OPEN_READ, true);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    case ASYNC_DISPATCH: &#123;</span><br><span class="line">        //更改请求状态</span><br><span class="line">        if (asyncStateMachine.asyncDispatch()) &#123;</span><br><span class="line">            //再次调用processSocket</span><br><span class="line">            processSocketEvent(SocketEvent.OPEN_READ, true);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    case ASYNC_DISPATCHED: &#123;</span><br><span class="line">        //更改请求状态</span><br><span class="line">        asyncStateMachine.asyncDispatched();</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、请求处理过程&quot;&gt;&lt;a href=&quot;#一、请求处理过程&quot; class=&quot;headerlink&quot; title=&quot;一、请求处理过程&quot;&gt;&lt;/a&gt;一、请求处理过程&lt;/h3&gt;&lt;h4 id=&quot;1、NioEndpoint的setSocketOptions方法&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码总结</title>
    <link href="http://yoursite.com/2020/01/13/tomcat%E6%BA%90%E7%A0%81/Tomcat%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/13/tomcat源码/Tomcat源码总结/</id>
    <published>2020-01-13T14:32:38.068Z</published>
    <updated>2018-10-20T06:18:57.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Tomcat结构"><a href="#一、Tomcat结构" class="headerlink" title="一、Tomcat结构"></a>一、Tomcat结构</h3><p><img src="/2020/01/13/tomcat源码/Tomcat源码总结/Tomcat结构图.png" alt="Tomcat结构图"></p><h4 id="1、主要类"><a href="#1、主要类" class="headerlink" title="1、主要类"></a>1、主要类</h4><p>Server接口：表示整个tomcat服务器，一个tomcat只有一个Server，实现类为StandardServer。<br>Service接口：一个Server可以包含多个Service，一个Service负责维护多个Connector和一个Container。  </p><p>Connector：连接器，用于接受请求并将请求封装成Request和Response，然后交给Container进行处理。<br>ProtocolHandler接口：处理请求协议，有不同的实现，Http11NioProtocol使用NioSocket连接、Http11Nio2Protocol使用Aio。<br>NioEndpoint：处理底层Socket的网络连接，实现TCP/IP协议。<br>Executor接口：tomcat处理请求线程池，默认实现ThreadPoolExecutor，最大200个线程。<br>SocketProcessorBase：Socket处理任务线程。<br>Processor接口：Processor用于将Endpoint接收到的Socket封装成Request（这个Request不是ServletRequest），实现类Http11Processor，实现HTTP1.1协议。<br>Adapter接口：Adapter充当适配器，用于将Request转换为ServletRequest交给Container进行具体的处理。  </p><p>Engine接口：表示整个Servlet引擎，一个Engine下面可以包含一个或者多个Host。<br>Host接口：表示一个站点，也可以叫虚拟主机，一个Host可以配置多个Context。<br>Context接口：表示一个应用程序，就是日常开发中的web程序，一个Context可以包含多个Servlet处理不同请求。<br>Wrapper接口：表示一个Servlet。  </p><p>Pipeline接口：处理请求管道，责任链模式。<br>ApplicationFilterChain：过滤器链。  </p><p>Manager接口：session管理接口。  </p><p>Lifecycle接口：生命周期管理接口。<br>LifecycleListener接口：监听器接口，两个重要实现类HostConfig、ContextConfig。<br>HostConfig：部署应用。<br>ContextConfig：处理web应用的配置文件。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Tomcat结构&quot;&gt;&lt;a href=&quot;#一、Tomcat结构&quot; class=&quot;headerlink&quot; title=&quot;一、Tomcat结构&quot;&gt;&lt;/a&gt;一、Tomcat结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/01/13/tomcat源码/Tomcat源
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码启动过程</title>
    <link href="http://yoursite.com/2020/01/13/tomcat%E6%BA%90%E7%A0%81/Tomcat%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/13/tomcat源码/Tomcat源码启动过程/</id>
    <published>2020-01-13T14:32:38.064Z</published>
    <updated>2018-07-11T12:42:04.125Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//整个Tomcat容器,port为接受shutdown指令的端口号</span><br><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">    //Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class="line">    //Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class="line">    //在Web应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，</span><br><span class="line">    //然后编译成class文件供JVM使用</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.JasperListener&quot; /&gt;</span><br><span class="line">    //与类加载器导致的内存泄露有关</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class="line">    //通过该监听器，初始化&lt; GlobalNamingResources&gt;标签中定义的全局JNDI资源</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class="line">    //当Web应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class="line">    //定义的全局JNDI资源</span><br><span class="line">    &lt;GlobalNamingResources&gt;</span><br><span class="line">        &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class="line">                 type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class="line">                 description=&quot;User database that can be updated and saved&quot;</span><br><span class="line">                 factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class="line">                 pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class="line">    &lt;/GlobalNamingResources&gt;</span><br><span class="line">    //Service的作用，是在Connector和Engine外面包了一层,Tomcat可以提供多个Service</span><br><span class="line">    &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class="line">        //连接器，客户端可以通过8080端口号使用http协议访问Tomcat</span><br><span class="line">        &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">                  connectionTimeout=&quot;20000&quot;</span><br><span class="line">                  redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">        //连接器，客户端可以通过8009端口号使用AJP协议访问Tomcat</span><br><span class="line">        &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">        //Engine是Service组件中的请求处理组件</span><br><span class="line">        &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class="line">            //Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用</span><br><span class="line">            &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class="line">            &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class="line">                  resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class="line">            &lt;/Realm&gt;</span><br><span class="line">            //每个Host组件代表Engine中的一个虚拟主机</span><br><span class="line">            &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">                  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">                //AccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求</span><br><span class="line">                &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">                      prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">                      pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">            &lt;/Host&gt;</span><br><span class="line">        &lt;/Engine&gt;</span><br><span class="line">    &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><p>配置文件详解参考<a href="https://www.cnblogs.com/kismetv/p/7228274.html#title5-2" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/7228274.html#title5-2</a> </p><h3 id="一、容器启动过程"><a href="#一、容器启动过程" class="headerlink" title="一、容器启动过程"></a>一、容器启动过程</h3><h4 id="1、Bootstrap的main方法"><a href="#1、Bootstrap的main方法" class="headerlink" title="1、Bootstrap的main方法"></a>1、Bootstrap的main方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">    //创建Bootstrap</span><br><span class="line">    if (daemon == null) &#123;</span><br><span class="line">        // Don&apos;t set daemon until init() has completed</span><br><span class="line">        Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">        try &#123;</span><br><span class="line">            //初始化bootstrap</span><br><span class="line">            bootstrap.init();</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        daemon = bootstrap;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // When running as a service the call to stop will be on a new</span><br><span class="line">        // thread so make sure the correct class loader is used to prevent</span><br><span class="line">        // a range of class not found exceptions.</span><br><span class="line">        //设置初始化tomcat环境类加载器</span><br><span class="line">        Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        String command = &quot;start&quot;;</span><br><span class="line">        if (args.length &gt; 0) &#123;</span><br><span class="line">            command = args[args.length - 1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (command.equals(&quot;startd&quot;)) &#123;</span><br><span class="line">            args[args.length - 1] = &quot;start&quot;;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125; else if (command.equals(&quot;stopd&quot;)) &#123;</span><br><span class="line">            args[args.length - 1] = &quot;stop&quot;;</span><br><span class="line">            daemon.stop();</span><br><span class="line">        &#125; else if (command.equals(&quot;start&quot;)) &#123;</span><br><span class="line">            //设置Catalina的await为true,阻塞主线程</span><br><span class="line">            daemon.setAwait(true);</span><br><span class="line">            //加载配置文件，初始化容器</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            //启动容器</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125; else if (command.equals(&quot;stop&quot;)) &#123;</span><br><span class="line">            //关闭Server</span><br><span class="line">            daemon.stopServer(args);</span><br><span class="line">        &#125; else if (command.equals(&quot;configtest&quot;)) &#123;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            if (null==daemon.getServer()) &#123;</span><br><span class="line">                System.exit(1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.exit(0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.warn(&quot;Bootstrap: command \&quot;&quot; + command + &quot;\&quot; does not exist.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        // Unwrap the Exception for clearer error reporting</span><br><span class="line">        if (t instanceof InvocationTargetException &amp;&amp;</span><br><span class="line">                t.getCause() != null) &#123;</span><br><span class="line">            t = t.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        handleThrowable(t);</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">        System.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Bootstrap的init方法"><a href="#2、Bootstrap的init方法" class="headerlink" title="2、Bootstrap的init方法"></a>2、Bootstrap的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public void init() throws Exception &#123;</span><br><span class="line">    //初始化tomcat环境类加载器</span><br><span class="line">    initClassLoaders();</span><br><span class="line">    //设置初始化tomcat环境类加载器</span><br><span class="line">    Thread.currentThread().setContextClassLoader(catalinaLoader);</span><br><span class="line">    //加载tomcat环境</span><br><span class="line">    SecurityClassLoad.securityClassLoad(catalinaLoader);</span><br><span class="line"></span><br><span class="line">    // Load our startup class and call its process() method</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Loading startup class&quot;);</span><br><span class="line">    //加载Catalina类</span><br><span class="line">    Class&lt;?&gt; startupClass = catalinaLoader.loadClass(&quot;org.apache.catalina.startup.Catalina&quot;);</span><br><span class="line">    //实例化Catalina</span><br><span class="line">    Object startupInstance = startupClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">    // Set the shared extensions class loader</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Setting startup class properties&quot;);</span><br><span class="line">    String methodName = &quot;setParentClassLoader&quot;;</span><br><span class="line">    Class&lt;?&gt; paramTypes[] = new Class[1];</span><br><span class="line">    paramTypes[0] = Class.forName(&quot;java.lang.ClassLoader&quot;);</span><br><span class="line">    Object paramValues[] = new Object[1];</span><br><span class="line">    paramValues[0] = sharedLoader;</span><br><span class="line">    Method method =</span><br><span class="line">        startupInstance.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">    //为Catalina设置类加载器</span><br><span class="line">    method.invoke(startupInstance, paramValues);</span><br><span class="line">    //初始化catalinaDaemon</span><br><span class="line">    catalinaDaemon = startupInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Bootstrap的initClassLoaders方法"><a href="#3、Bootstrap的initClassLoaders方法" class="headerlink" title="3、Bootstrap的initClassLoaders方法"></a>3、Bootstrap的initClassLoaders方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void initClassLoaders() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建tomcat环境加载器</span><br><span class="line">        commonLoader = createClassLoader(&quot;common&quot;, null);</span><br><span class="line">        if( commonLoader == null ) &#123;</span><br><span class="line">            // no config file, default to this loader - we might be in a &apos;single&apos; env.</span><br><span class="line">            commonLoader=this.getClass().getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        //未配置</span><br><span class="line">        catalinaLoader = createClassLoader(&quot;server&quot;, commonLoader);</span><br><span class="line">        //未配置</span><br><span class="line">        sharedLoader = createClassLoader(&quot;shared&quot;, commonLoader);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        handleThrowable(t);</span><br><span class="line">        log.error(&quot;Class loader creation threw exception&quot;, t);</span><br><span class="line">        System.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>catalina.properties中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">common.loader=&quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</span><br></pre></td></tr></table></figure></p><h4 id="4、接（一、1）Bootstrap的load方法"><a href="#4、接（一、1）Bootstrap的load方法" class="headerlink" title="4、接（一、1）Bootstrap的load方法"></a>4、接（一、1）Bootstrap的load方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void load(String[] arguments)</span><br><span class="line">    throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    // Call the load() method</span><br><span class="line">    String methodName = &quot;load&quot;;</span><br><span class="line">    Object param[];</span><br><span class="line">    Class&lt;?&gt; paramTypes[];</span><br><span class="line">    if (arguments==null || arguments.length==0) &#123;</span><br><span class="line">        paramTypes = null;</span><br><span class="line">        param = null;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        paramTypes = new Class[1];</span><br><span class="line">        paramTypes[0] = arguments.getClass();</span><br><span class="line">        param = new Object[1];</span><br><span class="line">        param[0] = arguments;</span><br><span class="line">    &#125;</span><br><span class="line">    Method method =</span><br><span class="line">        catalinaDaemon.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Calling startup class &quot; + method);</span><br><span class="line">    //执行Catalina的load方法</span><br><span class="line">    method.invoke(catalinaDaemon, param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、Catalina的load方法"><a href="#5、Catalina的load方法" class="headerlink" title="5、Catalina的load方法"></a>5、Catalina的load方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">public void load() &#123;</span><br><span class="line">    //已load，直接退出</span><br><span class="line">    if (loaded) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    loaded = true;</span><br><span class="line"></span><br><span class="line">    long t1 = System.nanoTime();</span><br><span class="line">    //查看临时文件夹是否存在</span><br><span class="line">    initDirs();</span><br><span class="line"></span><br><span class="line">    // Before digester - it may be needed</span><br><span class="line">    //初始化命名系统</span><br><span class="line">    initNaming();</span><br><span class="line"></span><br><span class="line">    // Create and execute our Digester</span><br><span class="line">    //创建配置文件解析器</span><br><span class="line">    Digester digester = createStartDigester();</span><br><span class="line"></span><br><span class="line">    InputSource inputSource = null;</span><br><span class="line">    InputStream inputStream = null;</span><br><span class="line">    File file = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取配置文件&quot;conf/server.xml&quot;</span><br><span class="line">            file = configFile();</span><br><span class="line">            //获取输入流</span><br><span class="line">            inputStream = new FileInputStream(file);</span><br><span class="line">            inputSource = new InputSource(file.toURI().toURL().toString());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(sm.getString(&quot;catalina.configFail&quot;, file), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        try &#123;</span><br><span class="line">            //设置输入流</span><br><span class="line">            inputSource.setByteStream(inputStream);</span><br><span class="line">            digester.push(this);</span><br><span class="line">            //解析配置文件</span><br><span class="line">            digester.parse(inputSource);</span><br><span class="line">        &#125; catch (SAXParseException spe) &#123;</span><br><span class="line">            log.warn(&quot;Catalina.start using &quot; + getConfigFile() + &quot;: &quot; +</span><br><span class="line">                    spe.getMessage());</span><br><span class="line">            return;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(&quot;Catalina.start using &quot; + getConfigFile() + &quot;: &quot; , e);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (inputStream != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置Catalina</span><br><span class="line">    getServer().setCatalina(this);</span><br><span class="line">    //设置catalina.home</span><br><span class="line">    getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</span><br><span class="line">    //设置catalina.base</span><br><span class="line">    getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</span><br><span class="line"></span><br><span class="line">    // Stream redirection</span><br><span class="line">    initStreams();</span><br><span class="line"></span><br><span class="line">    // Start the new server</span><br><span class="line">    try &#123;</span><br><span class="line">        //初始化容器</span><br><span class="line">        getServer().init();</span><br><span class="line">    &#125; catch (LifecycleException e) &#123;</span><br><span class="line">        if (Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;)) &#123;</span><br><span class="line">            throw new java.lang.Error(e);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.error(&quot;Catalina.start&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long t2 = System.nanoTime();</span><br><span class="line">    if(log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Catalina的createStartDigester方法"><a href="#6、Catalina的createStartDigester方法" class="headerlink" title="6、Catalina的createStartDigester方法"></a>6、Catalina的createStartDigester方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">protected Digester createStartDigester() &#123;</span><br><span class="line">    long t1=System.currentTimeMillis();</span><br><span class="line">    // Initialize the digester</span><br><span class="line">    //创建digester</span><br><span class="line">    Digester digester = new Digester();</span><br><span class="line">    digester.setValidating(false);</span><br><span class="line">    digester.setRulesValidation(true);</span><br><span class="line">    HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = new HashMap&lt;&gt;();</span><br><span class="line">    ArrayList&lt;String&gt; attrs = new ArrayList&lt;&gt;();</span><br><span class="line">    attrs.add(&quot;className&quot;);</span><br><span class="line">    fakeAttributes.put(Object.class, attrs);</span><br><span class="line">    digester.setFakeAttributes(fakeAttributes);</span><br><span class="line">    digester.setUseContextClassLoader(true);</span><br><span class="line"></span><br><span class="line">    // Configure the actions we will be using</span><br><span class="line">    //创建Server的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.core.StandardServer&quot;,</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    //设置Server属性的规则</span><br><span class="line">    digester.addSetProperties(&quot;Server&quot;);</span><br><span class="line">    //Catalina添加Server规则</span><br><span class="line">    digester.addSetNext(&quot;Server&quot;,</span><br><span class="line">                        &quot;setServer&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Server&quot;);</span><br><span class="line">    //创建GlobalNamingResources的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server/GlobalNamingResources&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.deploy.NamingResourcesImpl&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/GlobalNamingResources&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/GlobalNamingResources&quot;,</span><br><span class="line">                        &quot;setGlobalNamingResources&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.deploy.NamingResourcesImpl&quot;);</span><br><span class="line">    //创建Server的Listener的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Listener&quot;,</span><br><span class="line">                             null, // MUST be specified in the element</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Listener&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/Listener&quot;,</span><br><span class="line">                        &quot;addLifecycleListener&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.LifecycleListener&quot;);</span><br><span class="line">    //创建Service的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Service&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.core.StandardService&quot;,</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Service&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/Service&quot;,</span><br><span class="line">                        &quot;addService&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Service&quot;);</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Service/Listener&quot;,</span><br><span class="line">                             null, // MUST be specified in the element</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Service/Listener&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/Service/Listener&quot;,</span><br><span class="line">                        &quot;addLifecycleListener&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.LifecycleListener&quot;);</span><br><span class="line"></span><br><span class="line">    //Executor</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Service/Executor&quot;,</span><br><span class="line">                     &quot;org.apache.catalina.core.StandardThreadExecutor&quot;,</span><br><span class="line">                     &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Service/Executor&quot;);</span><br><span class="line"></span><br><span class="line">    digester.addSetNext(&quot;Server/Service/Executor&quot;,</span><br><span class="line">                        &quot;addExecutor&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Executor&quot;);</span><br><span class="line">    //创建Connector的规则</span><br><span class="line">    digester.addRule(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                     new ConnectorCreateRule());</span><br><span class="line">    digester.addRule(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                     new SetAllPropertiesRule(new String[]&#123;&quot;executor&quot;, &quot;sslImplementationName&quot;&#125;));</span><br><span class="line">    digester.addSetNext(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                        &quot;addConnector&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.connector.Connector&quot;);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    // Add RuleSets for nested elements</span><br><span class="line">    //批量添加规则</span><br><span class="line">    digester.addRuleSet(new NamingRuleSet(&quot;Server/GlobalNamingResources/&quot;));</span><br><span class="line">    digester.addRuleSet(new EngineRuleSet(&quot;Server/Service/&quot;));</span><br><span class="line">    digester.addRuleSet(new HostRuleSet(&quot;Server/Service/Engine/&quot;));</span><br><span class="line">    digester.addRuleSet(new ContextRuleSet(&quot;Server/Service/Engine/Host/&quot;));</span><br><span class="line">    addClusterRuleSet(digester, &quot;Server/Service/Engine/Host/Cluster/&quot;);</span><br><span class="line">    digester.addRuleSet(new NamingRuleSet(&quot;Server/Service/Engine/Host/Context/&quot;));</span><br><span class="line"></span><br><span class="line">    // When the &apos;engine&apos; is found, set the parentClassLoader.</span><br><span class="line">    digester.addRule(&quot;Server/Service/Engine&quot;,</span><br><span class="line">                     new SetParentClassLoaderRule(parentClassLoader));</span><br><span class="line">    addClusterRuleSet(digester, &quot;Server/Service/Engine/Cluster/&quot;);</span><br><span class="line"></span><br><span class="line">    long t2=System.currentTimeMillis();</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Digester for server.xml created &quot; + ( t2-t1 ));</span><br><span class="line">    &#125;</span><br><span class="line">    return (digester);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、HostRuleSet的createStartDigester方法"><a href="#7、HostRuleSet的createStartDigester方法" class="headerlink" title="7、HostRuleSet的createStartDigester方法"></a>7、HostRuleSet的createStartDigester方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void addRuleInstances(Digester digester) &#123;</span><br><span class="line">    //创建Host规则</span><br><span class="line">    digester.addObjectCreate(prefix + &quot;Host&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.core.StandardHost&quot;,</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(prefix + &quot;Host&quot;);</span><br><span class="line">    digester.addRule(prefix + &quot;Host&quot;,</span><br><span class="line">                     new CopyParentClassLoaderRule());</span><br><span class="line">    //创建HostConfig监听器，添加到Host中</span><br><span class="line">    digester.addRule(prefix + &quot;Host&quot;,</span><br><span class="line">                     new LifecycleListenerRule</span><br><span class="line">                     (&quot;org.apache.catalina.startup.HostConfig&quot;,</span><br><span class="line">                      &quot;hostConfigClass&quot;));</span><br><span class="line">    //Engine中添加Host子容器</span><br><span class="line">    digester.addSetNext(prefix + &quot;Host&quot;,</span><br><span class="line">                        &quot;addChild&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Container&quot;);</span><br><span class="line">    ... </span><br><span class="line">    //创建AccessLogValve规则</span><br><span class="line">    digester.addObjectCreate(prefix + &quot;Host/Valve&quot;,</span><br><span class="line">                             null, // MUST be specified in the element</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(prefix + &quot;Host/Valve&quot;);</span><br><span class="line">    digester.addSetNext(prefix + &quot;Host/Valve&quot;,</span><br><span class="line">                        &quot;addValve&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Valve&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、5）LifecycleBase的init方法"><a href="#8、接（一、5）LifecycleBase的init方法" class="headerlink" title="8、接（一、5）LifecycleBase的init方法"></a>8、接（一、5）LifecycleBase的init方法</h4><p>StandardServer的父类，实现生命周期管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void init() throws LifecycleException &#123;</span><br><span class="line">    //state默认为LifecycleState.NEW</span><br><span class="line">    if (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        //状态有误，抛出异常</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //设置state为正在初始化，并广播事件</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZING, null, false);</span><br><span class="line">        //初始化</span><br><span class="line">        initInternal();</span><br><span class="line">        //设置state为初始化完成，并广播事件</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZED, null, false);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;lifecycleBase.initFail&quot;,toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="9、StandardServer的initInternal方法"><a href="#9、StandardServer的initInternal方法" class="headerlink" title="9、StandardServer的initInternal方法"></a>9、StandardServer的initInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    //注册到MBeanServer中</span><br><span class="line">    super.initInternal();</span><br><span class="line"></span><br><span class="line">    // Register global String cache</span><br><span class="line">    // Note although the cache is global, if there are multiple Servers</span><br><span class="line">    // present in the JVM (may happen when embedding) then the same cache</span><br><span class="line">    // will be registered under multiple names</span><br><span class="line">    onameStringCache = register(new StringCache(), &quot;type=StringCache&quot;);</span><br><span class="line"></span><br><span class="line">    // Register the MBeanFactory</span><br><span class="line">    MBeanFactory factory = new MBeanFactory();</span><br><span class="line">    factory.setContainer(this);</span><br><span class="line">    onameMBeanFactory = register(factory, &quot;type=MBeanFactory&quot;);</span><br><span class="line"></span><br><span class="line">    // Register the naming resources</span><br><span class="line">    //初始化globalNamingResources，主要是相关资源注册到MBeanServer中</span><br><span class="line">    globalNamingResources.init();</span><br><span class="line"></span><br><span class="line">    // Populate the extension validator with JARs from common and shared</span><br><span class="line">    // class loaders</span><br><span class="line">    //获取jar包的Manifest文件</span><br><span class="line">    if (getCatalina() != null) &#123;</span><br><span class="line">        ClassLoader cl = getCatalina().getParentClassLoader();</span><br><span class="line">        // Walk the class loader hierarchy. Stop at the system class loader.</span><br><span class="line">        // This will add the shared (if present) and common class loaders</span><br><span class="line">        while (cl != null &amp;&amp; cl != ClassLoader.getSystemClassLoader()) &#123;</span><br><span class="line">            if (cl instanceof URLClassLoader) &#123;</span><br><span class="line">                URL[] urls = ((URLClassLoader) cl).getURLs();</span><br><span class="line">                for (URL url : urls) &#123;</span><br><span class="line">                    if (url.getProtocol().equals(&quot;file&quot;)) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            File f = new File (url.toURI());</span><br><span class="line">                            if (f.isFile() &amp;&amp;</span><br><span class="line">                                    f.getName().endsWith(&quot;.jar&quot;)) &#123;</span><br><span class="line">                                ExtensionValidator.addSystemResource(f);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; catch (URISyntaxException e) &#123;</span><br><span class="line">                            // Ignore</span><br><span class="line">                        &#125; catch (IOException e) &#123;</span><br><span class="line">                            // Ignore</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cl = cl.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Initialize our defined Services</span><br><span class="line">    for (int i = 0; i &lt; services.length; i++) &#123;</span><br><span class="line">        //初始化service</span><br><span class="line">        services[i].init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、StandardService的initInternal方法"><a href="#10、StandardService的initInternal方法" class="headerlink" title="10、StandardService的initInternal方法"></a>10、StandardService的initInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    //注册到MBeanServer中</span><br><span class="line">    super.initInternal();</span><br><span class="line">    //初始化engine</span><br><span class="line">    if (engine != null) &#123;</span><br><span class="line">        engine.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize any Executors</span><br><span class="line">    //初始化executor，未配置</span><br><span class="line">    for (Executor executor : findExecutors()) &#123;</span><br><span class="line">        if (executor instanceof JmxEnabled) &#123;</span><br><span class="line">            ((JmxEnabled) executor).setDomain(getDomain());</span><br><span class="line">        &#125;</span><br><span class="line">        executor.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize mapper listener</span><br><span class="line">    //初始化mapperListener，注册到MBeanServer中</span><br><span class="line">    mapperListener.init();</span><br><span class="line"></span><br><span class="line">    // Initialize our defined Connectors</span><br><span class="line">    //初始化连接器</span><br><span class="line">    synchronized (connectorsLock) &#123;</span><br><span class="line">        for (Connector connector : connectors) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connector.init();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                String message = sm.getString(</span><br><span class="line">                        &quot;standardService.connector.initFailed&quot;, connector);</span><br><span class="line">                log.error(message, e);</span><br><span class="line"></span><br><span class="line">                if (Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;))</span><br><span class="line">                    throw new LifecycleException(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、StandardEngine的initInternal方法"><a href="#11、StandardEngine的initInternal方法" class="headerlink" title="11、StandardEngine的initInternal方法"></a>11、StandardEngine的initInternal方法</h4><p>实例化StandardEngine<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public StandardEngine() &#123;</span><br><span class="line">    super();</span><br><span class="line">    //处理request的管道，往valve队列中添加StandardEngineValve</span><br><span class="line">    pipeline.setBasic(new StandardEngineValve());</span><br><span class="line">    /* Set the jmvRoute using the system property jvmRoute */</span><br><span class="line">    try &#123;</span><br><span class="line">        //在负载匀衡中使用的标识符，必须唯一</span><br><span class="line">        setJvmRoute(System.getProperty(&quot;jvmRoute&quot;));</span><br><span class="line">    &#125; catch(Exception ex) &#123;</span><br><span class="line">        log.warn(sm.getString(&quot;standardEngine.jvmRouteFail&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    // By default, the engine will hold the reloading thread</span><br><span class="line">    //后台线程执行间隔</span><br><span class="line">    backgroundProcessorDelay = 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>初始化方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    // Ensure that a Realm is present before any attempt is made to start</span><br><span class="line">    // one. This will create the default NullRealm if necessary.</span><br><span class="line">    getRealm();</span><br><span class="line">    super.initInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="12、ContainerBase的initInternal方法"><a href="#12、ContainerBase的initInternal方法" class="headerlink" title="12、ContainerBase的initInternal方法"></a>12、ContainerBase的initInternal方法</h4><p>StandardEngine的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    //任务队列</span><br><span class="line">    BlockingQueue&lt;Runnable&gt; startStopQueue = new LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">    //启停线程池</span><br><span class="line">    startStopExecutor = new ThreadPoolExecutor(</span><br><span class="line">            getStartStopThreadsInternal(),</span><br><span class="line">            getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,</span><br><span class="line">            startStopQueue,</span><br><span class="line">            new StartStopThreadFactory(getName() + &quot;-startStop-&quot;));</span><br><span class="line">    //核心线程会超时关闭</span><br><span class="line">    startStopExecutor.allowCoreThreadTimeOut(true);</span><br><span class="line">    super.initInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="13、接（一、1）Bootstrap的start方法"><a href="#13、接（一、1）Bootstrap的start方法" class="headerlink" title="13、接（一、1）Bootstrap的start方法"></a>13、接（一、1）Bootstrap的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void start()</span><br><span class="line">    throws Exception &#123;</span><br><span class="line">    if( catalinaDaemon==null ) init();</span><br><span class="line">    Method method = catalinaDaemon.getClass().getMethod(&quot;start&quot;, (Class [] )null);</span><br><span class="line">    //执行catalina的start方法</span><br><span class="line">    method.invoke(catalinaDaemon, (Object [])null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、Catalina的start方法"><a href="#14、Catalina的start方法" class="headerlink" title="14、Catalina的start方法"></a>14、Catalina的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line">    //Server不存在，则初始化</span><br><span class="line">    if (getServer() == null) &#123;</span><br><span class="line">        load();</span><br><span class="line">    &#125;</span><br><span class="line">    //Server不存在，退出</span><br><span class="line">    if (getServer() == null) &#123;</span><br><span class="line">        log.fatal(&quot;Cannot start server. Server instance is not configured.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">    // Start the new server</span><br><span class="line">    try &#123;</span><br><span class="line">        //启动Server</span><br><span class="line">        getServer().start();</span><br><span class="line">    &#125; catch (LifecycleException e) &#123;</span><br><span class="line">        log.fatal(sm.getString(&quot;catalina.serverStartFail&quot;), e);</span><br><span class="line">        try &#123;</span><br><span class="line">            //销毁Server</span><br><span class="line">            getServer().destroy();</span><br><span class="line">        &#125; catch (LifecycleException e1) &#123;</span><br><span class="line">            log.debug(&quot;destroy() failed for failed Server &quot;, e1);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long t2 = System.nanoTime();</span><br><span class="line">    if(log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(&quot;Server startup in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Register shutdown hook</span><br><span class="line">    if (useShutdownHook) &#123;</span><br><span class="line">        if (shutdownHook == null) &#123;</span><br><span class="line">            //钩子函数，执行Catalina的stop方法</span><br><span class="line">            shutdownHook = new CatalinaShutdownHook();</span><br><span class="line">        &#125;</span><br><span class="line">        //添加钩子函数，jvm关闭时执行</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(shutdownHook);</span><br><span class="line"></span><br><span class="line">        // If JULI is being used, disable JULI&apos;s shutdown hook since</span><br><span class="line">        // shutdown hooks run in parallel and log messages may be lost</span><br><span class="line">        // if JULI&apos;s hook completes before the CatalinaShutdownHook()</span><br><span class="line">        LogManager logManager = LogManager.getLogManager();</span><br><span class="line">        if (logManager instanceof ClassLoaderLogManager) &#123;</span><br><span class="line">            ((ClassLoaderLogManager) logManager).setUseShutdownHook(</span><br><span class="line">                    false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //是否阻塞主线程</span><br><span class="line">    if (await) &#123;</span><br><span class="line">        //阻塞本线程，创建ServerSocket监听8005端口，等待shutdown命令</span><br><span class="line">        await();</span><br><span class="line">        //停止Server</span><br><span class="line">        stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、LifecycleBase的start方法"><a href="#15、LifecycleBase的start方法" class="headerlink" title="15、LifecycleBase的start方法"></a>15、LifecycleBase的start方法</h4><p>StandardServer的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void start() throws LifecycleException &#123;</span><br><span class="line">    //已启动</span><br><span class="line">    if (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) ||</span><br><span class="line">            LifecycleState.STARTED.equals(state)) &#123;</span><br><span class="line"></span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            Exception e = new LifecycleException();</span><br><span class="line">            log.debug(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;, toString()), e);</span><br><span class="line">        &#125; else if (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;, toString()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //尚未初始化</span><br><span class="line">    if (state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        init();</span><br><span class="line">    //失败</span><br><span class="line">    &#125; else if (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">        stop();</span><br><span class="line">    //状态不对，抛出异常</span><br><span class="line">    &#125; else if (!state.equals(LifecycleState.INITIALIZED) &amp;&amp;</span><br><span class="line">            !state.equals(LifecycleState.STOPPED)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_START_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //设置状态为准备启动，并广播事件</span><br><span class="line">        setStateInternal(LifecycleState.STARTING_PREP, null, false);</span><br><span class="line">        //启动server</span><br><span class="line">        startInternal();</span><br><span class="line">        //启动失败</span><br><span class="line">        if (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">            // This is a &apos;controlled&apos; failure. The component put itself into the</span><br><span class="line">            // FAILED state so call stop() to complete the clean-up.</span><br><span class="line">            //停止</span><br><span class="line">            stop();</span><br><span class="line">        &#125; else if (!state.equals(LifecycleState.STARTING)) &#123;</span><br><span class="line">            // Shouldn&apos;t be necessary but acts as a check that sub-classes are</span><br><span class="line">            // doing what they are supposed to.</span><br><span class="line">            //抛出异常</span><br><span class="line">            invalidTransition(Lifecycle.AFTER_START_EVENT);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //设置状态已启动，并广播事件</span><br><span class="line">            setStateInternal(LifecycleState.STARTED, null, false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        // This is an &apos;uncontrolled&apos; failure so put the component into the</span><br><span class="line">        // FAILED state and throw an exception.</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(sm.getString(&quot;lifecycleBase.startFail&quot;, toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="16、StandardServer的startInternal方法"><a href="#16、StandardServer的startInternal方法" class="headerlink" title="16、StandardServer的startInternal方法"></a>16、StandardServer的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void startInternal() throws LifecycleException &#123;</span><br><span class="line">    //广播configure_start事件</span><br><span class="line">    fireLifecycleEvent(CONFIGURE_START_EVENT, null);</span><br><span class="line">    //设置状态为正在启动</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line">    //广播configure_start事件</span><br><span class="line">    globalNamingResources.start();</span><br><span class="line"></span><br><span class="line">    // Start our defined Services</span><br><span class="line">    synchronized (servicesLock) &#123;</span><br><span class="line">        for (int i = 0; i &lt; services.length; i++) &#123;</span><br><span class="line">            //启动service</span><br><span class="line">            services[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、StandardService的startInternal方法"><a href="#17、StandardService的startInternal方法" class="headerlink" title="17、StandardService的startInternal方法"></a>17、StandardService的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    if(log.isInfoEnabled())</span><br><span class="line">        log.info(sm.getString(&quot;standardService.start.name&quot;, this.name));</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    // Start our defined Container first</span><br><span class="line">    //启动engine</span><br><span class="line">    if (engine != null) &#123;</span><br><span class="line">        synchronized (engine) &#123;</span><br><span class="line">            engine.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动executor</span><br><span class="line">    synchronized (executors) &#123;</span><br><span class="line">        for (Executor executor: executors) &#123;</span><br><span class="line">            executor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动mapperListener</span><br><span class="line">    mapperListener.start();</span><br><span class="line"></span><br><span class="line">    // Start our defined Connectors second</span><br><span class="line">    //启动连接器</span><br><span class="line">    synchronized (connectorsLock) &#123;</span><br><span class="line">        for (Connector connector: connectors) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // If it has already failed, don&apos;t try and start it</span><br><span class="line">                if (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                    connector.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        &quot;standardService.connector.startFailed&quot;,</span><br><span class="line">                        connector), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、StandardEngine的startInternal方法"><a href="#18、StandardEngine的startInternal方法" class="headerlink" title="18、StandardEngine的startInternal方法"></a>18、StandardEngine的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Log our server identification information</span><br><span class="line">    if(log.isInfoEnabled())</span><br><span class="line">        log.info( &quot;Starting Servlet Engine: &quot; + ServerInfo.getServerInfo());</span><br><span class="line"></span><br><span class="line">    // Standard container startup</span><br><span class="line">    //启动容器</span><br><span class="line">    super.startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、ContainerBase的startInternal方法"><a href="#19、ContainerBase的startInternal方法" class="headerlink" title="19、ContainerBase的startInternal方法"></a>19、ContainerBase的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Start our subordinate components, if any</span><br><span class="line">    logger = null;</span><br><span class="line">    getLogger();</span><br><span class="line">    //启动tomcat集群相关组件</span><br><span class="line">    Cluster cluster = getClusterInternal();</span><br><span class="line">    if (cluster instanceof Lifecycle) &#123;</span><br><span class="line">        ((Lifecycle) cluster).start();</span><br><span class="line">    &#125;</span><br><span class="line">    //启动安全域</span><br><span class="line">    Realm realm = getRealmInternal();</span><br><span class="line">    if (realm instanceof Lifecycle) &#123;</span><br><span class="line">        ((Lifecycle) realm).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start our child containers, if any</span><br><span class="line">    //启动子容器</span><br><span class="line">    Container children[] = findChildren();</span><br><span class="line">    List&lt;Future&lt;Void&gt;&gt; results = new ArrayList&lt;&gt;();</span><br><span class="line">    for (int i = 0; i &lt; children.length; i++) &#123;</span><br><span class="line">        results.add(startStopExecutor.submit(new StartChild(children[i])));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean fail = false;</span><br><span class="line">    for (Future&lt;Void&gt; result : results) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            result.get();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;containerBase.threadedStartFailed&quot;), e);</span><br><span class="line">            fail = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    if (fail) &#123;</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;containerBase.threadedStartFailed&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start the Valves in our pipeline (including the basic), if any</span><br><span class="line">    //启动管道</span><br><span class="line">    if (pipeline instanceof Lifecycle)</span><br><span class="line">        ((Lifecycle) pipeline).start();</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    // Start our thread</span><br><span class="line">    //启动后台线程，ContainerBackgroundProcessor</span><br><span class="line">    threadStart();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、StandardHost的startInternal方法"><a href="#20、StandardHost的startInternal方法" class="headerlink" title="20、StandardHost的startInternal方法"></a>20、StandardHost的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Set error report valve</span><br><span class="line">    //往pipeline的value队列中添加ErrorReportValve对象</span><br><span class="line">    String errorValve = getErrorReportValveClass();</span><br><span class="line">    if ((errorValve != null) &amp;&amp; (!errorValve.equals(&quot;&quot;))) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            boolean found = false;</span><br><span class="line">            Valve[] valves = getPipeline().getValves();</span><br><span class="line">            for (Valve valve : valves) &#123;</span><br><span class="line">                if (errorValve.equals(valve.getClass().getName())) &#123;</span><br><span class="line">                    found = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(!found) &#123;</span><br><span class="line">                Valve valve =</span><br><span class="line">                    (Valve) Class.forName(errorValve).getConstructor().newInstance();</span><br><span class="line">                getPipeline().addValve(valve);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    &quot;standardHost.invalidErrorReportValveClass&quot;,</span><br><span class="line">                    errorValve), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //执行父类ContainerBase的startInternal方法</span><br><span class="line">    super.startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、接（一、17）MapperListener的startInternal方法"><a href="#21、接（一、17）MapperListener的startInternal方法" class="headerlink" title="21、接（一、17）MapperListener的startInternal方法"></a>21、接（一、17）MapperListener的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    Engine engine = service.getContainer();</span><br><span class="line">    if (engine == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //查找配置的&quot;defaultHost&quot;</span><br><span class="line">    findDefaultHost();</span><br><span class="line">    //往container及其子容器中添加该监听器</span><br><span class="line">    addListeners(engine);</span><br><span class="line"></span><br><span class="line">    Container[] conHosts = engine.findChildren();</span><br><span class="line">    for (Container conHost : conHosts) &#123;</span><br><span class="line">        Host host = (Host) conHost;</span><br><span class="line">        if (!LifecycleState.NEW.equals(host.getState())) &#123;</span><br><span class="line">            // Registering the host will register the context and wrappers</span><br><span class="line">            //注册主机，及其子容器，容器按name排序存放在Mapper中</span><br><span class="line">            registerHost(host);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、启动连接器"><a href="#二、启动连接器" class="headerlink" title="二、启动连接器"></a>二、启动连接器</h3><h4 id="1、实例化Connector"><a href="#1、实例化Connector" class="headerlink" title="1、实例化Connector"></a>1、实例化Connector</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Connector() &#123;</span><br><span class="line">    this(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Connector(String protocol) &#123;</span><br><span class="line">    //设置协议</span><br><span class="line">    setProtocol(protocol);</span><br><span class="line">    // Instantiate protocol handler</span><br><span class="line">    ProtocolHandler p = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //实例化协议处理器,默认Http11NioProtocol</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class="line">        p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(sm.getString(</span><br><span class="line">                &quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //设置协议处理器</span><br><span class="line">        this.protocolHandler = p;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置编码格式</span><br><span class="line">    if (Globals.STRICT_SERVLET_COMPLIANCE) &#123;</span><br><span class="line">        uriCharset = StandardCharsets.ISO_8859_1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        uriCharset = StandardCharsets.UTF_8;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、接（一、10）Connector的initInternal方法"><a href="#2、接（一、10）Connector的initInternal方法" class="headerlink" title="2、接（一、10）Connector的initInternal方法"></a>2、接（一、10）Connector的initInternal方法</h4><p>初始化连接器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    super.initInternal();</span><br><span class="line"></span><br><span class="line">    // Initialize adapter</span><br><span class="line">    //连接器与容器的适配器</span><br><span class="line">    adapter = new CoyoteAdapter(this);</span><br><span class="line">    //设置适配器</span><br><span class="line">    protocolHandler.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">    // Make sure parseBodyMethodsSet has a default</span><br><span class="line">    if (null == parseBodyMethodsSet) &#123;</span><br><span class="line">        setParseBodyMethods(getParseBodyMethods());</span><br><span class="line">    &#125;</span><br><span class="line">    //设置apr环境</span><br><span class="line">    if (protocolHandler.isAprRequired() &amp;&amp; !AprLifecycleListener.isAprAvailable()) &#123;</span><br><span class="line">        throw new LifecycleException(sm.getString(&quot;coyoteConnector.protocolHandlerNoApr&quot;,</span><br><span class="line">                getProtocolHandlerClassName()));</span><br><span class="line">    &#125;</span><br><span class="line">    if (AprLifecycleListener.isAprAvailable() &amp;&amp; AprLifecycleListener.getUseOpenSSL() &amp;&amp;</span><br><span class="line">            protocolHandler instanceof AbstractHttp11JsseProtocol) &#123;</span><br><span class="line">        AbstractHttp11JsseProtocol&lt;?&gt; jsseProtocolHandler =</span><br><span class="line">                (AbstractHttp11JsseProtocol&lt;?&gt;) protocolHandler;</span><br><span class="line">        if (jsseProtocolHandler.isSSLEnabled() &amp;&amp;</span><br><span class="line">                jsseProtocolHandler.getSslImplementationName() == null) &#123;</span><br><span class="line">            // OpenSSL is compatible with the JSSE configuration, so use it if APR is available</span><br><span class="line">            jsseProtocolHandler.setSslImplementationName(OpenSSLImplementation.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //初始化协议</span><br><span class="line">        protocolHandler.init();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、接（一、17）Connector的startInternal方法"><a href="#3、接（一、17）Connector的startInternal方法" class="headerlink" title="3、接（一、17）Connector的startInternal方法"></a>3、接（一、17）Connector的startInternal方法</h4><p>启动连接器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Validate settings before starting</span><br><span class="line">    if (getPort() &lt; 0) &#123;</span><br><span class="line">        throw new LifecycleException(sm.getString(</span><br><span class="line">                &quot;coyoteConnector.invalidPort&quot;, Integer.valueOf(getPort())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //启动协议</span><br><span class="line">        protocolHandler.start();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;coyoteConnector.protocolHandlerStartFailed&quot;), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、接（二、1）实例化Http11NioProtocol"><a href="#4、接（二、1）实例化Http11NioProtocol" class="headerlink" title="4、接（二、1）实例化Http11NioProtocol"></a>4、接（二、1）实例化Http11NioProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Http11NioProtocol() &#123;</span><br><span class="line">    super(new NioEndpoint());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Http11NioProtocol的父类AbstractHttp11Protocol<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public AbstractHttp11Protocol(AbstractEndpoint&lt;S&gt; endpoint) &#123;</span><br><span class="line">    super(endpoint);</span><br><span class="line">    setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">    ConnectionHandler&lt;S&gt; cHandler = new ConnectionHandler&lt;&gt;(this);</span><br><span class="line">    setHandler(cHandler);</span><br><span class="line">    getEndpoint().setHandler(cHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、接（二、3）AbstractProtocol的start方法"><a href="#5、接（二、3）AbstractProtocol的start方法" class="headerlink" title="5、接（二、3）AbstractProtocol的start方法"></a>5、接（二、3）AbstractProtocol<s>的start方法</s></h4><p>Http11NioProtocol的父类，启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void start() throws Exception &#123;</span><br><span class="line">    if (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(&quot;abstractProtocolHandler.start&quot;, getName()));</span><br><span class="line">    &#125;</span><br><span class="line">    //启动NioEndpoint</span><br><span class="line">    endpoint.start();</span><br><span class="line"></span><br><span class="line">    // Start async timeout thread</span><br><span class="line">    //异步任务超时处理线程</span><br><span class="line">    asyncTimeout = new AsyncTimeout();</span><br><span class="line">    Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + &quot;-AsyncTimeout&quot;);</span><br><span class="line">    int priority = endpoint.getThreadPriority();</span><br><span class="line">    if (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class="line">        priority = Thread.NORM_PRIORITY;</span><br><span class="line">    &#125;</span><br><span class="line">    timeoutThread.setPriority(priority);</span><br><span class="line">    timeoutThread.setDaemon(true);</span><br><span class="line">    timeoutThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、AbstractEndpoint的start方法"><a href="#6、AbstractEndpoint的start方法" class="headerlink" title="6、AbstractEndpoint的start方法"></a>6、AbstractEndpoint<s>的start方法</s></h4><p>NioEndpoint的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public final void start() throws Exception &#123;</span><br><span class="line">    if (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">        //绑定端口</span><br><span class="line">        bind();</span><br><span class="line">        bindState = BindState.BOUND_ON_START;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动NioEndpoint</span><br><span class="line">    startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7、NioEndpoint的bind方法"><a href="#7、NioEndpoint的bind方法" class="headerlink" title="7、NioEndpoint的bind方法"></a>7、NioEndpoint的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void bind() throws Exception &#123;</span><br><span class="line">    //创建服务端通道ServerSocketChannel</span><br><span class="line">    serverSock = ServerSocketChannel.open();</span><br><span class="line">    //设置属性</span><br><span class="line">    socketProperties.setProperties(serverSock.socket());</span><br><span class="line">    //获取监听地址</span><br><span class="line">    InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));</span><br><span class="line">    //绑定监听地址，默认最大堆积连接100</span><br><span class="line">    serverSock.socket().bind(addr,getAcceptCount());</span><br><span class="line">    //设置模式为阻塞</span><br><span class="line">    serverSock.configureBlocking(true); //mimic APR behavior</span><br><span class="line"></span><br><span class="line">    // Initialize thread count defaults for acceptor, poller</span><br><span class="line">    // acceptor线程数量，默认1个</span><br><span class="line">    if (acceptorThreadCount == 0) &#123;</span><br><span class="line">        // FIXME: Doesn&apos;t seem to work that well with multiple accept threads</span><br><span class="line">        acceptorThreadCount = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //Poller线程数量，默认处理器数量的一半</span><br><span class="line">    if (pollerThreadCount &lt;= 0) &#123;</span><br><span class="line">        //minimum one poller thread</span><br><span class="line">        pollerThreadCount = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //关闭等待poller关闭</span><br><span class="line">    setStopLatch(new CountDownLatch(pollerThreadCount));</span><br><span class="line"></span><br><span class="line">    // Initialize SSL if needed</span><br><span class="line">    //初始化SSLHostConfig</span><br><span class="line">    initialiseSsl();</span><br><span class="line">    //创建共享的Selector</span><br><span class="line">    selectorPool.open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（二、6）NioEndpoint的startInternal方法"><a href="#8、接（二、6）NioEndpoint的startInternal方法" class="headerlink" title="8、接（二、6）NioEndpoint的startInternal方法"></a>8、接（二、6）NioEndpoint的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void startInternal() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    if (!running) &#123;</span><br><span class="line">        //运行状态</span><br><span class="line">        running = true;</span><br><span class="line">        //挂起状态</span><br><span class="line">        paused = false;</span><br><span class="line">        //处理器缓存</span><br><span class="line">        processorCache = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                socketProperties.getProcessorCache());</span><br><span class="line">        //任务缓存</span><br><span class="line">        eventCache = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                        socketProperties.getEventCache());</span><br><span class="line">        //NioChannel缓存</span><br><span class="line">        nioChannels = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                socketProperties.getBufferPool());</span><br><span class="line"></span><br><span class="line">        // Create worker collection</span><br><span class="line">        //创建工作线程，默认最多200个工作线程</span><br><span class="line">        if ( getExecutor() == null ) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line">        //初始化连接限制，默认最多1000个连接</span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        // Start poller threads</span><br><span class="line">        //启动poller线程</span><br><span class="line">        pollers = new Poller[getPollerThreadCount()];</span><br><span class="line">        for (int i=0; i&lt;pollers.length; i++) &#123;</span><br><span class="line">            pollers[i] = new Poller();</span><br><span class="line">            Thread pollerThread = new Thread(pollers[i], getName() + &quot;-ClientPoller-&quot;+i);</span><br><span class="line">            pollerThread.setPriority(threadPriority);</span><br><span class="line">            pollerThread.setDaemon(true);</span><br><span class="line">            pollerThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        //启动Acceptor线程</span><br><span class="line">        startAcceptorThreads();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、Acceptor的run方法"><a href="#9、Acceptor的run方法" class="headerlink" title="9、Acceptor的run方法"></a>9、Acceptor的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line"></span><br><span class="line">    int errorDelay = 0;</span><br><span class="line"></span><br><span class="line">    // Loop until we receive a shutdown command</span><br><span class="line">    while (running) &#123;</span><br><span class="line"></span><br><span class="line">        // Loop if endpoint is paused</span><br><span class="line">        while (paused &amp;&amp; running) &#123;</span><br><span class="line">            state = AcceptorState.PAUSED;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(50);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!running) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        state = AcceptorState.RUNNING;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //if we have reached max connections, wait</span><br><span class="line">            //连接数加一</span><br><span class="line">            countUpOrAwaitConnection();</span><br><span class="line"></span><br><span class="line">            SocketChannel socket = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                // Accept the next incoming connection from the server</span><br><span class="line">                // socket</span><br><span class="line">                //等待客户端连接</span><br><span class="line">                socket = serverSock.accept();</span><br><span class="line">            &#125; catch (IOException ioe) &#123;</span><br><span class="line">                // We didn&apos;t get a socket</span><br><span class="line">                countDownConnection();</span><br><span class="line">                if (running) &#123;</span><br><span class="line">                    // Introduce delay if necessary</span><br><span class="line">                    errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">                    // re-throw</span><br><span class="line">                    throw ioe;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // Successful accept, reset the error delay</span><br><span class="line">            errorDelay = 0;</span><br><span class="line"></span><br><span class="line">            // Configure the socket</span><br><span class="line">            if (running &amp;&amp; !paused) &#123;</span><br><span class="line">                // setSocketOptions() will hand the socket off to</span><br><span class="line">                // an appropriate processor if successful</span><br><span class="line">                //处理请求，失败则关闭socket</span><br><span class="line">                if (!setSocketOptions(socket)) &#123;</span><br><span class="line">                    closeSocket(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                closeSocket(socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            log.error(sm.getString(&quot;endpoint.accept.fail&quot;), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    state = AcceptorState.ENDED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>spring源码配置类解析</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81%E9%85%8D%E7%BD%AE%E7%B1%BB%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/spring源码配置类解析/</id>
    <published>2020-01-13T14:32:37.973Z</published>
    <updated>2019-01-20T12:11:25.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ConfigurationClassPostProcessor处理器"><a href="#一、ConfigurationClassPostProcessor处理器" class="headerlink" title="一、ConfigurationClassPostProcessor处理器"></a>一、ConfigurationClassPostProcessor处理器</h3><h4 id="1、ConfigurationClassPostProcessor的创建"><a href="#1、ConfigurationClassPostProcessor的创建" class="headerlink" title="1、ConfigurationClassPostProcessor的创建"></a>1、ConfigurationClassPostProcessor的创建</h4><p>实例化AnnotatedBeanDefinitionReader的时候会往容器中注入注解处理器，包括ConfigurationClassPostProcessor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) &#123;</span><br><span class="line">Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">Assert.notNull(environment, &quot;Environment must not be null&quot;);</span><br><span class="line">this.registry = registry;</span><br><span class="line">this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);</span><br><span class="line">//注入注解处理器</span><br><span class="line">AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注入注解相关处理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;BeanDefinitionHolder&gt; registerAnnotationConfigProcessors(</span><br><span class="line">        BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    //获取容器中的DefaultListableBeanFactory容器</span><br><span class="line">    DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    if (beanFactory != null) &#123;</span><br><span class="line">        //比较器</span><br><span class="line">        if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        //确定一个bean是否要被注入的工具</span><br><span class="line">        if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefs = new LinkedHashSet&lt;BeanDefinitionHolder&gt;(4);</span><br><span class="line"></span><br><span class="line">    //配置类解析器</span><br><span class="line">    if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //@Autowired、@Value处理器</span><br><span class="line">    if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //检查带有@Required注解的所有Bean属性是否设置</span><br><span class="line">    if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span><br><span class="line">    //处理@Resource注解及WebService、EJB相关的注解</span><br><span class="line">    if (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span><br><span class="line">    //JPA相关注解的Bean后置处理器，主要解析和处理@PersistenceUnit、@PersistenceContext注解</span><br><span class="line">    if (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition();</span><br><span class="line">        try &#123;</span><br><span class="line">            def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">                    AnnotationConfigUtils.class.getClassLoader()));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new IllegalStateException(</span><br><span class="line">                    &quot;Cannot load optional framework class: &quot; + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //容器加载完单例bean之后执行处理器的afterSingletonsInstantiated方法</span><br><span class="line">    //遍历bean将其中注解了@EventListener的方法转换成监听器注册到容器中</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //创建监听器的工厂类</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ConfigurationClassPostProcessor处理配置类"><a href="#2、ConfigurationClassPostProcessor处理配置类" class="headerlink" title="2、ConfigurationClassPostProcessor处理配置类"></a>2、ConfigurationClassPostProcessor处理配置类</h4><p>AbstractApplicationContext的refresh方法中的invokeBeanFactoryPostProcessors方法，会调用BeanFactoryPostProcessor的postProcessBeanFactory方法。<br>最终使用processConfigBeanDefinitions方法来处理配置类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">List&lt;BeanDefinitionHolder&gt; configCandidates = new ArrayList&lt;BeanDefinitionHolder&gt;();</span><br><span class="line">//获取已有的beanName，Application也作为BeanDefinition注册到了容器中</span><br><span class="line">String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">...</span><br><span class="line">// Parse each @Configuration class</span><br><span class="line">//实例化ConfigurationClassParser解析配置类</span><br><span class="line">ConfigurationClassParser parser = new ConfigurationClassParser(</span><br><span class="line">this.metadataReaderFactory, this.problemReporter, this.environment,</span><br><span class="line">this.resourceLoader, this.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; candidates = new LinkedHashSet&lt;BeanDefinitionHolder&gt;(configCandidates);</span><br><span class="line">Set&lt;ConfigurationClass&gt; alreadyParsed = new HashSet&lt;ConfigurationClass&gt;(configCandidates.size());</span><br><span class="line">do &#123;</span><br><span class="line">    //解析配置类</span><br><span class="line">parser.parse(candidates);</span><br><span class="line">//校验，配置类不能为final，@Bean注解的方法如不是static的则必须能被覆盖</span><br><span class="line">parser.validate();</span><br><span class="line"></span><br><span class="line">Set&lt;ConfigurationClass&gt; configClasses = new LinkedHashSet&lt;ConfigurationClass&gt;(parser.getConfigurationClasses());</span><br><span class="line">configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">// Read the model and create bean definitions based on its content</span><br><span class="line">if (this.reader == null) &#123;</span><br><span class="line">this.reader = new ConfigurationClassBeanDefinitionReader(</span><br><span class="line">registry, this.sourceExtractor, this.resourceLoader, this.environment,</span><br><span class="line">this.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">&#125;</span><br><span class="line">//加载资源，在此处会根据Condition类过滤，OnBeanCondition、OnPropertyCondition实现该类</span><br><span class="line">this.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">//该配置类已处理</span><br><span class="line">alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">candidates.clear();</span><br><span class="line">//获取新注册的配置类</span><br><span class="line">if (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">Set&lt;String&gt; oldCandidateNames = new HashSet&lt;String&gt;(Arrays.asList(candidateNames));</span><br><span class="line">Set&lt;String&gt; alreadyParsedClasses = new HashSet&lt;String&gt;();</span><br><span class="line">for (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">&#125;</span><br><span class="line">for (String candidateName : newCandidateNames) &#123;</span><br><span class="line">if (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">BeanDefinition beanDef = registry.getBeanDefinition(candidateName);</span><br><span class="line">//新加载的BeanDefinition中的配置类</span><br><span class="line">if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &amp;&amp;</span><br><span class="line">!alreadyParsedClasses.contains(beanDef.getBeanClassName())) &#123;</span><br><span class="line">candidates.add(new BeanDefinitionHolder(beanDef, candidateName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">candidateNames = newCandidateNames;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//处理新加载的BeanDefinition中的配置类</span><br><span class="line">while (!candidates.isEmpty());</span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConfigurationClassParser的parse方法处理配置类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) &#123;</span><br><span class="line">this.deferredImportSelectors = new LinkedList&lt;DeferredImportSelectorHolder&gt;();</span><br><span class="line">        //处理配置类</span><br><span class="line">for (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line">try &#123;</span><br><span class="line">if (bd instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">else if (bd instanceof AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line">throw new BeanDefinitionStoreException(</span><br><span class="line">&quot;Failed to parse configuration class [&quot; + bd.getBeanClassName() + &quot;]&quot;, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        //处理@Import注入的ImportSelector类</span><br><span class="line">processDeferredImportSelectors();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConfigurationClassParser实际处理配置类的方法为doProcessConfigurationClass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected final SourceClass doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    // Recursively process any member (nested) classes first</span><br><span class="line">    //处理内部类</span><br><span class="line">    processMemberClasses(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    // Process any @PropertySource annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@PropertySource注解</span><br><span class="line">    for (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), PropertySources.class,</span><br><span class="line">            org.springframework.context.annotation.PropertySource.class)) &#123;</span><br><span class="line">        if (this.environment instanceof ConfigurableEnvironment) &#123;</span><br><span class="line">            processPropertySource(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            logger.warn(&quot;Ignoring @PropertySource annotation on [&quot; + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                    &quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process any @ComponentScan annotations</span><br><span class="line">    //获取配置类、配置类父类、配置类注解类的@ComponentScan注解</span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">    if (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">            !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        for (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">            // The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span><br><span class="line">            //解析注解，并扫描</span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                    this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            // Check the set of scanned definitions for any further config classes and parse recursively if needed</span><br><span class="line">            for (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">                BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                if (bdCand == null) &#123;</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line">                //继续解析扫描获取到的配置类</span><br><span class="line">                if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) &#123;</span><br><span class="line">                    parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process any @Import annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@Import注解</span><br><span class="line">    //将注解的值注册到容器中</span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), true);</span><br><span class="line"></span><br><span class="line">    // Process any @ImportResource annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@ImportResource注解的值</span><br><span class="line">    AnnotationAttributes importResource =</span><br><span class="line">            AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">    if (importResource != null) &#123;</span><br><span class="line">        //获取资源</span><br><span class="line">        String[] resources = importResource.getStringArray(&quot;locations&quot;);</span><br><span class="line">        Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(&quot;reader&quot;);</span><br><span class="line">        //遍历资源,加入到configClass中</span><br><span class="line">        for (String resource : resources) &#123;</span><br><span class="line">            String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">            configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process individual @Bean methods</span><br><span class="line">    //配置类的@Bean注解的方法,添加到configClass</span><br><span class="line">    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">    for (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">        configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process default methods on interfaces</span><br><span class="line">    //配置类接口的方法,添加到configClass</span><br><span class="line">    processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    // Process superclass, if any</span><br><span class="line">    //配置类有父类则继续处理</span><br><span class="line">    if (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">        String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">        if (superclass != null &amp;&amp; !superclass.startsWith(&quot;java&quot;) &amp;&amp;</span><br><span class="line">                !this.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">            this.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">            // Superclass found, return its annotation metadata and recurse</span><br><span class="line">            return sourceClass.getSuperClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // No superclass -&gt; processing is complete</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConfigurationClassParser处理处理@Import注解的方法为processImports<br>@Import的方式引入配置类有三种方式：直接注入、条件注入ImportSelector方式、ImportBeanDefinitionRegistrar方式注入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">private void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,</span><br><span class="line">        Collection&lt;SourceClass&gt; importCandidates, boolean checkForCircularImports) &#123;</span><br><span class="line">    //import的类为空</span><br><span class="line">    if (importCandidates.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //检查循环依赖</span><br><span class="line">    if (checkForCircularImports &amp;&amp; isChainedImportOnStack(configClass)) &#123;</span><br><span class="line">        this.problemReporter.error(new CircularImportProblem(configClass, this.importStack));</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        this.importStack.push(configClass);</span><br><span class="line">        try &#123;</span><br><span class="line">            //遍历处理</span><br><span class="line">            for (SourceClass candidate : importCandidates) &#123;</span><br><span class="line">                //ImportSelector的子类</span><br><span class="line">                if (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">                    // Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    //实例化该类</span><br><span class="line">                    ImportSelector selector = BeanUtils.instantiateClass(candidateClass, ImportSelector.class);</span><br><span class="line">                    //给实现特定接口的类设置资源</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            selector, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                    //DeferredImportSelector的实现,加入到deferredImportSelectors</span><br><span class="line">                    if (this.deferredImportSelectors != null &amp;&amp; selector instanceof DeferredImportSelector) &#123;</span><br><span class="line">                        this.deferredImportSelectors.add(</span><br><span class="line">                                new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        //获取该类中定义的需要import的类</span><br><span class="line">                        String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                        Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames);</span><br><span class="line">                        //循环调用该方法，处理importSourceClasses</span><br><span class="line">                        processImports(configClass, currentSourceClass, importSourceClasses, false);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //ImportBeanDefinitionRegistrar的子类</span><br><span class="line">                else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;</span><br><span class="line">                    // Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span><br><span class="line">                    // delegate to it to register additional bean definitions</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    ImportBeanDefinitionRegistrar registrar =</span><br><span class="line">                            BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            registrar, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                    //添加到configClass中</span><br><span class="line">                    configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    // Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;</span><br><span class="line">                    // process it as an @Configuration class</span><br><span class="line">                    this.importStack.registerImport(</span><br><span class="line">                            currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">                    //调用processConfigurationClass进行处理,当成普通配置类</span><br><span class="line">                    processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(</span><br><span class="line">                    &quot;Failed to process import candidates for configuration class [&quot; +</span><br><span class="line">                    configClass.getMetadata().getClassName() + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            this.importStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Import注入的、BeanDefinitionRegistrar类以及@Bean注入的类会在ConfigurationClassBeanDefinitionReader的loadBeanDefinitions方法中继续处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void loadBeanDefinitionsForConfigurationClass(</span><br><span class="line">        ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) &#123;</span><br><span class="line">    //使用条件注解Condition判断是否需要跳过这个配置类</span><br><span class="line">    if (trackedConditionEvaluator.shouldSkip(configClass)) &#123;</span><br><span class="line">        //跳过配置类则移除Spring容器中bean的注册</span><br><span class="line">        String beanName = configClass.getBeanName();</span><br><span class="line">        if (StringUtils.hasLength(beanName) &amp;&amp; this.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            this.registry.removeBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        //从importRegistry进行删除</span><br><span class="line">        this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //配置类是被@Import注释所import的，注册自己</span><br><span class="line">    if (configClass.isImported()) &#123;</span><br><span class="line">        registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">    &#125;</span><br><span class="line">    //遍历BeanMethods,依次对其进行注册</span><br><span class="line">    for (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">        loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    //注册@ImportResource注解注释的资源文件中的bean</span><br><span class="line">    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">    //注册@Import注解中的ImportBeanDefinitionRegistrar接口的registerBeanDefinitions</span><br><span class="line">    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、ConfigurationClassPostProcessor处理器&quot;&gt;&lt;a href=&quot;#一、ConfigurationClassPostProcessor处理器&quot; class=&quot;headerlink&quot; title=&quot;一、ConfigurationClass
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码整合MyBatis</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81%E6%95%B4%E5%90%88MyBatis/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/spring源码整合MyBatis/</id>
    <published>2020-01-13T14:32:37.969Z</published>
    <updated>2018-07-07T15:10:18.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans  </span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;!-- 1.配置数据源：DriverManagerDataSource --&gt;  </span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;oracle.jdbc.OracleDriver&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;scott&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;tiger&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/**/sql/*.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;mapperscanner&quot; class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.**.mapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、创建SqlSessionFactory"><a href="#一、创建SqlSessionFactory" class="headerlink" title="一、创建SqlSessionFactory"></a>一、创建SqlSessionFactory</h3><h4 id="1、SqlSessionFactoryBean的afterPropertiesSet方法"><a href="#1、SqlSessionFactoryBean的afterPropertiesSet方法" class="headerlink" title="1、SqlSessionFactoryBean的afterPropertiesSet方法"></a>1、SqlSessionFactoryBean的afterPropertiesSet方法</h4><p>SqlSessionFactoryBean实现了InitializingBean接口，创建完bean执行自定义初始化方法afterPropertiesSet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    notNull(dataSource, &quot;Property &apos;dataSource&apos; is required&quot;);</span><br><span class="line">    notNull(sqlSessionFactoryBuilder, &quot;Property &apos;sqlSessionFactoryBuilder&apos; is required&quot;);</span><br><span class="line">    //创建sqlSessionFactory</span><br><span class="line">    this.sqlSessionFactory = buildSqlSessionFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、SqlSessionFactoryBean的buildSqlSessionFactory方法"><a href="#2、SqlSessionFactoryBean的buildSqlSessionFactory方法" class="headerlink" title="2、SqlSessionFactoryBean的buildSqlSessionFactory方法"></a>2、SqlSessionFactoryBean的buildSqlSessionFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">protected SqlSessionFactory buildSqlSessionFactory() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    Configuration configuration;</span><br><span class="line"></span><br><span class="line">    XMLConfigBuilder xmlConfigBuilder = null;</span><br><span class="line">    if (this.configLocation != null) &#123;</span><br><span class="line">        //如果spring配置中configLocation属性不为空，则加载指定的Mybatis配置</span><br><span class="line">        xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, </span><br><span class="line">              this.configurationProperties);</span><br><span class="line">        configuration = xmlConfigBuilder.getConfiguration();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Property &apos;configLocation&apos; not specified, using default MyBatis Configuration&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //否则则采用默认的Mybatis配置</span><br><span class="line">        configuration = new Configuration();</span><br><span class="line">        configuration.setVariables(this.configurationProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.objectFactory != null) &#123;</span><br><span class="line">        configuration.setObjectFactory(this.objectFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.objectWrapperFactory != null) &#123;</span><br><span class="line">        configuration.setObjectWrapperFactory(this.objectWrapperFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    //对包下的类注册别民</span><br><span class="line">    if (hasLength(this.typeAliasesPackage)) &#123;</span><br><span class="line">        String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,</span><br><span class="line">                ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        for (String packageToScan : typeAliasPackageArray) &#123;</span><br><span class="line">            //对应方法的目的是通过扫描包得到其包以及子包目录下的typeAliasesSuperType的子类Class</span><br><span class="line">            //然后为每个class注册别名,别名为类名</span><br><span class="line">            configuration.getTypeAliasRegistry().registerAliases(packageToScan,</span><br><span class="line">                typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for aliases&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //对类注册别名</span><br><span class="line">    if (!isEmpty(this.typeAliases)) &#123;</span><br><span class="line">        for (Class&lt;?&gt; typeAlias : this.typeAliases) &#123;</span><br><span class="line">            configuration.getTypeAliasRegistry().registerAlias(typeAlias);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered type alias: &apos;&quot; + typeAlias + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加插件</span><br><span class="line">    if (!isEmpty(this.plugins)) &#123;</span><br><span class="line">        for (Interceptor plugin : this.plugins) &#123;</span><br><span class="line">            configuration.addInterceptor(plugin);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered plugin: &apos;&quot; + plugin + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (hasLength(this.typeHandlersPackage)) &#123;</span><br><span class="line">        String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,</span><br><span class="line">            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        for (String packageToScan : typeHandlersPackageArray) &#123;</span><br><span class="line">            configuration.getTypeHandlerRegistry().register(packageToScan);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for type handlers&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isEmpty(this.typeHandlers)) &#123;</span><br><span class="line">        for (TypeHandler&lt;?&gt; typeHandler : this.typeHandlers) &#123;</span><br><span class="line">            configuration.getTypeHandlerRegistry().register(typeHandler);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered type handler: &apos;&quot; + typeHandler + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (xmlConfigBuilder != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //解析配置文件</span><br><span class="line">            xmlConfigBuilder.parse();</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Parsed configuration file: &apos;&quot; + this.configLocation + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            throw new NestedIOException(&quot;Failed to parse config resource: &quot; + this.configLocation, ex);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.transactionFactory == null) &#123;</span><br><span class="line">        //创建事务管理器</span><br><span class="line">        this.transactionFactory = new SpringManagedTransactionFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    //设置环境</span><br><span class="line">    Environment environment = new Environment(this.environment, this.transactionFactory, this.dataSource);</span><br><span class="line">    configuration.setEnvironment(environment);</span><br><span class="line"></span><br><span class="line">    if (this.databaseIdProvider != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new NestedIOException(&quot;Failed getting a databaseId&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isEmpty(this.mapperLocations)) &#123;</span><br><span class="line">        for (Resource mapperLocation : this.mapperLocations) &#123;</span><br><span class="line">            if (mapperLocation == null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),</span><br><span class="line">                    configuration, mapperLocation.toString(), configuration.getSqlFragments());</span><br><span class="line">                //解析mapper文件</span><br><span class="line">                xmlMapperBuilder.parse();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new NestedIOException(&quot;Failed to parse mapping resource: &apos;&quot; + mapperLocation + &quot;&apos;&quot;, e);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                ErrorContext.instance().reset();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Parsed mapper file: &apos;&quot; + mapperLocation + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Property &apos;mapperLocations&apos; was not specified or no matching resources found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return this.sqlSessionFactoryBuilder.build(configuration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、SqlSessionFactoryBean的getObject方法"><a href="#3、SqlSessionFactoryBean的getObject方法" class="headerlink" title="3、SqlSessionFactoryBean的getObject方法"></a>3、SqlSessionFactoryBean的getObject方法</h4><p>获取SqlSessionFactory对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionFactory getObject() throws Exception &#123;</span><br><span class="line">    if (this.sqlSessionFactory == null) &#123;</span><br><span class="line">        afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">    return this.sqlSessionFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二、扫描mapper接口"><a href="#二、扫描mapper接口" class="headerlink" title="二、扫描mapper接口"></a>二、扫描mapper接口</h3><h4 id="1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法"><a href="#1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法" class="headerlink" title="1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法"></a>1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法</h4><p>BeanFactoryPostProcessor首先会执行postProcessBeanDefinitionRegistry方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    //若属性配置文件配置存在表达式$&#123;basePackage&#125;,此时尚未执行PropertyResourceConfigurer的postProcessBeanFactory加载Properties</span><br><span class="line">    //因此方法中创建一个容器，预先执行获取该属性</span><br><span class="line">    if (this.processPropertyPlaceHolders) &#123;</span><br><span class="line">      processPropertyPlaceHolders();</span><br><span class="line">    &#125;</span><br><span class="line">    //扫描器</span><br><span class="line">    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);</span><br><span class="line">    scanner.setAddToConfig(this.addToConfig);</span><br><span class="line">    scanner.setAnnotationClass(this.annotationClass);</span><br><span class="line">    scanner.setMarkerInterface(this.markerInterface);</span><br><span class="line">    //sqlSessionFactory</span><br><span class="line">    scanner.setSqlSessionFactory(this.sqlSessionFactory);</span><br><span class="line">    scanner.setSqlSessionTemplate(this.sqlSessionTemplate);</span><br><span class="line">    scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName);</span><br><span class="line">    scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName);</span><br><span class="line">    scanner.setResourceLoader(this.applicationContext);</span><br><span class="line">    scanner.setBeanNameGenerator(this.nameGenerator);</span><br><span class="line">    //注册过滤器</span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    //扫描包路径</span><br><span class="line">    scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ClassPathMapperScanner的registerFilters方法"><a href="#2、ClassPathMapperScanner的registerFilters方法" class="headerlink" title="2、ClassPathMapperScanner的registerFilters方法"></a>2、ClassPathMapperScanner的registerFilters方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public void registerFilters() &#123;</span><br><span class="line">    boolean acceptAllInterfaces = true;</span><br><span class="line"></span><br><span class="line">    // if specified, use the given annotation and / or marker interface</span><br><span class="line">    //添加注解类型过滤器</span><br><span class="line">    if (this.annotationClass != null) &#123;</span><br><span class="line">        addIncludeFilter(new AnnotationTypeFilter(this.annotationClass));</span><br><span class="line">        acceptAllInterfaces = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // override AssignableTypeFilter to ignore matches on the actual marker interface</span><br><span class="line">    //添加接口类型过滤器，获取实现了该接口的类或接口，但忽略本接口</span><br><span class="line">    if (this.markerInterface != null) &#123;</span><br><span class="line">        addIncludeFilter(new AssignableTypeFilter(this.markerInterface) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected boolean matchClassName(String className) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        acceptAllInterfaces = false;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取所有接口</span><br><span class="line">    if (acceptAllInterfaces) &#123;</span><br><span class="line">        // default include filter that accepts all classes</span><br><span class="line">        addIncludeFilter(new TypeFilter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // exclude package-info.java</span><br><span class="line">    //排除package-info.java</span><br><span class="line">    addExcludeFilter(new TypeFilter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">            String className = metadataReader.getClassMetadata().getClassName();</span><br><span class="line">            return className.endsWith(&quot;package-info&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ClassPathMapperScanner的doScan方法"><a href="#3、ClassPathMapperScanner的doScan方法" class="headerlink" title="3、ClassPathMapperScanner的doScan方法"></a>3、ClassPathMapperScanner的doScan方法</h4><p>ClassPathMapperScanner继承了ClassPathBeanDefinitionScanner，重写了doScan方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) &#123;</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = super.doScan(basePackages);</span><br><span class="line"></span><br><span class="line">    if (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">        logger.warn(&quot;No MyBatis mapper was found in &apos;&quot; + Arrays.toString(basePackages) + &quot;&apos; package. Please check your configuration.&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        processBeanDefinitions(beanDefinitions);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、ClassPathMapperScanner的isCandidateComponent方法"><a href="#4、ClassPathMapperScanner的isCandidateComponent方法" class="headerlink" title="4、ClassPathMapperScanner的isCandidateComponent方法"></a>4、ClassPathMapperScanner的isCandidateComponent方法</h4><p>ClassPathMapperScanner继承了ClassPathScanningCandidateComponentProvider，重写了isCandidateComponent方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) &#123;</span><br><span class="line">    //只获取接口</span><br><span class="line">    return beanDefinition.getMetadata().isInterface() &amp;&amp; beanDefinition.getMetadata().isIndependent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法"><a href="#5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法" class="headerlink" title="5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法"></a>5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private void processBeanDefinitions(Set&lt;BeanDefinitionHolder&gt; beanDefinitions) &#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    for (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">        definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Creating MapperFactoryBean with name &apos;&quot; + holder.getBeanName() </span><br><span class="line">              + &quot;&apos; and &apos;&quot; + definition.getBeanClassName() + &quot;&apos; mapperInterface&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // the mapper interface is the original class of the bean</span><br><span class="line">        // but, the actual class of the bean is MapperFactoryBean</span><br><span class="line">        //设置构造器参数</span><br><span class="line">        definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName()); // issue #59</span><br><span class="line">        //设置mapper代理类的工厂</span><br><span class="line">        definition.setBeanClass(this.mapperFactoryBean.getClass());</span><br><span class="line"></span><br><span class="line">        definition.getPropertyValues().add(&quot;addToConfig&quot;, this.addToConfig);</span><br><span class="line"></span><br><span class="line">        boolean explicitFactoryUsed = false;</span><br><span class="line">        //设置sqlSessionFactory</span><br><span class="line">        if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionFactory&quot;, new RuntimeBeanReference(this.sqlSessionFactoryBeanName));</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125; else if (this.sqlSessionFactory != null) &#123;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionFactory&quot;, this.sqlSessionFactory);</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">            if (explicitFactoryUsed) &#123;</span><br><span class="line">                logger.warn(&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionTemplate&quot;, new RuntimeBeanReference(this.sqlSessionTemplateBeanName));</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125; else if (this.sqlSessionTemplate != null) &#123;</span><br><span class="line">            if (explicitFactoryUsed) &#123;</span><br><span class="line">                logger.warn(&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionTemplate&quot;, this.sqlSessionTemplate);</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!explicitFactoryUsed) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Enabling autowire by type for MapperFactoryBean with name &apos;&quot; + holder.getBeanName() + &quot;&apos;.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置自动注入byType</span><br><span class="line">            definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、创建mapper代理对象"><a href="#三、创建mapper代理对象" class="headerlink" title="三、创建mapper代理对象"></a>三、创建mapper代理对象</h3><h4 id="1、实例化MapperFactoryBean"><a href="#1、实例化MapperFactoryBean" class="headerlink" title="1、实例化MapperFactoryBean"></a>1、实例化MapperFactoryBean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public MapperFactoryBean(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class="line">    this.mapperInterface = mapperInterface;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、SqlSessionDaoSupport的setSqlSessionFactory方法"><a href="#2、SqlSessionDaoSupport的setSqlSessionFactory方法" class="headerlink" title="2、SqlSessionDaoSupport的setSqlSessionFactory方法"></a>2、SqlSessionDaoSupport的setSqlSessionFactory方法</h4><p>注入sqlSessionFactory属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">    if (!this.externalSqlSession) &#123;</span><br><span class="line">        this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、实例化SqlSessionTemplate"><a href="#3、实例化SqlSessionTemplate" class="headerlink" title="3、实例化SqlSessionTemplate"></a>3、实例化SqlSessionTemplate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">    this(sqlSessionFactory, sqlSessionFactory.getConfiguration().getDefaultExecutorType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType) &#123;</span><br><span class="line">    this(sqlSessionFactory, executorType,</span><br><span class="line">        new MyBatisExceptionTranslator(</span><br><span class="line">            sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), true));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span><br><span class="line">      PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(sqlSessionFactory, &quot;Property &apos;sqlSessionFactory&apos; is required&quot;);</span><br><span class="line">    notNull(executorType, &quot;Property &apos;executorType&apos; is required&quot;);</span><br><span class="line"></span><br><span class="line">    this.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    //ExecutorType.SIMPLE</span><br><span class="line">    this.executorType = executorType;</span><br><span class="line">    this.exceptionTranslator = exceptionTranslator;</span><br><span class="line">    //sqlSession代理</span><br><span class="line">    this.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class="line">        SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">        new Class[] &#123; SqlSession.class &#125;,</span><br><span class="line">        new SqlSessionInterceptor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、MapperFactoryBean的getObject方法"><a href="#4、MapperFactoryBean的getObject方法" class="headerlink" title="4、MapperFactoryBean的getObject方法"></a>4、MapperFactoryBean的getObject方法</h4><p>获取bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public T getObject() throws Exception &#123;</span><br><span class="line">    //SqlSessionTemplate获取代理对象</span><br><span class="line">    return getSqlSession().getMapper(this.mapperInterface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、SqlSessionTemplate的getMapper方法"><a href="#5、SqlSessionTemplate的getMapper方法" class="headerlink" title="5、SqlSessionTemplate的getMapper方法"></a>5、SqlSessionTemplate的getMapper方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T getMapper(Class&lt;T&gt; type) &#123;</span><br><span class="line">    //获取代理对象与mybatis中相同，传入的参数为SqlSessionTemplate，spring只创建这一个SqlSession</span><br><span class="line">    return getConfiguration().getMapper(type, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、拦截器SqlSessionInterceptor"><a href="#三、拦截器SqlSessionInterceptor" class="headerlink" title="三、拦截器SqlSessionInterceptor"></a>三、拦截器SqlSessionInterceptor</h3><h4 id="1、SqlSessionInterceptor的invoke方法"><a href="#1、SqlSessionInterceptor的invoke方法" class="headerlink" title="1、SqlSessionInterceptor的invoke方法"></a>1、SqlSessionInterceptor的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    //创建一个sqlSession</span><br><span class="line">    final SqlSession sqlSession = getSqlSession(</span><br><span class="line">        SqlSessionTemplate.this.sqlSessionFactory,</span><br><span class="line">        SqlSessionTemplate.this.executorType,</span><br><span class="line">        SqlSessionTemplate.this.exceptionTranslator);</span><br><span class="line">    try &#123;</span><br><span class="line">        //执行</span><br><span class="line">        Object result = method.invoke(sqlSession, args);</span><br><span class="line">        //没有使用事务，直接提交</span><br><span class="line">        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) &#123;</span><br><span class="line">            // force commit even on non-dirty sessions because some databases require</span><br><span class="line">            // a commit/rollback before calling close()</span><br><span class="line">            sqlSession.commit(true);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        Throwable unwrapped = unwrapThrowable(t);</span><br><span class="line">        if (SqlSessionTemplate.this.exceptionTranslator != null &amp;&amp; unwrapped instanceof PersistenceException) &#123;</span><br><span class="line">            Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class="line">            if (translated != null) &#123;</span><br><span class="line">                unwrapped = translated;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw unwrapped;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、SqlSessionInterceptor的getSqlSession方法"><a href="#2、SqlSessionInterceptor的getSqlSession方法" class="headerlink" title="2、SqlSessionInterceptor的getSqlSession方法"></a>2、SqlSessionInterceptor的getSqlSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, </span><br><span class="line">      PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(sessionFactory, &quot;No SqlSessionFactory specified&quot;);</span><br><span class="line">    notNull(executorType, &quot;No ExecutorType specified&quot;);</span><br><span class="line">    //获取本线程的SqlSession容器</span><br><span class="line">    SqlSessionHolder holder = (SqlSessionHolder) getResource(sessionFactory);</span><br><span class="line">    //holder已被事务获取</span><br><span class="line">    if (holder != null &amp;&amp; holder.isSynchronizedWithTransaction()) &#123;</span><br><span class="line">        if (holder.getExecutorType() != executorType) &#123;</span><br><span class="line">            throw new TransientDataAccessResourceException(&quot;Cannot change the ExecutorType when there is an existing transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //正在使用次数加一</span><br><span class="line">        holder.requested();</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Fetched SqlSession [&quot; + holder.getSqlSession() + &quot;] from current transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return holder.getSqlSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating a new SqlSession&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建SqlSession</span><br><span class="line">    SqlSession session = sessionFactory.openSession(executorType);</span><br><span class="line"></span><br><span class="line">    // Register session holder if synchronization is active (i.e. a Spring TX is active)</span><br><span class="line">    //</span><br><span class="line">    // Note: The DataSource used by the Environment should be synchronized with the</span><br><span class="line">    // transaction either through DataSourceTxMgr or another tx synchronization.</span><br><span class="line">    // Further assume that if an exception is thrown, whatever started the transaction will</span><br><span class="line">    // handle closing / rolling back the Connection associated with the SqlSession.</span><br><span class="line">    //当前线程是否激活事务</span><br><span class="line">    if (isSynchronizationActive()) &#123;</span><br><span class="line">        //获取环境</span><br><span class="line">        Environment environment = sessionFactory.getConfiguration().getEnvironment();</span><br><span class="line">        //事务管理器为是spring事务管理器</span><br><span class="line">        if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">              logger.debug(&quot;Registering transaction synchronization for SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //创建本线程SqlSession容器</span><br><span class="line">            holder = new SqlSessionHolder(session, executorType, exceptionTranslator);</span><br><span class="line">            //holder注册到本线程</span><br><span class="line">            bindResource(sessionFactory, holder);</span><br><span class="line">            //设置回调函数释放资源</span><br><span class="line">            registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));</span><br><span class="line">            //设置holder已被事务获取</span><br><span class="line">            holder.setSynchronizedWithTransaction(true);</span><br><span class="line">            //SqlSession正在使用加一</span><br><span class="line">            holder.requested();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (getResource(environment.getDataSource()) == null) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because DataSource is not transactional&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new TransientDataAccessResourceException(</span><br><span class="line">                  &quot;SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because synchronization is not active&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（三、1）SqlSessionInterceptor的closeSqlSession方法"><a href="#3、接（三、1）SqlSessionInterceptor的closeSqlSession方法" class="headerlink" title="3、接（三、1）SqlSessionInterceptor的closeSqlSession方法"></a>3、接（三、1）SqlSessionInterceptor的closeSqlSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void closeSqlSession(SqlSession session, SqlSessionFactory sessionFactory) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(session, &quot;No SqlSession specified&quot;);</span><br><span class="line">    notNull(sessionFactory, &quot;No SqlSessionFactory specified&quot;);</span><br><span class="line">    //获取本线程SqlSession容器</span><br><span class="line">    SqlSessionHolder holder = (SqlSessionHolder) getResource(sessionFactory);</span><br><span class="line">    if ((holder != null) &amp;&amp; (holder.getSqlSession() == session)) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Releasing transactional SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //正在使用减一</span><br><span class="line">        holder.released();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Closing non transactional SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //没有事务，关闭SqlSession</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码XmlBeanFactory(2)</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81XmlBeanFactory(2)/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/spring源码XmlBeanFactory(2)/</id>
    <published>2020-01-13T14:32:37.964Z</published>
    <updated>2018-07-07T15:10:12.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、bean加载"><a href="#一、bean加载" class="headerlink" title="一、bean加载"></a>一、bean加载</h3><h4 id="1、AbstractBeanFactory的getBean方法"><a href="#1、AbstractBeanFactory的getBean方法" class="headerlink" title="1、AbstractBeanFactory的getBean方法"></a>1、AbstractBeanFactory的getBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">    return doGetBean(name, null, null, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractBeanFactory的doGetBean方法"><a href="#2、AbstractBeanFactory的doGetBean方法" class="headerlink" title="2、AbstractBeanFactory的doGetBean方法"></a>2、AbstractBeanFactory的doGetBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected &lt;T&gt; T doGetBean(</span><br><span class="line">        final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    //FactoryBean以&quot;&amp;&quot;开头，去除该符号，别名转换为beanName</span><br><span class="line">    final String beanName = transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    // Eagerly check singleton cache for manually registered singletons.</span><br><span class="line">    //从缓存中获取</span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    if (sharedInstance != null &amp;&amp; args == null) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            if (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(&quot;Returning eagerly cached instance of singleton bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; that is not fully initialized yet - a consequence of a circular reference&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                logger.debug(&quot;Returning cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果是FactoryBean，则从FactoryBean中获取对象</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">        // Fail if we&apos;re already creating this bean instance:</span><br><span class="line">        // We&apos;re assumably within a circular reference.</span><br><span class="line">        //该bean正在创建，发生循环依赖</span><br><span class="line">        if (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            throw new BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Check if bean definition exists in this factory.</span><br><span class="line">        //获取父容器，</span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        //当前容器不存在该bean，则从父容器中获取该bean</span><br><span class="line">        if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            // Not found -&gt; check parent.</span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            if (args != null) &#123;</span><br><span class="line">                // Delegation to parent with explicit args.</span><br><span class="line">                return (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // No args -&gt; delegate to standard getBean method.</span><br><span class="line">                return parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //标记bean正在创建</span><br><span class="line">        if (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //将储存xml配置的GernericBeanDefinition转换为RootBeanDefinition</span><br><span class="line">            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            // Guarantee initialization of beans that the current bean depends on.</span><br><span class="line">            //指定依赖</span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            if (dependsOn != null) &#123;</span><br><span class="line">                for (String dependsOnBean : dependsOn) &#123;</span><br><span class="line">                    //dependOn依赖关系已注册，出现循环依赖</span><br><span class="line">                    if (isDependent(beanName, dependsOnBean)) &#123;</span><br><span class="line">                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                &quot;Circular depends-on relationship between &apos;&quot; + beanName + &quot;&apos; and &apos;&quot; + dependsOnBean + &quot;&apos;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //注册dependOn依赖关系</span><br><span class="line">                    registerDependentBean(dependsOnBean, beanName);</span><br><span class="line">                    //先加载依赖bean</span><br><span class="line">                    getBean(dependsOnBean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Create bean instance.</span><br><span class="line">            //bean为单例模式</span><br><span class="line">            if (mbd.isSingleton()) &#123;</span><br><span class="line">                //获取该单例bean</span><br><span class="line">                sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object getObject() throws BeansException &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //创建该bean</span><br><span class="line">                            return createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (BeansException ex) &#123;</span><br><span class="line">                            // Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="line">                            // eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="line">                            // Also remove any beans that received a temporary reference to the bean.</span><br><span class="line">                            destroySingleton(beanName);</span><br><span class="line">                            throw ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                //如果是FactoryBean，则从FactoryBean中获取对象</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            //bean为prototype模式</span><br><span class="line">            else if (mbd.isPrototype()) &#123;</span><br><span class="line">                // It&apos;s a prototype -&gt; create a new instance.</span><br><span class="line">                Object prototypeInstance = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //标记该bean正在创建</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    //创建该prototype模式的bean</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    //删除正在创建标记</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            //bean为另外的scope</span><br><span class="line">            else &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                final Scope scope = this.scopes.get(scopeName);</span><br><span class="line">                if (scope == null) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;No Scope registered for scope &apos;&quot; + scopeName + &quot;&apos;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public Object getObject() throws BeansException &#123;</span><br><span class="line">                            beforePrototypeCreation(beanName);</span><br><span class="line">                            try &#123;</span><br><span class="line">                                return createBean(beanName, mbd, args);</span><br><span class="line">                            &#125;</span><br><span class="line">                            finally &#123;</span><br><span class="line">                                afterPrototypeCreation(beanName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (IllegalStateException ex) &#123;</span><br><span class="line">                    throw new BeanCreationException(beanName,</span><br><span class="line">                            &quot;Scope &apos;&quot; + scopeName + &quot;&apos; is not active for the current thread; &quot; +</span><br><span class="line">                            &quot;consider defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;,</span><br><span class="line">                            ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check if required type matches the type of the actual bean instance.</span><br><span class="line">    if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TypeMismatchException ex) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Failed to convert bean &apos;&quot; + name + &quot;&apos; to required type [&quot; +</span><br><span class="line">                        ClassUtils.getQualifiedName(requiredType) + &quot;]&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractBeanFactory的getSingleton方法"><a href="#3、AbstractBeanFactory的getSingleton方法" class="headerlink" title="3、AbstractBeanFactory的getSingleton方法"></a>3、AbstractBeanFactory的getSingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getSingleton(String beanName) &#123;</span><br><span class="line">    return getSingleton(beanName, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">    //从缓存中获取</span><br><span class="line">    Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">    if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        synchronized (this.singletonObjects) &#123;</span><br><span class="line">            //从早期bean缓存中获取暴露的早期bean，解决循环依赖</span><br><span class="line">            singletonObject = this.earlySingletonObjects.get(beanName);</span><br><span class="line">            //允许获取早期bean</span><br><span class="line">            if (singletonObject == null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                //获取singletonFactory</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);</span><br><span class="line">                if (singletonFactory != null) &#123;</span><br><span class="line">                    //从singletonFactoy中，获取早期bean</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    //放入早期bean缓存</span><br><span class="line">                    this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    this.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (singletonObject != NULL_OBJECT ? singletonObject : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法"><a href="#4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法" class="headerlink" title="4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法"></a>4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">protected Object getObjectForBeanInstance(</span><br><span class="line">        Object beanInstance, String name, String beanName, RootBeanDefinition mbd) &#123;</span><br><span class="line"></span><br><span class="line">    // Don&apos;t let calling code try to dereference the factory if the bean isn&apos;t a factory.</span><br><span class="line">    //name是工厂类型即“&amp;”开头，但实例并非FactoryBean</span><br><span class="line">    if (BeanFactoryUtils.isFactoryDereference(name) &amp;&amp; !(beanInstance instanceof FactoryBean)) &#123;</span><br><span class="line">        throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Now we have the bean instance, which may be a normal bean or a FactoryBean.</span><br><span class="line">    // If it&apos;s a FactoryBean, we use it to create a bean instance, unless the</span><br><span class="line">    // caller actually wants a reference to the factory.</span><br><span class="line">    //name是工厂或实例并非FactoryBean，直接返回</span><br><span class="line">    if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">        return beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object object = null;</span><br><span class="line">    if (mbd == null) &#123;</span><br><span class="line">        //从缓存中获取FactoryBean</span><br><span class="line">        object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    if (object == null) &#123;</span><br><span class="line">        // Return bean instance from factory.</span><br><span class="line">        FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">        // Caches object obtained from FactoryBean if it is a singleton.</span><br><span class="line">        if (mbd == null &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            //将储存xml配置的GernericBeanDefinition转换为RootBeanDefinition</span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean synthetic = (mbd != null &amp;&amp; mbd.isSynthetic());</span><br><span class="line">        //从FactoryBean中获取bean</span><br><span class="line">        object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">    &#125;</span><br><span class="line">    return object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AbstractBeanFactory的getObjectFromFactoryBean方法"><a href="#5、AbstractBeanFactory的getObjectFromFactoryBean方法" class="headerlink" title="5、AbstractBeanFactory的getObjectFromFactoryBean方法"></a>5、AbstractBeanFactory的getObjectFromFactoryBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">protected Object getObjectFromFactoryBean(FactoryBean&lt;?&gt; factory, String beanName, boolean shouldPostProcess) &#123;</span><br><span class="line">    //单例模式</span><br><span class="line">    if (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">        synchronized (getSingletonMutex()) &#123;</span><br><span class="line">            Object object = this.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            if (object == null) &#123;</span><br><span class="line">                //获取bean，执行factory的getObject方法</span><br><span class="line">                object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                // Only post-process and store if not put there already during getObject() call above</span><br><span class="line">                // (e.g. because of circular reference processing triggered by custom getBean calls)</span><br><span class="line">                //从缓存中获取</span><br><span class="line">                Object alreadyThere = this.factoryBeanObjectCache.get(beanName);</span><br><span class="line">                if (alreadyThere != null) &#123;</span><br><span class="line">                    object = alreadyThere;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    if (object != null &amp;&amp; shouldPostProcess) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //从FactoryBean中获取对象的后处理器</span><br><span class="line">                            object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (Throwable ex) &#123;</span><br><span class="line">                            throw new BeanCreationException(beanName,</span><br><span class="line">                                    &quot;Post-processing of FactoryBean&apos;s singleton object failed&quot;, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //添加缓存</span><br><span class="line">                    this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return (object != NULL_OBJECT ? object : null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        if (object != null &amp;&amp; shouldPostProcess) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Throwable ex) &#123;</span><br><span class="line">                throw new BeanCreationException(beanName, &quot;Post-processing of FactoryBean&apos;s object failed&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法"><a href="#6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法" class="headerlink" title="6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法"></a>6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object postProcessObjectFromFactoryBean(Object object, String beanName) &#123;</span><br><span class="line">    return applyBeanPostProcessorsAfterInitialization(object, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法"><a href="#7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法" class="headerlink" title="7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法"></a>7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    Object result = existingBean;</span><br><span class="line">    //执行bean初始化后处理器</span><br><span class="line">    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">        result = beanProcessor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、2）AbstractBeanFactory的getSingleton方法"><a href="#8、接（一、2）AbstractBeanFactory的getSingleton方法" class="headerlink" title="8、接（一、2）AbstractBeanFactory的getSingleton方法"></a>8、接（一、2）AbstractBeanFactory的getSingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">    Assert.notNull(beanName, &quot;&apos;beanName&apos; must not be null&quot;);</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        //从缓存里获取</span><br><span class="line">        Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">        if (singletonObject == null) &#123;</span><br><span class="line">            if (this.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line">                throw new BeanCreationNotAllowedException(beanName,</span><br><span class="line">                        &quot;Singleton bean creation not allowed while the singletons of this factory are in destruction &quot; +</span><br><span class="line">                        &quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Creating shared instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //检查该bean是否正在创建</span><br><span class="line">            beforeSingletonCreation(beanName);</span><br><span class="line">            boolean newSingleton = false;</span><br><span class="line">            boolean recordSuppressedExceptions = (this.suppressedExceptions == null);</span><br><span class="line">            if (recordSuppressedExceptions) &#123;</span><br><span class="line">                this.suppressedExceptions = new LinkedHashSet&lt;Exception&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                //创建bean</span><br><span class="line">                singletonObject = singletonFactory.getObject();</span><br><span class="line">                newSingleton = true;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IllegalStateException ex) &#123;</span><br><span class="line">                // Has the singleton object implicitly appeared in the meantime -&gt;</span><br><span class="line">                // if yes, proceed with it since the exception indicates that state.</span><br><span class="line">                singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">                if (singletonObject == null) &#123;</span><br><span class="line">                    throw ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (BeanCreationException ex) &#123;</span><br><span class="line">                if (recordSuppressedExceptions) &#123;</span><br><span class="line">                    for (Exception suppressedException : this.suppressedExceptions) &#123;</span><br><span class="line">                        ex.addRelatedCause(suppressedException);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if (recordSuppressedExceptions) &#123;</span><br><span class="line">                    this.suppressedExceptions = null;</span><br><span class="line">                &#125;</span><br><span class="line">                //删除正在创建标记</span><br><span class="line">                afterSingletonCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            if (newSingleton) &#123;</span><br><span class="line">                //添加缓存，删除为解决循环依赖而提早暴露的bean</span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (singletonObject != NULL_OBJECT ? singletonObject : null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractAutowireCapableBeanFactory的createBean方法"><a href="#9、AbstractAutowireCapableBeanFactory的createBean方法" class="headerlink" title="9、AbstractAutowireCapableBeanFactory的createBean方法"></a>9、AbstractAutowireCapableBeanFactory的createBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object createBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)</span><br><span class="line">        throws BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // Make sure bean class is actually resolved at this point.</span><br><span class="line">    //获取bean的class</span><br><span class="line">    resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    // Prepare method overrides.</span><br><span class="line">    try &#123;</span><br><span class="line">        //预处理准备覆盖的方法</span><br><span class="line">        mbd.prepareMethodOverrides();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(mbd.getResourceDescription(),</span><br><span class="line">                beanName, &quot;Validation of method overrides failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span><br><span class="line">        // 给BeanPostProcessors一个机会返回代理，来替代真正的实例</span><br><span class="line">        Object bean = resolveBeforeInstantiation(beanName, mbd);</span><br><span class="line">        if (bean != null) &#123;</span><br><span class="line">            return bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                &quot;BeanPostProcessor before instantiation of bean failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建bean</span><br><span class="line">    Object beanInstance = doCreateBean(beanName, mbd, args);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Finished creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法"><a href="#10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法" class="headerlink" title="10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法"></a>10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) &#123;</span><br><span class="line">    Object bean = null;</span><br><span class="line">    //尚未被解析</span><br><span class="line">    if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">        // Make sure bean class is actually resolved at this point.</span><br><span class="line">        if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">            Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">            if (targetType != null) &#123;</span><br><span class="line">                //实例化bean前处理器，这里可以在创建BeanWrapper之前更改BeanDefinition，并可能会创建一个代理bean返回</span><br><span class="line">                bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                if (bean != null) &#123;</span><br><span class="line">                    //如果bean已经创建，调用实例化bean后处理器</span><br><span class="line">                    bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mbd.beforeInstantiationResolved = (bean != null);</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法"><a href="#11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法" class="headerlink" title="11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法"></a>11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123;</span><br><span class="line">    // Instantiate the bean.</span><br><span class="line">    BeanWrapper instanceWrapper = null;</span><br><span class="line">    if (mbd.isSingleton()) &#123;</span><br><span class="line">        //单例模式，删除原有的beanWrapper</span><br><span class="line">        instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    if (instanceWrapper == null) &#123;</span><br><span class="line">        //创建beanWrapper，里面存放了bean对象</span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);</span><br><span class="line">    Class&lt;?&gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);</span><br><span class="line"></span><br><span class="line">    // Allow post-processors to modify the merged bean definition.</span><br><span class="line">    synchronized (mbd.postProcessingLock) &#123;</span><br><span class="line">        if (!mbd.postProcessed) &#123;</span><br><span class="line">            //应用MergedBeanDefinitionPostProcessor</span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            mbd.postProcessed = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Eagerly cache singletons to be able to resolve circular references</span><br><span class="line">    // even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br><span class="line">    //单例&amp;允许循环依赖&amp;该bean正在创建，则提早曝光</span><br><span class="line">    boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class="line">            isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    if (earlySingletonExposure) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Eagerly caching bean &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos; to allow for resolving potential circular references&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //singletonFactories中添加ObjectFactory</span><br><span class="line">        addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object getObject() throws BeansException &#123;</span><br><span class="line">                //应用SmartInstantiationAwareBeanPostProcessor，没有直接返回</span><br><span class="line">                //AOP在此处将advice动态织入bean中</span><br><span class="line">                return getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize the bean instance.</span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    try &#123;</span><br><span class="line">        //将各个属性值注入bean中，依赖其他bean，则递归初始化bean</span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        if (exposedObject != null) &#123;</span><br><span class="line">            //调用初始化方法，比如init-method</span><br><span class="line">            exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            throw (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (earlySingletonExposure) &#123;</span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, false);</span><br><span class="line">        //出现循环依赖的情况下，该值不为空</span><br><span class="line">        if (earlySingletonReference != null) &#123;</span><br><span class="line">            if (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;String&gt;(dependentBeans.length);</span><br><span class="line">                for (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //检查依赖的bean是否都已经创建</span><br><span class="line">                if (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    throw new BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                            &quot;Bean with name &apos;&quot; + beanName + &quot;&apos; has been injected into other beans [&quot; +</span><br><span class="line">                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                            &quot;] in its raw version as part of a circular reference, but has eventually been &quot; +</span><br><span class="line">                            &quot;wrapped. This means that said other beans do not use the final version of the &quot; +</span><br><span class="line">                            &quot;bean. This is often the result of over-eager type matching - consider using &quot; +</span><br><span class="line">                            &quot;&apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Register bean as disposable.</span><br><span class="line">    try &#123;</span><br><span class="line">        //根据scope注册bean</span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractAutowireCapableBeanFactory的createBeanInstance方法"><a href="#12、AbstractAutowireCapableBeanFactory的createBeanInstance方法" class="headerlink" title="12、AbstractAutowireCapableBeanFactory的createBeanInstance方法"></a>12、AbstractAutowireCapableBeanFactory的createBeanInstance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) &#123;</span><br><span class="line">    // Make sure bean class is actually resolved at this point.</span><br><span class="line">    //获取class</span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    if (beanClass != null &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                &quot;Bean class isn&apos;t public, and non-public access not allowed: &quot; + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    //存在工厂方法，用工厂方法创建bean</span><br><span class="line">    if (mbd.getFactoryMethodName() != null)  &#123;</span><br><span class="line">        return instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Shortcut when re-creating the same bean...</span><br><span class="line">    boolean resolved = false;</span><br><span class="line">    boolean autowireNecessary = false;</span><br><span class="line">    //没有参数，不需解析</span><br><span class="line">    if (args == null) &#123;</span><br><span class="line">        synchronized (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            if (mbd.resolvedConstructorOrFactoryMethod != null) &#123;</span><br><span class="line">                resolved = true;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //已经解析</span><br><span class="line">    if (resolved) &#123;</span><br><span class="line">        if (autowireNecessary) &#123;</span><br><span class="line">            //构造函数或工厂方法创建对象</span><br><span class="line">            return autowireConstructor(beanName, mbd, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //默认构造函数创建</span><br><span class="line">            return instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Need to determine the constructor...</span><br><span class="line">    //由参数解析构造函数或工厂方法</span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    if (ctors != null ||</span><br><span class="line">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">        return autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">    &#125;</span><br><span class="line">    //默认构造函数创建</span><br><span class="line">    // No special handling: simply use no-arg constructor.</span><br><span class="line">    return instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、AbstractAutowireCapableBeanFactory的instantiateBean方法"><a href="#13、AbstractAutowireCapableBeanFactory的instantiateBean方法" class="headerlink" title="13、AbstractAutowireCapableBeanFactory的instantiateBean方法"></a>13、AbstractAutowireCapableBeanFactory的instantiateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Object beanInstance;</span><br><span class="line">        final BeanFactory parent = this;</span><br><span class="line">        if (System.getSecurityManager() != null) &#123;</span><br><span class="line">            beanInstance = AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public Object run() &#123;</span><br><span class="line">                    return getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //创建bean</span><br><span class="line">            beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">        &#125;</span><br><span class="line">        BeanWrapper bw = new BeanWrapperImpl(beanInstance);</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line">        return bw;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Instantiation of bean failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、SimpleInstantiationStrategy的instantiate方法"><a href="#14、SimpleInstantiationStrategy的instantiate方法" class="headerlink" title="14、SimpleInstantiationStrategy的instantiate方法"></a>14、SimpleInstantiationStrategy的instantiate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) &#123;</span><br><span class="line">    // Don&apos;t override the class with CGLIB if no overrides.</span><br><span class="line">    //</span><br><span class="line">    if (bd.getMethodOverrides().isEmpty()) &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">        synchronized (bd.constructorArgumentLock) &#123;</span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            if (constructorToUse == null) &#123;</span><br><span class="line">                final Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">                if (clazz.isInterface()) &#123;</span><br><span class="line">                    throw new BeanInstantiationException(clazz, &quot;Specified class is an interface&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">                        constructorToUse = AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public Constructor&lt;?&gt; run() throws Exception &#123;</span><br><span class="line">                                return clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        constructorToUse =  clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception ex) &#123;</span><br><span class="line">                    throw new BeanInstantiationException(clazz, &quot;No default constructor found&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //直接通过反射创建</span><br><span class="line">        return BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Must generate CGLIB subclass.</span><br><span class="line">        //有需要覆盖或动态替换的方法，则使用CGLIB创建代理对象并将方法织入</span><br><span class="line">        return instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法"><a href="#15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法" class="headerlink" title="15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法"></a>15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner) &#123;</span><br><span class="line">    return instantiateWithMethodInjection(bd, beanName, owner, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner,</span><br><span class="line">        Constructor&lt;?&gt; ctor, Object... args) &#123;</span><br><span class="line"></span><br><span class="line">    // Must generate CGLIB subclass...</span><br><span class="line">    return new CglibSubclassCreator(bd, owner).instantiate(ctor, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、CglibSubclassingInstantiationStrategy的instantiate方法"><a href="#16、CglibSubclassingInstantiationStrategy的instantiate方法" class="headerlink" title="16、CglibSubclassingInstantiationStrategy的instantiate方法"></a>16、CglibSubclassingInstantiationStrategy的instantiate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public Object instantiate(Constructor&lt;?&gt; ctor, Object... args) &#123;</span><br><span class="line">    Class&lt;?&gt; subclass = createEnhancedSubclass(this.beanDefinition);</span><br><span class="line">    Object instance;</span><br><span class="line">    if (ctor == null) &#123;</span><br><span class="line">        instance = BeanUtils.instantiate(subclass);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Constructor&lt;?&gt; enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes());</span><br><span class="line">            instance = enhancedSubclassConstructor.newInstance(args);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),</span><br><span class="line">                    &quot;Failed to invoke constructor for CGLIB enhanced subclass [&quot; + subclass.getName() + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // SPR-10785: set callbacks directly on the instance instead of in the</span><br><span class="line">    // enhanced class (via the Enhancer) in order to avoid memory leaks.</span><br><span class="line">    Factory factory = (Factory) instance;</span><br><span class="line">    //拦截器，拦截对应的方法</span><br><span class="line">    factory.setCallbacks(new Callback[] &#123;NoOp.INSTANCE,</span><br><span class="line">            new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),</span><br><span class="line">            new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)&#125;);</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法"><a href="#17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法" class="headerlink" title="17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法"></a>17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private Class&lt;?&gt; createEnhancedSubclass(RootBeanDefinition beanDefinition) &#123;</span><br><span class="line">    Enhancer enhancer = new Enhancer();</span><br><span class="line">    enhancer.setSuperclass(beanDefinition.getBeanClass());</span><br><span class="line">    enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">    /过滤器，accept方法返回的数字，代表了Callback数组中的索引位置</span><br><span class="line">    enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition));</span><br><span class="line">    enhancer.setCallbackTypes(CALLBACK_TYPES);</span><br><span class="line">    return enhancer.createClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法"><a href="#18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法" class="headerlink" title="18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法"></a>18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123;</span><br><span class="line">    //获取属性</span><br><span class="line">    PropertyValues pvs = mbd.getPropertyValues();</span><br><span class="line"></span><br><span class="line">    if (bw == null) &#123;</span><br><span class="line">        if (!pvs.isEmpty()) &#123;</span><br><span class="line">            throw new BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, &quot;Cannot apply property values to null instance&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Skip property population phase for null instance.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span><br><span class="line">    // state of the bean before properties are set. This can be used, for example,</span><br><span class="line">    // to support styles of field injection.</span><br><span class="line">    boolean continueWithPropertyPopulation = true;</span><br><span class="line">    //应用InstantiationAwareBeanPostProcessor</span><br><span class="line">    if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        MutablePropertyValues newPvs = new MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">        // Add property values based on autowire by name if applicable.</span><br><span class="line">        //根据名称自动注入</span><br><span class="line">        if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Add property values based on autowire by type if applicable.</span><br><span class="line">        //根据类型自动注入</span><br><span class="line">        if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line">    //后处理器已经初始化</span><br><span class="line">    boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    //需要检查依赖</span><br><span class="line">    boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    if (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">        PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        if (hasInstAwareBpps) &#123;</span><br><span class="line">            for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">                if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                    InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                    //对需要检查依赖的属性,进行后处理</span><br><span class="line">                    pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    if (pvs == null) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (needsDepCheck) &#123;</span><br><span class="line">            //检查依赖</span><br><span class="line">            checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将属性应用到bean中</span><br><span class="line">    applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、AbstractAutowireCapableBeanFactory的autowireByName方法"><a href="#19、AbstractAutowireCapableBeanFactory的autowireByName方法" class="headerlink" title="19、AbstractAutowireCapableBeanFactory的autowireByName方法"></a>19、AbstractAutowireCapableBeanFactory的autowireByName方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected void autowireByName(</span><br><span class="line">        String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</span><br><span class="line">    //寻找依赖注入的属性</span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    for (String propertyName : propertyNames) &#123;</span><br><span class="line">        if (containsBean(propertyName)) &#123;</span><br><span class="line">            //递归初始化相关的bean</span><br><span class="line">            Object bean = getBean(propertyName);</span><br><span class="line">            pvs.add(propertyName, bean);</span><br><span class="line">            //注册依赖</span><br><span class="line">            registerDependentBean(propertyName, beanName);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Added autowiring by name from bean name &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; via property &apos;&quot; + propertyName + &quot;&apos; to bean named &apos;&quot; + propertyName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Not autowiring property &apos;&quot; + propertyName + &quot;&apos; of bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; by name: no matching bean found&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法"><a href="#20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法" class="headerlink" title="20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法"></a>20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">protected void autowireByType(</span><br><span class="line">        String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</span><br><span class="line"></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    if (converter == null) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; autowiredBeanNames = new LinkedHashSet&lt;String&gt;(4);</span><br><span class="line">    //获取需要依赖注入的属性</span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    for (String propertyName : propertyNames) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</span><br><span class="line">            // Don&apos;t try autowiring by type for type Object: never makes sense,</span><br><span class="line">            // even if it technically is a unsatisfied, non-simple property.</span><br><span class="line">            if (!Object.class.equals(pd.getPropertyType())) &#123;</span><br><span class="line">                MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</span><br><span class="line">                // Do not allow eager init for type matching in case of a prioritized post-processor.</span><br><span class="line">                boolean eager = !PriorityOrdered.class.isAssignableFrom(bw.getWrappedClass());</span><br><span class="line">                DependencyDescriptor desc = new AutowireByTypeDependencyDescriptor(methodParam, eager);</span><br><span class="line">                //解析该propertyName所对应的属性值</span><br><span class="line">                Object autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</span><br><span class="line">                if (autowiredArgument != null) &#123;</span><br><span class="line">                    pvs.add(propertyName, autowiredArgument);</span><br><span class="line">                &#125;</span><br><span class="line">                for (String autowiredBeanName : autowiredBeanNames) &#123;</span><br><span class="line">                    registerDependentBean(autowiredBeanName, beanName);</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(&quot;Autowiring by type from bean name &apos;&quot; + beanName + &quot;&apos; via property &apos;&quot; +</span><br><span class="line">                                propertyName + &quot;&apos; to bean named &apos;&quot; + autowiredBeanName + &quot;&apos;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                autowiredBeanNames.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            throw new UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、DefaultListableBeanFactory的resolveDependency方法"><a href="#21、DefaultListableBeanFactory的resolveDependency方法" class="headerlink" title="21、DefaultListableBeanFactory的resolveDependency方法"></a>21、DefaultListableBeanFactory的resolveDependency方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object resolveDependency(DependencyDescriptor descriptor, String beanName,</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter) throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    descriptor.initParameterNameDiscovery(getParameterNameDiscoverer());</span><br><span class="line">    //javaUtilOptionalClass类注入特殊处理</span><br><span class="line">    if (descriptor.getDependencyType().equals(javaUtilOptionalClass)) &#123;</span><br><span class="line">        return new OptionalDependencyFactory().createOptionalDependency(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //ObjectFactory类注入特殊处理</span><br><span class="line">    else if (descriptor.getDependencyType().equals(ObjectFactory.class)) &#123;</span><br><span class="line">        return new DependencyObjectFactory(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //javaxInjectProviderClass类注入特殊处理</span><br><span class="line">    else if (descriptor.getDependencyType().equals(javaxInjectProviderClass)) &#123;</span><br><span class="line">        return new DependencyProviderFactory().createDependencyProvider(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //懒加载，获取代理对象</span><br><span class="line">        Object result = getAutowireCandidateResolver().getLazyResolutionProxyIfNecessary(descriptor, beanName);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            //通用处理逻辑</span><br><span class="line">            result = doResolveDependency(descriptor, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、DefaultListableBeanFactory的doResolveDependency方法"><a href="#22、DefaultListableBeanFactory的doResolveDependency方法" class="headerlink" title="22、DefaultListableBeanFactory的doResolveDependency方法"></a>22、DefaultListableBeanFactory的doResolveDependency方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">public Object doResolveDependency(DependencyDescriptor descriptor, String beanName,</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter) throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; type = descriptor.getDependencyType();</span><br><span class="line">    //解析注解@value</span><br><span class="line">    Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor);</span><br><span class="line">    if (value != null) &#123;</span><br><span class="line">        if (value instanceof String) &#123;</span><br><span class="line">            //处理placeholder类型的value</span><br><span class="line">            String strVal = resolveEmbeddedValue((String) value);</span><br><span class="line">            BeanDefinition bd = (beanName != null &amp;&amp; containsBean(beanName) ? getMergedBeanDefinition(beanName) : null);</span><br><span class="line">            // 处理EL表达式  </span><br><span class="line">            value = evaluateBeanDefinitionString(strVal, bd);</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        //类型转换</span><br><span class="line">        return (descriptor.getField() != null ?</span><br><span class="line">                converter.convertIfNecessary(value, type, descriptor.getField()) :</span><br><span class="line">                converter.convertIfNecessary(value, type, descriptor.getMethodParameter()));</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为数组类型</span><br><span class="line">    if (type.isArray()) &#123;</span><br><span class="line">        Class&lt;?&gt; componentType = type.getComponentType();</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        //获取所有符合要求的类型的bean和类对象</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(componentType, &quot;array of &quot; + componentType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        Object result = converter.convertIfNecessary(matchingBeans.values(), type);</span><br><span class="line">        //将所有符合类型的类对象和bean，放入数组</span><br><span class="line">        if (getDependencyComparator() != null &amp;&amp; result instanceof Object[]) &#123;</span><br><span class="line">            Arrays.sort((Object[]) result, adaptDependencyComparator(matchingBeans));</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为Collection类型</span><br><span class="line">    else if (Collection.class.isAssignableFrom(type) &amp;&amp; type.isInterface()) &#123;</span><br><span class="line">        Class&lt;?&gt; elementType = descriptor.getCollectionType();</span><br><span class="line">        if (elementType == null) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;No element type declared for collection [&quot; + type.getName() + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, elementType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(elementType, &quot;collection of &quot; + elementType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        Object result = converter.convertIfNecessary(matchingBeans.values(), type);</span><br><span class="line">        //将所有符合类型的类对象和bean，放入List</span><br><span class="line">        if (getDependencyComparator() != null &amp;&amp; result instanceof List) &#123;</span><br><span class="line">            Collections.sort((List&lt;?&gt;) result, adaptDependencyComparator(matchingBeans));</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为Map类型</span><br><span class="line">    else if (Map.class.isAssignableFrom(type) &amp;&amp; type.isInterface()) &#123;</span><br><span class="line">        Class&lt;?&gt; keyType = descriptor.getMapKeyType();</span><br><span class="line">        if (keyType == null || !String.class.isAssignableFrom(keyType)) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;Key type [&quot; + keyType + &quot;] of map [&quot; + type.getName() +</span><br><span class="line">                        &quot;] must be assignable to [java.lang.String]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; valueType = descriptor.getMapValueType();</span><br><span class="line">        if (valueType == null) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;No value type declared for map [&quot; + type.getName() + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, valueType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(valueType, &quot;map with value type &quot; + valueType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        //返回符合条件的bean和类对象</span><br><span class="line">        return matchingBeans;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(type, &quot;&quot;, descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //多个bean符合类型要求</span><br><span class="line">        if (matchingBeans.size() &gt; 1) &#123;</span><br><span class="line">            //依次根据Primary属性、priority属性、bean的名字去确定唯一的bean</span><br><span class="line">            String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor);</span><br><span class="line">            if (primaryBeanName == null) &#123;</span><br><span class="line">                throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet());</span><br><span class="line">            &#125;</span><br><span class="line">            if (autowiredBeanNames != null) &#123;</span><br><span class="line">                autowiredBeanNames.add(primaryBeanName);</span><br><span class="line">            &#125;</span><br><span class="line">            //返回匹配的bean</span><br><span class="line">            return matchingBeans.get(primaryBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        // We have exactly one match.</span><br><span class="line">        Map.Entry&lt;String, Object&gt; entry = matchingBeans.entrySet().iterator().next();</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        //返回唯一的bean</span><br><span class="line">        return entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法"><a href="#23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法" class="headerlink" title="23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法"></a>23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) &#123;</span><br><span class="line">    if (pvs == null || pvs.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MutablePropertyValues mpvs = null;</span><br><span class="line">    List&lt;PropertyValue&gt; original;</span><br><span class="line"></span><br><span class="line">    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">        if (bw instanceof BeanWrapperImpl) &#123;</span><br><span class="line">            ((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (pvs instanceof MutablePropertyValues) &#123;</span><br><span class="line">        mpvs = (MutablePropertyValues) pvs;</span><br><span class="line">        //mpvs中的值已被转换为对应的类型</span><br><span class="line">        if (mpvs.isConverted()) &#123;</span><br><span class="line">            // Shortcut: use the pre-converted values as-is.</span><br><span class="line">            try &#123;</span><br><span class="line">                //属性值设置到bean中</span><br><span class="line">                bw.setPropertyValues(mpvs);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (BeansException ex) &#123;</span><br><span class="line">                throw new BeanCreationException(</span><br><span class="line">                        mbd.getResourceDescription(), beanName, &quot;Error setting property values&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //原始属性</span><br><span class="line">        original = mpvs.getPropertyValueList();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //原始属性</span><br><span class="line">        original = Arrays.asList(pvs.getPropertyValues());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    if (converter == null) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取对应的解析器</span><br><span class="line">    BeanDefinitionValueResolver valueResolver = new BeanDefinitionValueResolver(this, beanName, mbd, converter);</span><br><span class="line"></span><br><span class="line">    // Create a deep copy, resolving any references for values.</span><br><span class="line">    List&lt;PropertyValue&gt; deepCopy = new ArrayList&lt;PropertyValue&gt;(original.size());</span><br><span class="line">    boolean resolveNecessary = false;</span><br><span class="line">    //将属性转换为对应的属性类型</span><br><span class="line">    for (PropertyValue pv : original) &#123;</span><br><span class="line">        if (pv.isConverted()) &#123;</span><br><span class="line">            deepCopy.add(pv);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            String propertyName = pv.getName();</span><br><span class="line">            Object originalValue = pv.getValue();</span><br><span class="line">            //解析属性值</span><br><span class="line">            Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class="line">            Object convertedValue = resolvedValue;</span><br><span class="line">            boolean convertible = bw.isWritableProperty(propertyName) &amp;&amp;</span><br><span class="line">                    !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</span><br><span class="line">            if (convertible) &#123;</span><br><span class="line">                convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</span><br><span class="line">            &#125;</span><br><span class="line">            // Possibly store converted value in merged bean definition,</span><br><span class="line">            // in order to avoid re-conversion for every created bean instance.</span><br><span class="line">            if (resolvedValue == originalValue) &#123;</span><br><span class="line">                if (convertible) &#123;</span><br><span class="line">                    pv.setConvertedValue(convertedValue);</span><br><span class="line">                &#125;</span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (convertible &amp;&amp; originalValue instanceof TypedStringValue &amp;&amp;</span><br><span class="line">                    !((TypedStringValue) originalValue).isDynamic() &amp;&amp;</span><br><span class="line">                    !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) &#123;</span><br><span class="line">                pv.setConvertedValue(convertedValue);</span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                resolveNecessary = true;</span><br><span class="line">                deepCopy.add(new PropertyValue(pv, convertedValue));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mpvs != null &amp;&amp; !resolveNecessary) &#123;</span><br><span class="line">        mpvs.setConverted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Set our (possibly massaged) deep copy.</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置属性值</span><br><span class="line">        bw.setPropertyValues(new MutablePropertyValues(deepCopy));</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeansException ex) &#123;</span><br><span class="line">        throw new BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, &quot;Error setting property values&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法"><a href="#24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法" class="headerlink" title="24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法"></a>24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">        AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object run() &#123;</span><br><span class="line">                invokeAwareMethods(beanName, bean);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //处理特殊的bean，BeanNameAware、BeanClassLoaderAware、BeanFactoryAware</span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">        //应用初始化前处理器</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //用户自定义初始化方法，如InitializingBean接口afterPropertiesSet方法、init-method方法</span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(</span><br><span class="line">                (mbd != null ? mbd.getResourceDescription() : null),</span><br><span class="line">                beanName, &quot;Invocation of init method failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">        //应用初始化后处理器</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    return wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法"><a href="#25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法" class="headerlink" title="25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法"></a>25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">    AccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);</span><br><span class="line">    if (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;</span><br><span class="line">        if (mbd.isSingleton()) &#123;</span><br><span class="line">            // Register a DisposableBean implementation that performs all destruction</span><br><span class="line">            // work for the given bean: DestructionAwareBeanPostProcessors,</span><br><span class="line">            // DisposableBean interface, custom destroy method.</span><br><span class="line">            //单例模式，注册bean销毁时的回调</span><br><span class="line">            //销毁时会调用DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</span><br><span class="line">            //DisposableBean的destroy方法、destory-method方法</span><br><span class="line">            registerDisposableBean(beanName,</span><br><span class="line">                    new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // A bean with a custom scope...</span><br><span class="line">            Scope scope = this.scopes.get(mbd.getScope());</span><br><span class="line">            if (scope == null) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;No Scope registered for scope &apos;&quot; + mbd.getScope() + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //在scope中，注册bean销毁时的回调</span><br><span class="line">            //销毁时会调用DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</span><br><span class="line">            //DisposableBean的destroy方法、destory-method方法</span><br><span class="line">            scope.registerDestructionCallback(beanName,</span><br><span class="line">                    new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、bean销毁"><a href="#二、bean销毁" class="headerlink" title="二、bean销毁"></a>二、bean销毁</h3><h4 id="1、DefaultListableBeanFactory的destroySingletons方法"><a href="#1、DefaultListableBeanFactory的destroySingletons方法" class="headerlink" title="1、DefaultListableBeanFactory的destroySingletons方法"></a>1、DefaultListableBeanFactory的destroySingletons方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void destroySingletons() &#123;</span><br><span class="line">    super.destroySingletons();</span><br><span class="line">    //清除注册bean</span><br><span class="line">    this.manualSingletonNames.clear();</span><br><span class="line">    //清除缓存</span><br><span class="line">    clearByTypeCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultSingletonBeanRegistry的destroySingletons方法"><a href="#2、DefaultSingletonBeanRegistry的destroySingletons方法" class="headerlink" title="2、DefaultSingletonBeanRegistry的destroySingletons方法"></a>2、DefaultSingletonBeanRegistry的destroySingletons方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void destroySingletons() &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Destroying singletons in &quot; + this);</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        this.singletonsCurrentlyInDestruction = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] disposableBeanNames;</span><br><span class="line">    synchronized (this.disposableBeans) &#123;</span><br><span class="line">        //待销毁的beanName</span><br><span class="line">        disposableBeanNames = StringUtils.toStringArray(this.disposableBeans.keySet());</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = disposableBeanNames.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        //销毁bean</span><br><span class="line">        destroySingleton(disposableBeanNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    //清除</span><br><span class="line">    this.containedBeanMap.clear();</span><br><span class="line">    this.dependentBeanMap.clear();</span><br><span class="line">    this.dependenciesForBeanMap.clear();</span><br><span class="line"></span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        this.singletonObjects.clear();</span><br><span class="line">        this.singletonFactories.clear();</span><br><span class="line">        this.earlySingletonObjects.clear();</span><br><span class="line">        this.registeredSingletons.clear();</span><br><span class="line">        this.singletonsCurrentlyInDestruction = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultSingletonBeanRegistry的destroySingleton方法"><a href="#3、DefaultSingletonBeanRegistry的destroySingleton方法" class="headerlink" title="3、DefaultSingletonBeanRegistry的destroySingleton方法"></a>3、DefaultSingletonBeanRegistry的destroySingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void destroySingleton(String beanName) &#123;</span><br><span class="line">    // Remove a registered singleton of the given name, if any.</span><br><span class="line">    //删除该bean</span><br><span class="line">    removeSingleton(beanName);</span><br><span class="line"></span><br><span class="line">    // Destroy the corresponding DisposableBean instance.</span><br><span class="line">    DisposableBean disposableBean;</span><br><span class="line">    synchronized (this.disposableBeans) &#123;</span><br><span class="line">        //删除该bean的销毁回调函数</span><br><span class="line">        disposableBean = (DisposableBean) this.disposableBeans.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //执行销毁方法</span><br><span class="line">    destroyBean(beanName, disposableBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultSingletonBeanRegistry的destroyBean方法"><a href="#4、DefaultSingletonBeanRegistry的destroyBean方法" class="headerlink" title="4、DefaultSingletonBeanRegistry的destroyBean方法"></a>4、DefaultSingletonBeanRegistry的destroyBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">protected void destroyBean(String beanName, DisposableBean bean) &#123;</span><br><span class="line">    // Trigger destruction of dependent beans first...</span><br><span class="line">    //销毁依赖该bean的bean</span><br><span class="line">    Set&lt;String&gt; dependencies = this.dependentBeanMap.remove(beanName);</span><br><span class="line">    if (dependencies != null) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Retrieved dependent beans for bean &apos;&quot; + beanName + &quot;&apos;: &quot; + dependencies);</span><br><span class="line">        &#125;</span><br><span class="line">        for (String dependentBeanName : dependencies) &#123;</span><br><span class="line">            destroySingleton(dependentBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Actually destroy the bean now...</span><br><span class="line">    if (bean != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //销毁bean</span><br><span class="line">            bean.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            logger.error(&quot;Destroy method on bean with name &apos;&quot; + beanName + &quot;&apos; threw an exception&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Trigger destruction of contained beans...</span><br><span class="line">    //销毁该bean拥有的bean</span><br><span class="line">    Set&lt;String&gt; containedBeans = this.containedBeanMap.remove(beanName);</span><br><span class="line">    if (containedBeans != null) &#123;</span><br><span class="line">        for (String containedBeanName : containedBeans) &#123;</span><br><span class="line">            destroySingleton(containedBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Remove destroyed bean from other beans&apos; dependencies.</span><br><span class="line">    //删除注册的依赖</span><br><span class="line">    synchronized (this.dependentBeanMap) &#123;</span><br><span class="line">        for (Iterator&lt;Map.Entry&lt;String, Set&lt;String&gt;&gt;&gt; it = this.dependentBeanMap.entrySet().iterator(); it.hasNext();) &#123;</span><br><span class="line">            Map.Entry&lt;String, Set&lt;String&gt;&gt; entry = it.next();</span><br><span class="line">            Set&lt;String&gt; dependenciesToClean = entry.getValue();</span><br><span class="line">            dependenciesToClean.remove(beanName);</span><br><span class="line">            if (dependenciesToClean.isEmpty()) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Remove destroyed bean&apos;s prepared dependency information.</span><br><span class="line">    this.dependenciesForBeanMap.remove(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DisposableBeanAdapter的destroy方法"><a href="#5、DisposableBeanAdapter的destroy方法" class="headerlink" title="5、DisposableBeanAdapter的destroy方法"></a>5、DisposableBeanAdapter的destroy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line">    //应用DestructionAwareBeanPostProcessor</span><br><span class="line">    if (this.beanPostProcessors != null &amp;&amp; !this.beanPostProcessors.isEmpty()) &#123;</span><br><span class="line">        for (DestructionAwareBeanPostProcessor processor : this.beanPostProcessors) &#123;</span><br><span class="line">            processor.postProcessBeforeDestruction(this.bean, this.beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.invokeDisposableBean) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Invoking destroy() on bean with name &apos;&quot; + this.beanName + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (System.getSecurityManager() != null) &#123;</span><br><span class="line">                AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Object&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object run() throws Exception &#123;</span><br><span class="line">                        ((DisposableBean) bean).destroy();</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, acc);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                //执行destroy方法</span><br><span class="line">                ((DisposableBean) bean).destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            String msg = &quot;Invocation of destroy method failed on bean with name &apos;&quot; + this.beanName + &quot;&apos;&quot;;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.warn(msg, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                logger.warn(msg + &quot;: &quot; + ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //自定义的destory-method方法</span><br><span class="line">    if (this.destroyMethod != null) &#123;</span><br><span class="line">        invokeCustomDestroyMethod(this.destroyMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (this.destroyMethodName != null) &#123;</span><br><span class="line">        Method methodToCall = determineDestroyMethod();</span><br><span class="line">        if (methodToCall != null) &#123;</span><br><span class="line">            invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、bean加载&quot;&gt;&lt;a href=&quot;#一、bean加载&quot; class=&quot;headerlink&quot; title=&quot;一、bean加载&quot;&gt;&lt;/a&gt;一、bean加载&lt;/h3&gt;&lt;h4 id=&quot;1、AbstractBeanFactory的getBean方法&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码XmlBeanFactory(1)</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81XmlBeanFactory(1)/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/spring源码XmlBeanFactory(1)/</id>
    <published>2020-01-13T14:32:37.960Z</published>
    <updated>2018-07-07T15:10:07.657Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">   </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //step1: 读取spring的xml   （spring核心的是BeanFactory）</span><br><span class="line">        // 把资源文件封装为Spring的Resource</span><br><span class="line">        // spring把资源文件封装成统一的Resource进行管理，和提供一些基本的方法。</span><br><span class="line">        Resource resource = new ClassPathResource(&quot;spring-demo.xml&quot;);</span><br><span class="line"></span><br><span class="line">        // 加载资源文件，把xml中的bean definition注册到：1.把Resource再次封装为EncodedResource</span><br><span class="line">        XmlBeanFactory factory = new XmlBeanFactory(resource);</span><br><span class="line">        Demo0102Bean bean = (Demo) factory.getBean(&quot;demo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、xml文件读取"><a href="#一、xml文件读取" class="headerlink" title="一、xml文件读取"></a>一、xml文件读取</h3><h4 id="1、实例化XmlBeanFactory"><a href="#1、实例化XmlBeanFactory" class="headerlink" title="1、实例化XmlBeanFactory"></a>1、实例化XmlBeanFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public XmlBeanFactory(Resource resource) throws BeansException &#123;</span><br><span class="line">    this(resource, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public XmlBeanFactory(Resource resource, BeanFactory parentBeanFactory) throws BeansException &#123;</span><br><span class="line">    super(parentBeanFactory);</span><br><span class="line">    this.reader.loadBeanDefinitions(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、XmlBeanDefinitionReader的loadBeanDefinitions方法"><a href="#2、XmlBeanDefinitionReader的loadBeanDefinitions方法" class="headerlink" title="2、XmlBeanDefinitionReader的loadBeanDefinitions方法"></a>2、XmlBeanDefinitionReader的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    return loadBeanDefinitions(new EncodedResource(resource));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    Assert.notNull(encodedResource, &quot;EncodedResource must not be null&quot;);</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Loading XML bean definitions from &quot; + encodedResource.getResource());</span><br><span class="line">    &#125;</span><br><span class="line">    //记录已加载的资源</span><br><span class="line">    Set&lt;EncodedResource&gt; currentResources = this.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">    if (currentResources == null) &#123;</span><br><span class="line">        currentResources = new HashSet&lt;EncodedResource&gt;(4);</span><br><span class="line">        this.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(</span><br><span class="line">                &quot;Detected cyclic loading of &quot; + encodedResource + &quot; - check your import definitions!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取输入流</span><br><span class="line">        InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">        try &#123;</span><br><span class="line">            InputSource inputSource = new InputSource(inputStream);</span><br><span class="line">            if (encodedResource.getEncoding() != null) &#123;</span><br><span class="line">                inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">            &#125;</span><br><span class="line">            //读取xml</span><br><span class="line">            return doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(</span><br><span class="line">                &quot;IOException parsing XML document from &quot; + encodedResource.getResource(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        currentResources.remove(encodedResource);</span><br><span class="line">        if (currentResources.isEmpty()) &#123;</span><br><span class="line">            this.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法"><a href="#3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法" class="headerlink" title="3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法"></a>3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //xml读取为Document</span><br><span class="line">        Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">        //解析配置文件</span><br><span class="line">        return registerBeanDefinitions(doc, resource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SAXParseException ex) &#123;</span><br><span class="line">        throw new XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Line &quot; + ex.getLineNumber() + &quot; in XML document from &quot; + resource + &quot; is invalid&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SAXException ex) &#123;</span><br><span class="line">        throw new XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;XML document from &quot; + resource + &quot; is invalid&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ParserConfigurationException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Parser configuration exception parsing XML from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;IOException parsing XML document from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Unexpected exception parsing XML document from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、XmlBeanDefinitionReader的doLoadDocument方法"><a href="#4、XmlBeanDefinitionReader的doLoadDocument方法" class="headerlink" title="4、XmlBeanDefinitionReader的doLoadDocument方法"></a>4、XmlBeanDefinitionReader的doLoadDocument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected Document doLoadDocument(InputSource inputSource, Resource resource) throws Exception &#123;</span><br><span class="line">    return this.documentLoader.loadDocument(inputSource, getEntityResolver(), this.errorHandler,</span><br><span class="line">            getValidationModeForResource(resource), isNamespaceAware());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、XmlBeanDefinitionReader的getValidationModeForResource方法"><a href="#5、XmlBeanDefinitionReader的getValidationModeForResource方法" class="headerlink" title="5、XmlBeanDefinitionReader的getValidationModeForResource方法"></a>5、XmlBeanDefinitionReader的getValidationModeForResource方法</h4><p>获取xml验证模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected int getValidationModeForResource(Resource resource) &#123;</span><br><span class="line">    int validationModeToUse = getValidationMode();</span><br><span class="line">    //优先使用指定的验证模式</span><br><span class="line">    if (validationModeToUse != VALIDATION_AUTO) &#123;</span><br><span class="line">        return validationModeToUse;</span><br><span class="line">    &#125;</span><br><span class="line">    //自动检测，查看配置文件是否包含DOCTYPE，包含则为DTD，不包含则为XSD</span><br><span class="line">    int detectedMode = detectValidationMode(resource);</span><br><span class="line">    if (detectedMode != VALIDATION_AUTO) &#123;</span><br><span class="line">        return detectedMode;</span><br><span class="line">    &#125;</span><br><span class="line">    //默认XSD</span><br><span class="line">    return VALIDATION_XSD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法"><a href="#6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法" class="headerlink" title="6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法"></a>6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected EntityResolver getEntityResolver() &#123;</span><br><span class="line">    if (this.entityResolver == null) &#123;</span><br><span class="line">        // Determine default EntityResolver to use.</span><br><span class="line">        ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">        if (resourceLoader != null) &#123;</span><br><span class="line">            this.entityResolver = new ResourceEntityResolver(resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //默认的EntityResolver</span><br><span class="line">            this.entityResolver = new DelegatingEntityResolver(getBeanClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.entityResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、XmlBeanDefinitionReader的resolveEntity方法"><a href="#7、XmlBeanDefinitionReader的resolveEntity方法" class="headerlink" title="7、XmlBeanDefinitionReader的resolveEntity方法"></a>7、XmlBeanDefinitionReader的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException &#123;</span><br><span class="line">    if (systemId != null) &#123;</span><br><span class="line">        if (systemId.endsWith(DTD_SUFFIX)) &#123;</span><br><span class="line">            //解析dtd</span><br><span class="line">            return this.dtdResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (systemId.endsWith(XSD_SUFFIX)) &#123;</span><br><span class="line">            //解析xsd</span><br><span class="line">            return this.schemaResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、BeansDtdResolver的resolveEntity方法"><a href="#8、BeansDtdResolver的resolveEntity方法" class="headerlink" title="8、BeansDtdResolver的resolveEntity方法"></a>8、BeansDtdResolver的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//publicId -//SPRING//DTD BEAN//EN</span><br><span class="line">//systemId http://www.springframework.org/dtd/spring-beans.dtd</span><br><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws IOException &#123;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Trying to resolve XML entity with public ID [&quot; + publicId +</span><br><span class="line">                &quot;] and system ID [&quot; + systemId + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (systemId != null &amp;&amp; systemId.endsWith(DTD_EXTENSION)) &#123;</span><br><span class="line">        int lastPathSeparator = systemId.lastIndexOf(&quot;/&quot;);</span><br><span class="line">        int dtdNameStart = systemId.indexOf(DTD_NAME);</span><br><span class="line">        if (dtdNameStart &gt; lastPathSeparator) &#123;</span><br><span class="line">            //spring-beans-2.0.dtd</span><br><span class="line">            String dtdFile = DTD_FILENAME + DTD_EXTENSION;</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Trying to locate [&quot; + dtdFile + &quot;] in Spring jar on classpath&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                Resource resource = new ClassPathResource(dtdFile, getClass());</span><br><span class="line">                InputSource source = new InputSource(resource.getInputStream());</span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Found beans DTD [&quot; + systemId + &quot;] in classpath: &quot; + dtdFile);</span><br><span class="line">                &#125;</span><br><span class="line">                return source;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IOException ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Could not resolve beans DTD [&quot; + systemId + &quot;]: not found in classpath&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Use the default behavior -&gt; download from website or wherever.</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、6）PluggableSchemaResolver的resolveEntity方法"><a href="#9、接（一、6）PluggableSchemaResolver的resolveEntity方法" class="headerlink" title="9、接（一、6）PluggableSchemaResolver的resolveEntity方法"></a>9、接（一、6）PluggableSchemaResolver的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//publicId null</span><br><span class="line">//systemId http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws IOException &#123;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Trying to resolve XML entity with public id [&quot; + publicId +</span><br><span class="line">                &quot;] and system id [&quot; + systemId + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (systemId != null) &#123;</span><br><span class="line">        //从META-INF/spring.schemas中获取验证文件位置,org/springframework/beans/factory/xml/spring-beans-4.0.xsd</span><br><span class="line">        String resourceLocation = getSchemaMappings().get(systemId);</span><br><span class="line">        if (resourceLocation != null) &#123;</span><br><span class="line">            Resource resource = new ClassPathResource(resourceLocation, this.classLoader);</span><br><span class="line">            try &#123;</span><br><span class="line">                InputSource source = new InputSource(resource.getInputStream());</span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Found XML schema [&quot; + systemId + &quot;] in classpath: &quot; + resourceLocation);</span><br><span class="line">                &#125;</span><br><span class="line">                return source;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (FileNotFoundException ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Couldn&apos;t find XML schema [&quot; + systemId + &quot;]: &quot; + resource, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、默认标签解析"><a href="#二、默认标签解析" class="headerlink" title="二、默认标签解析"></a>二、默认标签解析</h3><h4 id="1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法"><a href="#1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法" class="headerlink" title="1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法"></a>1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="line">public int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    //获取解析器默认DefaultBeanDefinitionDocumentReader</span><br><span class="line">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    documentReader.setEnvironment(getEnvironment());</span><br><span class="line">    int countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    //解析xml</span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    return getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"><a href="#2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法" class="headerlink" title="2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"></a>2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) &#123;</span><br><span class="line">    this.readerContext = readerContext;</span><br><span class="line">    logger.debug(&quot;Loading bean definitions&quot;);</span><br><span class="line">    Element root = doc.getDocumentElement();</span><br><span class="line">    //解析xml</span><br><span class="line">    doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"><a href="#3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法" class="headerlink" title="3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"></a>3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void doRegisterBeanDefinitions(Element root) &#123;</span><br><span class="line">    //标签的处理器</span><br><span class="line">    BeanDefinitionParserDelegate parent = this.delegate;</span><br><span class="line">    //默认为BeanDefinitionParserDelegate</span><br><span class="line">    this.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line">    //处理profile属性，只能是默认标签</span><br><span class="line">    if (this.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">        //当前beans为profile文件</span><br><span class="line">        if (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">                    profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">            //profile不是激活文件，则不处理该beans</span><br><span class="line">            if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析前处理，留给子类实现</span><br><span class="line">    preProcessXml(root);</span><br><span class="line">    //处理当前beans</span><br><span class="line">    parseBeanDefinitions(root, this.delegate);</span><br><span class="line">    //解析后处理，留给子类实现</span><br><span class="line">    postProcessXml(root);</span><br><span class="line"></span><br><span class="line">    this.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法"><a href="#4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法" class="headerlink" title="4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法"></a>4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //根标签为默认标签</span><br><span class="line">    if (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        NodeList nl = root.getChildNodes();</span><br><span class="line">        for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            if (node instanceof Element) &#123;</span><br><span class="line">                Element ele = (Element) node;</span><br><span class="line">                if (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">                    //解析默认标签</span><br><span class="line">                    parseDefaultElement(ele, delegate);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    //解析自定义标签</span><br><span class="line">                    delegate.parseCustomElement(ele);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //解析自定义标签</span><br><span class="line">        delegate.parseCustomElement(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法"><a href="#5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法" class="headerlink" title="5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法"></a>5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //处理import标签</span><br><span class="line">    if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">        importBeanDefinitionResource(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理alias标签</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">        processAliasRegistration(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理bean标签</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">        processBeanDefinition(ele, delegate);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理beans标签,递归调用(二、4)</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">        // recurse</span><br><span class="line">        doRegisterBeanDefinitions(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法"><a href="#6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法" class="headerlink" title="6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法"></a>6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //解析元素</span><br><span class="line">    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">    if (bdHolder != null) &#123;</span><br><span class="line">        //解析子节点下的自定义属性和标签</span><br><span class="line">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册bdHolder</span><br><span class="line">            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to register bean definition with name &apos;&quot; +</span><br><span class="line">                    bdHolder.getBeanName() + &quot;&apos;&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        // Send registration event.</span><br><span class="line">        //向监听器发送，该bean注册完成事件</span><br><span class="line">        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"><a href="#7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法" class="headerlink" title="7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"></a>7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) &#123;</span><br><span class="line">    return parseBeanDefinitionElement(ele, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) &#123;</span><br><span class="line">    //获取id属性</span><br><span class="line">    String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">    //获取name属性</span><br><span class="line">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    //处理别名</span><br><span class="line">    List&lt;String&gt; aliases = new ArrayList&lt;String&gt;();</span><br><span class="line">    if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">        aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">    &#125;</span><br><span class="line">    //beanName默认为id</span><br><span class="line">    String beanName = id;</span><br><span class="line">    if (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">        beanName = aliases.remove(0);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;No XML &apos;id&apos; specified - using &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos; as bean name and &quot; + aliases + &quot; as aliases&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //不是嵌套bean，检查是否重名</span><br><span class="line">    if (containingBean == null) &#123;</span><br><span class="line">        checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析bean的子标签</span><br><span class="line">    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">    if (beanDefinition != null) &#123;</span><br><span class="line">        //没有beanName则生成一个，不是嵌套bean，默认获取全类名。与注解容器中不同。</span><br><span class="line">        if (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (containingBean != null) &#123;</span><br><span class="line">                    beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                            beanDefinition, this.readerContext.getRegistry(), true);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    beanName = this.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">                    // Register an alias for the plain bean class name, if still possible,</span><br><span class="line">                    // if the generator returned the class name plus a suffix.</span><br><span class="line">                    // This is expected for Spring 1.2/2.0 backwards compatibility.</span><br><span class="line">                    String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">                    if (beanClassName != null &amp;&amp;</span><br><span class="line">                            beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                            !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                        aliases.add(beanClassName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Neither XML &apos;id&apos; nor &apos;name&apos; specified - &quot; +</span><br><span class="line">                            &quot;using generated bean name [&quot; + beanName + &quot;]&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex) &#123;</span><br><span class="line">                error(ex.getMessage(), ele);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">        //beanDefinition放入BeanDefinitionHolder中，并返回</span><br><span class="line">        return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"><a href="#8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法" class="headerlink" title="8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"></a>8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public AbstractBeanDefinition parseBeanDefinitionElement(</span><br><span class="line">        Element ele, String beanName, BeanDefinition containingBean) &#123;</span><br><span class="line"></span><br><span class="line">    this.parseState.push(new BeanEntry(beanName));</span><br><span class="line">    //解析class属性</span><br><span class="line">    String className = null;</span><br><span class="line">    if (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //解析parent属性</span><br><span class="line">        String parent = null;</span><br><span class="line">        if (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">            parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建用于存放属性的AbstractBeanDefinition，默认为GenericBeanDefinition</span><br><span class="line">        AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">        //解析bean的各个属性</span><br><span class="line">        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">        //设置描述</span><br><span class="line">        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line">        //解析元数据</span><br><span class="line">        parseMetaElements(ele, bd);</span><br><span class="line">        //解析lookup-method属性</span><br><span class="line">        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        //解析replaced-method属性</span><br><span class="line">        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        //解析构造函数参数</span><br><span class="line">        parseConstructorArgElements(ele, bd);</span><br><span class="line">        //解析property子元素</span><br><span class="line">        parsePropertyElements(ele, bd);</span><br><span class="line">        //解析qualifier子元素</span><br><span class="line">        parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">        bd.setResource(this.readerContext.getResource());</span><br><span class="line">        bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">        return bd;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        error(&quot;Bean class [&quot; + className + &quot;] not found&quot;, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (NoClassDefFoundError err) &#123;</span><br><span class="line">        error(&quot;Class that bean class [&quot; + className + &quot;] depends on not found&quot;, ele, err);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        error(&quot;Unexpected failure during bean definition parsing&quot;, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法"><a href="#9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法" class="headerlink" title="9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法"></a>9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,</span><br><span class="line">        BeanDefinition containingBean, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    //不支持singleton属性</span><br><span class="line">    if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</span><br><span class="line">        error(&quot;Old 1.x &apos;singleton&apos; attribute in use - upgrade to &apos;scope&apos; declaration&quot;, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析scope属性</span><br><span class="line">    else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    //嵌套bean，使用外部类的scope</span><br><span class="line">    else if (containingBean != null) &#123;</span><br><span class="line">        // Take default from containing bean in case of an inner bean definition.</span><br><span class="line">        bd.setScope(containingBean.getScope());</span><br><span class="line">    &#125;</span><br><span class="line">    //解析abstract属性</span><br><span class="line">    if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析lazy-init属性</span><br><span class="line">    String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE);</span><br><span class="line">    if (DEFAULT_VALUE.equals(lazyInit)) &#123;</span><br><span class="line">        lazyInit = this.defaults.getLazyInit();</span><br><span class="line">    &#125;</span><br><span class="line">    bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span><br><span class="line">    //解析autowire属性</span><br><span class="line">    String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE);</span><br><span class="line">    bd.setAutowireMode(getAutowireMode(autowire));</span><br><span class="line">    //解析dependency-check属性</span><br><span class="line">    String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE);</span><br><span class="line">    bd.setDependencyCheck(getDependencyCheck(dependencyCheck));</span><br><span class="line">    //解析depends-on属性</span><br><span class="line">    if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</span><br><span class="line">        String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE);</span><br><span class="line">        bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析autowire-candidate属性</span><br><span class="line">    String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE);</span><br><span class="line">    if (&quot;&quot;.equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) &#123;</span><br><span class="line">        String candidatePattern = this.defaults.getAutowireCandidates();</span><br><span class="line">        if (candidatePattern != null) &#123;</span><br><span class="line">            String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern);</span><br><span class="line">            bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析primary属性</span><br><span class="line">    if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析init-method属性</span><br><span class="line">    if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE);</span><br><span class="line">        if (!&quot;&quot;.equals(initMethodName)) &#123;</span><br><span class="line">            bd.setInitMethodName(initMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (this.defaults.getInitMethod() != null) &#123;</span><br><span class="line">            bd.setInitMethodName(this.defaults.getInitMethod());</span><br><span class="line">            bd.setEnforceInitMethod(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析destroy-method属性</span><br><span class="line">    if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE);</span><br><span class="line">        if (!&quot;&quot;.equals(destroyMethodName)) &#123;</span><br><span class="line">            bd.setDestroyMethodName(destroyMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (this.defaults.getDestroyMethod() != null) &#123;</span><br><span class="line">            bd.setDestroyMethodName(this.defaults.getDestroyMethod());</span><br><span class="line">            bd.setEnforceDestroyMethod(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析factory-method属性</span><br><span class="line">    if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析factory-bean属性</span><br><span class="line">    if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return bd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法"><a href="#10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法" class="headerlink" title="10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法"></a>10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void parseMetaElements(Element ele, BeanMetadataAttributeAccessor attributeAccessor) &#123;</span><br><span class="line">    NodeList nl = ele.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //该元素为meta</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">            Element metaElement = (Element) node;</span><br><span class="line">            String key = metaElement.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">            String value = metaElement.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">            BeanMetadataAttribute attribute = new BeanMetadataAttribute(key, value);</span><br><span class="line">            attribute.setSource(extractSource(metaElement));</span><br><span class="line">            //放入父类AttributeAccessorSupport的attributes中</span><br><span class="line">            attributeAccessor.addMetadataAttribute(attribute);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元数据配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;demo&quot; class=&quot;com.demo.Demo&quot;&gt;</span><br><span class="line">    &lt;meta key=&quot;testStr&quot; value=&quot;123456&quot; /&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法"><a href="#11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法" class="headerlink" title="11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法"></a>11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //元素为lookup-method</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            String methodName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">            String beanRef = ele.getAttribute(BEAN_ELEMENT);</span><br><span class="line">            //创建一个LookupOverride加入AbstractBeanDefinition的methodOverrides中</span><br><span class="line">            LookupOverride override = new LookupOverride(methodName, beanRef);</span><br><span class="line">            override.setSource(extractSource(ele));</span><br><span class="line">            overrides.addOverride(override);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lookup-method配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个水果类</span><br><span class="line">public class Fruit &#123;</span><br><span class="line">    public Fruit() &#123;</span><br><span class="line">        System.out.println(&quot;I got Fruit&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 苹果</span><br><span class="line">public class Apple extends Fruit &#123;</span><br><span class="line">    public Apple() &#123;</span><br><span class="line">        System.out.println(&quot;I got a fresh apple&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 香蕉</span><br><span class="line">public class Bananer extends Fruit &#123;</span><br><span class="line">    public Bananer () &#123;</span><br><span class="line">        System.out.println(&quot;I got a  fresh bananer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 水果盘，可以拿到水果</span><br><span class="line">public abstract class FruitPlate&#123;</span><br><span class="line">    // 抽象方法获取新鲜水果</span><br><span class="line">    protected abstract Fruit getFruit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;apple&quot; class=&quot;cn.com.willchen.test.di.Apple&quot; scope=&quot;prototype&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;bananer&quot; class=&quot;cn.com.willchen.test.di.Bananer &quot; scope=&quot;prototype&quot;/&gt;</span><br><span class="line">&lt;!-- getFruit方法返回apple --&gt;</span><br><span class="line">&lt;bean id=&quot;fruitPlate1&quot; class=&quot;cn.com.willchen.test.di.FruitPlate&quot;&gt;</span><br><span class="line">    &lt;lookup-method name=&quot;getFruit&quot; bean=&quot;apple&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- getFruit方法返回bananer --&gt;</span><br><span class="line">&lt;bean id=&quot;fruitPlate2&quot; class=&quot;cn.com.willchen.test.di.FruitPlate&quot;&gt;</span><br><span class="line">    &lt;lookup-method name=&quot;getFruit&quot; bean=&quot;bananer&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法"><a href="#12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法" class="headerlink" title="12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法"></a>12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //元素为replaced-method</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) &#123;</span><br><span class="line">            Element replacedMethodEle = (Element) node;</span><br><span class="line">            //要替换的旧的方法</span><br><span class="line">            String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">            //替代该方法的类</span><br><span class="line">            String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE);</span><br><span class="line">            ReplaceOverride replaceOverride = new ReplaceOverride(name, callback);</span><br><span class="line">            // Look for arg-type match elements.</span><br><span class="line">            //记录参数</span><br><span class="line">            List&lt;Element&gt; argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT);</span><br><span class="line">            for (Element argTypeEle : argTypeEles) &#123;</span><br><span class="line">                String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE);</span><br><span class="line">                match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle));</span><br><span class="line">                if (StringUtils.hasText(match)) &#123;</span><br><span class="line">                    replaceOverride.addTypeIdentifier(match);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            replaceOverride.setSource(extractSource(replacedMethodEle));</span><br><span class="line">            //添加到AbstractBeanDefinition的methodOverrides中</span><br><span class="line">            overrides.addOverride(replaceOverride);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>replaced-method配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class TestChangMethod&#123;</span><br><span class="line">    public void changMe()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">public class TestMethodReplacer implements MethodReplacer&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object reimplements(Object obj,Method method,Object[] args) throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;我替换了原有的方法&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;testChangeMethod&quot; class=&quot;com.demo3.TestChangeMethod&quot;&gt;&lt;</span><br><span class="line">    &lt;replaced-method name=&quot;changeMe&quot; replacer=&quot;replacer&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;replacer&quot; class=&quot;com.demo3.TestMethodReplacer&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法"><a href="#13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法" class="headerlink" title="13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法"></a>13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) &#123;</span><br><span class="line">            //解析constructor-arg</span><br><span class="line">            parseConstructorArgElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public void parseConstructorArgElement(Element ele, BeanDefinition bd) &#123;</span><br><span class="line">    //index属性</span><br><span class="line">    String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);</span><br><span class="line">    //type属性</span><br><span class="line">    String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    //name属性</span><br><span class="line">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    if (StringUtils.hasLength(indexAttr)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int index = Integer.parseInt(indexAttr);</span><br><span class="line">            if (index &lt; 0) &#123;</span><br><span class="line">                error(&quot;&apos;index&apos; cannot be lower than 0&quot;, ele);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    this.parseState.push(new ConstructorArgumentEntry(index));</span><br><span class="line">                    //解析属性元素</span><br><span class="line">                    Object value = parsePropertyValue(ele, bd, null);</span><br><span class="line">                    ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">                    if (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                        valueHolder.setType(typeAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                        valueHolder.setName(nameAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    valueHolder.setSource(extractSource(ele));</span><br><span class="line">                    //不允许重复指定参数</span><br><span class="line">                    if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) &#123;</span><br><span class="line">                        error(&quot;Ambiguous constructor-arg entries for index &quot; + index, ele);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        //添加构造器属性值</span><br><span class="line">                        bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    this.parseState.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (NumberFormatException ex) &#123;</span><br><span class="line">            error(&quot;Attribute &apos;index&apos; of tag &apos;constructor-arg&apos; must be an integer&quot;, ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.parseState.push(new ConstructorArgumentEntry());</span><br><span class="line">            //解析属性元素</span><br><span class="line">            Object value = parsePropertyValue(ele, bd, null);</span><br><span class="line">            ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">            if (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                valueHolder.setType(typeAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                valueHolder.setName(nameAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            valueHolder.setSource(extractSource(ele));</span><br><span class="line">            //添加构造器属性值</span><br><span class="line">            bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            this.parseState.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constructor-arg配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.rc.sp.Student&quot;&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;id&quot; value=&quot;1&quot;/&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;name&quot; value=&quot;student&quot;/&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;dream&quot;&gt;  </span><br><span class="line">        &lt;list&gt;  </span><br><span class="line">            &lt;value&gt;soldier&lt;/value&gt;  </span><br><span class="line">            &lt;value&gt;scientist&lt;/value&gt;  </span><br><span class="line">            &lt;value&gt;pilot&lt;/value&gt;  </span><br><span class="line">        &lt;/list&gt;  </span><br><span class="line">    &lt;/constructor-arg&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;score&quot;&gt;  </span><br><span class="line">        &lt;map&gt;  </span><br><span class="line">            &lt;entry key=&quot;math&quot; value=&quot;90&quot;/&gt;  </span><br><span class="line">            &lt;entry key=&quot;english&quot; value=&quot;85&quot;/&gt;  </span><br><span class="line">        &lt;/map&gt;  </span><br><span class="line">    &lt;/constructor-arg&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;graduation&quot; value=&quot;false&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="14、BeanDefinitionParserDelegate的parsePropertyValue方法"><a href="#14、BeanDefinitionParserDelegate的parsePropertyValue方法" class="headerlink" title="14、BeanDefinitionParserDelegate的parsePropertyValue方法"></a>14、BeanDefinitionParserDelegate的parsePropertyValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) &#123;</span><br><span class="line">    String elementName = (propertyName != null) ?</span><br><span class="line">                    &quot;&lt;property&gt; element for property &apos;&quot; + propertyName + &quot;&apos;&quot; :</span><br><span class="line">                    &quot;&lt;constructor-arg&gt; element&quot;;</span><br><span class="line"></span><br><span class="line">    // Should only have one child element: ref, value, list, etc.</span><br><span class="line">    NodeList nl = ele.getChildNodes();</span><br><span class="line">    Element subElement = null;</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //description和meta不处理</span><br><span class="line">        if (node instanceof Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class="line">                !nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">            // Child element is what we&apos;re looking for.</span><br><span class="line">            if (subElement != null) &#123;</span><br><span class="line">                error(elementName + &quot; must not contain more than one sub-element&quot;, ele);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                //子元素</span><br><span class="line">                subElement = (Element) node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析constructor-arg的ref属性</span><br><span class="line">    boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class="line">    //解析constructor-arg的value属性</span><br><span class="line">    boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">    //不能同时有ref和value</span><br><span class="line">    if ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</span><br><span class="line">            ((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != null)) &#123;</span><br><span class="line">        error(elementName +</span><br><span class="line">                &quot; is only allowed to contain either &apos;ref&apos; attribute OR &apos;value&apos; attribute OR sub-element&quot;, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //ref属性</span><br><span class="line">    if (hasRefAttribute) &#123;</span><br><span class="line">        String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class="line">        if (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">            error(elementName + &quot; contains empty &apos;ref&apos; attribute&quot;, ele);</span><br><span class="line">        &#125;</span><br><span class="line">        RuntimeBeanReference ref = new RuntimeBeanReference(refName);</span><br><span class="line">        ref.setSource(extractSource(ele));</span><br><span class="line">        return ref;</span><br><span class="line">    &#125;</span><br><span class="line">    //value属性</span><br><span class="line">    else if (hasValueAttribute) &#123;</span><br><span class="line">        TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class="line">        valueHolder.setSource(extractSource(ele));</span><br><span class="line">        return valueHolder;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析子元素</span><br><span class="line">    else if (subElement != null) &#123;</span><br><span class="line">        return parsePropertySubElement(subElement, bd);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Neither child element nor &quot;ref&quot; or &quot;value&quot; attribute found.</span><br><span class="line">        error(elementName + &quot; must specify a ref or value&quot;, ele);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"><a href="#15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法" class="headerlink" title="15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"></a>15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void parsePropertyElements(Element beanEle, BeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class="line">            parsePropertyElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void parsePropertyElement(Element ele, BeanDefinition bd) &#123;</span><br><span class="line">    //获取name属性</span><br><span class="line">    String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">        error(&quot;Tag &apos;property&apos; must have a &apos;name&apos; attribute&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.parseState.push(new PropertyEntry(propertyName));</span><br><span class="line">    try &#123;</span><br><span class="line">        if (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">            error(&quot;Multiple &apos;property&apos; definitions for property &apos;&quot; + propertyName + &quot;&apos;&quot;, ele);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析属性元素，与(一、14)相同</span><br><span class="line">        Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line">        PropertyValue pv = new PropertyValue(propertyName, val);</span><br><span class="line">        parseMetaElements(ele, pv);</span><br><span class="line">        pv.setSource(extractSource(ele));</span><br><span class="line">        bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>property配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;cn.itcast.c_property.User&quot; scope=&quot;prototype&quot;&gt;  </span><br><span class="line">    &lt;property name=&quot;id&quot; value=&quot;101&quot;&gt;&lt;/property&gt;  </span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;Jack&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"><a href="#16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法" class="headerlink" title="16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"></a>16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ELEMENT)) &#123;</span><br><span class="line">            parseQualifierElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    //type属性</span><br><span class="line">    String typeName = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasLength(typeName)) &#123;</span><br><span class="line">        error(&quot;Tag &apos;qualifier&apos; must have a &apos;type&apos; attribute&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.parseState.push(new QualifierEntry(typeName));</span><br><span class="line">    try &#123;</span><br><span class="line">        AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName);</span><br><span class="line">        qualifier.setSource(extractSource(ele));</span><br><span class="line">        String value = ele.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">        if (StringUtils.hasLength(value)) &#123;</span><br><span class="line">            qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value);</span><br><span class="line">        &#125;</span><br><span class="line">        NodeList nl = ele.getChildNodes();</span><br><span class="line">        for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) &#123;</span><br><span class="line">                Element attributeEle = (Element) node;</span><br><span class="line">                String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">                String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(attributeName) &amp;&amp; StringUtils.hasLength(attributeValue)) &#123;</span><br><span class="line">                    BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue);</span><br><span class="line">                    attribute.setSource(extractSource(attributeEle));</span><br><span class="line">                    qualifier.addMetadataAttribute(attribute);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    error(&quot;Qualifier &apos;attribute&apos; tag must have a &apos;name&apos; and &apos;value&apos;&quot;, attributeEle);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //添加限定标识符</span><br><span class="line">        bd.addQualifier(qualifier);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qualifier配置示例，限定标识符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class TestBean &#123;  </span><br><span class="line">      </span><br><span class="line">    private DataSource dataSource;  </span><br><span class="line">      </span><br><span class="line">    @Autowired  </span><br><span class="line">    public void initDataSource(@Qualifier(&quot;oracleDataSource&quot;) DataSource dataSource)&#123;  </span><br><span class="line">        this.dataSource = dataSource;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    public DataSource getDataSource() &#123;  </span><br><span class="line">        return dataSource;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;mysqlDataSourceBean&quot; class=&quot;com.bean.MysqlDriveManagerDataSource&quot;&gt;  </span><br><span class="line">    &lt;qualifier value=&quot;mysqlDataSource&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;bean id=&quot;oracleDataSourceBean&quot; class=&quot;com.bean.OracleDriveManagerDataSource&quot;&gt;  </span><br><span class="line">    &lt;qualifier value=&quot;oracleDataSource&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法"><a href="#16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法" class="headerlink" title="16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法"></a>16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void registerBeanDefinition(</span><br><span class="line">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    // Register bean definition under primary name.</span><br><span class="line">    String beanName = definitionHolder.getBeanName();</span><br><span class="line">    //使用beanName注册</span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">    //注册别名</span><br><span class="line">    // Register aliases for bean name, if any.</span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    if (aliases != null) &#123;</span><br><span class="line">        for (String alias : aliases) &#123;</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、DefaultListableBeanFactory的registerBeanDefinition方法"><a href="#17、DefaultListableBeanFactory的registerBeanDefinition方法" class="headerlink" title="17、DefaultListableBeanFactory的registerBeanDefinition方法"></a>17、DefaultListableBeanFactory的registerBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);</span><br><span class="line">    Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);</span><br><span class="line">    //校验methodOverrides不能与工厂方法并存，或者methodOverrides对应的方法不存在</span><br><span class="line">    if (beanDefinition instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Validation of bean definition failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">    oldBeanDefinition = this.beanDefinitionMap.get(beanName);</span><br><span class="line">    if (oldBeanDefinition != null) &#123;</span><br><span class="line">        //已存在且不允许被覆盖，抛出异常</span><br><span class="line">        if (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Cannot register bean definition [&quot; + beanDefinition + &quot;] for bean &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos;: There is already [&quot; + oldBeanDefinition + &quot;] bound.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            // e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span><br><span class="line">            if (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">                this.logger.warn(&quot;Overriding user-defined bean definition for bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; with a framework-generated bean definition: replacing [&quot; +</span><br><span class="line">                        oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">                this.logger.info(&quot;Overriding bean definition for bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos;: replacing [&quot; + oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //记录beanName</span><br><span class="line">        this.beanDefinitionNames.add(beanName);</span><br><span class="line">        this.manualSingletonNames.remove(beanName);</span><br><span class="line">        this.frozenBeanDefinitionNames = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //注册beanDefinition</span><br><span class="line">    this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line"></span><br><span class="line">    if (oldBeanDefinition != null || containsSingleton(beanName)) &#123;</span><br><span class="line">        //重置缓存</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（二、16）SimpleAliasRegistry的registerAlias方法"><a href="#18、接（二、16）SimpleAliasRegistry的registerAlias方法" class="headerlink" title="18、接（二、16）SimpleAliasRegistry的registerAlias方法"></a>18、接（二、16）SimpleAliasRegistry的registerAlias方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerAlias(String name, String alias) &#123;</span><br><span class="line">    Assert.hasText(name, &quot;&apos;name&apos; must not be empty&quot;);</span><br><span class="line">    Assert.hasText(alias, &quot;&apos;alias&apos; must not be empty&quot;);</span><br><span class="line">    //别名与beanName相同，则删除该别名</span><br><span class="line">    if (alias.equals(name)) &#123;</span><br><span class="line">        this.aliasMap.remove(alias);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //检验别名是否重复</span><br><span class="line">        if (!allowAliasOverriding()) &#123;</span><br><span class="line">            String registeredName = this.aliasMap.get(alias);</span><br><span class="line">            if (registeredName != null &amp;&amp; !registeredName.equals(name)) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;Cannot register alias &apos;&quot; + alias + &quot;&apos; for name &apos;&quot; +</span><br><span class="line">                        name + &quot;&apos;: It is already registered for name &apos;&quot; + registeredName + &quot;&apos;.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //A-B存在的情况下，不能存在B-A以及B-C-A</span><br><span class="line">        checkForAliasCircle(name, alias);</span><br><span class="line">        //注册别名</span><br><span class="line">        this.aliasMap.put(alias, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法"><a href="#19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法" class="headerlink" title="19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法"></a>19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">protected void processAliasRegistration(Element ele) &#123;</span><br><span class="line">    String name = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    String alias = ele.getAttribute(ALIAS_ATTRIBUTE);</span><br><span class="line">    boolean valid = true;</span><br><span class="line">    if (!StringUtils.hasText(name)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Name must not be empty&quot;, ele);</span><br><span class="line">        valid = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!StringUtils.hasText(alias)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Alias must not be empty&quot;, ele);</span><br><span class="line">        valid = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (valid) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册别名</span><br><span class="line">            getReaderContext().getRegistry().registerAlias(name, alias);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to register alias &apos;&quot; + alias +</span><br><span class="line">                    &quot;&apos; for bean with name &apos;&quot; + name + &quot;&apos;&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //通知监听器，别名注册完成事件</span><br><span class="line">        getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias标签配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;some&quot; class=&quot;src.com.Some&quot;/&gt;</span><br><span class="line">&lt;alias name=&quot;some&quot; alias=&quot;someJava,oneBean,twoBean&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法"><a href="#20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法" class="headerlink" title="20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法"></a>20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">protected void importBeanDefinitionResource(Element ele) &#123;</span><br><span class="line">    //获取resource属性</span><br><span class="line">    String location = ele.getAttribute(RESOURCE_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasText(location)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Resource location must not be empty&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Resolve system properties: e.g. &quot;$&#123;user.dir&#125;&quot;</span><br><span class="line">    //解析系统属性，如&quot;$&#123;user.dir&#125;&quot;</span><br><span class="line">    location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class="line"></span><br><span class="line">    Set&lt;Resource&gt; actualResources = new LinkedHashSet&lt;Resource&gt;(4);</span><br><span class="line"></span><br><span class="line">    // Discover whether the location is an absolute or relative URI</span><br><span class="line">    boolean absoluteLocation = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        //判断location，是绝对uri还是相对uri</span><br><span class="line">        absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (URISyntaxException ex) &#123;</span><br><span class="line">        // cannot convert to an URI, considering the location relative</span><br><span class="line">        // unless it is the well-known Spring prefix &quot;classpath*:&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Absolute or relative?</span><br><span class="line">    //绝对uri直接加载配置文件</span><br><span class="line">    if (absoluteLocation) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Imported &quot; + importCount + &quot; bean definitions from URL location [&quot; + location + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(</span><br><span class="line">                    &quot;Failed to import bean definitions from URL location [&quot; + location + &quot;]&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //相对地址加载</span><br><span class="line">    else &#123;</span><br><span class="line">        // No URL -&gt; considering resource location as relative to the current file.</span><br><span class="line">        try &#123;</span><br><span class="line">            int importCount;</span><br><span class="line">            Resource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class="line">            if (relativeResource.exists()) &#123;</span><br><span class="line">                importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class="line">                actualResources.add(relativeResource);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                String baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class="line">                importCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class="line">                        StringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Imported &quot; + importCount + &quot; bean definitions from relative location [&quot; + location + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to resolve current resource location&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to import bean definitions from relative location [&quot; + location + &quot;]&quot;,</span><br><span class="line">                    ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //监听器处理加载的文件</span><br><span class="line">    Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()]);</span><br><span class="line">    getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import标签配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;systemContext.xml&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="三、自定义标签解析"><a href="#三、自定义标签解析" class="headerlink" title="三、自定义标签解析"></a>三、自定义标签解析</h3><h4 id="1、自定义标签示例"><a href="#1、自定义标签示例" class="headerlink" title="1、自定义标签示例"></a>1、自定义标签示例</h4><p>一个普通的javaBean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;    </span><br><span class="line">    private String id;    </span><br><span class="line">    private String userName;    </span><br><span class="line">    private String email;    </span><br><span class="line">    public String getId() &#123;    </span><br><span class="line">        return id;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setId(String id) &#123;    </span><br><span class="line">        this.id = id;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public String getUserName() &#123;    </span><br><span class="line">        return userName;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setUserName(String userName) &#123;    </span><br><span class="line">        this.userName = userName;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public String getEmail() &#123;    </span><br><span class="line">        return email;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setEmail(String email) &#123;    </span><br><span class="line">        this.email = email;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class UserBeanDefinitionParser extends AbstractSingleBeanDefinitionParser &#123;    </span><br><span class="line">    @Override    </span><br><span class="line">    protected Class&lt;?&gt; getBeanClass(Element element) &#123;    </span><br><span class="line">        return User.class;    </span><br><span class="line">    &#125;    </span><br><span class="line">    @Override    </span><br><span class="line">    protected void doParse(Element element, BeanDefinitionBuilder builder) &#123;    </span><br><span class="line">        String userName=element.getAttribute(&quot;userName&quot;);    </span><br><span class="line">        String email=element.getAttribute(&quot;email&quot;);    </span><br><span class="line">        if(StringUtils.hasText(userName))&#123;    </span><br><span class="line">            builder.addPropertyValue(&quot;userName&quot;, userName);    </span><br><span class="line">        &#125;    </span><br><span class="line">        if(StringUtils.hasText(email))&#123;    </span><br><span class="line">            builder.addPropertyValue(&quot;email&quot;, email);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册解析器的Handler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MyUserNamespaceHandler extends NamespaceHandlerSupport &#123;    </span><br><span class="line">    </span><br><span class="line">    @Override    </span><br><span class="line">    public void init() &#123;    </span><br><span class="line">        registerBeanDefinitionParser(&quot;user&quot;,new UserBeanDefinitionParser());    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>xml  schema definition  (xsd)文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    </span><br><span class="line">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;    </span><br><span class="line">    xmlns=&quot;http://www.wjs.com/schema/user&quot; targetNamespace=&quot;http://www.wjs.com/schema/user&quot;    </span><br><span class="line">    elementFormDefault=&quot;qualified&quot;&gt;    </span><br><span class="line">    &lt;xsd:element name=&quot;user&quot;&gt;    </span><br><span class="line">        &lt;xsd:complexType&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;id&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;userName&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;email&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">        &lt;/xsd:complexType&gt;    </span><br><span class="line">    &lt;/xsd:element&gt;    </span><br><span class="line">&lt;/xsd:schema&gt;</span><br></pre></td></tr></table></figure></p><p>spring.handlers中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.wjs.com/schema/user=com.wjs.cosumertag.MyUserNamespaceHandler</span><br></pre></td></tr></table></figure></p><p>spring.schemas中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.wjs.com/schema/user.xsd=META-INF/spring-user.xsd</span><br></pre></td></tr></table></figure></p><p>spring 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    </span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    </span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    </span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    </span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    </span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; </span><br><span class="line">    &lt;!-- 自定义标签的命名空间 --&gt;   </span><br><span class="line">    xmlns:myTag=&quot;http://www.wjs.com/schema/user&quot;   </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd    </span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd    </span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd    </span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd    </span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd </span><br><span class="line">        &lt;!--指定了命名空间对应的Schema文档--&gt;   </span><br><span class="line">        http://www.wjs.com/schema/user http://www.wjs.com/schema/user.xsd&quot;&gt;    </span><br><span class="line">     </span><br><span class="line">    &lt;myTag:user id=&quot;testBean&quot; userName=&quot;name&quot; email=&quot;wjs@163.com&quot;/&gt;    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法"><a href="#2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法" class="headerlink" title="2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法"></a>2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parseCustomElement(Element ele) &#123;</span><br><span class="line">    return parseCustomElement(ele, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) &#123;</span><br><span class="line">    //获取命名空间</span><br><span class="line">    String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">    //根据命名空间获取对应处理器</span><br><span class="line">    NamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        error(&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot; + namespaceUri + &quot;]&quot;, ele);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //用自定义的处理器解析</span><br><span class="line">    return handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultNamespaceHandlerResolver的resolve方法"><a href="#3、DefaultNamespaceHandlerResolver的resolve方法" class="headerlink" title="3、DefaultNamespaceHandlerResolver的resolve方法"></a>3、DefaultNamespaceHandlerResolver的resolve方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public NamespaceHandler resolve(String namespaceUri) &#123;</span><br><span class="line">    //获取handler映射</span><br><span class="line">    Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class="line">    //根据命名空间找到对应的信息</span><br><span class="line">    Object handlerOrClassName = handlerMappings.get(namespaceUri);</span><br><span class="line">    if (handlerOrClassName == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (handlerOrClassName instanceof NamespaceHandler) &#123;</span><br><span class="line">        return (NamespaceHandler) handlerOrClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        String className = (String) handlerOrClassName;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; handlerClass = ClassUtils.forName(className, this.classLoader);</span><br><span class="line">            if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;Class [&quot; + className + &quot;] for namespace [&quot; + namespaceUri +</span><br><span class="line">                        &quot;] does not implement the [&quot; + NamespaceHandler.class.getName() + &quot;] interface&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //初始化类</span><br><span class="line">            NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br><span class="line">            //初始化方法，注册解析器</span><br><span class="line">            namespaceHandler.init();</span><br><span class="line">            //记录缓存</span><br><span class="line">            handlerMappings.put(namespaceUri, namespaceHandler);</span><br><span class="line">            return namespaceHandler;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new FatalBeanException(&quot;NamespaceHandler class [&quot; + className + &quot;] for namespace [&quot; +</span><br><span class="line">                    namespaceUri + &quot;] not found&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (LinkageError err) &#123;</span><br><span class="line">            throw new FatalBeanException(&quot;Invalid NamespaceHandler class [&quot; + className + &quot;] for namespace [&quot; +</span><br><span class="line">                    namespaceUri + &quot;]: problem with handler class file or dependent class&quot;, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultNamespaceHandlerResolver的getHandlerMappings方法"><a href="#4、DefaultNamespaceHandlerResolver的getHandlerMappings方法" class="headerlink" title="4、DefaultNamespaceHandlerResolver的getHandlerMappings方法"></a>4、DefaultNamespaceHandlerResolver的getHandlerMappings方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String, Object&gt; getHandlerMappings() &#123;</span><br><span class="line">    if (this.handlerMappings == null) &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (this.handlerMappings == null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //从&quot;META-INF/spring.handlers&quot;中加载命名空间和Handler的映射</span><br><span class="line">                    Properties mappings =Handler的映射</span><br><span class="line">                            PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader);</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(&quot;Loaded NamespaceHandler mappings: &quot; + mappings);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Map&lt;String, Object&gt; handlerMappings = new ConcurrentHashMap&lt;String, Object&gt;(mappings.size());</span><br><span class="line">                    CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings);</span><br><span class="line">                    this.handlerMappings = handlerMappings;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (IOException ex) &#123;</span><br><span class="line">                    throw new IllegalStateException(</span><br><span class="line">                            &quot;Unable to load NamespaceHandler mappings from location [&quot; + this.handlerMappingsLocation + &quot;]&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.handlerMappings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、NamespaceHandlerSupport的parse方法"><a href="#5、NamespaceHandlerSupport的parse方法" class="headerlink" title="5、NamespaceHandlerSupport的parse方法"></a>5、NamespaceHandlerSupport的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //获取解析器，并解析</span><br><span class="line">    return findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、NamespaceHandlerSupport的findParserForElement方法"><a href="#6、NamespaceHandlerSupport的findParserForElement方法" class="headerlink" title="6、NamespaceHandlerSupport的findParserForElement方法"></a>6、NamespaceHandlerSupport的findParserForElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //元素名 myTag:user 中为 user</span><br><span class="line">    String localName = parserContext.getDelegate().getLocalName(element);</span><br><span class="line">    //获取user的解析器</span><br><span class="line">    BeanDefinitionParser parser = this.parsers.get(localName);</span><br><span class="line">    if (parser == null) &#123;</span><br><span class="line">        parserContext.getReaderContext().fatal(</span><br><span class="line">                &quot;Cannot locate BeanDefinitionParser for element [&quot; + localName + &quot;]&quot;, element);</span><br><span class="line">    &#125;</span><br><span class="line">    return parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、2）AbstractBeanDefinitionParser的parse方法"><a href="#7、接（三、2）AbstractBeanDefinitionParser的parse方法" class="headerlink" title="7、接（三、2）AbstractBeanDefinitionParser的parse方法"></a>7、接（三、2）AbstractBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">p@Override</span><br><span class="line">public final BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //解析bean</span><br><span class="line">    AbstractBeanDefinition definition = parseInternal(element, parserContext);</span><br><span class="line">    if (definition != null &amp;&amp; !parserContext.isNested()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String id = resolveId(element, definition, parserContext);</span><br><span class="line">            if (!StringUtils.hasText(id)) &#123;</span><br><span class="line">                parserContext.getReaderContext().error(</span><br><span class="line">                        &quot;Id is required for element &apos;&quot; + parserContext.getDelegate().getLocalName(element)</span><br><span class="line">                                + &quot;&apos; when used as a top-level tag&quot;, element);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] aliases = null;</span><br><span class="line">            if (shouldParseNameAsAliases()) &#123;</span><br><span class="line">                String name = element.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(name)) &#123;</span><br><span class="line">                    aliases = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, id, aliases);</span><br><span class="line">            registerBeanDefinition(holder, parserContext.getRegistry());</span><br><span class="line">            if (shouldFireEvents()) &#123;</span><br><span class="line">                BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);</span><br><span class="line">                postProcessComponentDefinition(componentDefinition);</span><br><span class="line">                parserContext.registerComponent(componentDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(ex.getMessage(), element);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（三、2）AbstractBeanDefinitionParser的parse方法"><a href="#8、接（三、2）AbstractBeanDefinitionParser的parse方法" class="headerlink" title="8、接（三、2）AbstractBeanDefinitionParser的parse方法"></a>8、接（三、2）AbstractBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">p@Override</span><br><span class="line">public final BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //解析bean</span><br><span class="line">    AbstractBeanDefinition definition = parseInternal(element, parserContext);</span><br><span class="line">    if (definition != null &amp;&amp; !parserContext.isNested()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取beanName</span><br><span class="line">            String id = resolveId(element, definition, parserContext);</span><br><span class="line">            if (!StringUtils.hasText(id)) &#123;</span><br><span class="line">                parserContext.getReaderContext().error(</span><br><span class="line">                        &quot;Id is required for element &apos;&quot; + parserContext.getDelegate().getLocalName(element)</span><br><span class="line">                                + &quot;&apos; when used as a top-level tag&quot;, element);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] aliases = null;</span><br><span class="line">            if (shouldParseNameAsAliases()) &#123;</span><br><span class="line">                String name = element.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(name)) &#123;</span><br><span class="line">                    aliases = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //注册BeanDefinition</span><br><span class="line">            BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, id, aliases);</span><br><span class="line">            registerBeanDefinition(holder, parserContext.getRegistry());</span><br><span class="line">            if (shouldFireEvents()) &#123;</span><br><span class="line">                BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);</span><br><span class="line">                //钩子函数，在解析完自定义bean之后执行</span><br><span class="line">                postProcessComponentDefinition(componentDefinition);</span><br><span class="line">                //通知监听器，自定义bean注册完成事件</span><br><span class="line">                parserContext.registerComponent(componentDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(ex.getMessage(), element);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractSingleBeanDefinitionParser的parseInternal方法"><a href="#9、AbstractSingleBeanDefinitionParser的parseInternal方法" class="headerlink" title="9、AbstractSingleBeanDefinitionParser的parseInternal方法"></a>9、AbstractSingleBeanDefinitionParser的parseInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">    String parentName = getParentName(element);</span><br><span class="line">    if (parentName != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setParentName(parentName);</span><br><span class="line">    &#125;</span><br><span class="line">    //该方法被自定义解析器重写</span><br><span class="line">    Class&lt;?&gt; beanClass = getBeanClass(element);</span><br><span class="line">    if (beanClass != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setBeanClass(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //若没有beanClass，检查自定义解析器是否重写getBeanClassName</span><br><span class="line">        String beanClassName = getBeanClassName(element);</span><br><span class="line">        if (beanClassName != null) &#123;</span><br><span class="line">            builder.getRawBeanDefinition().setBeanClassName(beanClassName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.getRawBeanDefinition().setSource(parserContext.extractSource(element));</span><br><span class="line">    if (parserContext.isNested()) &#123;</span><br><span class="line">        // Inner bean definition must receive same scope as containing bean.</span><br><span class="line">        //若存在外部类，使用外部类的scope</span><br><span class="line">        builder.setScope(parserContext.getContainingBeanDefinition().getScope());</span><br><span class="line">    &#125;</span><br><span class="line">    if (parserContext.isDefaultLazyInit()) &#123;</span><br><span class="line">        // Default-lazy-init applies to custom bean definitions as well.</span><br><span class="line">        //配置延迟加载</span><br><span class="line">        builder.setLazyInit(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //子类重写了该方法</span><br><span class="line">    doParse(element, parserContext, builder);</span><br><span class="line">    return builder.getBeanDefinition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码Transaction</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81Transaction/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/Spring源码Transaction/</id>
    <published>2020-01-13T14:32:37.955Z</published>
    <updated>2018-07-07T15:10:02.538Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;  </span><br><span class="line">&lt;bean id=&quot;txManager&quot;  </span><br><span class="line">        class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;  </span><br><span class="line">        p:dataSource-ref=&quot;dataSource&quot;&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、解析配置文件"><a href="#一、解析配置文件" class="headerlink" title="一、解析配置文件"></a>一、解析配置文件</h3><h4 id="1、TxNamespaceHandler的init方法"><a href="#1、TxNamespaceHandler的init方法" class="headerlink" title="1、TxNamespaceHandler的init方法"></a>1、TxNamespaceHandler的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void init() &#123;</span><br><span class="line">    registerBeanDefinitionParser(&quot;advice&quot;, new TxAdviceBeanDefinitionParser());</span><br><span class="line">    //标签解析器</span><br><span class="line">    registerBeanDefinitionParser(&quot;annotation-driven&quot;, new AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;jta-transaction-manager&quot;, new JtaTransactionManagerBeanDefinitionParser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationDrivenBeanDefinitionParser的parse方法"><a href="#2、AnnotationDrivenBeanDefinitionParser的parse方法" class="headerlink" title="2、AnnotationDrivenBeanDefinitionParser的parse方法"></a>2、AnnotationDrivenBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    registerTransactionalEventListenerFactory(parserContext);</span><br><span class="line">    String mode = element.getAttribute(&quot;mode&quot;);</span><br><span class="line">    //使用aspectj方式进行事务切入</span><br><span class="line">    if (&quot;aspectj&quot;.equals(mode)) &#123;</span><br><span class="line">        // mode=&quot;aspectj&quot;</span><br><span class="line">        registerTransactionAspect(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用动态代理方式进行事务切入</span><br><span class="line">    else &#123;</span><br><span class="line">        // mode=&quot;proxy&quot;</span><br><span class="line">        AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationDrivenBeanDefinitionParser的parse方法-1"><a href="#2、AnnotationDrivenBeanDefinitionParser的parse方法-1" class="headerlink" title="2、AnnotationDrivenBeanDefinitionParser的parse方法"></a>2、AnnotationDrivenBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册事务监听器工厂TransactionalEventListenerFactory</span><br><span class="line">    registerTransactionalEventListenerFactory(parserContext);</span><br><span class="line">    String mode = element.getAttribute(&quot;mode&quot;);</span><br><span class="line">    //使用aspectj方式进行事务切入</span><br><span class="line">    if (&quot;aspectj&quot;.equals(mode)) &#123;</span><br><span class="line">        // mode=&quot;aspectj&quot;</span><br><span class="line">        registerTransactionAspect(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用动态代理方式进行事务切入</span><br><span class="line">    else &#123;</span><br><span class="line">        // mode=&quot;proxy&quot;</span><br><span class="line">        AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AopAutoProxyConfigurer的configureAutoProxyCreator方法"><a href="#3、AopAutoProxyConfigurer的configureAutoProxyCreator方法" class="headerlink" title="3、AopAutoProxyConfigurer的configureAutoProxyCreator方法"></a>3、AopAutoProxyConfigurer的configureAutoProxyCreator方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public static void configureAutoProxyCreator(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册InfrastructureAdvisorAutoProxyCreator的bean</span><br><span class="line">    AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line"></span><br><span class="line">    String txAdvisorBeanName = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME;</span><br><span class="line">    if (!parserContext.getRegistry().containsBeanDefinition(txAdvisorBeanName)) &#123;</span><br><span class="line">        Object eleSource = parserContext.extractSource(element);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionAttributeSource definition.</span><br><span class="line">        //创建TransactionAttributeSource的bean</span><br><span class="line">        RootBeanDefinition sourceDef = new RootBeanDefinition(</span><br><span class="line">                &quot;org.springframework.transaction.annotation.AnnotationTransactionAttributeSource&quot;);</span><br><span class="line">        sourceDef.setSource(eleSource);</span><br><span class="line">        //基础设施</span><br><span class="line">        sourceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //注册sourceDef</span><br><span class="line">        String sourceName = parserContext.getReaderContext().registerWithGeneratedName(sourceDef);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionInterceptor definition.</span><br><span class="line">        //创建TransactionInterceptor的bean</span><br><span class="line">        RootBeanDefinition interceptorDef = new RootBeanDefinition(TransactionInterceptor.class);</span><br><span class="line">        interceptorDef.setSource(eleSource);</span><br><span class="line">        interceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //往interceptorDef中注入TransactionManager</span><br><span class="line">        registerTransactionManager(element, interceptorDef);</span><br><span class="line">        //注入sourceDef</span><br><span class="line">        interceptorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">        //注册interceptorDef</span><br><span class="line">        String interceptorName = parserContext.getReaderContext().registerWithGeneratedName(interceptorDef);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionAttributeSourceAdvisor definition.</span><br><span class="line">        //创建BeanFactoryTransactionAttributeSourceAdvisor的bean，通知器</span><br><span class="line">        RootBeanDefinition advisorDef = new RootBeanDefinition(BeanFactoryTransactionAttributeSourceAdvisor.class);</span><br><span class="line">        advisorDef.setSource(eleSource);</span><br><span class="line">        advisorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //注入TransactionAttributeSource的bean</span><br><span class="line">        advisorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">        //注入TransactionInterceptor的bean</span><br><span class="line">        advisorDef.getPropertyValues().add(&quot;adviceBeanName&quot;, interceptorName);</span><br><span class="line">        if (element.hasAttribute(&quot;order&quot;)) &#123;</span><br><span class="line">            advisorDef.getPropertyValues().add(&quot;order&quot;, element.getAttribute(&quot;order&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        //注册advisorDef</span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(txAdvisorBeanName, advisorDef);</span><br><span class="line">        //注册组件并广播</span><br><span class="line">        CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), eleSource);</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName));</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName));</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, txAdvisorBeanName));</span><br><span class="line">        parserContext.registerComponent(compositeDef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"><a href="#4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法" class="headerlink" title="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"></a>4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">        ParserContext parserContext, Element sourceElement) &#123;</span><br><span class="line">    //注册AspectJAwareAdvisorAutoProxyCreator的bean</span><br><span class="line">    BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">            parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">    //设置使用JDK动态代理或CGLIB动态代理，设置是否支持内部调用</span><br><span class="line">    useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">    //注册组件并广播</span><br><span class="line">    registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、创建代理对象"><a href="#二、创建代理对象" class="headerlink" title="二、创建代理对象"></a>二、创建代理对象</h3><h4 id="1、AbstractAutoProxyCreator的postProcessAfterInitialization方法"><a href="#1、AbstractAutoProxyCreator的postProcessAfterInitialization方法" class="headerlink" title="1、AbstractAutoProxyCreator的postProcessAfterInitialization方法"></a>1、AbstractAutoProxyCreator的postProcessAfterInitialization方法</h4><p>InfrastructureAdvisorAutoProxyCreator的父类AbstractAutoProxyCreator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    if (bean != null) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        //检测循环依赖</span><br><span class="line">        if (!this.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">            //创建代理对象</span><br><span class="line">            return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AbstractAutoProxyCreator的wrapIfNecessary方法"><a href="#2、AbstractAutoProxyCreator的wrapIfNecessary方法" class="headerlink" title="2、AbstractAutoProxyCreator的wrapIfNecessary方法"></a>2、AbstractAutoProxyCreator的wrapIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">    //已经处理过</span><br><span class="line">    if (StringUtils.hasLength(beanName) &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //基础设施类不创建代理</span><br><span class="line">    if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create proxy if we have advice.</span><br><span class="line">    //获取增强</span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span><br><span class="line">    if (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        //创建代理对象</span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">                bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">        this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        return proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法"><a href="#3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法" class="headerlink" title="3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法"></a>3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法</h4><p>覆盖该方法，只取基础设施类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean isEligibleAdvisorBean(String beanName) &#123;</span><br><span class="line">    return (this.beanFactory != null &amp;&amp; this.beanFactory.containsBeanDefinition(beanName) &amp;&amp;</span><br><span class="line">            this.beanFactory.getBeanDefinition(beanName).getRole() == BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、AopUtils的canApply方法"><a href="#4、AopUtils的canApply方法" class="headerlink" title="4、AopUtils的canApply方法"></a>4、AopUtils的canApply方法</h4><p>中间过程与AOP相同，此处的Pointcut为TransactionAttributeSourcePointcut<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public static boolean canApply(Pointcut pc, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">    Assert.notNull(pc, &quot;Pointcut must not be null&quot;);</span><br><span class="line">    if (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回自身</span><br><span class="line">    MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line">    if (methodMatcher == MethodMatcher.TRUE) &#123;</span><br><span class="line">        // No need to iterate the methods if we&apos;re matching any method anyway...</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null;</span><br><span class="line">    if (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">        introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; classes = new LinkedHashSet&lt;&gt;();</span><br><span class="line">    //获取用户定义的类</span><br><span class="line">    if (!Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">        classes.add(ClassUtils.getUserClass(targetClass));</span><br><span class="line">    &#125;</span><br><span class="line">    classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line"></span><br><span class="line">    for (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">        Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line">        //有一个方法匹配,即认为匹配</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if (introductionAwareMethodMatcher != null ?</span><br><span class="line">                    introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :</span><br><span class="line">                    methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、TransactionAttributeSourcePointcut的matches方法"><a href="#5、TransactionAttributeSourcePointcut的matches方法" class="headerlink" title="5、TransactionAttributeSourcePointcut的matches方法"></a>5、TransactionAttributeSourcePointcut的matches方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean matches(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    //已经是该代理类</span><br><span class="line">    if (targetClass != null &amp;&amp; TransactionalProxy.class.isAssignableFrom(targetClass)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取AnnotationTransactionAttributeSource的bean</span><br><span class="line">    TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">    return (tas == null || tas.getTransactionAttribute(method, targetClass) != null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、实例化AnnotationTransactionAttributeSource"><a href="#6、实例化AnnotationTransactionAttributeSource" class="headerlink" title="6、实例化AnnotationTransactionAttributeSource"></a>6、实例化AnnotationTransactionAttributeSource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationTransactionAttributeSource() &#123;</span><br><span class="line">    this(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) &#123;</span><br><span class="line">    this.publicMethodsOnly = publicMethodsOnly;</span><br><span class="line">    this.annotationParsers = new LinkedHashSet&lt;&gt;(2);</span><br><span class="line">    //@Transactional注解解析器</span><br><span class="line">    this.annotationParsers.add(new SpringTransactionAnnotationParser());</span><br><span class="line">    if (jta12Present) &#123;</span><br><span class="line">        //javax.transaction.Transactional注解</span><br><span class="line">        this.annotationParsers.add(new JtaTransactionAnnotationParser());</span><br><span class="line">    &#125;</span><br><span class="line">    if (ejb3Present) &#123;</span><br><span class="line">        //javax.ejb.TransactionAttribute注解</span><br><span class="line">        this.annotationParsers.add(new Ejb3TransactionAnnotationParser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法"><a href="#7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法" class="headerlink" title="7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法"></a>7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法</h4><p>AnnotationTransactionAttributeSource的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    //Object的方法不用代理</span><br><span class="line">    if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // First, see if we have a cached value.</span><br><span class="line">    Object cacheKey = getCacheKey(method, targetClass);</span><br><span class="line">    Object cached = this.attributeCache.get(cacheKey);</span><br><span class="line">    if (cached != null) &#123;</span><br><span class="line">        // Value will either be canonical value indicating there is no transaction attribute,</span><br><span class="line">        // or an actual transaction attribute.</span><br><span class="line">        if (cached == NULL_TRANSACTION_ATTRIBUTE) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return (TransactionAttribute) cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // We need to work it out.</span><br><span class="line">        //提取事务属性</span><br><span class="line">        TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);</span><br><span class="line">        // Put it in the cache.</span><br><span class="line">        //添加缓存</span><br><span class="line">        if (txAttr == null) &#123;</span><br><span class="line">            this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //获取方法标识，默认类名加方法名</span><br><span class="line">            String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass);</span><br><span class="line">            if (txAttr instanceof DefaultTransactionAttribute) &#123;</span><br><span class="line">                ((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Adding transactional method &apos;&quot; + methodIdentification + &quot;&apos; with attribute: &quot; + txAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            this.attributeCache.put(cacheKey, txAttr);</span><br><span class="line">        &#125;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法"><a href="#8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法" class="headerlink" title="8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法"></a>8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    // Don&apos;t allow no-public methods as required.</span><br><span class="line">    //只有public方法可创建事务</span><br><span class="line">    if (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // The method may be on an interface, but we need attributes from the target class.</span><br><span class="line">    // If the target class is null, the method will be unchanged.</span><br><span class="line">    //获取实现类的该方法</span><br><span class="line">    Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);</span><br><span class="line"></span><br><span class="line">    // First try is the method in the target class.</span><br><span class="line">    //查找方法上的事务注解属性</span><br><span class="line">    TransactionAttribute txAttr = findTransactionAttribute(specificMethod);</span><br><span class="line">    if (txAttr != null) &#123;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Second try is the transaction attribute on the target class.</span><br><span class="line">    //查找方法所在类上的事务注解属性</span><br><span class="line">    txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());</span><br><span class="line">    if (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line">    //存在接口</span><br><span class="line">    if (specificMethod != method) &#123;</span><br><span class="line">        // Fallback is to look at the original method.</span><br><span class="line">        //查找接口方法</span><br><span class="line">        txAttr = findTransactionAttribute(method);</span><br><span class="line">        if (txAttr != null) &#123;</span><br><span class="line">            return txAttr;</span><br><span class="line">        &#125;</span><br><span class="line">        // Last fallback is the class of the original method.</span><br><span class="line">        //查找接口</span><br><span class="line">        txAttr = findTransactionAttribute(method.getDeclaringClass());</span><br><span class="line">        if (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">            return txAttr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AnnotationTransactionAttributeSource的findTransactionAttribute方法"><a href="#9、AnnotationTransactionAttributeSource的findTransactionAttribute方法" class="headerlink" title="9、AnnotationTransactionAttributeSource的findTransactionAttribute方法"></a>9、AnnotationTransactionAttributeSource的findTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute findTransactionAttribute(Method method) &#123;</span><br><span class="line">    return determineTransactionAttribute(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法"><a href="#10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法" class="headerlink" title="10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法"></a>10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) &#123;</span><br><span class="line">    for (TransactionAnnotationParser annotationParser : this.annotationParsers) &#123;</span><br><span class="line">        //解析注解</span><br><span class="line">        TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae);</span><br><span class="line">        if (attr != null) &#123;</span><br><span class="line">            return attr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法"><a href="#11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法" class="headerlink" title="11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法"></a>11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public TransactionAttribute parseTransactionAnnotation(AnnotatedElement ae) &#123;</span><br><span class="line">    //获取方法、方法类、父类的注解和元注解属性</span><br><span class="line">    AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(</span><br><span class="line">            ae, Transactional.class, false, false);</span><br><span class="line">    if (attributes != null) &#123;</span><br><span class="line">        //解析注解属性</span><br><span class="line">        return parseTransactionAnnotation(attributes);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">protected TransactionAttribute parseTransactionAnnotation(AnnotationAttributes attributes) &#123;</span><br><span class="line">    RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute();</span><br><span class="line">    //解析propagation</span><br><span class="line">    Propagation propagation = attributes.getEnum(&quot;propagation&quot;);</span><br><span class="line">    rbta.setPropagationBehavior(propagation.value());</span><br><span class="line">    //解析isolation</span><br><span class="line">    Isolation isolation = attributes.getEnum(&quot;isolation&quot;);</span><br><span class="line">    rbta.setIsolationLevel(isolation.value());</span><br><span class="line">    //解析timeout</span><br><span class="line">    rbta.setTimeout(attributes.getNumber(&quot;timeout&quot;).intValue());</span><br><span class="line">    //解析readOnly</span><br><span class="line">    rbta.setReadOnly(attributes.getBoolean(&quot;readOnly&quot;));</span><br><span class="line">    //解析value</span><br><span class="line">    rbta.setQualifier(attributes.getString(&quot;value&quot;));</span><br><span class="line">    ArrayList&lt;RollbackRuleAttribute&gt; rollBackRules = new ArrayList&lt;&gt;();</span><br><span class="line">    //解析rollbackFor</span><br><span class="line">    Class&lt;?&gt;[] rbf = attributes.getClassArray(&quot;rollbackFor&quot;);</span><br><span class="line">    for (Class&lt;?&gt; rbRule : rbf) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = new RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析rollbackForClassName</span><br><span class="line">    String[] rbfc = attributes.getStringArray(&quot;rollbackForClassName&quot;);</span><br><span class="line">    for (String rbRule : rbfc) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = new RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析noRollbackFor</span><br><span class="line">    Class&lt;?&gt;[] nrbf = attributes.getClassArray(&quot;noRollbackFor&quot;);</span><br><span class="line">    for (Class&lt;?&gt; rbRule : nrbf) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = new NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析noRollbackForClassName</span><br><span class="line">    String[] nrbfc = attributes.getStringArray(&quot;noRollbackForClassName&quot;);</span><br><span class="line">    for (String rbRule : nrbfc) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = new NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    rbta.getRollbackRules().addAll(rollBackRules);</span><br><span class="line">    return rbta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、事务增强器"><a href="#三、事务增强器" class="headerlink" title="三、事务增强器"></a>三、事务增强器</h3><h4 id="1、TransactionInterceptor的invoke方法"><a href="#1、TransactionInterceptor的invoke方法" class="headerlink" title="1、TransactionInterceptor的invoke方法"></a>1、TransactionInterceptor的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Object invoke(final MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">    // Work out the target class: may be &#123;@code null&#125;.</span><br><span class="line">    // The TransactionAttributeSource should be passed the target class</span><br><span class="line">    // as well as the method, which may be from an interface.</span><br><span class="line">    //获取被代理的类</span><br><span class="line">    Class&lt;?&gt; targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line"></span><br><span class="line">    // Adapt to TransactionAspectSupport&apos;s invokeWithinTransaction...</span><br><span class="line">    //执行事务及方法</span><br><span class="line">    return invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、TransactionInterceptor的invokeWithinTransaction方法"><a href="#2、TransactionInterceptor的invokeWithinTransaction方法" class="headerlink" title="2、TransactionInterceptor的invokeWithinTransaction方法"></a>2、TransactionInterceptor的invokeWithinTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected Object invokeWithinTransaction(Method method, @Nullable Class&lt;?&gt; targetClass,</span><br><span class="line">        final InvocationCallback invocation) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">    // If the transaction attribute is null, the method is non-transactional.</span><br><span class="line">    TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">    //获取事务属性</span><br><span class="line">    final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null);</span><br><span class="line">    //获取注册的事务管理器,DataSourceTransactionManager</span><br><span class="line">    final PlatformTransactionManager tm = determineTransactionManager(txAttr);</span><br><span class="line">    //获取方法唯一标识，类名加方法名</span><br><span class="line">    final String joinpointIdentification = methodIdentification(method, targetClass, txAttr);</span><br><span class="line">    //声明式事务处理</span><br><span class="line">    if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line">        // Standard transaction demarcation with getTransaction and commit/rollback calls.</span><br><span class="line">        //创建TransactionInfo</span><br><span class="line">        TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class="line">        Object retVal = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // This is an around advice: Invoke the next interceptor in the chain.</span><br><span class="line">            // This will normally result in a target object being invoked.</span><br><span class="line">            //执行被增强方法</span><br><span class="line">            retVal = invocation.proceedWithInvocation();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            // target invocation exception</span><br><span class="line">            //异常回滚</span><br><span class="line">            completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            //清除本事务信息，并恢复上一个事务信息</span><br><span class="line">            cleanupTransactionInfo(txInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        commitTransactionAfterReturning(txInfo);</span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    //编程式事务处理</span><br><span class="line">    else &#123;</span><br><span class="line">        final ThrowableHolder throwableHolder = new ThrowableHolder();</span><br><span class="line"></span><br><span class="line">        // It&apos;s a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span><br><span class="line">        try &#123;</span><br><span class="line">            Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -&gt; &#123;</span><br><span class="line">                //事务信息注册到本地线程</span><br><span class="line">                TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">                try &#123;</span><br><span class="line">                    return invocation.proceedWithInvocation();</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Throwable ex) &#123;</span><br><span class="line">                    if (txAttr.rollbackOn(ex)) &#123;</span><br><span class="line">                        // A RuntimeException: will lead to a rollback.</span><br><span class="line">                        if (ex instanceof RuntimeException) &#123;</span><br><span class="line">                            throw (RuntimeException) ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            throw new ThrowableHolderException(ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        // A normal return value: will lead to a commit.</span><br><span class="line">                        throwableHolder.throwable = ex;</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    cleanupTransactionInfo(txInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // Check result state: It might indicate a Throwable to rethrow.</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                throw throwableHolder.throwable;</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ThrowableHolderException ex) &#123;</span><br><span class="line">            throw ex.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TransactionSystemException ex2) &#123;</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, throwableHolder.throwable);</span><br><span class="line">                ex2.initApplicationException(throwableHolder.throwable);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex2;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex2) &#123;</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, throwableHolder.throwable);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、TransactionInterceptor的createTransactionIfNecessary方法"><a href="#3、TransactionInterceptor的createTransactionIfNecessary方法" class="headerlink" title="3、TransactionInterceptor的createTransactionIfNecessary方法"></a>3、TransactionInterceptor的createTransactionIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="line">protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,</span><br><span class="line">        @Nullable TransactionAttribute txAttr, final String joinpointIdentification) &#123;</span><br><span class="line"></span><br><span class="line">    // If no name specified, apply method identification as transaction name.</span><br><span class="line">    if (txAttr != null &amp;&amp; txAttr.getName() == null) &#123;</span><br><span class="line">        txAttr = new DelegatingTransactionAttribute(txAttr) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String getName() &#123;</span><br><span class="line">                return joinpointIdentification;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransactionStatus status = null;</span><br><span class="line">    if (txAttr != null) &#123;</span><br><span class="line">        if (tm != null) &#123;</span><br><span class="line">            //获取TransactionStatus</span><br><span class="line">            status = tm.getTransaction(txAttr);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Skipping transactional joinpoint [&quot; + joinpointIdentification +</span><br><span class="line">                        &quot;] because no transaction manager has been configured&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //为TransactionStatus创建一个TransactionInfo,并存入线程变量，并挂起老的TransactionStatus</span><br><span class="line">    return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractPlatformTransactionManager的getTransaction方法"><a href="#4、AbstractPlatformTransactionManager的getTransaction方法" class="headerlink" title="4、AbstractPlatformTransactionManager的getTransaction方法"></a>4、AbstractPlatformTransactionManager的getTransaction方法</h4><p>DataSourceTransactionManager的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException &#123;</span><br><span class="line">    //获取当前线程的事务</span><br><span class="line">    Object transaction = doGetTransaction();</span><br><span class="line"></span><br><span class="line">    // Cache debug flag to avoid repeated checks.</span><br><span class="line">    boolean debugEnabled = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">    if (definition == null) &#123;</span><br><span class="line">        // Use defaults if no transaction definition given.</span><br><span class="line">        definition = new DefaultTransactionDefinition();</span><br><span class="line">    &#125;</span><br><span class="line">    //是否存在事务，通过ConnectionHolder的transactionActive属性判断</span><br><span class="line">    if (isExistingTransaction(transaction)) &#123;</span><br><span class="line">        // Existing transaction found -&gt; check propagation behavior to find out how to behave.</span><br><span class="line">        //处理新事务</span><br><span class="line">        return handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check definition settings for new transaction.</span><br><span class="line">    //事务超时属性验证</span><br><span class="line">    if (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">        throw new InvalidTimeoutException(&quot;Invalid transaction timeout&quot;, definition.getTimeout());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span><br><span class="line">    //属性值mandatory，要求存在事务</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;No existing transaction found for transaction marked with propagation &apos;mandatory&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //需要新建事务</span><br><span class="line">    else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        //空挂起</span><br><span class="line">        SuspendedResourcesHolder suspendedResources = suspend(null);</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Creating new transaction with name [&quot; + definition.getName() + &quot;]: &quot; + definition);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            //是否能够创建新事务</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            //创建新TransactionStatus</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">            //设置事务属性</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            //绑定事务到当前线程</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            resume(null, suspendedResources);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建空事务</span><br><span class="line">    else &#123;</span><br><span class="line">        // Create &quot;empty&quot; transaction: no actual transaction, but potentially synchronization.</span><br><span class="line">        if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(&quot;Custom isolation level specified but no actual transaction initiated; &quot; +</span><br><span class="line">                    &quot;isolation level will effectively be ignored: &quot; + definition);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">        return prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、DataSourceTransactionManager的doGetTransaction方法"><a href="#5、DataSourceTransactionManager的doGetTransaction方法" class="headerlink" title="5、DataSourceTransactionManager的doGetTransaction方法"></a>5、DataSourceTransactionManager的doGetTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object doGetTransaction() &#123;</span><br><span class="line">    //创建事务</span><br><span class="line">    DataSourceTransactionObject txObject = new DataSourceTransactionObject();</span><br><span class="line">    //设置是否允许保存点</span><br><span class="line">    txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line">    //获取事务数据库连接容器，不存在返回null</span><br><span class="line">    ConnectionHolder conHolder =</span><br><span class="line">            (ConnectionHolder) TransactionSynchronizationManager.getResource(obtainDataSource());</span><br><span class="line">    //事务中设置连接容器，false表示旧，不存在返回null事务</span><br><span class="line">    txObject.setConnectionHolder(conHolder, false);</span><br><span class="line">    return txObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（三、4）DataSourceTransactionManager的doBegin方法"><a href="#6、接（三、4）DataSourceTransactionManager的doBegin方法" class="headerlink" title="6、接（三、4）DataSourceTransactionManager的doBegin方法"></a>6、接（三、4）DataSourceTransactionManager的doBegin方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doBegin(Object transaction, TransactionDefinition definition) &#123;</span><br><span class="line">    //事务</span><br><span class="line">    DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line">    Connection con = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //事务中未设置连接容器</span><br><span class="line">        if (!txObject.hasConnectionHolder() ||</span><br><span class="line">                txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">            //从数据源中获取连接</span><br><span class="line">            Connection newCon = obtainDataSource().getConnection();</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Acquired Connection [&quot; + newCon + &quot;] for JDBC transaction&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置连接容器</span><br><span class="line">            txObject.setConnectionHolder(new ConnectionHolder(newCon), true);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置连接容器已被事务获取</span><br><span class="line">        txObject.getConnectionHolder().setSynchronizedWithTransaction(true);</span><br><span class="line">        con = txObject.getConnectionHolder().getConnection();</span><br><span class="line">        //设置只读、隔离级别属性</span><br><span class="line">        Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class="line">        //设置隔离级别</span><br><span class="line">        txObject.setPreviousIsolationLevel(previousIsolationLevel);</span><br><span class="line"></span><br><span class="line">        // Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span><br><span class="line">        // so we don&apos;t want to do it unnecessarily (for example if we&apos;ve explicitly</span><br><span class="line">        // configured the connection pool to set it already).</span><br><span class="line">        //改变自动提交</span><br><span class="line">        if (con.getAutoCommit()) &#123;</span><br><span class="line">            txObject.setMustRestoreAutoCommit(true);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Switching JDBC Connection [&quot; + con + &quot;] to manual commit&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            con.setAutoCommit(false);</span><br><span class="line">        &#125;</span><br><span class="line">        //待子类实现</span><br><span class="line">        prepareTransactionalConnection(con, definition);</span><br><span class="line">        //设置当前连接存在事务</span><br><span class="line">        txObject.getConnectionHolder().setTransactionActive(true);</span><br><span class="line">        //设置超时时间</span><br><span class="line">        int timeout = determineTimeout(definition);</span><br><span class="line">        if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">            txObject.getConnectionHolder().setTimeoutInSeconds(timeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Bind the connection holder to the thread.</span><br><span class="line">        //新事务，连接容器绑定到当前线程</span><br><span class="line">        if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">            TransactionSynchronizationManager.bindResource(obtainDataSource(), txObject.getConnectionHolder());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">            DataSourceUtils.releaseConnection(con, obtainDataSource());</span><br><span class="line">            txObject.setConnectionHolder(null, false);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new CannotCreateTransactionException(&quot;Could not open JDBC Connection for transaction&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法"><a href="#7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法" class="headerlink" title="7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法"></a>7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) &#123;</span><br><span class="line">    //新的事务</span><br><span class="line">    if (status.isNewSynchronization()) &#123;</span><br><span class="line">        //事务绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());</span><br><span class="line">        //隔离级别绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(</span><br><span class="line">                definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT ?</span><br><span class="line">                        definition.getIsolationLevel() : null);</span><br><span class="line">        //只读属性绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionReadOnly(definition.isReadOnly());</span><br><span class="line">        //事务名称绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionName(definition.getName());</span><br><span class="line">        //回调函数集合绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.initSynchronization();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法"><a href="#8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法" class="headerlink" title="8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法"></a>8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">private TransactionStatus handleExistingTransaction(</span><br><span class="line">        TransactionDefinition definition, Object transaction, boolean debugEnabled)</span><br><span class="line">        throws TransactionException &#123;</span><br><span class="line">    //以非事务方式执行，如果当前存在事务，则抛出异常</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Existing transaction found for transaction marked with propagation &apos;never&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Suspending current transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //挂起当前事务</span><br><span class="line">        Object suspendedResources = suspend(transaction);</span><br><span class="line">        boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">        //创建空事务</span><br><span class="line">        return prepareTransactionStatus(</span><br><span class="line">                definition, null, false, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">    &#125;</span><br><span class="line">    //新建事务，如果当前存在事务，把当前事务挂起</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Suspending current transaction, creating new transaction with name [&quot; +</span><br><span class="line">                    definition.getName() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //挂起当前事务</span><br><span class="line">        SuspendedResourcesHolder suspendedResources = suspend(transaction);</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建新事务</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error beginEx) &#123;</span><br><span class="line">            resumeAfterBeginException(transaction, suspendedResources, beginEx);</span><br><span class="line">            throw beginEx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //嵌套事务</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        //是否允许嵌套事务</span><br><span class="line">        if (!isNestedTransactionAllowed()) &#123;</span><br><span class="line">            throw new NestedTransactionNotSupportedException(</span><br><span class="line">                    &quot;Transaction manager does not allow nested transactions by default - &quot; +</span><br><span class="line">                    &quot;specify &apos;nestedTransactionAllowed&apos; property with value &apos;true&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Creating nested transaction with name [&quot; + definition.getName() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //嵌套事务使用保存点</span><br><span class="line">        if (useSavepointForNestedTransaction()) &#123;</span><br><span class="line">            // Create savepoint within existing Spring-managed transaction,</span><br><span class="line">            // through the SavepointManager API implemented by TransactionStatus.</span><br><span class="line">            // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span><br><span class="line">            //用原来的transaction创建新的TransactionStatus</span><br><span class="line">            DefaultTransactionStatus status =</span><br><span class="line">                    prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null);</span><br><span class="line">            //创建保存点</span><br><span class="line">            status.createAndHoldSavepoint();</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //不能使用的保存点，如JTA，创建新事务</span><br><span class="line">            // Nested transaction through nested begin and commit/rollback calls.</span><br><span class="line">            // Usually only for JTA: Spring synchronization might get activated here</span><br><span class="line">            // in case of a pre-existing JTA transaction.</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, null);</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span><br><span class="line">    if (debugEnabled) &#123;</span><br><span class="line">        logger.debug(&quot;Participating in existing transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (isValidateExistingTransaction()) &#123;</span><br><span class="line">        if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123;</span><br><span class="line">            Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">            if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) &#123;</span><br><span class="line">                Constants isoConstants = DefaultTransactionDefinition.constants;</span><br><span class="line">                throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">                        definition + &quot;] specifies isolation level which is incompatible with existing transaction: &quot; +</span><br><span class="line">                        (currentIsolationLevel != null ?</span><br><span class="line">                                isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :</span><br><span class="line">                                &quot;(unknown)&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!definition.isReadOnly()) &#123;</span><br><span class="line">            if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span><br><span class="line">                throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">                        definition + &quot;] is not marked as read-only but existing transaction is&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建空事务</span><br><span class="line">    boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">    return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractPlatformTransactionManager的suspend方法"><a href="#9、AbstractPlatformTransactionManager的suspend方法" class="headerlink" title="9、AbstractPlatformTransactionManager的suspend方法"></a>9、AbstractPlatformTransactionManager的suspend方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected final SuspendedResourcesHolder suspend(@Nullable Object transaction) throws TransactionException &#123;</span><br><span class="line">    //事务信息已经绑定到当前线程</span><br><span class="line">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">        //事务回调函数</span><br><span class="line">        List&lt;TransactionSynchronization&gt; suspendedSynchronizations = doSuspendSynchronization();</span><br><span class="line">        try &#123;</span><br><span class="line">            Object suspendedResources = null;</span><br><span class="line">            if (transaction != null) &#123;</span><br><span class="line">                //挂起事务，ConnectionHolder取消绑定当前线程，并返回</span><br><span class="line">                suspendedResources = doSuspend(transaction);</span><br><span class="line">            &#125;</span><br><span class="line">            //清除当前线程绑定的事务信息</span><br><span class="line">            String name = TransactionSynchronizationManager.getCurrentTransactionName();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionName(null);</span><br><span class="line">            boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionReadOnly(false);</span><br><span class="line">            Integer isolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(null);</span><br><span class="line">            boolean wasActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line">            TransactionSynchronizationManager.setActualTransactionActive(false);</span><br><span class="line">            //创建挂起事务信息</span><br><span class="line">            return new SuspendedResourcesHolder(</span><br><span class="line">                    suspendedResources, suspendedSynchronizations, name, readOnly, isolationLevel, wasActive);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            // doSuspend failed - original transaction is still active...</span><br><span class="line">            //挂起失败，恢复当前事务</span><br><span class="line">            doResumeSynchronization(suspendedSynchronizations);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (transaction != null) &#123;</span><br><span class="line">        // Transaction active but no synchronization active.</span><br><span class="line">        //挂起事务</span><br><span class="line">        Object suspendedResources = doSuspend(transaction);</span><br><span class="line">        //创建挂起事务信息</span><br><span class="line">        return new SuspendedResourcesHolder(suspendedResources);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Neither transaction nor synchronization active.</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法"><a href="#10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法" class="headerlink" title="10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法"></a>10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) &#123;</span><br><span class="line">    //存在事务</span><br><span class="line">    if (txInfo != null &amp;&amp; txInfo.getTransactionStatus() != null) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() +</span><br><span class="line">                    &quot;] after exception: &quot; + ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //捕获到须回滚的异常</span><br><span class="line">        if (txInfo.transactionAttribute != null &amp;&amp; txInfo.transactionAttribute.rollbackOn(ex)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //回滚</span><br><span class="line">                txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (TransactionSystemException ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">                ex2.initApplicationException(ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //捕获到不须回滚的异常</span><br><span class="line">        else &#123;</span><br><span class="line">            // We don&apos;t roll back on this exception.</span><br><span class="line">            // Will still roll back if TransactionStatus.isRollbackOnly() is true.</span><br><span class="line">            try &#123;</span><br><span class="line">                //提交事务，任然有可能回滚TransactionStatus.isRollbackOnly()</span><br><span class="line">                txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (TransactionSystemException ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">                ex2.initApplicationException(ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、AbstractPlatformTransactionManager的rollback方法"><a href="#11、AbstractPlatformTransactionManager的rollback方法" class="headerlink" title="11、AbstractPlatformTransactionManager的rollback方法"></a>11、AbstractPlatformTransactionManager的rollback方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void rollback(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    //已被提交或回滚</span><br><span class="line">    if (status.isCompleted()) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">    //回滚</span><br><span class="line">    processRollback(defStatus, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractPlatformTransactionManager的processRollback方法"><a href="#12、AbstractPlatformTransactionManager的processRollback方法" class="headerlink" title="12、AbstractPlatformTransactionManager的processRollback方法"></a>12、AbstractPlatformTransactionManager的processRollback方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">private void processRollback(DefaultTransactionStatus status, boolean unexpected) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean unexpectedRollback = unexpected;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //调用回调函数的beforeCompletion方法</span><br><span class="line">            triggerBeforeCompletion(status);</span><br><span class="line"></span><br><span class="line">            if (status.hasSavepoint()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Rolling back transaction to savepoint&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //回滚到保存点</span><br><span class="line">                status.rollbackToHeldSavepoint();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (status.isNewTransaction()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Initiating transaction rollback&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //回滚</span><br><span class="line">                doRollback(status);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // Participating in larger transaction</span><br><span class="line">                //全局事务的部份</span><br><span class="line">                if (status.hasTransaction()) &#123;</span><br><span class="line">                    //TransactionStatus中回滚属性设置为true,设置全局事务回滚</span><br><span class="line">                    if (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line">                        if (status.isDebug()) &#123;</span><br><span class="line">                            logger.debug(&quot;Participating transaction failed - marking existing transaction as rollback-only&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        //设置transaction中回滚属性为true</span><br><span class="line">                        doSetRollbackOnly(status);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (status.isDebug()) &#123;</span><br><span class="line">                            logger.debug(&quot;Participating transaction failed - letting transaction originator decide on rollback&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    //打印错误日志</span><br><span class="line">                    logger.debug(&quot;Should roll back transaction but cannot - no transaction available&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                // Unexpected rollback only matters here if we&apos;re asked to fail early</span><br><span class="line">                if (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                    unexpectedRollback = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        //回调函数的afterCompletion方法</span><br><span class="line">        triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"></span><br><span class="line">        // Raise UnexpectedRollbackException if we had a global rollback-only marker</span><br><span class="line">        if (unexpectedRollback) &#123;</span><br><span class="line">            throw new UnexpectedRollbackException(</span><br><span class="line">                    &quot;Transaction rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //清空当前事务，并恢复挂起的事务</span><br><span class="line">        cleanupAfterCompletion(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法"><a href="#13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法" class="headerlink" title="13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法"></a>13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) &#123;</span><br><span class="line">    if (txInfo != null &amp;&amp; txInfo.getTransactionStatus() != null) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、AbstractPlatformTransactionManager的commit方法"><a href="#14、AbstractPlatformTransactionManager的commit方法" class="headerlink" title="14、AbstractPlatformTransactionManager的commit方法"></a>14、AbstractPlatformTransactionManager的commit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void commit(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    //已提交或回滚</span><br><span class="line">    if (status.isCompleted()) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">    //TransactionStatus中回滚属性设置为true</span><br><span class="line">    if (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line">        if (defStatus.isDebug()) &#123;</span><br><span class="line">            logger.debug(&quot;Transactional code has requested rollback&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //回滚事务</span><br><span class="line">        processRollback(defStatus, false);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //Transaction中回滚属性设置为true</span><br><span class="line">    if (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line">        if (defStatus.isDebug()) &#123;</span><br><span class="line">            logger.debug(&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        processRollback(defStatus, true);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //提交事务</span><br><span class="line">    processCommit(defStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AbstractPlatformTransactionManager的processCommit方法"><a href="#15、AbstractPlatformTransactionManager的processCommit方法" class="headerlink" title="15、AbstractPlatformTransactionManager的processCommit方法"></a>15、AbstractPlatformTransactionManager的processCommit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">private void processCommit(DefaultTransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean beforeCompletionInvoked = false;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            boolean unexpectedRollback = false;</span><br><span class="line">            //待子类覆盖</span><br><span class="line">            prepareForCommit(status);</span><br><span class="line">            //调用回调函数的beforeCommit方法</span><br><span class="line">            triggerBeforeCommit(status);</span><br><span class="line">            //调用回调函数的beforeCompletion方法</span><br><span class="line">            triggerBeforeCompletion(status);</span><br><span class="line">            beforeCompletionInvoked = true;</span><br><span class="line"></span><br><span class="line">            if (status.hasSavepoint()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Releasing transaction savepoint&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                //释放保存点</span><br><span class="line">                status.releaseHeldSavepoint();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (status.isNewTransaction()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Initiating transaction commit&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                //提交事务</span><br><span class="line">                doCommit(status);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Throw UnexpectedRollbackException if we have a global rollback-only</span><br><span class="line">            // marker but still didn&apos;t get a corresponding exception from commit.</span><br><span class="line">            if (unexpectedRollback) &#123;</span><br><span class="line">                throw new UnexpectedRollbackException(</span><br><span class="line">                        &quot;Transaction silently rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (UnexpectedRollbackException ex) &#123;</span><br><span class="line">            // can only be caused by doCommit</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TransactionException ex) &#123;</span><br><span class="line">            // can only be caused by doCommit</span><br><span class="line">            if (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">                doRollbackOnCommitException(status, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            if (!beforeCompletionInvoked) &#123;</span><br><span class="line">                triggerBeforeCompletion(status);</span><br><span class="line">            &#125;</span><br><span class="line">            doRollbackOnCommitException(status, ex);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Trigger afterCommit callbacks, with an exception thrown there</span><br><span class="line">        // propagated to callers but the transaction still considered as committed.</span><br><span class="line">        try &#123;</span><br><span class="line">            //调用回调函数的afterCommit方法</span><br><span class="line">            triggerAfterCommit(status);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            //调用回调函数的afterCompletion方法</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //清空当前事务，并恢复挂起的事务</span><br><span class="line">        cleanupAfterCompletion(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码JdbcTemplate</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81JdbcTemplate/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/spring源码JdbcTemplate/</id>
    <published>2020-01-13T14:32:37.951Z</published>
    <updated>2018-07-07T15:09:57.089Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;beans  </span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 1.配置数据源：DriverManagerDataSource --&gt;  </span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;oracle.jdbc.OracleDriver&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;scott&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;tiger&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;!--2.配置JdbcTemplate --&gt;  </span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;!-- 3.为dao接口注入jdbcTemplate属性 --&gt;  </span><br><span class="line">    &lt;bean id=&quot;userDao&quot; class=&quot;com.wzj.dao.impl.UserDaoImpl&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 业务层 、Struts2、事务等同往常一样配置--&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao&#123;  </span><br><span class="line">    //定义JdbcTemplate属性  </span><br><span class="line">    private JdbcTemplate jdbcTemplate;  </span><br><span class="line">    //省略get、set方法  </span><br><span class="line">    @Override  </span><br><span class="line">    public User selectUserByName(String name) &#123;  </span><br><span class="line">        //定义RowMapper的对象，可以将数据中的每一行数据封装成用户定义的类.  </span><br><span class="line">        //RowMapper是接口，这里创建了一个匿名类并实现了其中的方法  </span><br><span class="line">        RowMapper&lt;User&gt; row=new RowMapper&lt;User&gt;() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public User mapRow(ResultSet rs, int arg1) throws SQLException &#123;  </span><br><span class="line">                User user=new User();  </span><br><span class="line">                user.setUserId(Integer.parseInt(rs.getString(&quot;USERID&quot;)));  </span><br><span class="line">                user.setName(rs.getString(&quot;USERNAME&quot;));  </span><br><span class="line">                user.setPassword(rs.getString(&quot;USERPWD&quot;));  </span><br><span class="line">                return user;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;   </span><br><span class="line">        String sql=&quot;select * from myuser1 where username=?&quot;;  </span><br><span class="line">        //执行查询  </span><br><span class="line">        User user=jdbcTemplate.queryForObject(sql, new Object[]&#123;name&#125;, row);  </span><br><span class="line">        return user;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int insert(User user) &#123;  </span><br><span class="line">        String sql=&quot;insert into myuser1 values(user_sequence.nextVal,?,?)&quot;;  </span><br><span class="line">        //执行插入  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;user.getName(),user.getPassword()&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int delete(int userId) &#123;  </span><br><span class="line">        String sql=&quot;delete from myuser1 where userid=?&quot;;  </span><br><span class="line">        //执行修改  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;userId&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int update(User user) &#123;  </span><br><span class="line">        String sql=&quot;update myuser1 set username=?,userpwd=? where userid=?&quot;;  </span><br><span class="line">        //执行删除  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;user.getName(),user.getPassword(),user.getUserId()&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一、select执行过程"><a href="#一、select执行过程" class="headerlink" title="一、select执行过程"></a>一、select执行过程</h3><h4 id="1、JdbcTemplate的queryForObject方法"><a href="#1、JdbcTemplate的queryForObject方法" class="headerlink" title="1、JdbcTemplate的queryForObject方法"></a>1、JdbcTemplate的queryForObject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T queryForObject(String sql, Object[] args, RowMapper&lt;T&gt; rowMapper) throws DataAccessException &#123;</span><br><span class="line">    List&lt;T&gt; results = query(sql, args, new RowMapperResultSetExtractor&lt;T&gt;(rowMapper, 1));</span><br><span class="line">    //返回第一对象</span><br><span class="line">    return DataAccessUtils.requiredSingleResult(results);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T query(String sql, Object[] args, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line">    return query(sql, newArgPreparedStatementSetter(args), rse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、JdbcTemplate的query方法"><a href="#2、JdbcTemplate的query方法" class="headerlink" title="2、JdbcTemplate的query方法"></a>2、JdbcTemplate的query方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T query(String sql, PreparedStatementSetter pss, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line">    return query(new SimplePreparedStatementCreator(sql), pss, rse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T query(</span><br><span class="line">        PreparedStatementCreator psc, final PreparedStatementSetter pss, final ResultSetExtractor&lt;T&gt; rse)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(rse, &quot;ResultSetExtractor must not be null&quot;);</span><br><span class="line">    logger.debug(&quot;Executing prepared SQL query&quot;);</span><br><span class="line"></span><br><span class="line">    return execute(psc, new PreparedStatementCallback&lt;T&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public T doInPreparedStatement(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">            ResultSet rs = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (pss != null) &#123;</span><br><span class="line">                    //设置参数</span><br><span class="line">                    pss.setValues(ps);</span><br><span class="line">                &#125;</span><br><span class="line">                //执行sql</span><br><span class="line">                rs = ps.executeQuery();</span><br><span class="line">                ResultSet rsToUse = rs;</span><br><span class="line">                //转换器，对数据库clob、 blob数据型进行操作</span><br><span class="line">                if (nativeJdbcExtractor != null) &#123;</span><br><span class="line">                    rsToUse = nativeJdbcExtractor.getNativeResultSet(rs);</span><br><span class="line">                &#125;</span><br><span class="line">                //解析结果集</span><br><span class="line">                return rse.extractData(rsToUse);</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                JdbcUtils.closeResultSet(rs);</span><br><span class="line">                if (pss instanceof ParameterDisposer) &#123;</span><br><span class="line">                    ((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、JdbcTemplate的execute方法"><a href="#3、JdbcTemplate的execute方法" class="headerlink" title="3、JdbcTemplate的execute方法"></a>3、JdbcTemplate的execute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T execute(PreparedStatementCreator psc, PreparedStatementCallback&lt;T&gt; action)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(psc, &quot;PreparedStatementCreator must not be null&quot;);</span><br><span class="line">    Assert.notNull(action, &quot;Callback object must not be null&quot;);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        logger.debug(&quot;Executing prepared SQL statement&quot; + (sql != null ? &quot; [&quot; + sql + &quot;]&quot; : &quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = DataSourceUtils.getConnection(getDataSource());</span><br><span class="line">    PreparedStatement ps = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Connection conToUse = con;</span><br><span class="line">        if (this.nativeJdbcExtractor != null &amp;&amp;</span><br><span class="line">                this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativePreparedStatements()) &#123;</span><br><span class="line">            //获取原始的JDBC连接</span><br><span class="line">            conToUse = this.nativeJdbcExtractor.getNativeConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建一个PreparedStatement</span><br><span class="line">        ps = psc.createPreparedStatement(conToUse);</span><br><span class="line">        //设置默认查询边界及超时时间</span><br><span class="line">        applyStatementSettings(ps);</span><br><span class="line">        PreparedStatement psToUse = ps;</span><br><span class="line">        if (this.nativeJdbcExtractor != null) &#123;</span><br><span class="line">            //获取原始的JDBC的PreparedStatement</span><br><span class="line">            psToUse = this.nativeJdbcExtractor.getNativePreparedStatement(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行sql</span><br><span class="line">        T result = action.doInPreparedStatement(psToUse);</span><br><span class="line">        //处理警告,如数据截断异常</span><br><span class="line">        handleWarnings(ps);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        // Release Connection early, to avoid potential connection pool deadlock</span><br><span class="line">        // in the case when the exception translator hasn&apos;t been initialized yet.</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        psc = null;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        ps = null;</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">        con = null;</span><br><span class="line">        throw getExceptionTranslator().translate(&quot;PreparedStatementCallback&quot;, sql, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DataSourceUtils的getConnection方法"><a href="#4、DataSourceUtils的getConnection方法" class="headerlink" title="4、DataSourceUtils的getConnection方法"></a>4、DataSourceUtils的getConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取连接</span><br><span class="line">        return doGetConnection(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        throw new CannotGetJdbcConnectionException(&quot;Could not get JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DataSourceUtils的doGetConnection方法"><a href="#5、DataSourceUtils的doGetConnection方法" class="headerlink" title="5、DataSourceUtils的doGetConnection方法"></a>5、DataSourceUtils的doGetConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public static Connection doGetConnection(DataSource dataSource) throws SQLException &#123;</span><br><span class="line">    Assert.notNull(dataSource, &quot;No DataSource specified&quot;);</span><br><span class="line">    //获取本线程Connection容器</span><br><span class="line">    ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">    //本线程是否激活事务</span><br><span class="line">    if (conHolder != null &amp;&amp; (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) &#123;</span><br><span class="line">        //当前获取次数加一</span><br><span class="line">        conHolder.requested();</span><br><span class="line">        //没有连接获取新连接</span><br><span class="line">        if (!conHolder.hasConnection()) &#123;</span><br><span class="line">            logger.debug(&quot;Fetching resumed JDBC Connection from DataSource&quot;);</span><br><span class="line">            conHolder.setConnection(dataSource.getConnection());</span><br><span class="line">        &#125;</span><br><span class="line">        //获取容器中的连接，同一事务中使用同一个连接</span><br><span class="line">        return conHolder.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    // Else we either got no holder or an empty thread-bound holder here.</span><br><span class="line"></span><br><span class="line">    logger.debug(&quot;Fetching JDBC Connection from DataSource&quot;);</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = dataSource.getConnection();</span><br><span class="line">    //事务已开启</span><br><span class="line">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">        logger.debug(&quot;Registering transaction synchronization for JDBC Connection&quot;);</span><br><span class="line">        // Use same Connection for further JDBC actions within the transaction.</span><br><span class="line">        // Thread-bound object will get removed by synchronization at transaction completion.</span><br><span class="line">        ConnectionHolder holderToUse = conHolder;</span><br><span class="line">        if (holderToUse == null) &#123;</span><br><span class="line">            holderToUse = new ConnectionHolder(con);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            holderToUse.setConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        holderToUse.requested();</span><br><span class="line">        //添加回调函数释放资源</span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(</span><br><span class="line">                new ConnectionSynchronization(holderToUse, dataSource));</span><br><span class="line">        //设置该连接已被事务获取</span><br><span class="line">        holderToUse.setSynchronizedWithTransaction(true);</span><br><span class="line">        //新增的连接容器</span><br><span class="line">        if (holderToUse != conHolder) &#123;</span><br><span class="line">            //连接容器加入本线程变量</span><br><span class="line">            TransactionSynchronizationManager.bindResource(dataSource, holderToUse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return con;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、3）DataSourceUtils的releaseConnection方法"><a href="#6、接（一、3）DataSourceUtils的releaseConnection方法" class="headerlink" title="6、接（一、3）DataSourceUtils的releaseConnection方法"></a>6、接（一、3）DataSourceUtils的releaseConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void releaseConnection(Connection con, DataSource dataSource) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //关闭连接</span><br><span class="line">        doReleaseConnection(con, dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        logger.debug(&quot;Could not close JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        logger.debug(&quot;Unexpected exception on closing JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、DataSourceUtils的doReleaseConnection方法"><a href="#7、DataSourceUtils的doReleaseConnection方法" class="headerlink" title="7、DataSourceUtils的doReleaseConnection方法"></a>7、DataSourceUtils的doReleaseConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException &#123;</span><br><span class="line">    if (con == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (dataSource != null) &#123;</span><br><span class="line">        //当前线程存在事务，该线程目前要用同一个连接，释放则获取次数减一</span><br><span class="line">        ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">        if (conHolder != null &amp;&amp; connectionEquals(conHolder, con)) &#123;</span><br><span class="line">            // It&apos;s the transactional Connection: Don&apos;t close it.</span><br><span class="line">            conHolder.released();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(&quot;Returning JDBC Connection to DataSource&quot;);</span><br><span class="line">    //关闭连接</span><br><span class="line">    doCloseConnection(con, dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、2）ArgumentPreparedStatementSetter的setValues方法"><a href="#6、接（一、2）ArgumentPreparedStatementSetter的setValues方法" class="headerlink" title="6、接（一、2）ArgumentPreparedStatementSetter的setValues方法"></a>6、接（一、2）ArgumentPreparedStatementSetter的setValues方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void setValues(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">    if (this.args != null) &#123;</span><br><span class="line">        for (int i = 0; i &lt; this.args.length; i++) &#123;</span><br><span class="line">            Object arg = this.args[i];</span><br><span class="line">            //设置参数</span><br><span class="line">            doSetValue(ps, i + 1, arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ArgumentPreparedStatementSetter的doSetValue方法"><a href="#7、ArgumentPreparedStatementSetter的doSetValue方法" class="headerlink" title="7、ArgumentPreparedStatementSetter的doSetValue方法"></a>7、ArgumentPreparedStatementSetter的doSetValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException &#123;</span><br><span class="line">    //设置参数</span><br><span class="line">    if (argValue instanceof SqlParameterValue) &#123;</span><br><span class="line">        SqlParameterValue paramValue = (SqlParameterValue) argValue;</span><br><span class="line">        StatementCreatorUtils.setParameterValue(ps, parameterPosition, paramValue, paramValue.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        StatementCreatorUtils.setParameterValue(ps, parameterPosition, SqlTypeValue.TYPE_UNKNOWN, argValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、2）RowMapperResultSetExtractor的extractData方法"><a href="#8、接（一、2）RowMapperResultSetExtractor的extractData方法" class="headerlink" title="8、接（一、2）RowMapperResultSetExtractor的extractData方法"></a>8、接（一、2）RowMapperResultSetExtractor的extractData方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;T&gt; extractData(ResultSet rs) throws SQLException &#123;</span><br><span class="line">    List&lt;T&gt; results = (this.rowsExpected &gt; 0 ? new ArrayList&lt;T&gt;(this.rowsExpected) : new ArrayList&lt;T&gt;());</span><br><span class="line">    int rowNum = 0;</span><br><span class="line">    while (rs.next()) &#123;</span><br><span class="line">        //解析结果</span><br><span class="line">        results.add(this.rowMapper.mapRow(rs, rowNum++));</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、RowMapper的mapRow方法"><a href="#9、RowMapper的mapRow方法" class="headerlink" title="9、RowMapper的mapRow方法"></a>9、RowMapper的mapRow方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">public User mapRow(ResultSet rs, int arg1) throws SQLException &#123;  </span><br><span class="line">    User user=new User();  </span><br><span class="line">    user.setUserId(Integer.parseInt(rs.getString(&quot;USERID&quot;)));  </span><br><span class="line">    user.setName(rs.getString(&quot;USERNAME&quot;));  </span><br><span class="line">    user.setPassword(rs.getString(&quot;USERPWD&quot;));  </span><br><span class="line">    return user;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、update执行过程"><a href="#二、update执行过程" class="headerlink" title="二、update执行过程"></a>二、update执行过程</h3><h4 id="1、JdbcTemplate的update方法"><a href="#1、JdbcTemplate的update方法" class="headerlink" title="1、JdbcTemplate的update方法"></a>1、JdbcTemplate的update方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int update(String sql, Object... args) throws DataAccessException &#123;</span><br><span class="line">    return update(sql, newArgPreparedStatementSetter(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int update(String sql, PreparedStatementSetter pss) throws DataAccessException &#123;</span><br><span class="line">    return update(new SimplePreparedStatementCreator(sql), pss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected int update(final PreparedStatementCreator psc, final PreparedStatementSetter pss)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    logger.debug(&quot;Executing prepared SQL update&quot;);</span><br><span class="line">    return execute(psc, new PreparedStatementCallback&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (pss != null) &#123;</span><br><span class="line">                    //设置参数</span><br><span class="line">                    pss.setValues(ps);</span><br><span class="line">                &#125;</span><br><span class="line">                //执行sql</span><br><span class="line">                int rows = ps.executeUpdate();</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;SQL update affected &quot; + rows + &quot; rows&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return rows;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if (pss instanceof ParameterDisposer) &#123;</span><br><span class="line">                    ((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、JdbcTemplate的execute方法"><a href="#2、JdbcTemplate的execute方法" class="headerlink" title="2、JdbcTemplate的execute方法"></a>2、JdbcTemplate的execute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T execute(PreparedStatementCreator psc, PreparedStatementCallback&lt;T&gt; action)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(psc, &quot;PreparedStatementCreator must not be null&quot;);</span><br><span class="line">    Assert.notNull(action, &quot;Callback object must not be null&quot;);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        logger.debug(&quot;Executing prepared SQL statement&quot; + (sql != null ? &quot; [&quot; + sql + &quot;]&quot; : &quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = DataSourceUtils.getConnection(getDataSource());</span><br><span class="line">    PreparedStatement ps = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Connection conToUse = con;</span><br><span class="line">        if (this.nativeJdbcExtractor != null &amp;&amp;</span><br><span class="line">                this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativePreparedStatements()) &#123;</span><br><span class="line">            conToUse = this.nativeJdbcExtractor.getNativeConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建PreparedStatement</span><br><span class="line">        ps = psc.createPreparedStatement(conToUse);</span><br><span class="line">        applyStatementSettings(ps);</span><br><span class="line">        PreparedStatement psToUse = ps;</span><br><span class="line">        if (this.nativeJdbcExtractor != null) &#123;</span><br><span class="line">            psToUse = this.nativeJdbcExtractor.getNativePreparedStatement(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行sql</span><br><span class="line">        T result = action.doInPreparedStatement(psToUse);</span><br><span class="line">        handleWarnings(ps);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        // Release Connection early, to avoid potential connection pool deadlock</span><br><span class="line">        // in the case when the exception translator hasn&apos;t been initialized yet.</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        psc = null;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        ps = null;</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">        con = null;</span><br><span class="line">        throw getExceptionTranslator().translate(&quot;PreparedStatementCallback&quot;, sql, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码IOC容器</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81IOC%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/Spring源码IOC容器/</id>
    <published>2020-01-13T14:32:37.946Z</published>
    <updated>2018-07-12T13:56:14.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ClassPathXmlApplicationContext容器启动"><a href="#一、ClassPathXmlApplicationContext容器启动" class="headerlink" title="一、ClassPathXmlApplicationContext容器启动"></a>一、ClassPathXmlApplicationContext容器启动</h3><h4 id="1、实例化ClassPathXmlApplicationContext"><a href="#1、实例化ClassPathXmlApplicationContext" class="headerlink" title="1、实例化ClassPathXmlApplicationContext"></a>1、实例化ClassPathXmlApplicationContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String configLocation) throws BeansException &#123;</span><br><span class="line">    this(new String[] &#123;configLocation&#125;, true, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String... configLocations) throws BeansException &#123;</span><br><span class="line">    this(configLocations, true, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">    //获取配置文件</span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    if (refresh) &#123;</span><br><span class="line">        //启动容器</span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法"><a href="#2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法" class="headerlink" title="2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法"></a>2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void setConfigLocations(String... locations) &#123;</span><br><span class="line">    if (locations != null) &#123;</span><br><span class="line">        Assert.noNullElements(locations, &quot;Config locations must not be null&quot;);</span><br><span class="line">        this.configLocations = new String[locations.length];</span><br><span class="line">        //获取配置文件</span><br><span class="line">        for (int i = 0; i &lt; locations.length; i++) &#123;</span><br><span class="line">            this.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        this.configLocations = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（一、1）AbstractApplicationContext的refresh方法"><a href="#3、接（一、1）AbstractApplicationContext的refresh方法" class="headerlink" title="3、接（一、1）AbstractApplicationContext的refresh方法"></a>3、接（一、1）AbstractApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        // Prepare this context for refreshing.</span><br><span class="line">        //准备刷新上下文环境</span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        // Tell the subclass to refresh the internal bean factory.</span><br><span class="line">        //初始化BeanFactory，并读取配置文件</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        // Prepare the bean factory for use in this context.</span><br><span class="line">        // 对BeanFactory进行功能填充</span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">            //空方法待子类实现</span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Invoke factory processors registered as beans in the context.</span><br><span class="line">            //激活BeanFactory处理器</span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Register bean processors that intercept bean creation.</span><br><span class="line">            //注册拦截bean的处理器</span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Initialize message source for this context.</span><br><span class="line">            //初始化国际化处理</span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            // Initialize event multicaster for this context.</span><br><span class="line">            //初始化应用消息广播器</span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            // Initialize other special beans in specific context subclasses.</span><br><span class="line">            //初始化其他特殊bean，留待子类实现</span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            // Check for listener beans and register them.</span><br><span class="line">            //注册监听器</span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">            //初始化剩下的单例（非懒加载的）</span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Last step: publish corresponding event.</span><br><span class="line">            //完成刷新过程</span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception encountered during context initialization - cancelling refresh attempt&quot;, ex);</span><br><span class="line"></span><br><span class="line">            // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            // Reset &apos;active&apos; flag.</span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            // Propagate exception to caller.</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractApplicationContext的prepareRefresh方法"><a href="#4、AbstractApplicationContext的prepareRefresh方法" class="headerlink" title="4、AbstractApplicationContext的prepareRefresh方法"></a>4、AbstractApplicationContext的prepareRefresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareRefresh() &#123;</span><br><span class="line">    this.startupDate = System.currentTimeMillis();</span><br><span class="line">    //容器激活</span><br><span class="line">    this.active.set(true);</span><br><span class="line"></span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Refreshing &quot; + this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize any placeholder property sources in the context environment</span><br><span class="line">    //待子类实现，处理个性化的属性</span><br><span class="line">    initPropertySources();</span><br><span class="line"></span><br><span class="line">    // Validate that all properties marked as required are resolvable</span><br><span class="line">    // see ConfigurablePropertyResolver#setRequiredProperties</span><br><span class="line">    //验证需要的属性文件是否都已放入环境中</span><br><span class="line">    getEnvironment().validateRequiredProperties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法"><a href="#5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法" class="headerlink" title="5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法"></a>5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractRefreshableApplicationContext的refreshBeanFactory方法"><a href="#6、AbstractRefreshableApplicationContext的refreshBeanFactory方法" class="headerlink" title="6、AbstractRefreshableApplicationContext的refreshBeanFactory方法"></a>6、AbstractRefreshableApplicationContext的refreshBeanFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">    //关闭已有的BeanFactory</span><br><span class="line">    if (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建DefaultListableBeanFactory</span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        //设置序列化id</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        //设置是否允许循环依赖、覆盖</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        //加载配置文件，</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">            this.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractXmlApplicationContext的loadBeanDefinitions方法"><a href="#7、AbstractXmlApplicationContext的loadBeanDefinitions方法" class="headerlink" title="7、AbstractXmlApplicationContext的loadBeanDefinitions方法"></a>7、AbstractXmlApplicationContext的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">    //关闭已有的BeanFactory</span><br><span class="line">    if (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建DefaultListableBeanFactory</span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        //设置序列化id</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        //设置是否允许循环依赖、覆盖</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        //加载配置文件，</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">            this.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、AbstractXmlApplicationContext的loadBeanDefinitions方法"><a href="#8、AbstractXmlApplicationContext的loadBeanDefinitions方法" class="headerlink" title="8、AbstractXmlApplicationContext的loadBeanDefinitions方法"></a>8、AbstractXmlApplicationContext的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123;</span><br><span class="line">    // Create a new XmlBeanDefinitionReader for the given BeanFactory.</span><br><span class="line">    //创建xml加载器</span><br><span class="line">    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">    // Configure the bean definition reader with this context&apos;s</span><br><span class="line">    // resource loading environment.</span><br><span class="line">    beanDefinitionReader.setEnvironment(this.getEnvironment());</span><br><span class="line">    beanDefinitionReader.setResourceLoader(this);</span><br><span class="line">    beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));</span><br><span class="line"></span><br><span class="line">    // Allow a subclass to provide custom initialization of the reader,</span><br><span class="line">    // then proceed with actually loading the bean definitions.</span><br><span class="line">    //初始化加载器，该方法可以被子类覆盖</span><br><span class="line">    initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">    //读取xml配置文件</span><br><span class="line">    loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法"><a href="#9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法" class="headerlink" title="9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法"></a>9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    // Tell the internal bean factory to use the context&apos;s class loader etc.</span><br><span class="line">    //设置context的类加载器为beanFactory的加载器</span><br><span class="line">    beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">    //设置SPEL表达式语言处理器，例如#｛bean.xxx｝，</span><br><span class="line">    //加载bean的过程中如(DefaultListableBeanFactory的evaluateBeanDefinitionString方法)，</span><br><span class="line">    //会调用StandardBeanExpressionResolver的evaluate方法</span><br><span class="line">    beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">    //属性设置管理工具,</span><br><span class="line">    //bean加载过程中AbstractBeanFactory的initBeanWrapper方法会调用ResourceEditorRegistrar的registerCustomEditors方法</span><br><span class="line">    //注册自定义属性编辑器，覆盖PropertyEditorRegistrySupport中默认属性编辑器</span><br><span class="line">    beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class="line"></span><br><span class="line">    // Configure the bean factory with context callbacks.</span><br><span class="line">    //添加BeanPostProcessor，该处理器为实现了特殊接口的bean提供处理</span><br><span class="line">    beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span><br><span class="line">    //忽略自动装配的接口</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line"></span><br><span class="line">    // BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class="line">    // MessageSource registered (and found for autowiring) as a bean.</span><br><span class="line">    //设置特殊接口的注入对象</span><br><span class="line">    beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">    beanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br><span class="line"></span><br><span class="line">    // Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br><span class="line">    //增加对AspectJ的支持</span><br><span class="line">    if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">        // Set a temporary ClassLoader for type matching.</span><br><span class="line">        beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Register default environment beans.</span><br><span class="line">    注册默认的bean</span><br><span class="line">    if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">    if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">    &#125;</span><br><span class="line">    if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法"><a href="#10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法" class="headerlink" title="10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法"></a>10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法"><a href="#11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法" class="headerlink" title="11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法"></a>11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">public static void invokeBeanFactoryPostProcessors(</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</span><br><span class="line"></span><br><span class="line">    // Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><br><span class="line">    Set&lt;String&gt; processedBeans = new HashSet&lt;String&gt;();</span><br><span class="line">    //对BeanDefinitionRegistry类型的处理</span><br><span class="line">    if (beanFactory instanceof BeanDefinitionRegistry) &#123;</span><br><span class="line">        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">        List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = new LinkedList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; registryPostProcessors =</span><br><span class="line">                new LinkedList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        //硬编码注册的处理器</span><br><span class="line">        for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">            //该类型，在BeanFactoryPostProcessor的基础上还有自己定义的方法需要先调用</span><br><span class="line">            if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">                BeanDefinitionRegistryPostProcessor registryPostProcessor =</span><br><span class="line">                        (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">                //调用自己定义的方法</span><br><span class="line">                registryPostProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                registryPostProcessors.add(registryPostProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">            //常规BeanFactoryPostProcessor</span><br><span class="line">            else &#123;</span><br><span class="line">                regularPostProcessors.add(postProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">        // uninitialized to let the bean factory post-processors apply to them!</span><br><span class="line">        // Separate between BeanDefinitionRegistryPostProcessors that implement</span><br><span class="line">        // PriorityOrdered, Ordered, and the rest.</span><br><span class="line">        //配置注册的BeanDefinitionRegistryPostProcessor</span><br><span class="line">        String[] postProcessorNames =</span><br><span class="line">                beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">        // First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        for (String ppName : postProcessorNames) &#123;</span><br><span class="line">            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">                priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //排序</span><br><span class="line">        OrderComparator.sort(priorityOrderedPostProcessors);</span><br><span class="line">        //加入处理器集合</span><br><span class="line">        registryPostProcessors.addAll(priorityOrderedPostProcessors);</span><br><span class="line">        //调用自己定义的方法</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);</span><br><span class="line"></span><br><span class="line">        // Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span><br><span class="line">        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        for (String ppName : postProcessorNames) &#123;</span><br><span class="line">            if (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">                orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //排序</span><br><span class="line">        OrderComparator.sort(orderedPostProcessors);</span><br><span class="line">        //加入处理器集合</span><br><span class="line">        registryPostProcessors.addAll(orderedPostProcessors);</span><br><span class="line">        //调用自己定义的方法</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);</span><br><span class="line"></span><br><span class="line">        // Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span><br><span class="line">        //调用其他处理器的自己定义的方法</span><br><span class="line">        boolean reiterate = true;</span><br><span class="line">        while (reiterate) &#123;</span><br><span class="line">            reiterate = false;</span><br><span class="line">            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line">            for (String ppName : postProcessorNames) &#123;</span><br><span class="line">                if (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">                    BeanDefinitionRegistryPostProcessor pp = beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class);</span><br><span class="line">                    registryPostProcessors.add(pp);</span><br><span class="line">                    processedBeans.add(ppName);</span><br><span class="line">                    pp.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                    reiterate = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span><br><span class="line">        //应用处理器</span><br><span class="line">        invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);</span><br><span class="line">        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">        // Invoke factory processors registered with the context instance.</span><br><span class="line">        //直接应用处理器</span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">    // uninitialized to let the bean factory post-processors apply to them!</span><br><span class="line">    //配置注册的BeanFactoryPostProcessor</span><br><span class="line">    String[] postProcessorNames =</span><br><span class="line">            beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">    // Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span><br><span class="line">    // Ordered, and the rest.</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    //对后处理器分类</span><br><span class="line">    for (String ppName : postProcessorNames) &#123;</span><br><span class="line">        if (processedBeans.contains(ppName)) &#123;</span><br><span class="line">            // skip - already processed in first phase above</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span><br><span class="line">    //排序并应用后处理器</span><br><span class="line">    OrderComparator.sort(priorityOrderedPostProcessors);</span><br><span class="line">    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    // Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    for (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">     //排序并应用后处理器</span><br><span class="line">    OrderComparator.sort(orderedPostProcessors);</span><br><span class="line">    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    // Finally, invoke all other BeanFactoryPostProcessors.</span><br><span class="line">    //应用不用排序的后处理器</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    for (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法"><a href="#12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法" class="headerlink" title="12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法"></a>12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法"><a href="#13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法" class="headerlink" title="13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法"></a>13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public static void registerBeanPostProcessors(</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</span><br><span class="line">    //获取配置注册的BeanPostProcessor</span><br><span class="line">    String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">    // Register BeanPostProcessorChecker that logs an info message when</span><br><span class="line">    // a bean is created during BeanPostProcessor instantiation, i.e. when</span><br><span class="line">    // a bean is not eligible for getting processed by all BeanPostProcessors.</span><br><span class="line">    int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;</span><br><span class="line">    //该处理器，在bean初始化时，检测到后处理器未注册完，打印日志</span><br><span class="line">    beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line"></span><br><span class="line">    // Separate between BeanPostProcessors that implement PriorityOrdered,</span><br><span class="line">    // Ordered, and the rest.</span><br><span class="line">    List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    List&lt;BeanPostProcessor&gt; internalPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    //分类bean处理器</span><br><span class="line">    for (String ppName : postProcessorNames) &#123;</span><br><span class="line">        if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">            priorityOrderedPostProcessors.add(pp);</span><br><span class="line">            if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">                internalPostProcessors.add(pp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // First, register the BeanPostProcessors that implement PriorityOrdered.</span><br><span class="line">    //排序并注册处理器</span><br><span class="line">    OrderComparator.sort(priorityOrderedPostProcessors);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    // Next, register the BeanPostProcessors that implement Ordered.</span><br><span class="line">    List&lt;BeanPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    for (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">        orderedPostProcessors.add(pp);</span><br><span class="line">        if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //排序并注册处理器</span><br><span class="line">    OrderComparator.sort(orderedPostProcessors);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    // Now, register all regular BeanPostProcessors.</span><br><span class="line">    //注册无序处理器</span><br><span class="line">    List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    for (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">        nonOrderedPostProcessors.add(pp);</span><br><span class="line">        if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    // Finally, re-register all internal BeanPostProcessors.</span><br><span class="line">    //注册MergedBeanDefinitionPostProcessor处理器，不会重复注册，会先删除</span><br><span class="line">    OrderComparator.sort(internalPostProcessors);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（一、3）AbstractApplicationContext的initMessageSource方法"><a href="#14、接（一、3）AbstractApplicationContext的initMessageSource方法" class="headerlink" title="14、接（一、3）AbstractApplicationContext的initMessageSource方法"></a>14、接（一、3）AbstractApplicationContext的initMessageSource方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">protected void initMessageSource() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">        //获取配置的messageSource记录在容器中</span><br><span class="line">        this.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</span><br><span class="line">        // Make MessageSource aware of parent MessageSource.</span><br><span class="line">        if (this.parent != null &amp;&amp; this.messageSource instanceof HierarchicalMessageSource) &#123;</span><br><span class="line">            HierarchicalMessageSource hms = (HierarchicalMessageSource) this.messageSource;</span><br><span class="line">            if (hms.getParentMessageSource() == null) &#123;</span><br><span class="line">                // Only set parent context as parent MessageSource if no parent MessageSource</span><br><span class="line">                // registered already.</span><br><span class="line">                hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Using MessageSource [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Use empty MessageSource to be able to accept getMessage calls.</span><br><span class="line">        DelegatingMessageSource dms = new DelegatingMessageSource();</span><br><span class="line">        dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">        this.messageSource = dms;</span><br><span class="line">        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Unable to locate MessageSource with name &apos;&quot; + MESSAGE_SOURCE_BEAN_NAME +</span><br><span class="line">                    &quot;&apos;: using default [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法"><a href="#15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法" class="headerlink" title="15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法"></a>15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected void initApplicationEventMulticaster() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    //使用自定义广播器</span><br><span class="line">    if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">        this.applicationEventMulticaster =</span><br><span class="line">                beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Using ApplicationEventMulticaster [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //默认广播器</span><br><span class="line">    else &#123;</span><br><span class="line">        this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Unable to locate ApplicationEventMulticaster with name &apos;&quot; +</span><br><span class="line">                    APPLICATION_EVENT_MULTICASTER_BEAN_NAME +</span><br><span class="line">                    &quot;&apos;: using default [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、接（一、3）AbstractApplicationContext的registerListeners方法"><a href="#16、接（一、3）AbstractApplicationContext的registerListeners方法" class="headerlink" title="16、接（一、3）AbstractApplicationContext的registerListeners方法"></a>16、接（一、3）AbstractApplicationContext的registerListeners方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected void registerListeners() &#123;</span><br><span class="line">    // Register statically specified listeners first.</span><br><span class="line">    //注册硬编码的监听器到广播器</span><br><span class="line">    for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">    // uninitialized to let post-processors apply to them!</span><br><span class="line">    //注册配置的监听器到广播器</span><br><span class="line">    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);</span><br><span class="line">    for (String lisName : listenerBeanNames) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListenerBean(lisName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法"><a href="#17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法" class="headerlink" title="17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法"></a>17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    // Initialize conversion service for this context.</span><br><span class="line">    //初始化自定义类型转换器</span><br><span class="line">    if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br><span class="line">    //该接口，加载Spring Bean时织入第三方模块，如AspectJ</span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);</span><br><span class="line">    for (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Stop using the temporary ClassLoader for type matching.</span><br><span class="line">    beanFactory.setTempClassLoader(null);</span><br><span class="line"></span><br><span class="line">    // Allow for caching all bean definition metadata, not expecting further changes.</span><br><span class="line">    //冻结bean的定义</span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">    //初始化剩下的单实例bean</span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（一、3）AbstractApplicationContext的finishRefresh方法"><a href="#18、接（一、3）AbstractApplicationContext的finishRefresh方法" class="headerlink" title="18、接（一、3）AbstractApplicationContext的finishRefresh方法"></a>18、接（一、3）AbstractApplicationContext的finishRefresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected void finishRefresh() &#123;</span><br><span class="line">    // Initialize lifecycle processor for this context.</span><br><span class="line">    //初始化bean生命周期处理器</span><br><span class="line">    initLifecycleProcessor();</span><br><span class="line"></span><br><span class="line">    // Propagate refresh to lifecycle processor first.</span><br><span class="line">    //启动实现了Lifecycle接口的bean</span><br><span class="line">    getLifecycleProcessor().onRefresh();</span><br><span class="line"></span><br><span class="line">    // Publish the final event.</span><br><span class="line">    publishEvent(new ContextRefreshedEvent(this));</span><br><span class="line"></span><br><span class="line">    // Participate in LiveBeansView MBean, if active.</span><br><span class="line">    //容器注册到MBeanServer中</span><br><span class="line">    LiveBeansView.registerApplicationContext(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、AbstractApplicationContext的initLifecycleProcessor方法"><a href="#19、AbstractApplicationContext的initLifecycleProcessor方法" class="headerlink" title="19、AbstractApplicationContext的initLifecycleProcessor方法"></a>19、AbstractApplicationContext的initLifecycleProcessor方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">protected void initLifecycleProcessor() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    if (beanFactory.containsLocalBean(LIFECYCLE_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        this.lifecycleProcessor =</span><br><span class="line">                beanFactory.getBean(LIFECYCLE_PROCESSOR_BEAN_NAME, LifecycleProcessor.class);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Using LifecycleProcessor [&quot; + this.lifecycleProcessor + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //默认bean生命周期处理器</span><br><span class="line">        DefaultLifecycleProcessor defaultProcessor = new DefaultLifecycleProcessor();</span><br><span class="line">        defaultProcessor.setBeanFactory(beanFactory);</span><br><span class="line">        this.lifecycleProcessor = defaultProcessor;</span><br><span class="line">        beanFactory.registerSingleton(LIFECYCLE_PROCESSOR_BEAN_NAME, this.lifecycleProcessor);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Unable to locate LifecycleProcessor with name &apos;&quot; +</span><br><span class="line">                    LIFECYCLE_PROCESSOR_BEAN_NAME +</span><br><span class="line">                    &quot;&apos;: using default [&quot; + this.lifecycleProcessor + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、接（一、18）DefaultLifecycleProcessor的onRefresh方法"><a href="#20、接（一、18）DefaultLifecycleProcessor的onRefresh方法" class="headerlink" title="20、接（一、18）DefaultLifecycleProcessor的onRefresh方法"></a>20、接（一、18）DefaultLifecycleProcessor的onRefresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRefresh() &#123;</span><br><span class="line">    startBeans(true);</span><br><span class="line">    this.running = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、DefaultLifecycleProcessor的startBeans方法"><a href="#21、DefaultLifecycleProcessor的startBeans方法" class="headerlink" title="21、DefaultLifecycleProcessor的startBeans方法"></a>21、DefaultLifecycleProcessor的startBeans方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void startBeans(boolean autoStartupOnly) &#123;</span><br><span class="line">    //获取实现了Lifecycle接口的bean</span><br><span class="line">    Map&lt;String, Lifecycle&gt; lifecycleBeans = getLifecycleBeans();</span><br><span class="line">    Map&lt;Integer, LifecycleGroup&gt; phases = new HashMap&lt;Integer, LifecycleGroup&gt;();</span><br><span class="line">    //根据phases分组bean</span><br><span class="line">    for (Map.Entry&lt;String, ? extends Lifecycle&gt; entry : lifecycleBeans.entrySet()) &#123;</span><br><span class="line">        Lifecycle bean = entry.getValue();</span><br><span class="line">        if (!autoStartupOnly || (bean instanceof SmartLifecycle &amp;&amp; ((SmartLifecycle) bean).isAutoStartup())) &#123;</span><br><span class="line">            int phase = getPhase(bean);</span><br><span class="line">            LifecycleGroup group = phases.get(phase);</span><br><span class="line">            if (group == null) &#123;</span><br><span class="line">                group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);</span><br><span class="line">                phases.put(phase, group);</span><br><span class="line">            &#125;</span><br><span class="line">            group.add(entry.getKey(), bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (phases.size() &gt; 0) &#123;</span><br><span class="line">        List&lt;Integer&gt; keys = new ArrayList&lt;Integer&gt;(phases.keySet());</span><br><span class="line">        Collections.sort(keys);</span><br><span class="line">        for (Integer key : keys) &#123;</span><br><span class="line">            //启动该分组的bean</span><br><span class="line">            phases.get(key).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、接（一、18）AbstractApplicationContext的publishEvent方法"><a href="#22、接（一、18）AbstractApplicationContext的publishEvent方法" class="headerlink" title="22、接（一、18）AbstractApplicationContext的publishEvent方法"></a>22、接（一、18）AbstractApplicationContext的publishEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void publishEvent(ApplicationEvent event) &#123;</span><br><span class="line">    Assert.notNull(event, &quot;Event must not be null&quot;);</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Publishing event in &quot; + getDisplayName() + &quot;: &quot; + event);</span><br><span class="line">    &#125;</span><br><span class="line">    //广播容器刷新完成事件</span><br><span class="line">    getApplicationEventMulticaster().multicastEvent(event);</span><br><span class="line">    if (this.parent != null) &#123;</span><br><span class="line">        this.parent.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、SimpleApplicationEventMulticaster的multicastEvent方法"><a href="#23、SimpleApplicationEventMulticaster的multicastEvent方法" class="headerlink" title="23、SimpleApplicationEventMulticaster的multicastEvent方法"></a>23、SimpleApplicationEventMulticaster的multicastEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void multicastEvent(final ApplicationEvent event) &#123;</span><br><span class="line">    //获取事件相关的监听器</span><br><span class="line">    for (final ApplicationListener&lt;?&gt; listener : getApplicationListeners(event)) &#123;</span><br><span class="line">        Executor executor = getTaskExecutor();</span><br><span class="line">        if (executor != null) &#123;</span><br><span class="line">            executor.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    //监听器处理事件</span><br><span class="line">                    invokeListener(listener, event);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            invokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、ClassPathXmlApplicationContext容器关闭"><a href="#二、ClassPathXmlApplicationContext容器关闭" class="headerlink" title="二、ClassPathXmlApplicationContext容器关闭"></a>二、ClassPathXmlApplicationContext容器关闭</h3><h4 id="1、AbstractApplicationContext的close方法"><a href="#1、AbstractApplicationContext的close方法" class="headerlink" title="1、AbstractApplicationContext的close方法"></a>1、AbstractApplicationContext的close方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        //关闭</span><br><span class="line">        doClose();</span><br><span class="line">        // If we registered a JVM shutdown hook, we don&apos;t need it anymore now:</span><br><span class="line">        // We&apos;ve already explicitly closed the context.</span><br><span class="line">        //移除关闭回调</span><br><span class="line">        if (this.shutdownHook != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Runtime.getRuntime().removeShutdownHook(this.shutdownHook);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IllegalStateException ex) &#123;</span><br><span class="line">                // ignore - VM is already shutting down</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractApplicationContext的doClose方法"><a href="#2、AbstractApplicationContext的doClose方法" class="headerlink" title="2、AbstractApplicationContext的doClose方法"></a>2、AbstractApplicationContext的doClose方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">protected void doClose() &#123;</span><br><span class="line">    //更新状态为关闭</span><br><span class="line">    if (this.active.get() &amp;&amp; this.closed.compareAndSet(false, true)) &#123;</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Closing &quot; + this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LiveBeansView.unregisterApplicationContext(this);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Publish shutdown event.</span><br><span class="line">            //广播容器关闭事件</span><br><span class="line">            publishEvent(new ContextClosedEvent(this));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception thrown from ApplicationListener handling ContextClosedEvent&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Stop all Lifecycle beans, to avoid delays during individual destruction.</span><br><span class="line">        try &#123;</span><br><span class="line">            //关闭实现了Lifecycle接口的bean</span><br><span class="line">            getLifecycleProcessor().onClose();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception thrown from LifecycleProcessor on context close&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Destroy all cached singletons in the context&apos;s BeanFactory.</span><br><span class="line">        //销毁bean</span><br><span class="line">        destroyBeans();</span><br><span class="line"></span><br><span class="line">        // Close the state of this context itself.</span><br><span class="line">        //销毁容器</span><br><span class="line">        closeBeanFactory();</span><br><span class="line"></span><br><span class="line">        // Let subclasses do some final clean-up if they wish...</span><br><span class="line">        //待子类实现</span><br><span class="line">        onClose();</span><br><span class="line">        //更新容器状态</span><br><span class="line">        this.active.set(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、AnnotationConfigApplicationContext容器启动"><a href="#三、AnnotationConfigApplicationContext容器启动" class="headerlink" title="三、AnnotationConfigApplicationContext容器启动"></a>三、AnnotationConfigApplicationContext容器启动</h3><h4 id="1、实例化AnnotationConfigApplicationContext"><a href="#1、实例化AnnotationConfigApplicationContext" class="headerlink" title="1、实例化AnnotationConfigApplicationContext"></a>1、实例化AnnotationConfigApplicationContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationConfigApplicationContext(String... basePackages) &#123;</span><br><span class="line">    this();</span><br><span class="line">    //扫描该包</span><br><span class="line">    scan(basePackages);</span><br><span class="line">    //启动容器</span><br><span class="line">    refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationConfigApplicationContext() &#123;</span><br><span class="line">    this.reader = new AnnotatedBeanDefinitionReader(this);</span><br><span class="line">    this.scanner = new ClassPathBeanDefinitionScanner(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public GenericApplicationContext() &#123;</span><br><span class="line">    //内置的容器</span><br><span class="line">    this.beanFactory = new DefaultListableBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化AnnotatedBeanDefinitionReader"><a href="#2、实例化AnnotatedBeanDefinitionReader" class="headerlink" title="2、实例化AnnotatedBeanDefinitionReader"></a>2、实例化AnnotatedBeanDefinitionReader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    this(registry, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) &#123;</span><br><span class="line">    Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">    Assert.notNull(environment, &quot;Environment must not be null&quot;);</span><br><span class="line">    this.registry = registry;</span><br><span class="line">    this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);</span><br><span class="line">    //注册处理器</span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法"><a href="#3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法" class="headerlink" title="3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法"></a>3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    registerAnnotationConfigProcessors(registry, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;BeanDefinitionHolder&gt; registerAnnotationConfigProcessors(</span><br><span class="line">        BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    //获取容器中的DefaultListableBeanFactory容器</span><br><span class="line">    DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    if (beanFactory != null) &#123;</span><br><span class="line">        //比较器</span><br><span class="line">        if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        //确定一个bean是否要被注入的工具</span><br><span class="line">        if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefs = new LinkedHashSet&lt;BeanDefinitionHolder&gt;(4);</span><br><span class="line"></span><br><span class="line">    //配置类解析器</span><br><span class="line">    if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //@Autowired、@Value处理器</span><br><span class="line">    if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //检查带有@Required注解的所有Bean属性是否设置</span><br><span class="line">    if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span><br><span class="line">    //处理@Resource注解及WebService、EJB相关的注解</span><br><span class="line">    if (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span><br><span class="line">    //JPA相关注解的Bean后置处理器，主要解析和处理@PersistenceUnit、@PersistenceContext注解</span><br><span class="line">    if (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition();</span><br><span class="line">        try &#123;</span><br><span class="line">            def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">                    AnnotationConfigUtils.class.getClassLoader()));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new IllegalStateException(</span><br><span class="line">                    &quot;Cannot load optional framework class: &quot; + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //容器加载完单例bean之后执行处理器的afterSingletonsInstantiated方法</span><br><span class="line">    //遍历bean将其中注解了@EventListener的方法转换成监听器注册到容器中</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //创建监听器的工厂类</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（三、1）ClassPathXmlApplicationContext的scan方法"><a href="#4、接（三、1）ClassPathXmlApplicationContext的scan方法" class="headerlink" title="4、接（三、1）ClassPathXmlApplicationContext的scan方法"></a>4、接（三、1）ClassPathXmlApplicationContext的scan方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void scan(String... basePackages) &#123;</span><br><span class="line">    Assert.notEmpty(basePackages, &quot;At least one base package must be specified&quot;);</span><br><span class="line">    //扫描该包</span><br><span class="line">    this.scanner.scan(basePackages);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ClassPathBeanDefinitionScanner的scan方法"><a href="#5、ClassPathBeanDefinitionScanner的scan方法" class="headerlink" title="5、ClassPathBeanDefinitionScanner的scan方法"></a>5、ClassPathBeanDefinitionScanner的scan方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int scan(String... basePackages) &#123;</span><br><span class="line">    int beanCountAtScanStart = this.registry.getBeanDefinitionCount();</span><br><span class="line">    //扫描包</span><br><span class="line">    doScan(basePackages);</span><br><span class="line"></span><br><span class="line">    // Register annotation config processors, if necessary.</span><br><span class="line">    //注册</span><br><span class="line">    if (this.includeAnnotationConfig) &#123;</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、ClassPathBeanDefinitionScanner的doScan方法"><a href="#6、ClassPathBeanDefinitionScanner的doScan方法" class="headerlink" title="6、ClassPathBeanDefinitionScanner的doScan方法"></a>6、ClassPathBeanDefinitionScanner的doScan方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">protected Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) &#123;</span><br><span class="line">    Assert.notEmpty(basePackages, &quot;At least one base package must be specified&quot;);</span><br><span class="line">    //创建一个集合，存放扫描到Bean定义的封装类</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = new LinkedHashSet&lt;BeanDefinitionHolder&gt;();</span><br><span class="line">    //循环不同的包</span><br><span class="line">    for (String basePackage : basePackages) &#123;</span><br><span class="line">        //扫描给定包，获取符合条件的Bean定义，返回ScannedGenericBeanDefinition的集合</span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        for (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            //获取Bean定义类中@Scope注解的值，即获取Bean的作用域</span><br><span class="line">            ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            //为Bean设置注解配置的作用域</span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            //为Bean生成名称，@Component(&quot;beanName&quot;)的值或类名</span><br><span class="line">            String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry);</span><br><span class="line">            </span><br><span class="line">            if (candidate instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">                //设置Bean默认值，设置Bean是否将要被注入其他Bean</span><br><span class="line">                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (candidate instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">                //处理注解Bean中通用的注解，在分析注解Bean定义类读取器时已经分析过</span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            //根据Bean名称检查指定的Bean是否需要在容器中注册，或者在容器中冲突</span><br><span class="line">            if (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">                //根据注解中配置的作用域，为Bean应用相应的代理模式</span><br><span class="line">                definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                //向容器注册扫描到的Bean  </span><br><span class="line">                registerBeanDefinition(definitionHolder, this.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ClassPathBeanDefinitionScanner的findCandidateComponents方法"><a href="#7、ClassPathBeanDefinitionScanner的findCandidateComponents方法" class="headerlink" title="7、ClassPathBeanDefinitionScanner的findCandidateComponents方法"></a>7、ClassPathBeanDefinitionScanner的findCandidateComponents方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public Set&lt;BeanDefinition&gt; findCandidateComponents(String basePackage) &#123;</span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = new LinkedHashSet&lt;BeanDefinition&gt;();</span><br><span class="line">    try &#123;</span><br><span class="line">        //解析给定的包路径，this.resourcePattern=” **/*.class”，  </span><br><span class="line">        //ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX=“classpath:”  </span><br><span class="line">        //resolveBasePackage方法将包名中的”.”转换为文件系统的”/”  </span><br><span class="line">        String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">                resolveBasePackage(basePackage) + &quot;/&quot; + this.resourcePattern;</span><br><span class="line">        //将给定的包路径解析为Spring资源对象 </span><br><span class="line">        Resource[] resources = this.resourcePatternResolver.getResources(packageSearchPath);</span><br><span class="line">        boolean traceEnabled = logger.isTraceEnabled();</span><br><span class="line">        boolean debugEnabled = logger.isDebugEnabled();</span><br><span class="line">        //遍历扫描到的资源</span><br><span class="line">        for (Resource resource : resources) &#123;</span><br><span class="line">            if (traceEnabled) &#123;</span><br><span class="line">                logger.trace(&quot;Scanning &quot; + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            if (resource.isReadable()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //为指定资源获取元数据读取器，元信息读取器通过汇编(ASM)读取资源元信息 </span><br><span class="line">                    MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource);</span><br><span class="line">                    //如果扫描到的类符合容器配置的过滤规则</span><br><span class="line">                    if (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                        //通过汇编(ASM)读取资源字节码中的Bean定义元信息 </span><br><span class="line">                        ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);</span><br><span class="line">                        //设置Bean定义来源于resource</span><br><span class="line">                        sbd.setResource(resource);</span><br><span class="line">                        //为元数据元素设置配置资源对象</span><br><span class="line">                        sbd.setSource(resource);</span><br><span class="line">                        //检查Bean是否符合过滤器要求</span><br><span class="line">                        if (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                            if (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(&quot;Identified candidate component class: &quot; + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                            //添加BeanDefinition</span><br><span class="line">                            candidates.add(sbd);</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(&quot;Ignored because not a concrete top-level class: &quot; + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (traceEnabled) &#123;</span><br><span class="line">                            logger.trace(&quot;Ignored because not matching any filter: &quot; + resource);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Throwable ex) &#123;</span><br><span class="line">                    throw new BeanDefinitionStoreException(</span><br><span class="line">                            &quot;Failed to read candidate component class: &quot; + resource, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                if (traceEnabled) &#123;</span><br><span class="line">                    logger.trace(&quot;Ignored because not readable: &quot; + resource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(&quot;I/O failure during classpath scanning&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    return candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、ClassPathBeanDefinitionScanner的isCandidateComponent方法"><a href="#8、ClassPathBeanDefinitionScanner的isCandidateComponent方法" class="headerlink" title="8、ClassPathBeanDefinitionScanner的isCandidateComponent方法"></a>8、ClassPathBeanDefinitionScanner的isCandidateComponent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected boolean isCandidateComponent(MetadataReader metadataReader) throws IOException &#123;</span><br><span class="line">    //排除过滤器</span><br><span class="line">    for (TypeFilter tf : this.excludeFilters) &#123;</span><br><span class="line">        if (tf.match(metadataReader, this.metadataReaderFactory)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //过滤器</span><br><span class="line">    for (TypeFilter tf : this.includeFilters) &#123;</span><br><span class="line">        if (tf.match(metadataReader, this.metadataReaderFactory)) &#123;</span><br><span class="line">            return isConditionMatch(metadataReader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法"><a href="#9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法" class="headerlink" title="9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法"></a>9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法</h4><p>注册默认的过滤器，在父类构ClassPathScanningCandidateComponentProvider造器中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected void registerDefaultFilters() &#123;</span><br><span class="line">    //支持Component注解</span><br><span class="line">    this.includeFilters.add(new AnnotationTypeFilter(Component.class));</span><br><span class="line">    ClassLoader cl = ClassPathScanningCandidateComponentProvider.class.getClassLoader();</span><br><span class="line">    try &#123;</span><br><span class="line">        //支持JavaEE6的@ManagedBean  </span><br><span class="line">        this.includeFilters.add(new AnnotationTypeFilter(</span><br><span class="line">                ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(&quot;javax.annotation.ManagedBean&quot;, cl)), false));</span><br><span class="line">        logger.debug(&quot;JSR-250 &apos;javax.annotation.ManagedBean&apos; found and supported for component scanning&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        // JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //支持JSR-330的@Named注解</span><br><span class="line">        this.includeFilters.add(new AnnotationTypeFilter(</span><br><span class="line">                ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(&quot;javax.inject.Named&quot;, cl)), false));</span><br><span class="line">        logger.debug(&quot;JSR-330 &apos;javax.inject.Named&apos; annotation found and supported for component scanning&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        // JSR-330 API not available - simply skip.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法"><a href="#10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法" class="headerlink" title="10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法"></a>10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ScopeMetadata resolveScopeMetadata(BeanDefinition definition) &#123;</span><br><span class="line">    ScopeMetadata metadata = new ScopeMetadata();</span><br><span class="line">    if (definition instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">        AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition;</span><br><span class="line">        //从注解Bean定义类的属性中查找属性为”Scope”的值，即@Scope注解的值  </span><br><span class="line">        // annDef.getMetadata()方法获取StandardAnnotationMetadata，该对象维护了Bean中所有注解和注解的值</span><br><span class="line">        AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(annDef.getMetadata(), this.scopeAnnotationType);</span><br><span class="line">        //将获取到的@Scope注解的值设置到要返回的对象中</span><br><span class="line">        if (attributes != null) &#123;</span><br><span class="line">            metadata.setScopeName(attributes.getString(&quot;value&quot;));</span><br><span class="line">            //获取@Scope注解中的proxyMode属性值，在创建代理对象时会用到</span><br><span class="line">            ScopedProxyMode proxyMode = attributes.getEnum(&quot;proxyMode&quot;);</span><br><span class="line">            //如果@Scope的proxyMode属性值为null、DEFAULT或者NO  </span><br><span class="line">            if (proxyMode == null || proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">                proxyMode = this.defaultProxyMode;</span><br><span class="line">            &#125;</span><br><span class="line">            //为返回的元数据设置proxyMode</span><br><span class="line">            metadata.setScopedProxyMode(proxyMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回解析的作用域元信息对象</span><br><span class="line">    return metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法"><a href="#11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法" class="headerlink" title="11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法"></a>11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) &#123;</span><br><span class="line">    processCommonDefinitionAnnotations(abd, abd.getMetadata());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line">    //如果Bean定义中有@Lazy注解，则将该Bean预实例化属性设置为@lazy注解的值</span><br><span class="line">    if (metadata.isAnnotated(Lazy.class.getName())) &#123;</span><br><span class="line">        abd.setLazyInit(attributesFor(metadata, Lazy.class).getBoolean(&quot;value&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    else if (abd.getMetadata() != metadata &amp;&amp; abd.getMetadata().isAnnotated(Lazy.class.getName())) &#123;</span><br><span class="line">        abd.setLazyInit(attributesFor(abd.getMetadata(), Lazy.class).getBoolean(&quot;value&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //如果Bean定义中有@Primary注解，则为该Bean设置为autowiring自动依赖注入配的首选对象</span><br><span class="line">    if (metadata.isAnnotated(Primary.class.getName())) &#123;</span><br><span class="line">        abd.setPrimary(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //如果Bean定义中有@ DependsOn注解，则为该Bean设置所依赖的Bean名称，  </span><br><span class="line">    //容器将确保在实例化该Bean之前首先实例化所依赖的Bean</span><br><span class="line">    if (metadata.isAnnotated(DependsOn.class.getName())) &#123;</span><br><span class="line">        abd.setDependsOn(attributesFor(metadata, DependsOn.class).getStringArray(&quot;value&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (abd instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        AbstractBeanDefinition absBd = (AbstractBeanDefinition) abd;</span><br><span class="line">        //设置@Role的值</span><br><span class="line">        if (metadata.isAnnotated(Role.class.getName())) &#123;</span><br><span class="line">            absBd.setRole(attributesFor(metadata, Role.class).getNumber(&quot;value&quot;).intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        //设置@Description得值</span><br><span class="line">        if (metadata.isAnnotated(Description.class.getName())) &#123;</span><br><span class="line">            absBd.setDescription(attributesFor(metadata, Description.class).getString(&quot;value&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（三、1）AbstractApplicationContext的refresh方法"><a href="#12、接（三、1）AbstractApplicationContext的refresh方法" class="headerlink" title="12、接（三、1）AbstractApplicationContext的refresh方法"></a>12、接（三、1）AbstractApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        // Prepare this context for refreshing.</span><br><span class="line">        //清空scanner缓存，其余逻辑与一中容器相同</span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        // Tell the subclass to refresh the internal bean factory.</span><br><span class="line">        //直接获取容器父类GenericApplicationContext中的DefaultListableBeanFactory对象</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        // Prepare the bean factory for use in this context.</span><br><span class="line">        //与一中容器相同</span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">            //待子类实现</span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Invoke factory processors registered as beans in the context.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Register bean processors that intercept bean creation.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Initialize message source for this context.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            // Initialize event multicaster for this context.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            // Initialize other special beans in specific context subclasses.</span><br><span class="line">            //待子类实现</span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            // Check for listener beans and register them.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Last step: publish corresponding event.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception encountered during context initialization - cancelling refresh attempt&quot;, ex);</span><br><span class="line"></span><br><span class="line">            // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            // Reset &apos;active&apos; flag.</span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            // Propagate exception to caller.</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"><a href="#13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器" class="headerlink" title="13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"></a>13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public AutowiredAnnotationBeanPostProcessor() &#123;</span><br><span class="line">    //将会处理@Autowire注解</span><br><span class="line">    this.autowiredAnnotationTypes.add(Autowired.class);</span><br><span class="line">    //将会处理@Value注解</span><br><span class="line">    this.autowiredAnnotationTypes.add(Value.class);</span><br><span class="line">    try &#123;</span><br><span class="line">        //将会处理javax.inject.Inject JSR-330注解</span><br><span class="line">        this.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</span><br><span class="line">                ClassUtils.forName(&quot;javax.inject.Inject&quot;, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</span><br><span class="line">        logger.info(&quot;JSR-330 &apos;javax.inject.Inject&apos; annotation found and supported for autowiring&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        // JSR-330 API not available - simply skip.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"><a href="#14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法" class="headerlink" title="14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"></a>14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName) &#123;</span><br><span class="line">    //获取给定类的autowire相关注解的字段及方法</span><br><span class="line">    InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, null);</span><br><span class="line">    metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法"><a href="#15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法" class="headerlink" title="15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法"></a>15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata findAutowiringMetadata(String beanName, Class&lt;?&gt; clazz, @Nullable PropertyValues pvs) &#123;</span><br><span class="line">    // Fall back to class name as cache key, for backwards compatibility with custom callers.</span><br><span class="line">    //先从缓存中获取</span><br><span class="line">    String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</span><br><span class="line">    // Quick check on the concurrent map first, with minimal locking.</span><br><span class="line">    InjectionMetadata metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">    if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">        synchronized (this.injectionMetadataCache) &#123;</span><br><span class="line">            metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">            if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">                if (metadata != null) &#123;</span><br><span class="line">                    metadata.clear(pvs);</span><br><span class="line">                &#125;</span><br><span class="line">                //解析@Autowired等注解的字段和方法</span><br><span class="line">                metadata = buildAutowiringMetadata(clazz);</span><br><span class="line">                //添加缓存</span><br><span class="line">                this.injectionMetadataCache.put(cacheKey, metadata);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法"><a href="#16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法" class="headerlink" title="16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法"></a>16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata buildAutowiringMetadata(final Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    //存放注解信息的集合  </span><br><span class="line">    LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = new LinkedList&lt;&gt;();</span><br><span class="line">    Class&lt;?&gt; targetClass = clazz;</span><br><span class="line">    //递归遍历当前类及其所有父类，解析注解</span><br><span class="line">    do &#123;</span><br><span class="line">        //当前正在处理类注解信息的集合</span><br><span class="line">        final LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements = new LinkedList&lt;&gt;();</span><br><span class="line">        //获取字段上的注解信息</span><br><span class="line">        ReflectionUtils.doWithLocalFields(targetClass, field -&gt; &#123;</span><br><span class="line">            //遍历，获取字段上的注解</span><br><span class="line">            AnnotationAttributes ann = findAutowiredAnnotation(field);</span><br><span class="line">            if (ann != null) &#123;</span><br><span class="line">                //静态字段跳过</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(&quot;Autowired annotation is not supported on static fields: &quot; + field);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //判断注解的required属性值是否有效</span><br><span class="line">                boolean required = determineRequiredStatus(ann);</span><br><span class="line">                //字段信息加入集合</span><br><span class="line">                currElements.add(new AutowiredFieldElement(field, required));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //遍历，获取方法上的注解信息</span><br><span class="line">        ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</span><br><span class="line">            //获取桥接方法的原始方法</span><br><span class="line">            Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)</span><br><span class="line">            //方法参数和方法返回值类型不同，不处理</span><br><span class="line">            if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //获取方法上的所有注解</span><br><span class="line">            AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);</span><br><span class="line">            if (ann != null &amp;&amp; method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</span><br><span class="line">                //静态方法，不处理</span><br><span class="line">                if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                    if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(&quot;Autowired annotation is not supported on static methods: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                if (method.getParameterCount() == 0) &#123;</span><br><span class="line">                    if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(&quot;Autowired annotation should only be used on methods with parameters: &quot; +</span><br><span class="line">                                method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //判断注解的required属性值是否有效</span><br><span class="line">                boolean required = determineRequiredStatus(ann);</span><br><span class="line">                //获取当前方法的属性描述符，即方法是可读的(readable)getter方法，  </span><br><span class="line">                //还是可写的(writeable)setter方法  </span><br><span class="line">                PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                //方法信息加入集合</span><br><span class="line">                currElements.add(new AutowiredMethodElement(method, required, pd));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //当前类的注解信息存放到集合中</span><br><span class="line">        elements.addAll(0, currElements);</span><br><span class="line">        targetClass = targetClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    while (targetClass != null &amp;&amp; targetClass != Object.class);</span><br><span class="line"></span><br><span class="line">    return new InjectionMetadata(clazz, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法"><a href="#17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法" class="headerlink" title="17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法"></a>17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private AnnotationAttributes findAutowiredAnnotation(AccessibleObject ao) &#123;</span><br><span class="line">    if (ao.getAnnotations().length &gt; 0) &#123;</span><br><span class="line">        //遍历所有autowire相关的注解:@Autowire、@Value以及JSR-330等</span><br><span class="line">        for (Class&lt;? extends Annotation&gt; type : this.autowiredAnnotationTypes) &#123;</span><br><span class="line">            //获取指定类型的注解</span><br><span class="line">            AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);</span><br><span class="line">            if (attributes != null) &#123;</span><br><span class="line">                return attributes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法"><a href="#18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法" class="headerlink" title="18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法"></a>18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法</h4><p>获取bean时，在设置属性值之前会调用处理器的postProcessPropertyValues方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public PropertyValues postProcessPropertyValues(  </span><br><span class="line">        PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException &#123;  </span><br><span class="line">    //获取@Autowired等注解信息 </span><br><span class="line">    InjectionMetadata metadata = findAutowiringMetadata(bean.getClass());  </span><br><span class="line">    try &#123;  </span><br><span class="line">        //自动注入Bean的属性</span><br><span class="line">        metadata.inject(bean, beanName, pvs);  </span><br><span class="line">    &#125;  </span><br><span class="line">    catch (Throwable ex) &#123;  </span><br><span class="line">        throw new BeanCreationException(beanName, &quot;Injection of autowired dependencies failed&quot;, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line">    return pvs;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="19、InjectionMetadata的inject方法"><a href="#19、InjectionMetadata的inject方法" class="headerlink" title="19、InjectionMetadata的inject方法"></a>19、InjectionMetadata的inject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void inject(Object target, @Nullable String beanName, @Nullable PropertyValues pvs) throws Throwable &#123;</span><br><span class="line">    Collection&lt;InjectedElement&gt; checkedElements = this.checkedElements;</span><br><span class="line">    Collection&lt;InjectedElement&gt; elementsToIterate =</span><br><span class="line">            (checkedElements != null ? checkedElements : this.injectedElements);</span><br><span class="line">    if (!elementsToIterate.isEmpty()) &#123;</span><br><span class="line">        boolean debug = logger.isDebugEnabled();</span><br><span class="line">        for (InjectedElement element : elementsToIterate) &#123;</span><br><span class="line">            if (debug) &#123;</span><br><span class="line">                logger.debug(&quot;Processing injected element of bean &apos;&quot; + beanName + &quot;&apos;: &quot; + element);</span><br><span class="line">            &#125;</span><br><span class="line">            //自动注入Bean的属性</span><br><span class="line">            element.inject(target, beanName, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、AutowiredFieldElement的inject方法"><a href="#20、AutowiredFieldElement的inject方法" class="headerlink" title="20、AutowiredFieldElement的inject方法"></a>20、AutowiredFieldElement的inject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void inject(Object bean, @Nullable String beanName, @Nullable PropertyValues pvs) throws Throwable &#123;</span><br><span class="line">    //注入的字段</span><br><span class="line">    Field field = (Field) this.member;</span><br><span class="line">    Object value;</span><br><span class="line">    //有缓存使用缓存</span><br><span class="line">    if (this.cached) &#123;</span><br><span class="line">        value = resolvedCachedArgument(beanName, this.cachedFieldValue);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        DependencyDescriptor desc = new DependencyDescriptor(field, this.required);</span><br><span class="line">        desc.setContainingClass(bean.getClass());</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames = new LinkedHashSet&lt;&gt;(1);</span><br><span class="line">        Assert.state(beanFactory != null, &quot;No BeanFactory available&quot;);</span><br><span class="line">        TypeConverter typeConverter = beanFactory.getTypeConverter();</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取依赖对象 </span><br><span class="line">            value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            throw new UnsatisfiedDependencyException(null, beanName, new InjectionPoint(field), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            //添加缓存</span><br><span class="line">            if (!this.cached) &#123;</span><br><span class="line">                if (value != null || this.required) &#123;</span><br><span class="line">                    this.cachedFieldValue = desc;</span><br><span class="line">                    //注册依赖</span><br><span class="line">                    registerDependentBeans(beanName, autowiredBeanNames);</span><br><span class="line">                    if (autowiredBeanNames.size() == 1) &#123;</span><br><span class="line">                        String autowiredBeanName = autowiredBeanNames.iterator().next();</span><br><span class="line">                        //如果容器中有依赖对象且依赖对象类型和字段类型匹配</span><br><span class="line">                        if (beanFactory.containsBean(autowiredBeanName) &amp;&amp;</span><br><span class="line">                                beanFactory.isTypeMatch(autowiredBeanName, field.getType())) &#123;</span><br><span class="line">                            //创建缓存</span><br><span class="line">                            this.cachedFieldValue = new ShortcutDependencyDescriptor(</span><br><span class="line">                                    desc, autowiredBeanName, field.getType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    this.cachedFieldValue = null;</span><br><span class="line">                &#125;</span><br><span class="line">                this.cached = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (value != null) &#123;</span><br><span class="line">        ReflectionUtils.makeAccessible(field);</span><br><span class="line">        field.set(bean, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、AutowiredFieldElement的resolvedCachedArgument方法"><a href="#21、AutowiredFieldElement的resolvedCachedArgument方法" class="headerlink" title="21、AutowiredFieldElement的resolvedCachedArgument方法"></a>21、AutowiredFieldElement的resolvedCachedArgument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private Object resolvedCachedArgument(@Nullable String beanName, @Nullable Object cachedArgument) &#123;</span><br><span class="line">    if (cachedArgument instanceof DependencyDescriptor) &#123;</span><br><span class="line">        DependencyDescriptor descriptor = (DependencyDescriptor) cachedArgument;</span><br><span class="line">        Assert.state(beanFactory != null, &quot;No BeanFactory available&quot;);</span><br><span class="line">        //获取依赖对象，该方法在XmlBeanFactory容器中已有介绍</span><br><span class="line">        return this.beanFactory.resolveDependency(descriptor, beanName, null, null);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return cachedArgument;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"><a href="#22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器" class="headerlink" title="22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"></a>22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        //加载WebService相关的类</span><br><span class="line">        Class&lt;? extends Annotation&gt; clazz = (Class&lt;? extends Annotation&gt;)</span><br><span class="line">                ClassUtils.forName(&quot;javax.xml.ws.WebServiceRef&quot;, CommonAnnotationBeanPostProcessor.class.getClassLoader());</span><br><span class="line">        webServiceRefClass = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        webServiceRefClass = null;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        //加载EJB相关的类  </span><br><span class="line">        Class&lt;? extends Annotation&gt; clazz = (Class&lt;? extends Annotation&gt;)</span><br><span class="line">                ClassUtils.forName(&quot;javax.ejb.EJB&quot;, CommonAnnotationBeanPostProcessor.class.getClassLoader());</span><br><span class="line">        ejbRefClass = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        ejbRefClass = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public CommonAnnotationBeanPostProcessor() &#123;</span><br><span class="line">    setOrder(Ordered.LOWEST_PRECEDENCE - 3);</span><br><span class="line">    //父类InitDestroyAnnotationBeanPostProcessor</span><br><span class="line">    //在bean初始化之前postProcessBeforeInitialization执行@PostConstruct注解方法</span><br><span class="line">    //在bean销毁之前postProcessBeforeDestruction执行@PreDestroy注解方法</span><br><span class="line">    setInitAnnotationType(PostConstruct.class);</span><br><span class="line">    setDestroyAnnotationType(PreDestroy.class);</span><br><span class="line">    //当使用@Resource注解时.忽略JAX-WS的资源类型 </span><br><span class="line">    ignoreResourceType(&quot;javax.xml.ws.WebServiceContext&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"><a href="#23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法" class="headerlink" title="23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"></a>23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName) &#123;</span><br><span class="line">    super.postProcessMergedBeanDefinition(beanDefinition, beanType, beanName);</span><br><span class="line">    //获取@Resource注解的属性信息</span><br><span class="line">    InjectionMetadata metadata = findResourceMetadata(beanName, beanType, null);</span><br><span class="line">    metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法"><a href="#24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法" class="headerlink" title="24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法"></a>24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata findResourceMetadata(String beanName, final Class&lt;?&gt; clazz, @Nullable PropertyValues pvs) &#123;</span><br><span class="line">    // Fall back to class name as cache key, for backwards compatibility with custom callers.</span><br><span class="line">    String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</span><br><span class="line">    // Quick check on the concurrent map first, with minimal locking.</span><br><span class="line">    //首先从容器缓存中查找 </span><br><span class="line">    InjectionMetadata metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">    //缓存数据过期</span><br><span class="line">    if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">        synchronized (this.injectionMetadataCache) &#123;</span><br><span class="line">            metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">            if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">                if (metadata != null) &#123;</span><br><span class="line">                    metadata.clear(pvs);</span><br><span class="line">                &#125;</span><br><span class="line">                //获取@Resource注解的属性信息</span><br><span class="line">                metadata = buildResourceMetadata(clazz);</span><br><span class="line">                this.injectionMetadataCache.put(cacheKey, metadata);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法"><a href="#25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法" class="headerlink" title="25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法"></a>25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata buildResourceMetadata(final Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    //注解数据的集合</span><br><span class="line">    LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = new LinkedList&lt;&gt;();</span><br><span class="line">    Class&lt;?&gt; targetClass = clazz;</span><br><span class="line">    //递归地的解析给定类及其所有父类的注解信息</span><br><span class="line">    do &#123;</span><br><span class="line">        //存放当前类注解数据的集合</span><br><span class="line">        final LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements =</span><br><span class="line">                new LinkedList&lt;&gt;();</span><br><span class="line">        //遍历所有的字段，查找符合的注解 </span><br><span class="line">        ReflectionUtils.doWithLocalFields(targetClass, field -&gt; &#123;</span><br><span class="line">            //如果字段上配置了WebService相关的注解</span><br><span class="line">            if (webServiceRefClass != null &amp;&amp; field.isAnnotationPresent(webServiceRefClass)) &#123;</span><br><span class="line">                //静态不处理</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;@WebServiceRef annotation is not supported on static fields&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                currElements.add(new WebServiceRefElement(field, field, null));</span><br><span class="line">            &#125;</span><br><span class="line">            //如果当前字段上配置了EJB相关的注解</span><br><span class="line">            else if (ejbRefClass != null &amp;&amp; field.isAnnotationPresent(ejbRefClass)) &#123;</span><br><span class="line">                //静态不处理</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;@EJB annotation is not supported on static fields&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //加入当前注解数据的集合</span><br><span class="line">                currElements.add(new EjbRefElement(field, field, null));</span><br><span class="line">            &#125;</span><br><span class="line">            //如果当前字段上配置了@Resource注解  </span><br><span class="line">            else if (field.isAnnotationPresent(Resource.class)) &#123;</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;@Resource annotation is not supported on static fields&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //如果当前自动的类型不再被忽略的Resource类型中，  </span><br><span class="line">                //加入当前注解数据的集合</span><br><span class="line">                if (!ignoredResourceTypes.contains(field.getType().getName())) &#123;</span><br><span class="line">                    currElements.add(new ResourceElement(field, field, null));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //遍历所有方法，查找相关的注解</span><br><span class="line">        ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</span><br><span class="line">            //获取桥接方法</span><br><span class="line">            Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);</span><br><span class="line">            if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //当前方法没有覆盖父类方法</span><br><span class="line">            if (method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</span><br><span class="line">                //如果方法上配置了WebService相关的注解</span><br><span class="line">                if (webServiceRefClass != null &amp;&amp; bridgedMethod.isAnnotationPresent(webServiceRefClass)) &#123;</span><br><span class="line">                    if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@WebServiceRef annotation is not supported on static methods&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (method.getParameterCount() != 1) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@WebServiceRef annotation requires a single-arg method: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //获取方法的属性描述 </span><br><span class="line">                    PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                    //加入当前注解数据的集合</span><br><span class="line">                    currElements.add(new WebServiceRefElement(method, bridgedMethod, pd));</span><br><span class="line">                &#125;</span><br><span class="line">                //如果方法上配置了EJB相关的注解  </span><br><span class="line">                else if (ejbRefClass != null &amp;&amp; bridgedMethod.isAnnotationPresent(ejbRefClass)) &#123;</span><br><span class="line">                    if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@EJB annotation is not supported on static methods&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (method.getParameterCount() != 1) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@EJB annotation requires a single-arg method: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                    currElements.add(new EjbRefElement(method, bridgedMethod, pd));</span><br><span class="line">                &#125;</span><br><span class="line">                //如果方法上配置了EJB相关的注解  </span><br><span class="line">                else if (bridgedMethod.isAnnotationPresent(Resource.class)) &#123;</span><br><span class="line">                    if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@Resource annotation is not supported on static methods&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">                    if (paramTypes.length != 1) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@Resource annotation requires a single-arg method: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (!ignoredResourceTypes.contains(paramTypes[0].getName())) &#123;</span><br><span class="line">                        PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                        currElements.add(new ResourceElement(method, bridgedMethod, pd));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //将当前类注解数据存放到集合中 </span><br><span class="line">        elements.addAll(0, currElements);</span><br><span class="line">        targetClass = targetClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    while (targetClass != null &amp;&amp; targetClass != Object.class);</span><br><span class="line"></span><br><span class="line">    return new InjectionMetadata(clazz, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、ClassPathXmlApplicationContext容器启动&quot;&gt;&lt;a href=&quot;#一、ClassPathXmlApplicationContext容器启动&quot; class=&quot;headerlink&quot; title=&quot;一、ClassPathXmlApplic
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码IOC及AOP总结</title>
    <link href="http://yoursite.com/2020/01/13/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81IOC%E5%8F%8AAOP%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/13/spring源码/Spring源码IOC及AOP总结/</id>
    <published>2020-01-13T14:32:37.942Z</published>
    <updated>2018-10-13T14:01:23.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基础容器"><a href="#一、基础容器" class="headerlink" title="一、基础容器"></a>一、基础容器</h3><p><img src="/2020/01/13/spring源码/Spring源码IOC及AOP总结/基础容器结构图.png" alt="基础容器结构图"></p><h4 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h4><p>BeanFactory接口：定义了IOC容器基本方法，如getBean方法。<br>AutowireCapableBeanFactory接口：定义了创建bean及自动装配相关方法。<br>HierarchicalBeanFactory接口：定义了容器父子关系相关方法。<br>ListableBeanFactory接口：定义了容器中bean的集合相关方法。<br>ConfigurableBeanFactory接口：定义了配置基础容器相关方法，如设置类加载器、添加bean后处理器等。<br>ConfigurableListableBeanFactory接口：继承了以上所有接口，并定义了BeanDefinition的获取、冻结配置、预加载单例等方法。  </p><h4 id="2、实现类"><a href="#2、实现类" class="headerlink" title="2、实现类"></a>2、实现类</h4><p>XmlBeanFactory：最基础的ioc容器，内部拥有一个XmlBeanDefinitionReader，用来读取并解析xml文件，该类继承DefaultListableBeanFactory。<br>DefaultListableBeanFactory：实现了ConfigurableListableBeanFactory接口。实现了BeanDefinitionRegistry接口，提供了BeanDefinition的注册功能。<br>AbstractAutowireCapableBeanFactory抽象类：实现了AutowireCapableBeanFactory接口，该类doCreateBean方法完成了bean的创建及初始化。<br>AbstractBeanFactory抽象类：该类完成bean的作用域管理及循环依赖的检查。<br>DefaultSingletonBeanRegistry：该类完成单例bean的管理。  </p><h3 id="二、扩展容器"><a href="#二、扩展容器" class="headerlink" title="二、扩展容器"></a>二、扩展容器</h3><p><img src="/2020/01/13/spring源码/Spring源码IOC及AOP总结/扩展容器结构图.png" alt="扩展容器结构图"></p><h4 id="1、接口-1"><a href="#1、接口-1" class="headerlink" title="1、接口"></a>1、接口</h4><p>ApplicationContext接口：定义了扩展容器的基本方法，如getApplicationName方法。<br>ConfigurableApplicationContext接口：定义了配置扩展容器相关方法，如添加BeanFactory后处理器、监听器及刷新上下文方法。<br>WebApplicationContext接口：定义了Servlet容器基本属性。<br>ConfigurableWebApplicationContext接口：定义了配置Servlet容器相关方法。    </p><h4 id="2、实现类-1"><a href="#2、实现类-1" class="headerlink" title="2、实现类"></a>2、实现类</h4><p>AnnotationConfigApplicationContext：基于注解的IOC容器拥有ClassPathBeanDefinitionScanner扫描器，加载注解了@Component的类。该类继承GenericApplicationContext。<br>GenericApplicationContext：内部维护了一个DefaultListableBeanFactory。实现BeanDefinitionRegistry接口，提供了BeanDefinition的注册功能。<br>AbstractApplicationContext抽象类：实现了ConfigurableApplicationContext接口，提供了扩展容器配置相关方法，该类refresh方法完成容器上下文刷新。<br>AnnotationConfigServletWebServerApplicationContext：基于注解的ServletWeb的IOC容器，基于注解的IOC容器拥有ClassPathBeanDefinitionScanner扫描器，加载注解了@Component的类。该类继承ServletWebServerApplicationContext。<br>ServletWebServerApplicationContext：该类重写了父类的关于Servlet容器配置的相关方法，Servlet容器在该类中创建。<br>GenericWebApplicationContext：实现了ConfigurableWebApplicationContext接口，提供了Servlet容器配置的相关方法。</p><h3 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h3><p><img src="/2020/01/13/spring源码/Spring源码IOC及AOP总结/AOP结构图.png" alt="AOP结构图"><br>SmartInstantiationAwareBeanPostProcessor接口：bean的后处理器接口。<br>AbstractAutoProxyCreator：创建bean的代理对象。<br>ProxyFactory：代理对象创建工厂。<br>DefaultAopProxyFactory：Proxy创建工厂。<br>JdkDynamicAopProxy：基于JDK的动态代理的拦截器。<br>ObjenesisCglibAopProxy：基于cglib的动态代理的拦截器。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、基础容器&quot;&gt;&lt;a href=&quot;#一、基础容器&quot; class=&quot;headerlink&quot; title=&quot;一、基础容器&quot;&gt;&lt;/a&gt;一、基础容器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/01/13/spring源码/Spring源码IOC及AOP总结/基础容器结
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
</feed>
