<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-12T14:34:36.964Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小远</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring的IOC及AOP源码</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/Spring%E7%9A%84IOC%E5%8F%8AAOP%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/Spring的IOC及AOP源码/</id>
    <published>2020-01-16T13:43:36.434Z</published>
    <updated>2020-01-12T14:34:36.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、配置解析"><a href="#1、配置解析" class="headerlink" title="1、配置解析"></a>1、配置解析</h3><p>spring容器分为基础容器和扩展容器，我们目前正在使用的基础容器为DefaultListableBeanFactory、扩展容器为AnnotationConfigEmbeddedWebApplicationContext。<br>在创建AnnotationConfigEmbeddedWebApplicationContext容器时，会自动创建一个AnnotatedBeanDefinitionReader的bean的读取器，创建AnnotatedBeanDefinitionReader时<br>会调用AnnotationConfigUtils的registerAnnotationConfigProcessors方法注册配置类的解析器ConfigurationClassPostProcessor。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;BeanDefinitionHolder&gt; registerAnnotationConfigProcessors(BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">      DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">      if (beanFactory != null) &#123;</span><br><span class="line">          if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">              beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">              beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Set&lt;BeanDefinitionHolder&gt; beanDefs = new LinkedHashSet(8);</span><br><span class="line">      RootBeanDefinition def;</span><br><span class="line">//处理@Configuration注解</span><br><span class="line">      if (!registry.containsBeanDefinition(&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;)) &#123;</span><br><span class="line">          def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);</span><br><span class="line">          def.setSource(source);</span><br><span class="line">          beanDefs.add(registerPostProcessor(registry, def, &quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">//处理@Autowired注解</span><br><span class="line">      if (!registry.containsBeanDefinition(&quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;)) &#123;</span><br><span class="line">          def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">          def.setSource(source);</span><br><span class="line">          beanDefs.add(registerPostProcessor(registry, def, &quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;));</span><br><span class="line">      &#125;</span><br><span class="line">//处理@Required注解</span><br><span class="line">      if (!registry.containsBeanDefinition(&quot;org.springframework.context.annotation.internalRequiredAnnotationProcessor&quot;)) &#123;</span><br><span class="line">          def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class);</span><br><span class="line">          def.setSource(source);</span><br><span class="line">          beanDefs.add(registerPostProcessor(registry, def, &quot;org.springframework.context.annotation.internalRequiredAnnotationProcessor&quot;));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">...省略部分</span><br><span class="line"></span><br><span class="line">      return beanDefs;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在refresh刷新ApplicationContext容器的时候，AbstractApplicationContext的refresh方法会执行BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry<br>和BeanFactoryPostProcessor的postProcessBeanFactory方法。ConfigurationClassPostProcessor实现了BeanDefinitionRegistryPostProcessor接口，processConfigBeanDefinitions方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">        List&lt;BeanDefinitionHolder&gt; configCandidates = new ArrayList();</span><br><span class="line">//获取所有bean名称</span><br><span class="line">        String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">        String[] var4 = candidateNames;</span><br><span class="line">        int var5 = candidateNames.length;</span><br><span class="line">//获取beanBeanDefinition</span><br><span class="line">        for(int var6 = 0; var6 &lt; var5; ++var6) &#123;</span><br><span class="line">            String beanName = var4[var6];</span><br><span class="line">            BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">            if (!ConfigurationClassUtils.isFullConfigurationClass(beanDef) &amp;&amp; !ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) &#123;</span><br><span class="line">                if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) &#123;</span><br><span class="line">                    configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">                this.logger.debug(&quot;Bean definition has already been processed as a configuration class: &quot; + beanDef);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!configCandidates.isEmpty()) &#123;</span><br><span class="line">//排序</span><br><span class="line">            Collections.sort(configCandidates, new Comparator&lt;BeanDefinitionHolder&gt;() &#123;</span><br><span class="line">                public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) &#123;</span><br><span class="line">                    int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">                    int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">                    return i1 &lt; i2 ? -1 : (i1 &gt; i2 ? 1 : 0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            SingletonBeanRegistry sbr = null;</span><br><span class="line">            if (registry instanceof SingletonBeanRegistry) &#123;</span><br><span class="line">                sbr = (SingletonBeanRegistry)registry;</span><br><span class="line">                if (!this.localBeanNameGeneratorSet &amp;&amp; sbr.containsSingleton(&quot;org.springframework.context.annotation.internalConfigurationBeanNameGenerator&quot;)) &#123;</span><br><span class="line">                    BeanNameGenerator generator = (BeanNameGenerator)sbr.getSingleton(&quot;org.springframework.context.annotation.internalConfigurationBeanNameGenerator&quot;);</span><br><span class="line">                    this.componentScanBeanNameGenerator = generator;</span><br><span class="line">                    this.importBeanNameGenerator = generator;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ConfigurationClassParser parser = new ConfigurationClassParser(this.metadataReaderFactory, this.problemReporter, this.environment, this.resourceLoader, this.componentScanBeanNameGenerator, registry);</span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; candidates = new LinkedHashSet(configCandidates);</span><br><span class="line">            HashSet alreadyParsed = new HashSet(configCandidates.size());</span><br><span class="line"></span><br><span class="line">            do &#123;</span><br><span class="line">//解析配置类</span><br><span class="line">                parser.parse(candidates);</span><br><span class="line">                parser.validate();</span><br><span class="line">                Set&lt;ConfigurationClass&gt; configClasses = new LinkedHashSet(parser.getConfigurationClasses());</span><br><span class="line">                configClasses.removeAll(alreadyParsed);</span><br><span class="line">                if (this.reader == null) &#123;</span><br><span class="line">                    this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor, this.resourceLoader, this.environment, this.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                this.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">                alreadyParsed.addAll(configClasses);</span><br><span class="line">                candidates.clear();</span><br><span class="line">                if (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">                    String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">                    Set&lt;String&gt; oldCandidateNames = new HashSet(Arrays.asList(candidateNames));</span><br><span class="line">                    Set&lt;String&gt; alreadyParsedClasses = new HashSet();</span><br><span class="line">                    Iterator var12 = alreadyParsed.iterator();</span><br><span class="line"></span><br><span class="line">                    while(var12.hasNext()) &#123;</span><br><span class="line">                        ConfigurationClass configurationClass = (ConfigurationClass)var12.next();</span><br><span class="line">                        alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] var23 = newCandidateNames;</span><br><span class="line">                    int var24 = newCandidateNames.length;</span><br><span class="line"></span><br><span class="line">                    for(int var14 = 0; var14 &lt; var24; ++var14) &#123;</span><br><span class="line">                        String candidateName = var23[var14];</span><br><span class="line">                        if (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">                            BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line">                            if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &amp;&amp; !alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">                                candidates.add(new BeanDefinitionHolder(bd, candidateName));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    candidateNames = newCandidateNames;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; while(!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">            if (sbr != null &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">                sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) &#123;</span><br><span class="line">                ((CachingMetadataReaderFactory)this.metadataReaderFactory).clearCache();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>实际解析配置类的方法为doProcessConfigurationClass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">  protected final ConfigurationClassParser.SourceClass doProcessConfigurationClass(ConfigurationClass configClass, ConfigurationClassParser.SourceClass sourceClass) throws IOException &#123;</span><br><span class="line">      this.processMemberClasses(configClass, sourceClass);</span><br><span class="line">      Iterator var3 = AnnotationConfigUtils.attributesForRepeatable(sourceClass.getMetadata(), PropertySources.class, PropertySource.class).iterator();</span><br><span class="line"></span><br><span class="line">      AnnotationAttributes importResource;</span><br><span class="line">      while(var3.hasNext()) &#123;</span><br><span class="line">          importResource = (AnnotationAttributes)var3.next();</span><br><span class="line">          if (this.environment instanceof ConfigurableEnvironment) &#123;</span><br><span class="line">              this.processPropertySource(importResource);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              this.logger.warn(&quot;Ignoring @PropertySource annotation on [&quot; + sourceClass.getMetadata().getClassName() + &quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">//包路径</span><br><span class="line">      Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">      if (!componentScans.isEmpty() &amp;&amp; !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">          Iterator var13 = componentScans.iterator();</span><br><span class="line"></span><br><span class="line">          while(var13.hasNext()) &#123;</span><br><span class="line">              AnnotationAttributes componentScan = (AnnotationAttributes)var13.next();</span><br><span class="line">//扫描路径加载类</span><br><span class="line">              Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions = this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">              Iterator var7 = scannedBeanDefinitions.iterator();</span><br><span class="line"></span><br><span class="line">              while(var7.hasNext()) &#123;</span><br><span class="line">                  BeanDefinitionHolder holder = (BeanDefinitionHolder)var7.next();</span><br><span class="line">                  BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                  if (bdCand == null) &#123;</span><br><span class="line">                      bdCand = holder.getBeanDefinition();</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) &#123;</span><br><span class="line">                      this.parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">//@Import注解引入的配置</span><br><span class="line">      this.processImports(configClass, sourceClass, this.getImports(sourceClass), true);</span><br><span class="line">      if (sourceClass.getMetadata().isAnnotated(ImportResource.class.getName())) &#123;</span><br><span class="line">          importResource = AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">          String[] resources = importResource.getStringArray(&quot;locations&quot;);</span><br><span class="line">          Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(&quot;reader&quot;);</span><br><span class="line">          String[] var20 = resources;</span><br><span class="line">          int var21 = resources.length;</span><br><span class="line"></span><br><span class="line">          for(int var22 = 0; var22 &lt; var21; ++var22) &#123;</span><br><span class="line">              String resource = var20[var22];</span><br><span class="line">              String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">              configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">//@BeanMethod注解创建的类</span><br><span class="line">      Set&lt;MethodMetadata&gt; beanMethods = this.retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">      Iterator var16 = beanMethods.iterator();</span><br><span class="line"></span><br><span class="line">      while(var16.hasNext()) &#123;</span><br><span class="line">          MethodMetadata methodMetadata = (MethodMetadata)var16.next();</span><br><span class="line">          configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.processInterfaces(configClass, sourceClass);</span><br><span class="line">      if (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">          String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">          if (!superclass.startsWith(&quot;java&quot;) &amp;&amp; !this.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">              this.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">              return sourceClass.getSuperClass();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>其中processImports方法处理@Import引入的ImportSelector、ImportBeanDefinitionRegistrar及普通类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private void processImports(ConfigurationClass configClass, ConfigurationClassParser.SourceClass currentSourceClass, Collection&lt;ConfigurationClassParser.SourceClass&gt; importCandidates, boolean checkForCircularImports) &#123;</span><br><span class="line">    if (!importCandidates.isEmpty()) &#123;</span><br><span class="line">        if (checkForCircularImports &amp;&amp; this.isChainedImportOnStack(configClass)) &#123;</span><br><span class="line">            this.problemReporter.error(new ConfigurationClassParser.CircularImportProblem(configClass, this.importStack));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.importStack.push(configClass);</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                Iterator var5 = importCandidates.iterator();</span><br><span class="line"></span><br><span class="line">                while(true) &#123;</span><br><span class="line">                    while(true) &#123;</span><br><span class="line">                        while(var5.hasNext()) &#123;</span><br><span class="line">                            ConfigurationClassParser.SourceClass candidate = (ConfigurationClassParser.SourceClass)var5.next();</span><br><span class="line">                            Class candidateClass;</span><br><span class="line">//处理引入的ImportSelector配置类</span><br><span class="line">                            if (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">                                candidateClass = candidate.loadClass();</span><br><span class="line">                                ImportSelector selector = (ImportSelector)BeanUtils.instantiateClass(candidateClass, ImportSelector.class);</span><br><span class="line">                                ParserStrategyUtils.invokeAwareMethods(selector, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                                if (this.deferredImportSelectors != null &amp;&amp; selector instanceof DeferredImportSelector) &#123;</span><br><span class="line">                                    this.deferredImportSelectors.add(new ConfigurationClassParser.DeferredImportSelectorHolder(configClass, (DeferredImportSelector)selector));</span><br><span class="line">                                &#125; else &#123;</span><br><span class="line">                                    String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                                    Collection&lt;ConfigurationClassParser.SourceClass&gt; importSourceClasses = this.asSourceClasses(importClassNames);</span><br><span class="line">                                    this.processImports(configClass, currentSourceClass, importSourceClasses, false);</span><br><span class="line">                                &#125;</span><br><span class="line">//处理引入的ImportBeanDefinitionRegistrar配置类</span><br><span class="line">                            &#125; else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;</span><br><span class="line">                                candidateClass = candidate.loadClass();</span><br><span class="line">                                ImportBeanDefinitionRegistrar registrar = (ImportBeanDefinitionRegistrar)BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);</span><br><span class="line">                                ParserStrategyUtils.invokeAwareMethods(registrar, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                                configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                this.importStack.registerImport(currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">                                //处理引入的普通类</span><br><span class="line">this.processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (BeanDefinitionStoreException var15) &#123;</span><br><span class="line">                throw var15;</span><br><span class="line">            &#125; catch (Throwable var16) &#123;</span><br><span class="line">                throw new BeanDefinitionStoreException(&quot;Failed to process import candidates for configuration class [&quot; + configClass.getMetadata().getClassName() + &quot;]&quot;, var16);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                this.importStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类的解析到此就简要介绍完了。</p><h3 id="2、Bean的管理"><a href="#2、Bean的管理" class="headerlink" title="2、Bean的管理"></a>2、Bean的管理</h3><h4 id="2-1、Bean的加载"><a href="#2-1、Bean的加载" class="headerlink" title="2.1、Bean的加载"></a>2.1、Bean的加载</h4><p>前文doProcessConfigurationClass方法中、调用ComponentScanAnnotationParser方法parse方法扫描加载类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//包路径</span><br><span class="line">        Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">        if (!componentScans.isEmpty() &amp;&amp; !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">            Iterator var13 = componentScans.iterator();</span><br><span class="line"></span><br><span class="line">            while(var13.hasNext()) &#123;</span><br><span class="line">                AnnotationAttributes componentScan = (AnnotationAttributes)var13.next();</span><br><span class="line">//扫描路径加载类</span><br><span class="line">                Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions = this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">                Iterator var7 = scannedBeanDefinitions.iterator();</span><br><span class="line"></span><br><span class="line">                while(var7.hasNext()) &#123;</span><br><span class="line">                    BeanDefinitionHolder holder = (BeanDefinitionHolder)var7.next();</span><br><span class="line">                    BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                    if (bdCand == null) &#123;</span><br><span class="line">                        bdCand = holder.getBeanDefinition();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) &#123;</span><br><span class="line">                        this.parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>ComponentScanAnnotationParser的parse方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">public Set&lt;BeanDefinitionHolder&gt; parse(AnnotationAttributes componentScan, final String declaringClass) &#123;</span><br><span class="line">        Assert.state(this.environment != null, &quot;Environment must not be null&quot;);</span><br><span class="line">        Assert.state(this.resourceLoader != null, &quot;ResourceLoader must not be null&quot;);</span><br><span class="line">//创建扫描器</span><br><span class="line">        ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(this.registry, componentScan.getBoolean(&quot;useDefaultFilters&quot;), this.environment, this.resourceLoader);</span><br><span class="line">        Class&lt;? extends BeanNameGenerator&gt; generatorClass = componentScan.getClass(&quot;nameGenerator&quot;);</span><br><span class="line">        boolean useInheritedGenerator = BeanNameGenerator.class == generatorClass;</span><br><span class="line">        scanner.setBeanNameGenerator(useInheritedGenerator ? this.beanNameGenerator : (BeanNameGenerator)BeanUtils.instantiateClass(generatorClass));</span><br><span class="line">        ScopedProxyMode scopedProxyMode = (ScopedProxyMode)componentScan.getEnum(&quot;scopedProxy&quot;);</span><br><span class="line">        if (scopedProxyMode != ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">            scanner.setScopedProxyMode(scopedProxyMode);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Class&lt;? extends ScopeMetadataResolver&gt; resolverClass = componentScan.getClass(&quot;scopeResolver&quot;);</span><br><span class="line">            scanner.setScopeMetadataResolver((ScopeMetadataResolver)BeanUtils.instantiateClass(resolverClass));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.setResourcePattern(componentScan.getString(&quot;resourcePattern&quot;));</span><br><span class="line">//过滤器</span><br><span class="line">        AnnotationAttributes[] var15 = componentScan.getAnnotationArray(&quot;includeFilters&quot;);</span><br><span class="line">        int var8 = var15.length;</span><br><span class="line"></span><br><span class="line">        int var9;</span><br><span class="line">        AnnotationAttributes filter;</span><br><span class="line">        Iterator var11;</span><br><span class="line">        TypeFilter typeFilter;</span><br><span class="line">        for(var9 = 0; var9 &lt; var8; ++var9) &#123;</span><br><span class="line">            filter = var15[var9];</span><br><span class="line">            var11 = this.typeFiltersFor(filter).iterator();</span><br><span class="line"></span><br><span class="line">            while(var11.hasNext()) &#123;</span><br><span class="line">                typeFilter = (TypeFilter)var11.next();</span><br><span class="line">                scanner.addIncludeFilter(typeFilter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//过滤器</span><br><span class="line">        var15 = componentScan.getAnnotationArray(&quot;excludeFilters&quot;);</span><br><span class="line">        var8 = var15.length;</span><br><span class="line"></span><br><span class="line">        for(var9 = 0; var9 &lt; var8; ++var9) &#123;</span><br><span class="line">            filter = var15[var9];</span><br><span class="line">            var11 = this.typeFiltersFor(filter).iterator();</span><br><span class="line"></span><br><span class="line">            while(var11.hasNext()) &#123;</span><br><span class="line">                typeFilter = (TypeFilter)var11.next();</span><br><span class="line">                scanner.addExcludeFilter(typeFilter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//懒加载</span><br><span class="line">        boolean lazyInit = componentScan.getBoolean(&quot;lazyInit&quot;);</span><br><span class="line">        if (lazyInit) &#123;</span><br><span class="line">            scanner.getBeanDefinitionDefaults().setLazyInit(true);</span><br><span class="line">        &#125;</span><br><span class="line">//包路径</span><br><span class="line">        Set&lt;String&gt; basePackages = new LinkedHashSet();</span><br><span class="line">        String[] basePackagesArray = componentScan.getStringArray(&quot;basePackages&quot;);</span><br><span class="line">        String[] var19 = basePackagesArray;</span><br><span class="line">        int var21 = basePackagesArray.length;</span><br><span class="line"></span><br><span class="line">        int var22;</span><br><span class="line">        for(var22 = 0; var22 &lt; var21; ++var22) &#123;</span><br><span class="line">            String pkg = var19[var22];</span><br><span class="line">            String[] tokenized = StringUtils.tokenizeToStringArray(this.environment.resolvePlaceholders(pkg), &quot;,; \t\n&quot;);</span><br><span class="line">            basePackages.addAll(Arrays.asList(tokenized));</span><br><span class="line">        &#125;</span><br><span class="line">//通过类获取包路径</span><br><span class="line">        Class[] var20 = componentScan.getClassArray(&quot;basePackageClasses&quot;);</span><br><span class="line">        var21 = var20.length;</span><br><span class="line"></span><br><span class="line">        for(var22 = 0; var22 &lt; var21; ++var22) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = var20[var22];</span><br><span class="line">            basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (basePackages.isEmpty()) &#123;</span><br><span class="line">            basePackages.add(ClassUtils.getPackageName(declaringClass));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.addExcludeFilter(new AbstractTypeHierarchyTraversingFilter(false, false) &#123;</span><br><span class="line">            protected boolean matchClassName(String className) &#123;</span><br><span class="line">                return declaringClass.equals(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">//扫描路径</span><br><span class="line">        return scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>ClassPathBeanDefinitionScanner的doScan方法，将bean扫描获取出来并注册到容器中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">protected Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) &#123;</span><br><span class="line">        Assert.notEmpty(basePackages, &quot;At least one base package must be specified&quot;);</span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; beanDefinitions = new LinkedHashSet();</span><br><span class="line">        String[] var3 = basePackages;</span><br><span class="line">        int var4 = basePackages.length;</span><br><span class="line"></span><br><span class="line">        for(int var5 = 0; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">            String basePackage = var3[var5];</span><br><span class="line">//获取包路径下的类并转换成BeanDefinition</span><br><span class="line">            Set&lt;BeanDefinition&gt; candidates = this.findCandidateComponents(basePackage);</span><br><span class="line">            Iterator var8 = candidates.iterator();</span><br><span class="line"></span><br><span class="line">            while(var8.hasNext()) &#123;</span><br><span class="line">                BeanDefinition candidate = (BeanDefinition)var8.next();</span><br><span class="line">                //设置作用域，默认singleton</span><br><span class="line">ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">                candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">//设置bean名称</span><br><span class="line">                String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry);</span><br><span class="line">                if (candidate instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">                    this.postProcessBeanDefinition((AbstractBeanDefinition)candidate, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">//处理@Lazy、@Primary、@DependsOn等注解</span><br><span class="line">                if (candidate instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">                    AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition)candidate);</span><br><span class="line">                &#125;</span><br><span class="line">//注册到容器中</span><br><span class="line">                if (this.checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                    BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">                    definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);</span><br><span class="line">                    beanDefinitions.add(definitionHolder);</span><br><span class="line">                    this.registerBeanDefinition(definitionHolder, this.registry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return beanDefinitions;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2、Bean的创建"><a href="#2-2、Bean的创建" class="headerlink" title="2.2、Bean的创建"></a>2.2、Bean的创建</h4><p>AbstractApplicationContext的finishBeanFactoryInitialization方法会调用ConfigurableListableBeanFactory的preInstantiateSingletons方法提前创建单例bean。<br>追踪到ConfigurableListableBeanFactory的doGetBean方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">protected &lt;T&gt; T doGetBean(String name, Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123;</span><br><span class="line">       //转换bean名称</span><br><span class="line">final String beanName = this.transformedBeanName(name);</span><br><span class="line">//从缓存中获取bean</span><br><span class="line">       Object sharedInstance = this.getSingleton(beanName);</span><br><span class="line">       Object bean;</span><br><span class="line">//创建FactoryBean形式的bean</span><br><span class="line">       if (sharedInstance != null &amp;&amp; args == null) &#123;</span><br><span class="line">           if (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">               if (this.isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                   this.logger.debug(&quot;Returning eagerly cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos; that is not fully initialized yet - a consequence of a circular reference&quot;);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   this.logger.debug(&quot;Returning cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           bean = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">//正在创建</span><br><span class="line">           if (this.isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">               throw new BeanCurrentlyInCreationException(beanName);</span><br><span class="line">           &#125;</span><br><span class="line">//优先从父容器中获取</span><br><span class="line">           BeanFactory parentBeanFactory = this.getParentBeanFactory();</span><br><span class="line">           if (parentBeanFactory != null &amp;&amp; !this.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">               String nameToLookup = this.originalBeanName(name);</span><br><span class="line">               if (args != null) &#123;</span><br><span class="line">                   return parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               return parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">           &#125;</span><br><span class="line">//标记该bean正在创建</span><br><span class="line">           if (!typeCheckOnly) &#123;</span><br><span class="line">               this.markBeanAsCreated(beanName);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           try &#123;</span><br><span class="line">//合并BeanDefinition</span><br><span class="line">               final RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName);</span><br><span class="line">               this.checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line">//检查DependsOn指定的加载顺序</span><br><span class="line">               String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">               String[] var11;</span><br><span class="line">               if (dependsOn != null) &#123;</span><br><span class="line">                   var11 = dependsOn;</span><br><span class="line">                   int var12 = dependsOn.length;</span><br><span class="line"></span><br><span class="line">                   for(int var13 = 0; var13 &lt; var12; ++var13) &#123;</span><br><span class="line">                       String dep = var11[var13];</span><br><span class="line">                       if (this.isDependent(beanName, dep)) &#123;</span><br><span class="line">                           throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Circular depends-on relationship between &apos;&quot; + beanName + &quot;&apos; and &apos;&quot; + dep + &quot;&apos;&quot;);</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       this.registerDependentBean(dep, beanName);</span><br><span class="line"></span><br><span class="line">                       try &#123;</span><br><span class="line">                           this.getBean(dep);</span><br><span class="line">                       &#125; catch (NoSuchBeanDefinitionException var24) &#123;</span><br><span class="line">                           throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;&apos;&quot; + beanName + &quot;&apos; depends on missing bean &apos;&quot; + dep + &quot;&apos;&quot;, var24);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">//单例</span><br><span class="line">               if (mbd.isSingleton()) &#123;</span><br><span class="line">                   sharedInstance = this.getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                       public Object getObject() throws BeansException &#123;</span><br><span class="line">                           try &#123;</span><br><span class="line">//创建bean</span><br><span class="line">                               return AbstractBeanFactory.this.createBean(beanName, mbd, args);</span><br><span class="line">                           &#125; catch (BeansException var2) &#123;</span><br><span class="line">                               AbstractBeanFactory.this.destroySingleton(beanName);</span><br><span class="line">                               throw var2;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line">                   bean = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">               &#125;  </span><br><span class="line">...省略部分</span><br><span class="line">           &#125; catch (BeansException var26) &#123;</span><br><span class="line">               this.cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">               throw var26;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">//类型转换</span><br><span class="line">       if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               return this.getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">           &#125; catch (TypeMismatchException var25) &#123;</span><br><span class="line">               if (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">                   this.logger.debug(&quot;Failed to convert bean &apos;&quot; + name + &quot;&apos; to required type &apos;&quot; + ClassUtils.getQualifiedName(requiredType) + &quot;&apos;&quot;, var25);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return bean;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>继续追踪到AbstractAutowireCapableBeanFactory的docreateBean方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">  protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123;</span><br><span class="line">      BeanWrapper instanceWrapper = null;</span><br><span class="line">      if (mbd.isSingleton()) &#123;</span><br><span class="line">          instanceWrapper = (BeanWrapper)this.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">//创建bean</span><br><span class="line">      if (instanceWrapper == null) &#123;</span><br><span class="line">          instanceWrapper = this.createBeanInstance(beanName, mbd, args);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      final Object bean = instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null;</span><br><span class="line">      Class&lt;?&gt; beanType = instanceWrapper != null ? instanceWrapper.getWrappedClass() : null;</span><br><span class="line">      mbd.resolvedTargetType = beanType;</span><br><span class="line">      synchronized(mbd.postProcessingLock) &#123;</span><br><span class="line">          if (!mbd.postProcessed) &#123;</span><br><span class="line">              try &#123;</span><br><span class="line">                  this.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">              &#125; catch (Throwable var17) &#123;</span><br><span class="line">                  throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Post-processing of merged bean definition failed&quot;, var17);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              mbd.postProcessed = true;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">//提前暴露解决循环依赖</span><br><span class="line">      boolean earlySingletonExposure = mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp; this.isSingletonCurrentlyInCreation(beanName);</span><br><span class="line">      if (earlySingletonExposure) &#123;</span><br><span class="line">          if (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">              this.logger.debug(&quot;Eagerly caching bean &apos;&quot; + beanName + &quot;&apos; to allow for resolving potential circular references&quot;);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          this.addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">              public Object getObject() throws BeansException &#123;</span><br><span class="line">                  return AbstractAutowireCapableBeanFactory.this.getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Object exposedObject = bean;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">//注入属性</span><br><span class="line">          this.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">          if (exposedObject != null) &#123;</span><br><span class="line">//初始化bean</span><br><span class="line">              exposedObject = this.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; catch (Throwable var18) &#123;</span><br><span class="line">          if (var18 instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)var18).getBeanName())) &#123;</span><br><span class="line">              throw (BeanCreationException)var18;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, var18);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (earlySingletonExposure) &#123;</span><br><span class="line">          Object earlySingletonReference = this.getSingleton(beanName, false);</span><br><span class="line">          if (earlySingletonReference != null) &#123;</span><br><span class="line">              if (exposedObject == bean) &#123;</span><br><span class="line">                  exposedObject = earlySingletonReference;</span><br><span class="line">              &#125; else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; this.hasDependentBean(beanName)) &#123;</span><br><span class="line">                  String[] dependentBeans = this.getDependentBeans(beanName);</span><br><span class="line">                  Set&lt;String&gt; actualDependentBeans = new LinkedHashSet(dependentBeans.length);</span><br><span class="line">                  String[] var12 = dependentBeans;</span><br><span class="line">                  int var13 = dependentBeans.length;</span><br><span class="line"></span><br><span class="line">                  for(int var14 = 0; var14 &lt; var13; ++var14) &#123;</span><br><span class="line">                      String dependentBean = var12[var14];</span><br><span class="line">                      if (!this.removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                          actualDependentBeans.add(dependentBean);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  if (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                      throw new BeanCurrentlyInCreationException(beanName, &quot;Bean with name &apos;&quot; + beanName + &quot;&apos; has been injected into other beans [&quot; + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + &quot;] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&quot;);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">//注册需要执行销毁方法的Bean</span><br><span class="line">      try &#123;</span><br><span class="line">          this.registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">          return exposedObject;</span><br><span class="line">      &#125; catch (BeanDefinitionValidationException var16) &#123;</span><br><span class="line">          throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, var16);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>到这边bean就创建完成了，我们继续查看bean的初始化方法initializeBean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">      if (System.getSecurityManager() != null) &#123;</span><br><span class="line">          AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">              public Object run() &#123;</span><br><span class="line">                  AbstractAutowireCapableBeanFactory.this.invokeAwareMethods(beanName, bean);</span><br><span class="line">                  return null;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, this.getAccessControlContext());</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          this.invokeAwareMethods(beanName, bean);</span><br><span class="line">      &#125;</span><br><span class="line">//执行初始化前处理器</span><br><span class="line">      Object wrappedBean = bean;</span><br><span class="line">      if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">          wrappedBean = this.applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">//执行afterPropertiesSet及init方法</span><br><span class="line">          this.invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">      &#125; catch (Throwable var6) &#123;</span><br><span class="line">          throw new BeanCreationException(mbd != null ? mbd.getResourceDescription() : null, beanName, &quot;Invocation of init method failed&quot;, var6);</span><br><span class="line">      &#125;</span><br><span class="line">//执行初始化后处理方法，AOP就是在这里完成代理</span><br><span class="line">      if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">          wrappedBean = this.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return wrappedBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、AOP"><a href="#3、AOP" class="headerlink" title="3、AOP"></a>3、AOP</h3><p>通过@EnableAspectJAutoProxy注解引入动态代理，该注解类通过@Import引入了AspectJAutoProxyRegistrar。<br>AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar接口它的registerBeanDefinitions方法为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">       //将AnnotationAwareAspectJAutoProxyCreator添加到容器中</span><br><span class="line">AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">       AnnotationAttributes enableAspectJAutoProxy = AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);</span><br><span class="line">//是否强制使用cglib代理</span><br><span class="line">if (enableAspectJAutoProxy.getBoolean(&quot;proxyTargetClass&quot;)) &#123;</span><br><span class="line">           AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">       &#125;</span><br><span class="line">//是否对自己暴露代理对象</span><br><span class="line">       if (enableAspectJAutoProxy.getBoolean(&quot;exposeProxy&quot;)) &#123;</span><br><span class="line">           AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>AnnotationAwareAspectJAutoProxyCreator实现了BeanPostProcessor接口，bean创建完成会调用postProcessAfterInitialization方法完成代理对象的创建<br>父类AbstractAutoProxyCreator中实现了该方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">       if (bean != null) &#123;</span><br><span class="line">           Object cacheKey = this.getCacheKey(bean.getClass(), beanName);</span><br><span class="line">           if (!this.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">//创建代理对象</span><br><span class="line">               return this.wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return bean;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接下来追踪wrapIfNecessary方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">//targetSourcedBeans中的bean是提前暴露并且已经被代理过</span><br><span class="line">       if (beanName != null &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">           return bean;</span><br><span class="line">//是否以代理或者无需代理</span><br><span class="line">       &#125; else if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">           return bean;</span><br><span class="line">       &#125; else if (!this.isInfrastructureClass(bean.getClass()) &amp;&amp; !this.shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">           //获取切面</span><br><span class="line">Object[] specificInterceptors = this.getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, (TargetSource)null);</span><br><span class="line">           if (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">               this.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">//创建代理对象</span><br><span class="line">Object proxy = this.createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">               this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">               return proxy;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">               return bean;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">           return bean;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接下来看看获取切面的方法getAdvicesAndAdvisorsForBean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findEligibleAdvisors(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">       //获取了全部切面</span><br><span class="line">List&lt;Advisor&gt; candidateAdvisors = this.findCandidateAdvisors();</span><br><span class="line">       //通过Pointcut等信息筛选适用于本对象的切面</span><br><span class="line">List&lt;Advisor&gt; eligibleAdvisors = this.findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">       //空方法待实现</span><br><span class="line">this.extendAdvisors(eligibleAdvisors);</span><br><span class="line">       if (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">           eligibleAdvisors = this.sortAdvisors(eligibleAdvisors);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return eligibleAdvisors;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>我们继续看创建代理对象的方法createProxy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected Object createProxy(Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) &#123;</span><br><span class="line">       if (this.beanFactory instanceof ConfigurableListableBeanFactory) &#123;</span><br><span class="line">           AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory)this.beanFactory, beanName, beanClass);</span><br><span class="line">       &#125;</span><br><span class="line">//代理对象工厂</span><br><span class="line">       ProxyFactory proxyFactory = new ProxyFactory();</span><br><span class="line">       proxyFactory.copyFrom(this);</span><br><span class="line">//判断使用子类或者接口代理</span><br><span class="line">       if (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">           if (this.shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">               proxyFactory.setProxyTargetClass(true);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               this.evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">//将切面转换成Advisor对象</span><br><span class="line">       Advisor[] advisors = this.buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">       //设置切面</span><br><span class="line">proxyFactory.addAdvisors(advisors);</span><br><span class="line">//设置代理对象</span><br><span class="line">       proxyFactory.setTargetSource(targetSource);</span><br><span class="line">       this.customizeProxyFactory(proxyFactory);</span><br><span class="line">       proxyFactory.setFrozen(this.freezeProxy);</span><br><span class="line">       if (this.advisorsPreFiltered()) &#123;</span><br><span class="line">           proxyFactory.setPreFiltered(true);</span><br><span class="line">       &#125;</span><br><span class="line">//创建代理对象</span><br><span class="line">       return proxyFactory.getProxy(this.getProxyClassLoader());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>继续追踪getProxy方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Object getProxy(ClassLoader classLoader) &#123;</span><br><span class="line">//cglib和jdk的代理工厂分别为CglibAopProxy、JdkDynamicAopProxy</span><br><span class="line">       return this.createAopProxy().getProxy(classLoader);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>先看CglibAopProxy的getProxy方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> public Object getProxy(ClassLoader classLoader) &#123;</span><br><span class="line">     if (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(&quot;Creating CGLIB proxy: target source is &quot; + this.advised.getTargetSource());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     try &#123;</span><br><span class="line">//advised为ProxyFactory其中维护了该对象的切面信息</span><br><span class="line">         Class&lt;?&gt; rootClass = this.advised.getTargetClass();</span><br><span class="line">         Assert.state(rootClass != null, &quot;Target class must be available for creating a CGLIB proxy&quot;);</span><br><span class="line">         Class&lt;?&gt; proxySuperClass = rootClass;</span><br><span class="line">         int x;</span><br><span class="line">//已是代理类</span><br><span class="line">         if (ClassUtils.isCglibProxyClass(rootClass)) &#123;</span><br><span class="line">             proxySuperClass = rootClass.getSuperclass();</span><br><span class="line">             Class&lt;?&gt;[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class="line">             Class[] var5 = additionalInterfaces;</span><br><span class="line">             int var6 = additionalInterfaces.length;</span><br><span class="line"></span><br><span class="line">             for(x = 0; x &lt; var6; ++x) &#123;</span><br><span class="line">                 Class&lt;?&gt; additionalInterface = var5[x];</span><br><span class="line">                 this.advised.addInterface(additionalInterface);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         this.validateClassIfNecessary(proxySuperClass, classLoader);</span><br><span class="line">         Enhancer enhancer = this.createEnhancer();</span><br><span class="line">         if (classLoader != null) &#123;</span><br><span class="line">             enhancer.setClassLoader(classLoader);</span><br><span class="line">             if (classLoader instanceof SmartClassLoader &amp;&amp; ((SmartClassLoader)classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class="line">                 enhancer.setUseCache(false);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">//设置被代理的类</span><br><span class="line">         enhancer.setSuperclass(proxySuperClass);</span><br><span class="line">//被代理类实现的接口</span><br><span class="line">         enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));</span><br><span class="line">         enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">         enhancer.setStrategy(new CglibAopProxy.ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));</span><br><span class="line">//创建callbacks</span><br><span class="line">Callback[] callbacks = this.getCallbacks(rootClass);</span><br><span class="line">         Class&lt;?&gt;[] types = new Class[callbacks.length];</span><br><span class="line"></span><br><span class="line">         for(x = 0; x &lt; types.length; ++x) &#123;</span><br><span class="line">             types[x] = callbacks[x].getClass();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         enhancer.setCallbackFilter(new CglibAopProxy.ProxyCallbackFilter(this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));</span><br><span class="line">         enhancer.setCallbackTypes(types);</span><br><span class="line">         //创建代理对象</span><br><span class="line">return this.createProxyClassAndInstance(enhancer, callbacks);</span><br><span class="line">     &#125; catch (CodeGenerationException var9) &#123;</span><br><span class="line">         throw new AopConfigException(&quot;Could not generate CGLIB subclass of &quot; + this.advised.getTargetClass() + &quot;: Common causes of this problem include using a final class or a non-visible class&quot;, var9);</span><br><span class="line">     &#125; catch (IllegalArgumentException var10) &#123;</span><br><span class="line">         throw new AopConfigException(&quot;Could not generate CGLIB subclass of &quot; + this.advised.getTargetClass() + &quot;: Common causes of this problem include using a final class or a non-visible class&quot;, var10);</span><br><span class="line">     &#125; catch (Throwable var11) &#123;</span><br><span class="line">         throw new AopConfigException(&quot;Unexpected AOP exception&quot;, var11);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>继续追踪getCallbacks方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private Callback[] getCallbacks(Class&lt;?&gt; rootClass) throws Exception &#123;</span><br><span class="line">       boolean exposeProxy = this.advised.isExposeProxy();</span><br><span class="line">       boolean isFrozen = this.advised.isFrozen();</span><br><span class="line">       boolean isStatic = this.advised.getTargetSource().isStatic();</span><br><span class="line">//创建拦截器</span><br><span class="line">       Callback aopInterceptor = new CglibAopProxy.DynamicAdvisedInterceptor(this.advised);</span><br><span class="line">       Object targetInterceptor;</span><br><span class="line">       if (exposeProxy) &#123;</span><br><span class="line">           targetInterceptor = isStatic ? new CglibAopProxy.StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) : new CglibAopProxy.DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource());</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           targetInterceptor = isStatic ? new CglibAopProxy.StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) : new CglibAopProxy.DynamicUnadvisedInterceptor(this.advised.getTargetSource());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Callback targetDispatcher = (Callback)(isStatic ? new CglibAopProxy.StaticDispatcher(this.advised.getTargetSource().getTarget()) : new CglibAopProxy.SerializableNoOp());</span><br><span class="line">       Callback[] mainCallbacks = new Callback[]&#123;aopInterceptor, (Callback)targetInterceptor, new CglibAopProxy.SerializableNoOp(), targetDispatcher, this.advisedDispatcher, new CglibAopProxy.EqualsInterceptor(this.advised), new CglibAopProxy.HashCodeInterceptor(this.advised)&#125;;</span><br><span class="line">       Callback[] callbacks;</span><br><span class="line">//优化根据fixedInterceptorOffset直接获取拦截器</span><br><span class="line">       if (isStatic &amp;&amp; isFrozen) &#123;</span><br><span class="line">           Method[] methods = rootClass.getMethods();</span><br><span class="line">           Callback[] fixedCallbacks = new Callback[methods.length];</span><br><span class="line">           this.fixedInterceptorMap = new HashMap(methods.length);</span><br><span class="line"></span><br><span class="line">           for(int x = 0; x &lt; methods.length; ++x) &#123;</span><br><span class="line">               List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass);</span><br><span class="line">               fixedCallbacks[x] = new CglibAopProxy.FixedChainStaticTargetInterceptor(chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());</span><br><span class="line">               this.fixedInterceptorMap.put(methods[x].toString(), x);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length];</span><br><span class="line">           System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length);</span><br><span class="line">           System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length);</span><br><span class="line">           this.fixedInterceptorOffset = mainCallbacks.length;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           callbacks = mainCallbacks;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return callbacks;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>主要的拦截器为aopInterceptor（DynamicAdvisedInterceptor），继续看它的intercept方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">Object oldProxy = null;</span><br><span class="line">boolean setProxyContext = false;</span><br><span class="line">Class&lt;?&gt; targetClass = null;</span><br><span class="line">Object target = null;</span><br><span class="line"></span><br><span class="line">Object var15;</span><br><span class="line">try &#123;</span><br><span class="line">//对自己暴露代理对象</span><br><span class="line">if (this.advised.exposeProxy) &#123;</span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target = this.getTarget();</span><br><span class="line">if (target != null) &#123;</span><br><span class="line">targetClass = target.getClass();</span><br><span class="line">&#125;</span><br><span class="line">//创建拦截器链</span><br><span class="line">List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">Object retVal;</span><br><span class="line">if (chain.isEmpty() &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">retVal = methodProxy.invoke(target, argsToUse);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//执行拦截器链</span><br><span class="line">retVal = (new CglibAopProxy.CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy)).proceed();</span><br><span class="line">&#125;</span><br><span class="line">//处理返回值</span><br><span class="line">retVal = CglibAopProxy.processReturnType(proxy, target, method, retVal);</span><br><span class="line">var15 = retVal;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">if (target != null) &#123;</span><br><span class="line">this.releaseTarget(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (setProxyContext) &#123;</span><br><span class="line">AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return var15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cglib代理就看完了<br>接下来看JdkDynamicAopProxy的getProxy方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public Object getProxy(ClassLoader classLoader) &#123;</span><br><span class="line">       if (logger.isDebugEnabled()) &#123;</span><br><span class="line">           logger.debug(&quot;Creating JDK dynamic proxy: target source is &quot; + this.advised.getTargetSource());</span><br><span class="line">       &#125;</span><br><span class="line">//获取代理对象实现的接口</span><br><span class="line">       Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised, true);</span><br><span class="line">       this.findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">//创建代理对象，拦截器为this也就是JdkDynamicAopProxy</span><br><span class="line">       return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>继续看JdkDynamicAopProxy的invoke方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">       Object oldProxy = null;</span><br><span class="line">       boolean setProxyContext = false;</span><br><span class="line">       TargetSource targetSource = this.advised.targetSource;</span><br><span class="line">       Class&lt;?&gt; targetClass = null;</span><br><span class="line">       Object target = null;</span><br><span class="line"></span><br><span class="line">       Object retVal;</span><br><span class="line">       try &#123;</span><br><span class="line">           if (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">               Boolean var20 = this.equals(args[0]);</span><br><span class="line">               return var20;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">               Integer var18 = this.hashCode();</span><br><span class="line">               return var18;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (method.getDeclaringClass() == DecoratingProxy.class) &#123;</span><br><span class="line">               Class var17 = AopProxyUtils.ultimateTargetClass(this.advised);</span><br><span class="line">               return var17;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (this.advised.opaque || !method.getDeclaringClass().isInterface() || !method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">//是否自己暴露代理</span><br><span class="line">if (this.advised.exposeProxy) &#123;</span><br><span class="line">                   oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">                   setProxyContext = true;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               target = targetSource.getTarget();</span><br><span class="line">               if (target != null) &#123;</span><br><span class="line">                   targetClass = target.getClass();</span><br><span class="line">               &#125;</span><br><span class="line">//拦截器链</span><br><span class="line">               List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">               if (chain.isEmpty()) &#123;</span><br><span class="line">                   Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">                   retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">//执行拦截器链</span><br><span class="line">                   MethodInvocation invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">                   retVal = invocation.proceed();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">               if (retVal != null &amp;&amp; retVal == target &amp;&amp; returnType != Object.class &amp;&amp; returnType.isInstance(proxy) &amp;&amp; !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">                   retVal = proxy;</span><br><span class="line">               &#125; else if (retVal == null &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line">                   throw new AopInvocationException(&quot;Null return value from advice does not match primitive return type for: &quot; + method);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               Object var13 = retVal;</span><br><span class="line">               return var13;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           retVal = AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           if (target != null &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">               targetSource.releaseTarget(target);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (setProxyContext) &#123;</span><br><span class="line">               AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return retVal;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、配置解析&quot;&gt;&lt;a href=&quot;#1、配置解析&quot; class=&quot;headerlink&quot; title=&quot;1、配置解析&quot;&gt;&lt;/a&gt;1、配置解析&lt;/h3&gt;&lt;p&gt;spring容器分为基础容器和扩展容器，我们目前正在使用的基础容器为DefaultListableBeanF
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>spring源码配置类解析</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81%E9%85%8D%E7%BD%AE%E7%B1%BB%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/spring源码配置类解析/</id>
    <published>2020-01-16T13:43:36.430Z</published>
    <updated>2019-01-20T12:11:25.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ConfigurationClassPostProcessor处理器"><a href="#一、ConfigurationClassPostProcessor处理器" class="headerlink" title="一、ConfigurationClassPostProcessor处理器"></a>一、ConfigurationClassPostProcessor处理器</h3><h4 id="1、ConfigurationClassPostProcessor的创建"><a href="#1、ConfigurationClassPostProcessor的创建" class="headerlink" title="1、ConfigurationClassPostProcessor的创建"></a>1、ConfigurationClassPostProcessor的创建</h4><p>实例化AnnotatedBeanDefinitionReader的时候会往容器中注入注解处理器，包括ConfigurationClassPostProcessor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) &#123;</span><br><span class="line">Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">Assert.notNull(environment, &quot;Environment must not be null&quot;);</span><br><span class="line">this.registry = registry;</span><br><span class="line">this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);</span><br><span class="line">//注入注解处理器</span><br><span class="line">AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注入注解相关处理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;BeanDefinitionHolder&gt; registerAnnotationConfigProcessors(</span><br><span class="line">        BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    //获取容器中的DefaultListableBeanFactory容器</span><br><span class="line">    DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    if (beanFactory != null) &#123;</span><br><span class="line">        //比较器</span><br><span class="line">        if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        //确定一个bean是否要被注入的工具</span><br><span class="line">        if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefs = new LinkedHashSet&lt;BeanDefinitionHolder&gt;(4);</span><br><span class="line"></span><br><span class="line">    //配置类解析器</span><br><span class="line">    if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //@Autowired、@Value处理器</span><br><span class="line">    if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //检查带有@Required注解的所有Bean属性是否设置</span><br><span class="line">    if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span><br><span class="line">    //处理@Resource注解及WebService、EJB相关的注解</span><br><span class="line">    if (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span><br><span class="line">    //JPA相关注解的Bean后置处理器，主要解析和处理@PersistenceUnit、@PersistenceContext注解</span><br><span class="line">    if (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition();</span><br><span class="line">        try &#123;</span><br><span class="line">            def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">                    AnnotationConfigUtils.class.getClassLoader()));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new IllegalStateException(</span><br><span class="line">                    &quot;Cannot load optional framework class: &quot; + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //容器加载完单例bean之后执行处理器的afterSingletonsInstantiated方法</span><br><span class="line">    //遍历bean将其中注解了@EventListener的方法转换成监听器注册到容器中</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //创建监听器的工厂类</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ConfigurationClassPostProcessor处理配置类"><a href="#2、ConfigurationClassPostProcessor处理配置类" class="headerlink" title="2、ConfigurationClassPostProcessor处理配置类"></a>2、ConfigurationClassPostProcessor处理配置类</h4><p>AbstractApplicationContext的refresh方法中的invokeBeanFactoryPostProcessors方法，会调用BeanFactoryPostProcessor的postProcessBeanFactory方法。<br>最终使用processConfigBeanDefinitions方法来处理配置类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">List&lt;BeanDefinitionHolder&gt; configCandidates = new ArrayList&lt;BeanDefinitionHolder&gt;();</span><br><span class="line">//获取已有的beanName，Application也作为BeanDefinition注册到了容器中</span><br><span class="line">String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">...</span><br><span class="line">// Parse each @Configuration class</span><br><span class="line">//实例化ConfigurationClassParser解析配置类</span><br><span class="line">ConfigurationClassParser parser = new ConfigurationClassParser(</span><br><span class="line">this.metadataReaderFactory, this.problemReporter, this.environment,</span><br><span class="line">this.resourceLoader, this.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; candidates = new LinkedHashSet&lt;BeanDefinitionHolder&gt;(configCandidates);</span><br><span class="line">Set&lt;ConfigurationClass&gt; alreadyParsed = new HashSet&lt;ConfigurationClass&gt;(configCandidates.size());</span><br><span class="line">do &#123;</span><br><span class="line">    //解析配置类</span><br><span class="line">parser.parse(candidates);</span><br><span class="line">//校验，配置类不能为final，@Bean注解的方法如不是static的则必须能被覆盖</span><br><span class="line">parser.validate();</span><br><span class="line"></span><br><span class="line">Set&lt;ConfigurationClass&gt; configClasses = new LinkedHashSet&lt;ConfigurationClass&gt;(parser.getConfigurationClasses());</span><br><span class="line">configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">// Read the model and create bean definitions based on its content</span><br><span class="line">if (this.reader == null) &#123;</span><br><span class="line">this.reader = new ConfigurationClassBeanDefinitionReader(</span><br><span class="line">registry, this.sourceExtractor, this.resourceLoader, this.environment,</span><br><span class="line">this.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">&#125;</span><br><span class="line">//加载资源，在此处会根据Condition类过滤，OnBeanCondition、OnPropertyCondition实现该类</span><br><span class="line">this.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">//该配置类已处理</span><br><span class="line">alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">candidates.clear();</span><br><span class="line">//获取新注册的配置类</span><br><span class="line">if (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">Set&lt;String&gt; oldCandidateNames = new HashSet&lt;String&gt;(Arrays.asList(candidateNames));</span><br><span class="line">Set&lt;String&gt; alreadyParsedClasses = new HashSet&lt;String&gt;();</span><br><span class="line">for (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">&#125;</span><br><span class="line">for (String candidateName : newCandidateNames) &#123;</span><br><span class="line">if (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">BeanDefinition beanDef = registry.getBeanDefinition(candidateName);</span><br><span class="line">//新加载的BeanDefinition中的配置类</span><br><span class="line">if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &amp;&amp;</span><br><span class="line">!alreadyParsedClasses.contains(beanDef.getBeanClassName())) &#123;</span><br><span class="line">candidates.add(new BeanDefinitionHolder(beanDef, candidateName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">candidateNames = newCandidateNames;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//处理新加载的BeanDefinition中的配置类</span><br><span class="line">while (!candidates.isEmpty());</span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConfigurationClassParser的parse方法处理配置类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) &#123;</span><br><span class="line">this.deferredImportSelectors = new LinkedList&lt;DeferredImportSelectorHolder&gt;();</span><br><span class="line">        //处理配置类</span><br><span class="line">for (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line">try &#123;</span><br><span class="line">if (bd instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">else if (bd instanceof AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line">throw new BeanDefinitionStoreException(</span><br><span class="line">&quot;Failed to parse configuration class [&quot; + bd.getBeanClassName() + &quot;]&quot;, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        //处理@Import注入的ImportSelector类</span><br><span class="line">processDeferredImportSelectors();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConfigurationClassParser实际处理配置类的方法为doProcessConfigurationClass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected final SourceClass doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    // Recursively process any member (nested) classes first</span><br><span class="line">    //处理内部类</span><br><span class="line">    processMemberClasses(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    // Process any @PropertySource annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@PropertySource注解</span><br><span class="line">    for (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), PropertySources.class,</span><br><span class="line">            org.springframework.context.annotation.PropertySource.class)) &#123;</span><br><span class="line">        if (this.environment instanceof ConfigurableEnvironment) &#123;</span><br><span class="line">            processPropertySource(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            logger.warn(&quot;Ignoring @PropertySource annotation on [&quot; + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                    &quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process any @ComponentScan annotations</span><br><span class="line">    //获取配置类、配置类父类、配置类注解类的@ComponentScan注解</span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">    if (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">            !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        for (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">            // The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span><br><span class="line">            //解析注解，并扫描</span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                    this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            // Check the set of scanned definitions for any further config classes and parse recursively if needed</span><br><span class="line">            for (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">                BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                if (bdCand == null) &#123;</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line">                //继续解析扫描获取到的配置类</span><br><span class="line">                if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) &#123;</span><br><span class="line">                    parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process any @Import annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@Import注解</span><br><span class="line">    //将注解的值注册到容器中</span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), true);</span><br><span class="line"></span><br><span class="line">    // Process any @ImportResource annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@ImportResource注解的值</span><br><span class="line">    AnnotationAttributes importResource =</span><br><span class="line">            AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">    if (importResource != null) &#123;</span><br><span class="line">        //获取资源</span><br><span class="line">        String[] resources = importResource.getStringArray(&quot;locations&quot;);</span><br><span class="line">        Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(&quot;reader&quot;);</span><br><span class="line">        //遍历资源,加入到configClass中</span><br><span class="line">        for (String resource : resources) &#123;</span><br><span class="line">            String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">            configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process individual @Bean methods</span><br><span class="line">    //配置类的@Bean注解的方法,添加到configClass</span><br><span class="line">    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">    for (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">        configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process default methods on interfaces</span><br><span class="line">    //配置类接口的方法,添加到configClass</span><br><span class="line">    processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    // Process superclass, if any</span><br><span class="line">    //配置类有父类则继续处理</span><br><span class="line">    if (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">        String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">        if (superclass != null &amp;&amp; !superclass.startsWith(&quot;java&quot;) &amp;&amp;</span><br><span class="line">                !this.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">            this.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">            // Superclass found, return its annotation metadata and recurse</span><br><span class="line">            return sourceClass.getSuperClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // No superclass -&gt; processing is complete</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConfigurationClassParser处理处理@Import注解的方法为processImports<br>@Import的方式引入配置类有三种方式：直接注入、条件注入ImportSelector方式、ImportBeanDefinitionRegistrar方式注入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">private void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,</span><br><span class="line">        Collection&lt;SourceClass&gt; importCandidates, boolean checkForCircularImports) &#123;</span><br><span class="line">    //import的类为空</span><br><span class="line">    if (importCandidates.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //检查循环依赖</span><br><span class="line">    if (checkForCircularImports &amp;&amp; isChainedImportOnStack(configClass)) &#123;</span><br><span class="line">        this.problemReporter.error(new CircularImportProblem(configClass, this.importStack));</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        this.importStack.push(configClass);</span><br><span class="line">        try &#123;</span><br><span class="line">            //遍历处理</span><br><span class="line">            for (SourceClass candidate : importCandidates) &#123;</span><br><span class="line">                //ImportSelector的子类</span><br><span class="line">                if (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">                    // Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    //实例化该类</span><br><span class="line">                    ImportSelector selector = BeanUtils.instantiateClass(candidateClass, ImportSelector.class);</span><br><span class="line">                    //给实现特定接口的类设置资源</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            selector, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                    //DeferredImportSelector的实现,加入到deferredImportSelectors</span><br><span class="line">                    if (this.deferredImportSelectors != null &amp;&amp; selector instanceof DeferredImportSelector) &#123;</span><br><span class="line">                        this.deferredImportSelectors.add(</span><br><span class="line">                                new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        //获取该类中定义的需要import的类</span><br><span class="line">                        String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                        Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames);</span><br><span class="line">                        //循环调用该方法，处理importSourceClasses</span><br><span class="line">                        processImports(configClass, currentSourceClass, importSourceClasses, false);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //ImportBeanDefinitionRegistrar的子类</span><br><span class="line">                else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;</span><br><span class="line">                    // Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span><br><span class="line">                    // delegate to it to register additional bean definitions</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    ImportBeanDefinitionRegistrar registrar =</span><br><span class="line">                            BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            registrar, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                    //添加到configClass中</span><br><span class="line">                    configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    // Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;</span><br><span class="line">                    // process it as an @Configuration class</span><br><span class="line">                    this.importStack.registerImport(</span><br><span class="line">                            currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">                    //调用processConfigurationClass进行处理,当成普通配置类</span><br><span class="line">                    processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(</span><br><span class="line">                    &quot;Failed to process import candidates for configuration class [&quot; +</span><br><span class="line">                    configClass.getMetadata().getClassName() + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            this.importStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Import注入的、BeanDefinitionRegistrar类以及@Bean注入的类会在ConfigurationClassBeanDefinitionReader的loadBeanDefinitions方法中继续处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void loadBeanDefinitionsForConfigurationClass(</span><br><span class="line">        ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) &#123;</span><br><span class="line">    //使用条件注解Condition判断是否需要跳过这个配置类</span><br><span class="line">    if (trackedConditionEvaluator.shouldSkip(configClass)) &#123;</span><br><span class="line">        //跳过配置类则移除Spring容器中bean的注册</span><br><span class="line">        String beanName = configClass.getBeanName();</span><br><span class="line">        if (StringUtils.hasLength(beanName) &amp;&amp; this.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            this.registry.removeBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        //从importRegistry进行删除</span><br><span class="line">        this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //配置类是被@Import注释所import的，注册自己</span><br><span class="line">    if (configClass.isImported()) &#123;</span><br><span class="line">        registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">    &#125;</span><br><span class="line">    //遍历BeanMethods,依次对其进行注册</span><br><span class="line">    for (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">        loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    //注册@ImportResource注解注释的资源文件中的bean</span><br><span class="line">    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">    //注册@Import注解中的ImportBeanDefinitionRegistrar接口的registerBeanDefinitions</span><br><span class="line">    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、ConfigurationClassPostProcessor处理器&quot;&gt;&lt;a href=&quot;#一、ConfigurationClassPostProcessor处理器&quot; class=&quot;headerlink&quot; title=&quot;一、ConfigurationClass
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码整合MyBatis</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81%E6%95%B4%E5%90%88MyBatis/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/spring源码整合MyBatis/</id>
    <published>2020-01-16T13:43:36.426Z</published>
    <updated>2018-07-07T15:10:18.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans  </span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;!-- 1.配置数据源：DriverManagerDataSource --&gt;  </span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;oracle.jdbc.OracleDriver&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;scott&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;tiger&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/**/sql/*.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;mapperscanner&quot; class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.**.mapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、创建SqlSessionFactory"><a href="#一、创建SqlSessionFactory" class="headerlink" title="一、创建SqlSessionFactory"></a>一、创建SqlSessionFactory</h3><h4 id="1、SqlSessionFactoryBean的afterPropertiesSet方法"><a href="#1、SqlSessionFactoryBean的afterPropertiesSet方法" class="headerlink" title="1、SqlSessionFactoryBean的afterPropertiesSet方法"></a>1、SqlSessionFactoryBean的afterPropertiesSet方法</h4><p>SqlSessionFactoryBean实现了InitializingBean接口，创建完bean执行自定义初始化方法afterPropertiesSet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    notNull(dataSource, &quot;Property &apos;dataSource&apos; is required&quot;);</span><br><span class="line">    notNull(sqlSessionFactoryBuilder, &quot;Property &apos;sqlSessionFactoryBuilder&apos; is required&quot;);</span><br><span class="line">    //创建sqlSessionFactory</span><br><span class="line">    this.sqlSessionFactory = buildSqlSessionFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、SqlSessionFactoryBean的buildSqlSessionFactory方法"><a href="#2、SqlSessionFactoryBean的buildSqlSessionFactory方法" class="headerlink" title="2、SqlSessionFactoryBean的buildSqlSessionFactory方法"></a>2、SqlSessionFactoryBean的buildSqlSessionFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">protected SqlSessionFactory buildSqlSessionFactory() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    Configuration configuration;</span><br><span class="line"></span><br><span class="line">    XMLConfigBuilder xmlConfigBuilder = null;</span><br><span class="line">    if (this.configLocation != null) &#123;</span><br><span class="line">        //如果spring配置中configLocation属性不为空，则加载指定的Mybatis配置</span><br><span class="line">        xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, </span><br><span class="line">              this.configurationProperties);</span><br><span class="line">        configuration = xmlConfigBuilder.getConfiguration();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Property &apos;configLocation&apos; not specified, using default MyBatis Configuration&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //否则则采用默认的Mybatis配置</span><br><span class="line">        configuration = new Configuration();</span><br><span class="line">        configuration.setVariables(this.configurationProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.objectFactory != null) &#123;</span><br><span class="line">        configuration.setObjectFactory(this.objectFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.objectWrapperFactory != null) &#123;</span><br><span class="line">        configuration.setObjectWrapperFactory(this.objectWrapperFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    //对包下的类注册别民</span><br><span class="line">    if (hasLength(this.typeAliasesPackage)) &#123;</span><br><span class="line">        String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,</span><br><span class="line">                ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        for (String packageToScan : typeAliasPackageArray) &#123;</span><br><span class="line">            //对应方法的目的是通过扫描包得到其包以及子包目录下的typeAliasesSuperType的子类Class</span><br><span class="line">            //然后为每个class注册别名,别名为类名</span><br><span class="line">            configuration.getTypeAliasRegistry().registerAliases(packageToScan,</span><br><span class="line">                typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for aliases&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //对类注册别名</span><br><span class="line">    if (!isEmpty(this.typeAliases)) &#123;</span><br><span class="line">        for (Class&lt;?&gt; typeAlias : this.typeAliases) &#123;</span><br><span class="line">            configuration.getTypeAliasRegistry().registerAlias(typeAlias);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered type alias: &apos;&quot; + typeAlias + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加插件</span><br><span class="line">    if (!isEmpty(this.plugins)) &#123;</span><br><span class="line">        for (Interceptor plugin : this.plugins) &#123;</span><br><span class="line">            configuration.addInterceptor(plugin);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered plugin: &apos;&quot; + plugin + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (hasLength(this.typeHandlersPackage)) &#123;</span><br><span class="line">        String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,</span><br><span class="line">            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        for (String packageToScan : typeHandlersPackageArray) &#123;</span><br><span class="line">            configuration.getTypeHandlerRegistry().register(packageToScan);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for type handlers&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isEmpty(this.typeHandlers)) &#123;</span><br><span class="line">        for (TypeHandler&lt;?&gt; typeHandler : this.typeHandlers) &#123;</span><br><span class="line">            configuration.getTypeHandlerRegistry().register(typeHandler);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered type handler: &apos;&quot; + typeHandler + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (xmlConfigBuilder != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //解析配置文件</span><br><span class="line">            xmlConfigBuilder.parse();</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Parsed configuration file: &apos;&quot; + this.configLocation + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            throw new NestedIOException(&quot;Failed to parse config resource: &quot; + this.configLocation, ex);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.transactionFactory == null) &#123;</span><br><span class="line">        //创建事务管理器</span><br><span class="line">        this.transactionFactory = new SpringManagedTransactionFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    //设置环境</span><br><span class="line">    Environment environment = new Environment(this.environment, this.transactionFactory, this.dataSource);</span><br><span class="line">    configuration.setEnvironment(environment);</span><br><span class="line"></span><br><span class="line">    if (this.databaseIdProvider != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new NestedIOException(&quot;Failed getting a databaseId&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isEmpty(this.mapperLocations)) &#123;</span><br><span class="line">        for (Resource mapperLocation : this.mapperLocations) &#123;</span><br><span class="line">            if (mapperLocation == null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),</span><br><span class="line">                    configuration, mapperLocation.toString(), configuration.getSqlFragments());</span><br><span class="line">                //解析mapper文件</span><br><span class="line">                xmlMapperBuilder.parse();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new NestedIOException(&quot;Failed to parse mapping resource: &apos;&quot; + mapperLocation + &quot;&apos;&quot;, e);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                ErrorContext.instance().reset();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Parsed mapper file: &apos;&quot; + mapperLocation + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Property &apos;mapperLocations&apos; was not specified or no matching resources found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return this.sqlSessionFactoryBuilder.build(configuration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、SqlSessionFactoryBean的getObject方法"><a href="#3、SqlSessionFactoryBean的getObject方法" class="headerlink" title="3、SqlSessionFactoryBean的getObject方法"></a>3、SqlSessionFactoryBean的getObject方法</h4><p>获取SqlSessionFactory对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionFactory getObject() throws Exception &#123;</span><br><span class="line">    if (this.sqlSessionFactory == null) &#123;</span><br><span class="line">        afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">    return this.sqlSessionFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二、扫描mapper接口"><a href="#二、扫描mapper接口" class="headerlink" title="二、扫描mapper接口"></a>二、扫描mapper接口</h3><h4 id="1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法"><a href="#1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法" class="headerlink" title="1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法"></a>1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法</h4><p>BeanFactoryPostProcessor首先会执行postProcessBeanDefinitionRegistry方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    //若属性配置文件配置存在表达式$&#123;basePackage&#125;,此时尚未执行PropertyResourceConfigurer的postProcessBeanFactory加载Properties</span><br><span class="line">    //因此方法中创建一个容器，预先执行获取该属性</span><br><span class="line">    if (this.processPropertyPlaceHolders) &#123;</span><br><span class="line">      processPropertyPlaceHolders();</span><br><span class="line">    &#125;</span><br><span class="line">    //扫描器</span><br><span class="line">    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);</span><br><span class="line">    scanner.setAddToConfig(this.addToConfig);</span><br><span class="line">    scanner.setAnnotationClass(this.annotationClass);</span><br><span class="line">    scanner.setMarkerInterface(this.markerInterface);</span><br><span class="line">    //sqlSessionFactory</span><br><span class="line">    scanner.setSqlSessionFactory(this.sqlSessionFactory);</span><br><span class="line">    scanner.setSqlSessionTemplate(this.sqlSessionTemplate);</span><br><span class="line">    scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName);</span><br><span class="line">    scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName);</span><br><span class="line">    scanner.setResourceLoader(this.applicationContext);</span><br><span class="line">    scanner.setBeanNameGenerator(this.nameGenerator);</span><br><span class="line">    //注册过滤器</span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    //扫描包路径</span><br><span class="line">    scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ClassPathMapperScanner的registerFilters方法"><a href="#2、ClassPathMapperScanner的registerFilters方法" class="headerlink" title="2、ClassPathMapperScanner的registerFilters方法"></a>2、ClassPathMapperScanner的registerFilters方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public void registerFilters() &#123;</span><br><span class="line">    boolean acceptAllInterfaces = true;</span><br><span class="line"></span><br><span class="line">    // if specified, use the given annotation and / or marker interface</span><br><span class="line">    //添加注解类型过滤器</span><br><span class="line">    if (this.annotationClass != null) &#123;</span><br><span class="line">        addIncludeFilter(new AnnotationTypeFilter(this.annotationClass));</span><br><span class="line">        acceptAllInterfaces = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // override AssignableTypeFilter to ignore matches on the actual marker interface</span><br><span class="line">    //添加接口类型过滤器，获取实现了该接口的类或接口，但忽略本接口</span><br><span class="line">    if (this.markerInterface != null) &#123;</span><br><span class="line">        addIncludeFilter(new AssignableTypeFilter(this.markerInterface) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected boolean matchClassName(String className) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        acceptAllInterfaces = false;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取所有接口</span><br><span class="line">    if (acceptAllInterfaces) &#123;</span><br><span class="line">        // default include filter that accepts all classes</span><br><span class="line">        addIncludeFilter(new TypeFilter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // exclude package-info.java</span><br><span class="line">    //排除package-info.java</span><br><span class="line">    addExcludeFilter(new TypeFilter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">            String className = metadataReader.getClassMetadata().getClassName();</span><br><span class="line">            return className.endsWith(&quot;package-info&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ClassPathMapperScanner的doScan方法"><a href="#3、ClassPathMapperScanner的doScan方法" class="headerlink" title="3、ClassPathMapperScanner的doScan方法"></a>3、ClassPathMapperScanner的doScan方法</h4><p>ClassPathMapperScanner继承了ClassPathBeanDefinitionScanner，重写了doScan方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) &#123;</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = super.doScan(basePackages);</span><br><span class="line"></span><br><span class="line">    if (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">        logger.warn(&quot;No MyBatis mapper was found in &apos;&quot; + Arrays.toString(basePackages) + &quot;&apos; package. Please check your configuration.&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        processBeanDefinitions(beanDefinitions);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、ClassPathMapperScanner的isCandidateComponent方法"><a href="#4、ClassPathMapperScanner的isCandidateComponent方法" class="headerlink" title="4、ClassPathMapperScanner的isCandidateComponent方法"></a>4、ClassPathMapperScanner的isCandidateComponent方法</h4><p>ClassPathMapperScanner继承了ClassPathScanningCandidateComponentProvider，重写了isCandidateComponent方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) &#123;</span><br><span class="line">    //只获取接口</span><br><span class="line">    return beanDefinition.getMetadata().isInterface() &amp;&amp; beanDefinition.getMetadata().isIndependent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法"><a href="#5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法" class="headerlink" title="5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法"></a>5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private void processBeanDefinitions(Set&lt;BeanDefinitionHolder&gt; beanDefinitions) &#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    for (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">        definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Creating MapperFactoryBean with name &apos;&quot; + holder.getBeanName() </span><br><span class="line">              + &quot;&apos; and &apos;&quot; + definition.getBeanClassName() + &quot;&apos; mapperInterface&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // the mapper interface is the original class of the bean</span><br><span class="line">        // but, the actual class of the bean is MapperFactoryBean</span><br><span class="line">        //设置构造器参数</span><br><span class="line">        definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName()); // issue #59</span><br><span class="line">        //设置mapper代理类的工厂</span><br><span class="line">        definition.setBeanClass(this.mapperFactoryBean.getClass());</span><br><span class="line"></span><br><span class="line">        definition.getPropertyValues().add(&quot;addToConfig&quot;, this.addToConfig);</span><br><span class="line"></span><br><span class="line">        boolean explicitFactoryUsed = false;</span><br><span class="line">        //设置sqlSessionFactory</span><br><span class="line">        if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionFactory&quot;, new RuntimeBeanReference(this.sqlSessionFactoryBeanName));</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125; else if (this.sqlSessionFactory != null) &#123;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionFactory&quot;, this.sqlSessionFactory);</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">            if (explicitFactoryUsed) &#123;</span><br><span class="line">                logger.warn(&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionTemplate&quot;, new RuntimeBeanReference(this.sqlSessionTemplateBeanName));</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125; else if (this.sqlSessionTemplate != null) &#123;</span><br><span class="line">            if (explicitFactoryUsed) &#123;</span><br><span class="line">                logger.warn(&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionTemplate&quot;, this.sqlSessionTemplate);</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!explicitFactoryUsed) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Enabling autowire by type for MapperFactoryBean with name &apos;&quot; + holder.getBeanName() + &quot;&apos;.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置自动注入byType</span><br><span class="line">            definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、创建mapper代理对象"><a href="#三、创建mapper代理对象" class="headerlink" title="三、创建mapper代理对象"></a>三、创建mapper代理对象</h3><h4 id="1、实例化MapperFactoryBean"><a href="#1、实例化MapperFactoryBean" class="headerlink" title="1、实例化MapperFactoryBean"></a>1、实例化MapperFactoryBean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public MapperFactoryBean(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class="line">    this.mapperInterface = mapperInterface;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、SqlSessionDaoSupport的setSqlSessionFactory方法"><a href="#2、SqlSessionDaoSupport的setSqlSessionFactory方法" class="headerlink" title="2、SqlSessionDaoSupport的setSqlSessionFactory方法"></a>2、SqlSessionDaoSupport的setSqlSessionFactory方法</h4><p>注入sqlSessionFactory属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">    if (!this.externalSqlSession) &#123;</span><br><span class="line">        this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、实例化SqlSessionTemplate"><a href="#3、实例化SqlSessionTemplate" class="headerlink" title="3、实例化SqlSessionTemplate"></a>3、实例化SqlSessionTemplate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">    this(sqlSessionFactory, sqlSessionFactory.getConfiguration().getDefaultExecutorType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType) &#123;</span><br><span class="line">    this(sqlSessionFactory, executorType,</span><br><span class="line">        new MyBatisExceptionTranslator(</span><br><span class="line">            sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), true));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span><br><span class="line">      PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(sqlSessionFactory, &quot;Property &apos;sqlSessionFactory&apos; is required&quot;);</span><br><span class="line">    notNull(executorType, &quot;Property &apos;executorType&apos; is required&quot;);</span><br><span class="line"></span><br><span class="line">    this.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    //ExecutorType.SIMPLE</span><br><span class="line">    this.executorType = executorType;</span><br><span class="line">    this.exceptionTranslator = exceptionTranslator;</span><br><span class="line">    //sqlSession代理</span><br><span class="line">    this.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class="line">        SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">        new Class[] &#123; SqlSession.class &#125;,</span><br><span class="line">        new SqlSessionInterceptor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、MapperFactoryBean的getObject方法"><a href="#4、MapperFactoryBean的getObject方法" class="headerlink" title="4、MapperFactoryBean的getObject方法"></a>4、MapperFactoryBean的getObject方法</h4><p>获取bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public T getObject() throws Exception &#123;</span><br><span class="line">    //SqlSessionTemplate获取代理对象</span><br><span class="line">    return getSqlSession().getMapper(this.mapperInterface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、SqlSessionTemplate的getMapper方法"><a href="#5、SqlSessionTemplate的getMapper方法" class="headerlink" title="5、SqlSessionTemplate的getMapper方法"></a>5、SqlSessionTemplate的getMapper方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T getMapper(Class&lt;T&gt; type) &#123;</span><br><span class="line">    //获取代理对象与mybatis中相同，传入的参数为SqlSessionTemplate，spring只创建这一个SqlSession</span><br><span class="line">    return getConfiguration().getMapper(type, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、拦截器SqlSessionInterceptor"><a href="#三、拦截器SqlSessionInterceptor" class="headerlink" title="三、拦截器SqlSessionInterceptor"></a>三、拦截器SqlSessionInterceptor</h3><h4 id="1、SqlSessionInterceptor的invoke方法"><a href="#1、SqlSessionInterceptor的invoke方法" class="headerlink" title="1、SqlSessionInterceptor的invoke方法"></a>1、SqlSessionInterceptor的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    //创建一个sqlSession</span><br><span class="line">    final SqlSession sqlSession = getSqlSession(</span><br><span class="line">        SqlSessionTemplate.this.sqlSessionFactory,</span><br><span class="line">        SqlSessionTemplate.this.executorType,</span><br><span class="line">        SqlSessionTemplate.this.exceptionTranslator);</span><br><span class="line">    try &#123;</span><br><span class="line">        //执行</span><br><span class="line">        Object result = method.invoke(sqlSession, args);</span><br><span class="line">        //没有使用事务，直接提交</span><br><span class="line">        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) &#123;</span><br><span class="line">            // force commit even on non-dirty sessions because some databases require</span><br><span class="line">            // a commit/rollback before calling close()</span><br><span class="line">            sqlSession.commit(true);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        Throwable unwrapped = unwrapThrowable(t);</span><br><span class="line">        if (SqlSessionTemplate.this.exceptionTranslator != null &amp;&amp; unwrapped instanceof PersistenceException) &#123;</span><br><span class="line">            Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class="line">            if (translated != null) &#123;</span><br><span class="line">                unwrapped = translated;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw unwrapped;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、SqlSessionInterceptor的getSqlSession方法"><a href="#2、SqlSessionInterceptor的getSqlSession方法" class="headerlink" title="2、SqlSessionInterceptor的getSqlSession方法"></a>2、SqlSessionInterceptor的getSqlSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, </span><br><span class="line">      PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(sessionFactory, &quot;No SqlSessionFactory specified&quot;);</span><br><span class="line">    notNull(executorType, &quot;No ExecutorType specified&quot;);</span><br><span class="line">    //获取本线程的SqlSession容器</span><br><span class="line">    SqlSessionHolder holder = (SqlSessionHolder) getResource(sessionFactory);</span><br><span class="line">    //holder已被事务获取</span><br><span class="line">    if (holder != null &amp;&amp; holder.isSynchronizedWithTransaction()) &#123;</span><br><span class="line">        if (holder.getExecutorType() != executorType) &#123;</span><br><span class="line">            throw new TransientDataAccessResourceException(&quot;Cannot change the ExecutorType when there is an existing transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //正在使用次数加一</span><br><span class="line">        holder.requested();</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Fetched SqlSession [&quot; + holder.getSqlSession() + &quot;] from current transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return holder.getSqlSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating a new SqlSession&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建SqlSession</span><br><span class="line">    SqlSession session = sessionFactory.openSession(executorType);</span><br><span class="line"></span><br><span class="line">    // Register session holder if synchronization is active (i.e. a Spring TX is active)</span><br><span class="line">    //</span><br><span class="line">    // Note: The DataSource used by the Environment should be synchronized with the</span><br><span class="line">    // transaction either through DataSourceTxMgr or another tx synchronization.</span><br><span class="line">    // Further assume that if an exception is thrown, whatever started the transaction will</span><br><span class="line">    // handle closing / rolling back the Connection associated with the SqlSession.</span><br><span class="line">    //当前线程是否激活事务</span><br><span class="line">    if (isSynchronizationActive()) &#123;</span><br><span class="line">        //获取环境</span><br><span class="line">        Environment environment = sessionFactory.getConfiguration().getEnvironment();</span><br><span class="line">        //事务管理器为是spring事务管理器</span><br><span class="line">        if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">              logger.debug(&quot;Registering transaction synchronization for SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //创建本线程SqlSession容器</span><br><span class="line">            holder = new SqlSessionHolder(session, executorType, exceptionTranslator);</span><br><span class="line">            //holder注册到本线程</span><br><span class="line">            bindResource(sessionFactory, holder);</span><br><span class="line">            //设置回调函数释放资源</span><br><span class="line">            registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));</span><br><span class="line">            //设置holder已被事务获取</span><br><span class="line">            holder.setSynchronizedWithTransaction(true);</span><br><span class="line">            //SqlSession正在使用加一</span><br><span class="line">            holder.requested();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (getResource(environment.getDataSource()) == null) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because DataSource is not transactional&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new TransientDataAccessResourceException(</span><br><span class="line">                  &quot;SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because synchronization is not active&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（三、1）SqlSessionInterceptor的closeSqlSession方法"><a href="#3、接（三、1）SqlSessionInterceptor的closeSqlSession方法" class="headerlink" title="3、接（三、1）SqlSessionInterceptor的closeSqlSession方法"></a>3、接（三、1）SqlSessionInterceptor的closeSqlSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void closeSqlSession(SqlSession session, SqlSessionFactory sessionFactory) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(session, &quot;No SqlSession specified&quot;);</span><br><span class="line">    notNull(sessionFactory, &quot;No SqlSessionFactory specified&quot;);</span><br><span class="line">    //获取本线程SqlSession容器</span><br><span class="line">    SqlSessionHolder holder = (SqlSessionHolder) getResource(sessionFactory);</span><br><span class="line">    if ((holder != null) &amp;&amp; (holder.getSqlSession() == session)) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Releasing transactional SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //正在使用减一</span><br><span class="line">        holder.released();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Closing non transactional SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //没有事务，关闭SqlSession</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码XmlBeanFactory(2)</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81XmlBeanFactory(2)/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/spring源码XmlBeanFactory(2)/</id>
    <published>2020-01-16T13:43:36.422Z</published>
    <updated>2018-07-07T15:10:12.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、bean加载"><a href="#一、bean加载" class="headerlink" title="一、bean加载"></a>一、bean加载</h3><h4 id="1、AbstractBeanFactory的getBean方法"><a href="#1、AbstractBeanFactory的getBean方法" class="headerlink" title="1、AbstractBeanFactory的getBean方法"></a>1、AbstractBeanFactory的getBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">    return doGetBean(name, null, null, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractBeanFactory的doGetBean方法"><a href="#2、AbstractBeanFactory的doGetBean方法" class="headerlink" title="2、AbstractBeanFactory的doGetBean方法"></a>2、AbstractBeanFactory的doGetBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected &lt;T&gt; T doGetBean(</span><br><span class="line">        final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    //FactoryBean以&quot;&amp;&quot;开头，去除该符号，别名转换为beanName</span><br><span class="line">    final String beanName = transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    // Eagerly check singleton cache for manually registered singletons.</span><br><span class="line">    //从缓存中获取</span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    if (sharedInstance != null &amp;&amp; args == null) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            if (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(&quot;Returning eagerly cached instance of singleton bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; that is not fully initialized yet - a consequence of a circular reference&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                logger.debug(&quot;Returning cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果是FactoryBean，则从FactoryBean中获取对象</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">        // Fail if we&apos;re already creating this bean instance:</span><br><span class="line">        // We&apos;re assumably within a circular reference.</span><br><span class="line">        //该bean正在创建，发生循环依赖</span><br><span class="line">        if (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            throw new BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Check if bean definition exists in this factory.</span><br><span class="line">        //获取父容器，</span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        //当前容器不存在该bean，则从父容器中获取该bean</span><br><span class="line">        if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            // Not found -&gt; check parent.</span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            if (args != null) &#123;</span><br><span class="line">                // Delegation to parent with explicit args.</span><br><span class="line">                return (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // No args -&gt; delegate to standard getBean method.</span><br><span class="line">                return parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //标记bean正在创建</span><br><span class="line">        if (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //将储存xml配置的GernericBeanDefinition转换为RootBeanDefinition</span><br><span class="line">            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            // Guarantee initialization of beans that the current bean depends on.</span><br><span class="line">            //指定依赖</span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            if (dependsOn != null) &#123;</span><br><span class="line">                for (String dependsOnBean : dependsOn) &#123;</span><br><span class="line">                    //dependOn依赖关系已注册，出现循环依赖</span><br><span class="line">                    if (isDependent(beanName, dependsOnBean)) &#123;</span><br><span class="line">                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                &quot;Circular depends-on relationship between &apos;&quot; + beanName + &quot;&apos; and &apos;&quot; + dependsOnBean + &quot;&apos;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //注册dependOn依赖关系</span><br><span class="line">                    registerDependentBean(dependsOnBean, beanName);</span><br><span class="line">                    //先加载依赖bean</span><br><span class="line">                    getBean(dependsOnBean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Create bean instance.</span><br><span class="line">            //bean为单例模式</span><br><span class="line">            if (mbd.isSingleton()) &#123;</span><br><span class="line">                //获取该单例bean</span><br><span class="line">                sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object getObject() throws BeansException &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //创建该bean</span><br><span class="line">                            return createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (BeansException ex) &#123;</span><br><span class="line">                            // Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="line">                            // eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="line">                            // Also remove any beans that received a temporary reference to the bean.</span><br><span class="line">                            destroySingleton(beanName);</span><br><span class="line">                            throw ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                //如果是FactoryBean，则从FactoryBean中获取对象</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            //bean为prototype模式</span><br><span class="line">            else if (mbd.isPrototype()) &#123;</span><br><span class="line">                // It&apos;s a prototype -&gt; create a new instance.</span><br><span class="line">                Object prototypeInstance = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //标记该bean正在创建</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    //创建该prototype模式的bean</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    //删除正在创建标记</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            //bean为另外的scope</span><br><span class="line">            else &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                final Scope scope = this.scopes.get(scopeName);</span><br><span class="line">                if (scope == null) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;No Scope registered for scope &apos;&quot; + scopeName + &quot;&apos;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public Object getObject() throws BeansException &#123;</span><br><span class="line">                            beforePrototypeCreation(beanName);</span><br><span class="line">                            try &#123;</span><br><span class="line">                                return createBean(beanName, mbd, args);</span><br><span class="line">                            &#125;</span><br><span class="line">                            finally &#123;</span><br><span class="line">                                afterPrototypeCreation(beanName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (IllegalStateException ex) &#123;</span><br><span class="line">                    throw new BeanCreationException(beanName,</span><br><span class="line">                            &quot;Scope &apos;&quot; + scopeName + &quot;&apos; is not active for the current thread; &quot; +</span><br><span class="line">                            &quot;consider defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;,</span><br><span class="line">                            ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check if required type matches the type of the actual bean instance.</span><br><span class="line">    if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TypeMismatchException ex) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Failed to convert bean &apos;&quot; + name + &quot;&apos; to required type [&quot; +</span><br><span class="line">                        ClassUtils.getQualifiedName(requiredType) + &quot;]&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractBeanFactory的getSingleton方法"><a href="#3、AbstractBeanFactory的getSingleton方法" class="headerlink" title="3、AbstractBeanFactory的getSingleton方法"></a>3、AbstractBeanFactory的getSingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getSingleton(String beanName) &#123;</span><br><span class="line">    return getSingleton(beanName, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">    //从缓存中获取</span><br><span class="line">    Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">    if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        synchronized (this.singletonObjects) &#123;</span><br><span class="line">            //从早期bean缓存中获取暴露的早期bean，解决循环依赖</span><br><span class="line">            singletonObject = this.earlySingletonObjects.get(beanName);</span><br><span class="line">            //允许获取早期bean</span><br><span class="line">            if (singletonObject == null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                //获取singletonFactory</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);</span><br><span class="line">                if (singletonFactory != null) &#123;</span><br><span class="line">                    //从singletonFactoy中，获取早期bean</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    //放入早期bean缓存</span><br><span class="line">                    this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    this.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (singletonObject != NULL_OBJECT ? singletonObject : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法"><a href="#4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法" class="headerlink" title="4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法"></a>4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">protected Object getObjectForBeanInstance(</span><br><span class="line">        Object beanInstance, String name, String beanName, RootBeanDefinition mbd) &#123;</span><br><span class="line"></span><br><span class="line">    // Don&apos;t let calling code try to dereference the factory if the bean isn&apos;t a factory.</span><br><span class="line">    //name是工厂类型即“&amp;”开头，但实例并非FactoryBean</span><br><span class="line">    if (BeanFactoryUtils.isFactoryDereference(name) &amp;&amp; !(beanInstance instanceof FactoryBean)) &#123;</span><br><span class="line">        throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Now we have the bean instance, which may be a normal bean or a FactoryBean.</span><br><span class="line">    // If it&apos;s a FactoryBean, we use it to create a bean instance, unless the</span><br><span class="line">    // caller actually wants a reference to the factory.</span><br><span class="line">    //name是工厂或实例并非FactoryBean，直接返回</span><br><span class="line">    if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">        return beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object object = null;</span><br><span class="line">    if (mbd == null) &#123;</span><br><span class="line">        //从缓存中获取FactoryBean</span><br><span class="line">        object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    if (object == null) &#123;</span><br><span class="line">        // Return bean instance from factory.</span><br><span class="line">        FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">        // Caches object obtained from FactoryBean if it is a singleton.</span><br><span class="line">        if (mbd == null &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            //将储存xml配置的GernericBeanDefinition转换为RootBeanDefinition</span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean synthetic = (mbd != null &amp;&amp; mbd.isSynthetic());</span><br><span class="line">        //从FactoryBean中获取bean</span><br><span class="line">        object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">    &#125;</span><br><span class="line">    return object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AbstractBeanFactory的getObjectFromFactoryBean方法"><a href="#5、AbstractBeanFactory的getObjectFromFactoryBean方法" class="headerlink" title="5、AbstractBeanFactory的getObjectFromFactoryBean方法"></a>5、AbstractBeanFactory的getObjectFromFactoryBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">protected Object getObjectFromFactoryBean(FactoryBean&lt;?&gt; factory, String beanName, boolean shouldPostProcess) &#123;</span><br><span class="line">    //单例模式</span><br><span class="line">    if (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">        synchronized (getSingletonMutex()) &#123;</span><br><span class="line">            Object object = this.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            if (object == null) &#123;</span><br><span class="line">                //获取bean，执行factory的getObject方法</span><br><span class="line">                object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                // Only post-process and store if not put there already during getObject() call above</span><br><span class="line">                // (e.g. because of circular reference processing triggered by custom getBean calls)</span><br><span class="line">                //从缓存中获取</span><br><span class="line">                Object alreadyThere = this.factoryBeanObjectCache.get(beanName);</span><br><span class="line">                if (alreadyThere != null) &#123;</span><br><span class="line">                    object = alreadyThere;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    if (object != null &amp;&amp; shouldPostProcess) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //从FactoryBean中获取对象的后处理器</span><br><span class="line">                            object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (Throwable ex) &#123;</span><br><span class="line">                            throw new BeanCreationException(beanName,</span><br><span class="line">                                    &quot;Post-processing of FactoryBean&apos;s singleton object failed&quot;, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //添加缓存</span><br><span class="line">                    this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return (object != NULL_OBJECT ? object : null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        if (object != null &amp;&amp; shouldPostProcess) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Throwable ex) &#123;</span><br><span class="line">                throw new BeanCreationException(beanName, &quot;Post-processing of FactoryBean&apos;s object failed&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法"><a href="#6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法" class="headerlink" title="6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法"></a>6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object postProcessObjectFromFactoryBean(Object object, String beanName) &#123;</span><br><span class="line">    return applyBeanPostProcessorsAfterInitialization(object, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法"><a href="#7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法" class="headerlink" title="7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法"></a>7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    Object result = existingBean;</span><br><span class="line">    //执行bean初始化后处理器</span><br><span class="line">    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">        result = beanProcessor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、2）AbstractBeanFactory的getSingleton方法"><a href="#8、接（一、2）AbstractBeanFactory的getSingleton方法" class="headerlink" title="8、接（一、2）AbstractBeanFactory的getSingleton方法"></a>8、接（一、2）AbstractBeanFactory的getSingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">    Assert.notNull(beanName, &quot;&apos;beanName&apos; must not be null&quot;);</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        //从缓存里获取</span><br><span class="line">        Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">        if (singletonObject == null) &#123;</span><br><span class="line">            if (this.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line">                throw new BeanCreationNotAllowedException(beanName,</span><br><span class="line">                        &quot;Singleton bean creation not allowed while the singletons of this factory are in destruction &quot; +</span><br><span class="line">                        &quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Creating shared instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //检查该bean是否正在创建</span><br><span class="line">            beforeSingletonCreation(beanName);</span><br><span class="line">            boolean newSingleton = false;</span><br><span class="line">            boolean recordSuppressedExceptions = (this.suppressedExceptions == null);</span><br><span class="line">            if (recordSuppressedExceptions) &#123;</span><br><span class="line">                this.suppressedExceptions = new LinkedHashSet&lt;Exception&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                //创建bean</span><br><span class="line">                singletonObject = singletonFactory.getObject();</span><br><span class="line">                newSingleton = true;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IllegalStateException ex) &#123;</span><br><span class="line">                // Has the singleton object implicitly appeared in the meantime -&gt;</span><br><span class="line">                // if yes, proceed with it since the exception indicates that state.</span><br><span class="line">                singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">                if (singletonObject == null) &#123;</span><br><span class="line">                    throw ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (BeanCreationException ex) &#123;</span><br><span class="line">                if (recordSuppressedExceptions) &#123;</span><br><span class="line">                    for (Exception suppressedException : this.suppressedExceptions) &#123;</span><br><span class="line">                        ex.addRelatedCause(suppressedException);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if (recordSuppressedExceptions) &#123;</span><br><span class="line">                    this.suppressedExceptions = null;</span><br><span class="line">                &#125;</span><br><span class="line">                //删除正在创建标记</span><br><span class="line">                afterSingletonCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            if (newSingleton) &#123;</span><br><span class="line">                //添加缓存，删除为解决循环依赖而提早暴露的bean</span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (singletonObject != NULL_OBJECT ? singletonObject : null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractAutowireCapableBeanFactory的createBean方法"><a href="#9、AbstractAutowireCapableBeanFactory的createBean方法" class="headerlink" title="9、AbstractAutowireCapableBeanFactory的createBean方法"></a>9、AbstractAutowireCapableBeanFactory的createBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object createBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)</span><br><span class="line">        throws BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // Make sure bean class is actually resolved at this point.</span><br><span class="line">    //获取bean的class</span><br><span class="line">    resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    // Prepare method overrides.</span><br><span class="line">    try &#123;</span><br><span class="line">        //预处理准备覆盖的方法</span><br><span class="line">        mbd.prepareMethodOverrides();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(mbd.getResourceDescription(),</span><br><span class="line">                beanName, &quot;Validation of method overrides failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span><br><span class="line">        // 给BeanPostProcessors一个机会返回代理，来替代真正的实例</span><br><span class="line">        Object bean = resolveBeforeInstantiation(beanName, mbd);</span><br><span class="line">        if (bean != null) &#123;</span><br><span class="line">            return bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                &quot;BeanPostProcessor before instantiation of bean failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建bean</span><br><span class="line">    Object beanInstance = doCreateBean(beanName, mbd, args);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Finished creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法"><a href="#10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法" class="headerlink" title="10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法"></a>10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) &#123;</span><br><span class="line">    Object bean = null;</span><br><span class="line">    //尚未被解析</span><br><span class="line">    if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">        // Make sure bean class is actually resolved at this point.</span><br><span class="line">        if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">            Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">            if (targetType != null) &#123;</span><br><span class="line">                //实例化bean前处理器，这里可以在创建BeanWrapper之前更改BeanDefinition，并可能会创建一个代理bean返回</span><br><span class="line">                bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                if (bean != null) &#123;</span><br><span class="line">                    //如果bean已经创建，调用实例化bean后处理器</span><br><span class="line">                    bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mbd.beforeInstantiationResolved = (bean != null);</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法"><a href="#11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法" class="headerlink" title="11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法"></a>11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123;</span><br><span class="line">    // Instantiate the bean.</span><br><span class="line">    BeanWrapper instanceWrapper = null;</span><br><span class="line">    if (mbd.isSingleton()) &#123;</span><br><span class="line">        //单例模式，删除原有的beanWrapper</span><br><span class="line">        instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    if (instanceWrapper == null) &#123;</span><br><span class="line">        //创建beanWrapper，里面存放了bean对象</span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);</span><br><span class="line">    Class&lt;?&gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);</span><br><span class="line"></span><br><span class="line">    // Allow post-processors to modify the merged bean definition.</span><br><span class="line">    synchronized (mbd.postProcessingLock) &#123;</span><br><span class="line">        if (!mbd.postProcessed) &#123;</span><br><span class="line">            //应用MergedBeanDefinitionPostProcessor</span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            mbd.postProcessed = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Eagerly cache singletons to be able to resolve circular references</span><br><span class="line">    // even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br><span class="line">    //单例&amp;允许循环依赖&amp;该bean正在创建，则提早曝光</span><br><span class="line">    boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class="line">            isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    if (earlySingletonExposure) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Eagerly caching bean &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos; to allow for resolving potential circular references&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //singletonFactories中添加ObjectFactory</span><br><span class="line">        addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object getObject() throws BeansException &#123;</span><br><span class="line">                //应用SmartInstantiationAwareBeanPostProcessor，没有直接返回</span><br><span class="line">                //AOP在此处将advice动态织入bean中</span><br><span class="line">                return getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize the bean instance.</span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    try &#123;</span><br><span class="line">        //将各个属性值注入bean中，依赖其他bean，则递归初始化bean</span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        if (exposedObject != null) &#123;</span><br><span class="line">            //调用初始化方法，比如init-method</span><br><span class="line">            exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            throw (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (earlySingletonExposure) &#123;</span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, false);</span><br><span class="line">        //出现循环依赖的情况下，该值不为空</span><br><span class="line">        if (earlySingletonReference != null) &#123;</span><br><span class="line">            if (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;String&gt;(dependentBeans.length);</span><br><span class="line">                for (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //检查依赖的bean是否都已经创建</span><br><span class="line">                if (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    throw new BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                            &quot;Bean with name &apos;&quot; + beanName + &quot;&apos; has been injected into other beans [&quot; +</span><br><span class="line">                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                            &quot;] in its raw version as part of a circular reference, but has eventually been &quot; +</span><br><span class="line">                            &quot;wrapped. This means that said other beans do not use the final version of the &quot; +</span><br><span class="line">                            &quot;bean. This is often the result of over-eager type matching - consider using &quot; +</span><br><span class="line">                            &quot;&apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Register bean as disposable.</span><br><span class="line">    try &#123;</span><br><span class="line">        //根据scope注册bean</span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractAutowireCapableBeanFactory的createBeanInstance方法"><a href="#12、AbstractAutowireCapableBeanFactory的createBeanInstance方法" class="headerlink" title="12、AbstractAutowireCapableBeanFactory的createBeanInstance方法"></a>12、AbstractAutowireCapableBeanFactory的createBeanInstance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) &#123;</span><br><span class="line">    // Make sure bean class is actually resolved at this point.</span><br><span class="line">    //获取class</span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    if (beanClass != null &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                &quot;Bean class isn&apos;t public, and non-public access not allowed: &quot; + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    //存在工厂方法，用工厂方法创建bean</span><br><span class="line">    if (mbd.getFactoryMethodName() != null)  &#123;</span><br><span class="line">        return instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Shortcut when re-creating the same bean...</span><br><span class="line">    boolean resolved = false;</span><br><span class="line">    boolean autowireNecessary = false;</span><br><span class="line">    //没有参数，不需解析</span><br><span class="line">    if (args == null) &#123;</span><br><span class="line">        synchronized (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            if (mbd.resolvedConstructorOrFactoryMethod != null) &#123;</span><br><span class="line">                resolved = true;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //已经解析</span><br><span class="line">    if (resolved) &#123;</span><br><span class="line">        if (autowireNecessary) &#123;</span><br><span class="line">            //构造函数或工厂方法创建对象</span><br><span class="line">            return autowireConstructor(beanName, mbd, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //默认构造函数创建</span><br><span class="line">            return instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Need to determine the constructor...</span><br><span class="line">    //由参数解析构造函数或工厂方法</span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    if (ctors != null ||</span><br><span class="line">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">        return autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">    &#125;</span><br><span class="line">    //默认构造函数创建</span><br><span class="line">    // No special handling: simply use no-arg constructor.</span><br><span class="line">    return instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、AbstractAutowireCapableBeanFactory的instantiateBean方法"><a href="#13、AbstractAutowireCapableBeanFactory的instantiateBean方法" class="headerlink" title="13、AbstractAutowireCapableBeanFactory的instantiateBean方法"></a>13、AbstractAutowireCapableBeanFactory的instantiateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Object beanInstance;</span><br><span class="line">        final BeanFactory parent = this;</span><br><span class="line">        if (System.getSecurityManager() != null) &#123;</span><br><span class="line">            beanInstance = AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public Object run() &#123;</span><br><span class="line">                    return getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //创建bean</span><br><span class="line">            beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">        &#125;</span><br><span class="line">        BeanWrapper bw = new BeanWrapperImpl(beanInstance);</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line">        return bw;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Instantiation of bean failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、SimpleInstantiationStrategy的instantiate方法"><a href="#14、SimpleInstantiationStrategy的instantiate方法" class="headerlink" title="14、SimpleInstantiationStrategy的instantiate方法"></a>14、SimpleInstantiationStrategy的instantiate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) &#123;</span><br><span class="line">    // Don&apos;t override the class with CGLIB if no overrides.</span><br><span class="line">    //</span><br><span class="line">    if (bd.getMethodOverrides().isEmpty()) &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">        synchronized (bd.constructorArgumentLock) &#123;</span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            if (constructorToUse == null) &#123;</span><br><span class="line">                final Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">                if (clazz.isInterface()) &#123;</span><br><span class="line">                    throw new BeanInstantiationException(clazz, &quot;Specified class is an interface&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">                        constructorToUse = AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public Constructor&lt;?&gt; run() throws Exception &#123;</span><br><span class="line">                                return clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        constructorToUse =  clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception ex) &#123;</span><br><span class="line">                    throw new BeanInstantiationException(clazz, &quot;No default constructor found&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //直接通过反射创建</span><br><span class="line">        return BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Must generate CGLIB subclass.</span><br><span class="line">        //有需要覆盖或动态替换的方法，则使用CGLIB创建代理对象并将方法织入</span><br><span class="line">        return instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法"><a href="#15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法" class="headerlink" title="15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法"></a>15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner) &#123;</span><br><span class="line">    return instantiateWithMethodInjection(bd, beanName, owner, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner,</span><br><span class="line">        Constructor&lt;?&gt; ctor, Object... args) &#123;</span><br><span class="line"></span><br><span class="line">    // Must generate CGLIB subclass...</span><br><span class="line">    return new CglibSubclassCreator(bd, owner).instantiate(ctor, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、CglibSubclassingInstantiationStrategy的instantiate方法"><a href="#16、CglibSubclassingInstantiationStrategy的instantiate方法" class="headerlink" title="16、CglibSubclassingInstantiationStrategy的instantiate方法"></a>16、CglibSubclassingInstantiationStrategy的instantiate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public Object instantiate(Constructor&lt;?&gt; ctor, Object... args) &#123;</span><br><span class="line">    Class&lt;?&gt; subclass = createEnhancedSubclass(this.beanDefinition);</span><br><span class="line">    Object instance;</span><br><span class="line">    if (ctor == null) &#123;</span><br><span class="line">        instance = BeanUtils.instantiate(subclass);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Constructor&lt;?&gt; enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes());</span><br><span class="line">            instance = enhancedSubclassConstructor.newInstance(args);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),</span><br><span class="line">                    &quot;Failed to invoke constructor for CGLIB enhanced subclass [&quot; + subclass.getName() + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // SPR-10785: set callbacks directly on the instance instead of in the</span><br><span class="line">    // enhanced class (via the Enhancer) in order to avoid memory leaks.</span><br><span class="line">    Factory factory = (Factory) instance;</span><br><span class="line">    //拦截器，拦截对应的方法</span><br><span class="line">    factory.setCallbacks(new Callback[] &#123;NoOp.INSTANCE,</span><br><span class="line">            new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),</span><br><span class="line">            new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)&#125;);</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法"><a href="#17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法" class="headerlink" title="17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法"></a>17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private Class&lt;?&gt; createEnhancedSubclass(RootBeanDefinition beanDefinition) &#123;</span><br><span class="line">    Enhancer enhancer = new Enhancer();</span><br><span class="line">    enhancer.setSuperclass(beanDefinition.getBeanClass());</span><br><span class="line">    enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">    /过滤器，accept方法返回的数字，代表了Callback数组中的索引位置</span><br><span class="line">    enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition));</span><br><span class="line">    enhancer.setCallbackTypes(CALLBACK_TYPES);</span><br><span class="line">    return enhancer.createClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法"><a href="#18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法" class="headerlink" title="18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法"></a>18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123;</span><br><span class="line">    //获取属性</span><br><span class="line">    PropertyValues pvs = mbd.getPropertyValues();</span><br><span class="line"></span><br><span class="line">    if (bw == null) &#123;</span><br><span class="line">        if (!pvs.isEmpty()) &#123;</span><br><span class="line">            throw new BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, &quot;Cannot apply property values to null instance&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Skip property population phase for null instance.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span><br><span class="line">    // state of the bean before properties are set. This can be used, for example,</span><br><span class="line">    // to support styles of field injection.</span><br><span class="line">    boolean continueWithPropertyPopulation = true;</span><br><span class="line">    //应用InstantiationAwareBeanPostProcessor</span><br><span class="line">    if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        MutablePropertyValues newPvs = new MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">        // Add property values based on autowire by name if applicable.</span><br><span class="line">        //根据名称自动注入</span><br><span class="line">        if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Add property values based on autowire by type if applicable.</span><br><span class="line">        //根据类型自动注入</span><br><span class="line">        if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line">    //后处理器已经初始化</span><br><span class="line">    boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    //需要检查依赖</span><br><span class="line">    boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    if (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">        PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        if (hasInstAwareBpps) &#123;</span><br><span class="line">            for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">                if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                    InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                    //对需要检查依赖的属性,进行后处理</span><br><span class="line">                    pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    if (pvs == null) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (needsDepCheck) &#123;</span><br><span class="line">            //检查依赖</span><br><span class="line">            checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将属性应用到bean中</span><br><span class="line">    applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、AbstractAutowireCapableBeanFactory的autowireByName方法"><a href="#19、AbstractAutowireCapableBeanFactory的autowireByName方法" class="headerlink" title="19、AbstractAutowireCapableBeanFactory的autowireByName方法"></a>19、AbstractAutowireCapableBeanFactory的autowireByName方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected void autowireByName(</span><br><span class="line">        String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</span><br><span class="line">    //寻找依赖注入的属性</span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    for (String propertyName : propertyNames) &#123;</span><br><span class="line">        if (containsBean(propertyName)) &#123;</span><br><span class="line">            //递归初始化相关的bean</span><br><span class="line">            Object bean = getBean(propertyName);</span><br><span class="line">            pvs.add(propertyName, bean);</span><br><span class="line">            //注册依赖</span><br><span class="line">            registerDependentBean(propertyName, beanName);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Added autowiring by name from bean name &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; via property &apos;&quot; + propertyName + &quot;&apos; to bean named &apos;&quot; + propertyName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Not autowiring property &apos;&quot; + propertyName + &quot;&apos; of bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; by name: no matching bean found&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法"><a href="#20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法" class="headerlink" title="20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法"></a>20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">protected void autowireByType(</span><br><span class="line">        String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</span><br><span class="line"></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    if (converter == null) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; autowiredBeanNames = new LinkedHashSet&lt;String&gt;(4);</span><br><span class="line">    //获取需要依赖注入的属性</span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    for (String propertyName : propertyNames) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</span><br><span class="line">            // Don&apos;t try autowiring by type for type Object: never makes sense,</span><br><span class="line">            // even if it technically is a unsatisfied, non-simple property.</span><br><span class="line">            if (!Object.class.equals(pd.getPropertyType())) &#123;</span><br><span class="line">                MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</span><br><span class="line">                // Do not allow eager init for type matching in case of a prioritized post-processor.</span><br><span class="line">                boolean eager = !PriorityOrdered.class.isAssignableFrom(bw.getWrappedClass());</span><br><span class="line">                DependencyDescriptor desc = new AutowireByTypeDependencyDescriptor(methodParam, eager);</span><br><span class="line">                //解析该propertyName所对应的属性值</span><br><span class="line">                Object autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</span><br><span class="line">                if (autowiredArgument != null) &#123;</span><br><span class="line">                    pvs.add(propertyName, autowiredArgument);</span><br><span class="line">                &#125;</span><br><span class="line">                for (String autowiredBeanName : autowiredBeanNames) &#123;</span><br><span class="line">                    registerDependentBean(autowiredBeanName, beanName);</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(&quot;Autowiring by type from bean name &apos;&quot; + beanName + &quot;&apos; via property &apos;&quot; +</span><br><span class="line">                                propertyName + &quot;&apos; to bean named &apos;&quot; + autowiredBeanName + &quot;&apos;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                autowiredBeanNames.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            throw new UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、DefaultListableBeanFactory的resolveDependency方法"><a href="#21、DefaultListableBeanFactory的resolveDependency方法" class="headerlink" title="21、DefaultListableBeanFactory的resolveDependency方法"></a>21、DefaultListableBeanFactory的resolveDependency方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object resolveDependency(DependencyDescriptor descriptor, String beanName,</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter) throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    descriptor.initParameterNameDiscovery(getParameterNameDiscoverer());</span><br><span class="line">    //javaUtilOptionalClass类注入特殊处理</span><br><span class="line">    if (descriptor.getDependencyType().equals(javaUtilOptionalClass)) &#123;</span><br><span class="line">        return new OptionalDependencyFactory().createOptionalDependency(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //ObjectFactory类注入特殊处理</span><br><span class="line">    else if (descriptor.getDependencyType().equals(ObjectFactory.class)) &#123;</span><br><span class="line">        return new DependencyObjectFactory(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //javaxInjectProviderClass类注入特殊处理</span><br><span class="line">    else if (descriptor.getDependencyType().equals(javaxInjectProviderClass)) &#123;</span><br><span class="line">        return new DependencyProviderFactory().createDependencyProvider(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //懒加载，获取代理对象</span><br><span class="line">        Object result = getAutowireCandidateResolver().getLazyResolutionProxyIfNecessary(descriptor, beanName);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            //通用处理逻辑</span><br><span class="line">            result = doResolveDependency(descriptor, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、DefaultListableBeanFactory的doResolveDependency方法"><a href="#22、DefaultListableBeanFactory的doResolveDependency方法" class="headerlink" title="22、DefaultListableBeanFactory的doResolveDependency方法"></a>22、DefaultListableBeanFactory的doResolveDependency方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">public Object doResolveDependency(DependencyDescriptor descriptor, String beanName,</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter) throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; type = descriptor.getDependencyType();</span><br><span class="line">    //解析注解@value</span><br><span class="line">    Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor);</span><br><span class="line">    if (value != null) &#123;</span><br><span class="line">        if (value instanceof String) &#123;</span><br><span class="line">            //处理placeholder类型的value</span><br><span class="line">            String strVal = resolveEmbeddedValue((String) value);</span><br><span class="line">            BeanDefinition bd = (beanName != null &amp;&amp; containsBean(beanName) ? getMergedBeanDefinition(beanName) : null);</span><br><span class="line">            // 处理EL表达式  </span><br><span class="line">            value = evaluateBeanDefinitionString(strVal, bd);</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        //类型转换</span><br><span class="line">        return (descriptor.getField() != null ?</span><br><span class="line">                converter.convertIfNecessary(value, type, descriptor.getField()) :</span><br><span class="line">                converter.convertIfNecessary(value, type, descriptor.getMethodParameter()));</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为数组类型</span><br><span class="line">    if (type.isArray()) &#123;</span><br><span class="line">        Class&lt;?&gt; componentType = type.getComponentType();</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        //获取所有符合要求的类型的bean和类对象</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(componentType, &quot;array of &quot; + componentType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        Object result = converter.convertIfNecessary(matchingBeans.values(), type);</span><br><span class="line">        //将所有符合类型的类对象和bean，放入数组</span><br><span class="line">        if (getDependencyComparator() != null &amp;&amp; result instanceof Object[]) &#123;</span><br><span class="line">            Arrays.sort((Object[]) result, adaptDependencyComparator(matchingBeans));</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为Collection类型</span><br><span class="line">    else if (Collection.class.isAssignableFrom(type) &amp;&amp; type.isInterface()) &#123;</span><br><span class="line">        Class&lt;?&gt; elementType = descriptor.getCollectionType();</span><br><span class="line">        if (elementType == null) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;No element type declared for collection [&quot; + type.getName() + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, elementType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(elementType, &quot;collection of &quot; + elementType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        Object result = converter.convertIfNecessary(matchingBeans.values(), type);</span><br><span class="line">        //将所有符合类型的类对象和bean，放入List</span><br><span class="line">        if (getDependencyComparator() != null &amp;&amp; result instanceof List) &#123;</span><br><span class="line">            Collections.sort((List&lt;?&gt;) result, adaptDependencyComparator(matchingBeans));</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为Map类型</span><br><span class="line">    else if (Map.class.isAssignableFrom(type) &amp;&amp; type.isInterface()) &#123;</span><br><span class="line">        Class&lt;?&gt; keyType = descriptor.getMapKeyType();</span><br><span class="line">        if (keyType == null || !String.class.isAssignableFrom(keyType)) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;Key type [&quot; + keyType + &quot;] of map [&quot; + type.getName() +</span><br><span class="line">                        &quot;] must be assignable to [java.lang.String]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; valueType = descriptor.getMapValueType();</span><br><span class="line">        if (valueType == null) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;No value type declared for map [&quot; + type.getName() + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, valueType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(valueType, &quot;map with value type &quot; + valueType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        //返回符合条件的bean和类对象</span><br><span class="line">        return matchingBeans;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(type, &quot;&quot;, descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //多个bean符合类型要求</span><br><span class="line">        if (matchingBeans.size() &gt; 1) &#123;</span><br><span class="line">            //依次根据Primary属性、priority属性、bean的名字去确定唯一的bean</span><br><span class="line">            String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor);</span><br><span class="line">            if (primaryBeanName == null) &#123;</span><br><span class="line">                throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet());</span><br><span class="line">            &#125;</span><br><span class="line">            if (autowiredBeanNames != null) &#123;</span><br><span class="line">                autowiredBeanNames.add(primaryBeanName);</span><br><span class="line">            &#125;</span><br><span class="line">            //返回匹配的bean</span><br><span class="line">            return matchingBeans.get(primaryBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        // We have exactly one match.</span><br><span class="line">        Map.Entry&lt;String, Object&gt; entry = matchingBeans.entrySet().iterator().next();</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        //返回唯一的bean</span><br><span class="line">        return entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法"><a href="#23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法" class="headerlink" title="23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法"></a>23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) &#123;</span><br><span class="line">    if (pvs == null || pvs.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MutablePropertyValues mpvs = null;</span><br><span class="line">    List&lt;PropertyValue&gt; original;</span><br><span class="line"></span><br><span class="line">    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">        if (bw instanceof BeanWrapperImpl) &#123;</span><br><span class="line">            ((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (pvs instanceof MutablePropertyValues) &#123;</span><br><span class="line">        mpvs = (MutablePropertyValues) pvs;</span><br><span class="line">        //mpvs中的值已被转换为对应的类型</span><br><span class="line">        if (mpvs.isConverted()) &#123;</span><br><span class="line">            // Shortcut: use the pre-converted values as-is.</span><br><span class="line">            try &#123;</span><br><span class="line">                //属性值设置到bean中</span><br><span class="line">                bw.setPropertyValues(mpvs);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (BeansException ex) &#123;</span><br><span class="line">                throw new BeanCreationException(</span><br><span class="line">                        mbd.getResourceDescription(), beanName, &quot;Error setting property values&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //原始属性</span><br><span class="line">        original = mpvs.getPropertyValueList();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //原始属性</span><br><span class="line">        original = Arrays.asList(pvs.getPropertyValues());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    if (converter == null) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取对应的解析器</span><br><span class="line">    BeanDefinitionValueResolver valueResolver = new BeanDefinitionValueResolver(this, beanName, mbd, converter);</span><br><span class="line"></span><br><span class="line">    // Create a deep copy, resolving any references for values.</span><br><span class="line">    List&lt;PropertyValue&gt; deepCopy = new ArrayList&lt;PropertyValue&gt;(original.size());</span><br><span class="line">    boolean resolveNecessary = false;</span><br><span class="line">    //将属性转换为对应的属性类型</span><br><span class="line">    for (PropertyValue pv : original) &#123;</span><br><span class="line">        if (pv.isConverted()) &#123;</span><br><span class="line">            deepCopy.add(pv);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            String propertyName = pv.getName();</span><br><span class="line">            Object originalValue = pv.getValue();</span><br><span class="line">            //解析属性值</span><br><span class="line">            Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class="line">            Object convertedValue = resolvedValue;</span><br><span class="line">            boolean convertible = bw.isWritableProperty(propertyName) &amp;&amp;</span><br><span class="line">                    !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</span><br><span class="line">            if (convertible) &#123;</span><br><span class="line">                convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</span><br><span class="line">            &#125;</span><br><span class="line">            // Possibly store converted value in merged bean definition,</span><br><span class="line">            // in order to avoid re-conversion for every created bean instance.</span><br><span class="line">            if (resolvedValue == originalValue) &#123;</span><br><span class="line">                if (convertible) &#123;</span><br><span class="line">                    pv.setConvertedValue(convertedValue);</span><br><span class="line">                &#125;</span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (convertible &amp;&amp; originalValue instanceof TypedStringValue &amp;&amp;</span><br><span class="line">                    !((TypedStringValue) originalValue).isDynamic() &amp;&amp;</span><br><span class="line">                    !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) &#123;</span><br><span class="line">                pv.setConvertedValue(convertedValue);</span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                resolveNecessary = true;</span><br><span class="line">                deepCopy.add(new PropertyValue(pv, convertedValue));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mpvs != null &amp;&amp; !resolveNecessary) &#123;</span><br><span class="line">        mpvs.setConverted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Set our (possibly massaged) deep copy.</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置属性值</span><br><span class="line">        bw.setPropertyValues(new MutablePropertyValues(deepCopy));</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeansException ex) &#123;</span><br><span class="line">        throw new BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, &quot;Error setting property values&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法"><a href="#24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法" class="headerlink" title="24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法"></a>24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">        AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object run() &#123;</span><br><span class="line">                invokeAwareMethods(beanName, bean);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //处理特殊的bean，BeanNameAware、BeanClassLoaderAware、BeanFactoryAware</span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">        //应用初始化前处理器</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //用户自定义初始化方法，如InitializingBean接口afterPropertiesSet方法、init-method方法</span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(</span><br><span class="line">                (mbd != null ? mbd.getResourceDescription() : null),</span><br><span class="line">                beanName, &quot;Invocation of init method failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">        //应用初始化后处理器</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    return wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法"><a href="#25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法" class="headerlink" title="25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法"></a>25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">    AccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);</span><br><span class="line">    if (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;</span><br><span class="line">        if (mbd.isSingleton()) &#123;</span><br><span class="line">            // Register a DisposableBean implementation that performs all destruction</span><br><span class="line">            // work for the given bean: DestructionAwareBeanPostProcessors,</span><br><span class="line">            // DisposableBean interface, custom destroy method.</span><br><span class="line">            //单例模式，注册bean销毁时的回调</span><br><span class="line">            //销毁时会调用DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</span><br><span class="line">            //DisposableBean的destroy方法、destory-method方法</span><br><span class="line">            registerDisposableBean(beanName,</span><br><span class="line">                    new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // A bean with a custom scope...</span><br><span class="line">            Scope scope = this.scopes.get(mbd.getScope());</span><br><span class="line">            if (scope == null) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;No Scope registered for scope &apos;&quot; + mbd.getScope() + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //在scope中，注册bean销毁时的回调</span><br><span class="line">            //销毁时会调用DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</span><br><span class="line">            //DisposableBean的destroy方法、destory-method方法</span><br><span class="line">            scope.registerDestructionCallback(beanName,</span><br><span class="line">                    new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、bean销毁"><a href="#二、bean销毁" class="headerlink" title="二、bean销毁"></a>二、bean销毁</h3><h4 id="1、DefaultListableBeanFactory的destroySingletons方法"><a href="#1、DefaultListableBeanFactory的destroySingletons方法" class="headerlink" title="1、DefaultListableBeanFactory的destroySingletons方法"></a>1、DefaultListableBeanFactory的destroySingletons方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void destroySingletons() &#123;</span><br><span class="line">    super.destroySingletons();</span><br><span class="line">    //清除注册bean</span><br><span class="line">    this.manualSingletonNames.clear();</span><br><span class="line">    //清除缓存</span><br><span class="line">    clearByTypeCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultSingletonBeanRegistry的destroySingletons方法"><a href="#2、DefaultSingletonBeanRegistry的destroySingletons方法" class="headerlink" title="2、DefaultSingletonBeanRegistry的destroySingletons方法"></a>2、DefaultSingletonBeanRegistry的destroySingletons方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void destroySingletons() &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Destroying singletons in &quot; + this);</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        this.singletonsCurrentlyInDestruction = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] disposableBeanNames;</span><br><span class="line">    synchronized (this.disposableBeans) &#123;</span><br><span class="line">        //待销毁的beanName</span><br><span class="line">        disposableBeanNames = StringUtils.toStringArray(this.disposableBeans.keySet());</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = disposableBeanNames.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        //销毁bean</span><br><span class="line">        destroySingleton(disposableBeanNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    //清除</span><br><span class="line">    this.containedBeanMap.clear();</span><br><span class="line">    this.dependentBeanMap.clear();</span><br><span class="line">    this.dependenciesForBeanMap.clear();</span><br><span class="line"></span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        this.singletonObjects.clear();</span><br><span class="line">        this.singletonFactories.clear();</span><br><span class="line">        this.earlySingletonObjects.clear();</span><br><span class="line">        this.registeredSingletons.clear();</span><br><span class="line">        this.singletonsCurrentlyInDestruction = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultSingletonBeanRegistry的destroySingleton方法"><a href="#3、DefaultSingletonBeanRegistry的destroySingleton方法" class="headerlink" title="3、DefaultSingletonBeanRegistry的destroySingleton方法"></a>3、DefaultSingletonBeanRegistry的destroySingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void destroySingleton(String beanName) &#123;</span><br><span class="line">    // Remove a registered singleton of the given name, if any.</span><br><span class="line">    //删除该bean</span><br><span class="line">    removeSingleton(beanName);</span><br><span class="line"></span><br><span class="line">    // Destroy the corresponding DisposableBean instance.</span><br><span class="line">    DisposableBean disposableBean;</span><br><span class="line">    synchronized (this.disposableBeans) &#123;</span><br><span class="line">        //删除该bean的销毁回调函数</span><br><span class="line">        disposableBean = (DisposableBean) this.disposableBeans.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //执行销毁方法</span><br><span class="line">    destroyBean(beanName, disposableBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultSingletonBeanRegistry的destroyBean方法"><a href="#4、DefaultSingletonBeanRegistry的destroyBean方法" class="headerlink" title="4、DefaultSingletonBeanRegistry的destroyBean方法"></a>4、DefaultSingletonBeanRegistry的destroyBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">protected void destroyBean(String beanName, DisposableBean bean) &#123;</span><br><span class="line">    // Trigger destruction of dependent beans first...</span><br><span class="line">    //销毁依赖该bean的bean</span><br><span class="line">    Set&lt;String&gt; dependencies = this.dependentBeanMap.remove(beanName);</span><br><span class="line">    if (dependencies != null) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Retrieved dependent beans for bean &apos;&quot; + beanName + &quot;&apos;: &quot; + dependencies);</span><br><span class="line">        &#125;</span><br><span class="line">        for (String dependentBeanName : dependencies) &#123;</span><br><span class="line">            destroySingleton(dependentBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Actually destroy the bean now...</span><br><span class="line">    if (bean != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //销毁bean</span><br><span class="line">            bean.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            logger.error(&quot;Destroy method on bean with name &apos;&quot; + beanName + &quot;&apos; threw an exception&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Trigger destruction of contained beans...</span><br><span class="line">    //销毁该bean拥有的bean</span><br><span class="line">    Set&lt;String&gt; containedBeans = this.containedBeanMap.remove(beanName);</span><br><span class="line">    if (containedBeans != null) &#123;</span><br><span class="line">        for (String containedBeanName : containedBeans) &#123;</span><br><span class="line">            destroySingleton(containedBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Remove destroyed bean from other beans&apos; dependencies.</span><br><span class="line">    //删除注册的依赖</span><br><span class="line">    synchronized (this.dependentBeanMap) &#123;</span><br><span class="line">        for (Iterator&lt;Map.Entry&lt;String, Set&lt;String&gt;&gt;&gt; it = this.dependentBeanMap.entrySet().iterator(); it.hasNext();) &#123;</span><br><span class="line">            Map.Entry&lt;String, Set&lt;String&gt;&gt; entry = it.next();</span><br><span class="line">            Set&lt;String&gt; dependenciesToClean = entry.getValue();</span><br><span class="line">            dependenciesToClean.remove(beanName);</span><br><span class="line">            if (dependenciesToClean.isEmpty()) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Remove destroyed bean&apos;s prepared dependency information.</span><br><span class="line">    this.dependenciesForBeanMap.remove(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DisposableBeanAdapter的destroy方法"><a href="#5、DisposableBeanAdapter的destroy方法" class="headerlink" title="5、DisposableBeanAdapter的destroy方法"></a>5、DisposableBeanAdapter的destroy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line">    //应用DestructionAwareBeanPostProcessor</span><br><span class="line">    if (this.beanPostProcessors != null &amp;&amp; !this.beanPostProcessors.isEmpty()) &#123;</span><br><span class="line">        for (DestructionAwareBeanPostProcessor processor : this.beanPostProcessors) &#123;</span><br><span class="line">            processor.postProcessBeforeDestruction(this.bean, this.beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.invokeDisposableBean) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Invoking destroy() on bean with name &apos;&quot; + this.beanName + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (System.getSecurityManager() != null) &#123;</span><br><span class="line">                AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Object&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object run() throws Exception &#123;</span><br><span class="line">                        ((DisposableBean) bean).destroy();</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, acc);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                //执行destroy方法</span><br><span class="line">                ((DisposableBean) bean).destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            String msg = &quot;Invocation of destroy method failed on bean with name &apos;&quot; + this.beanName + &quot;&apos;&quot;;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.warn(msg, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                logger.warn(msg + &quot;: &quot; + ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //自定义的destory-method方法</span><br><span class="line">    if (this.destroyMethod != null) &#123;</span><br><span class="line">        invokeCustomDestroyMethod(this.destroyMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (this.destroyMethodName != null) &#123;</span><br><span class="line">        Method methodToCall = determineDestroyMethod();</span><br><span class="line">        if (methodToCall != null) &#123;</span><br><span class="line">            invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、bean加载&quot;&gt;&lt;a href=&quot;#一、bean加载&quot; class=&quot;headerlink&quot; title=&quot;一、bean加载&quot;&gt;&lt;/a&gt;一、bean加载&lt;/h3&gt;&lt;h4 id=&quot;1、AbstractBeanFactory的getBean方法&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码XmlBeanFactory(1)</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81XmlBeanFactory(1)/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/spring源码XmlBeanFactory(1)/</id>
    <published>2020-01-16T13:43:36.418Z</published>
    <updated>2018-07-07T15:10:07.657Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">   </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //step1: 读取spring的xml   （spring核心的是BeanFactory）</span><br><span class="line">        // 把资源文件封装为Spring的Resource</span><br><span class="line">        // spring把资源文件封装成统一的Resource进行管理，和提供一些基本的方法。</span><br><span class="line">        Resource resource = new ClassPathResource(&quot;spring-demo.xml&quot;);</span><br><span class="line"></span><br><span class="line">        // 加载资源文件，把xml中的bean definition注册到：1.把Resource再次封装为EncodedResource</span><br><span class="line">        XmlBeanFactory factory = new XmlBeanFactory(resource);</span><br><span class="line">        Demo0102Bean bean = (Demo) factory.getBean(&quot;demo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、xml文件读取"><a href="#一、xml文件读取" class="headerlink" title="一、xml文件读取"></a>一、xml文件读取</h3><h4 id="1、实例化XmlBeanFactory"><a href="#1、实例化XmlBeanFactory" class="headerlink" title="1、实例化XmlBeanFactory"></a>1、实例化XmlBeanFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public XmlBeanFactory(Resource resource) throws BeansException &#123;</span><br><span class="line">    this(resource, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public XmlBeanFactory(Resource resource, BeanFactory parentBeanFactory) throws BeansException &#123;</span><br><span class="line">    super(parentBeanFactory);</span><br><span class="line">    this.reader.loadBeanDefinitions(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、XmlBeanDefinitionReader的loadBeanDefinitions方法"><a href="#2、XmlBeanDefinitionReader的loadBeanDefinitions方法" class="headerlink" title="2、XmlBeanDefinitionReader的loadBeanDefinitions方法"></a>2、XmlBeanDefinitionReader的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    return loadBeanDefinitions(new EncodedResource(resource));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    Assert.notNull(encodedResource, &quot;EncodedResource must not be null&quot;);</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Loading XML bean definitions from &quot; + encodedResource.getResource());</span><br><span class="line">    &#125;</span><br><span class="line">    //记录已加载的资源</span><br><span class="line">    Set&lt;EncodedResource&gt; currentResources = this.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">    if (currentResources == null) &#123;</span><br><span class="line">        currentResources = new HashSet&lt;EncodedResource&gt;(4);</span><br><span class="line">        this.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(</span><br><span class="line">                &quot;Detected cyclic loading of &quot; + encodedResource + &quot; - check your import definitions!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取输入流</span><br><span class="line">        InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">        try &#123;</span><br><span class="line">            InputSource inputSource = new InputSource(inputStream);</span><br><span class="line">            if (encodedResource.getEncoding() != null) &#123;</span><br><span class="line">                inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">            &#125;</span><br><span class="line">            //读取xml</span><br><span class="line">            return doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(</span><br><span class="line">                &quot;IOException parsing XML document from &quot; + encodedResource.getResource(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        currentResources.remove(encodedResource);</span><br><span class="line">        if (currentResources.isEmpty()) &#123;</span><br><span class="line">            this.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法"><a href="#3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法" class="headerlink" title="3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法"></a>3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //xml读取为Document</span><br><span class="line">        Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">        //解析配置文件</span><br><span class="line">        return registerBeanDefinitions(doc, resource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SAXParseException ex) &#123;</span><br><span class="line">        throw new XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Line &quot; + ex.getLineNumber() + &quot; in XML document from &quot; + resource + &quot; is invalid&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SAXException ex) &#123;</span><br><span class="line">        throw new XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;XML document from &quot; + resource + &quot; is invalid&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ParserConfigurationException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Parser configuration exception parsing XML from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;IOException parsing XML document from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Unexpected exception parsing XML document from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、XmlBeanDefinitionReader的doLoadDocument方法"><a href="#4、XmlBeanDefinitionReader的doLoadDocument方法" class="headerlink" title="4、XmlBeanDefinitionReader的doLoadDocument方法"></a>4、XmlBeanDefinitionReader的doLoadDocument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected Document doLoadDocument(InputSource inputSource, Resource resource) throws Exception &#123;</span><br><span class="line">    return this.documentLoader.loadDocument(inputSource, getEntityResolver(), this.errorHandler,</span><br><span class="line">            getValidationModeForResource(resource), isNamespaceAware());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、XmlBeanDefinitionReader的getValidationModeForResource方法"><a href="#5、XmlBeanDefinitionReader的getValidationModeForResource方法" class="headerlink" title="5、XmlBeanDefinitionReader的getValidationModeForResource方法"></a>5、XmlBeanDefinitionReader的getValidationModeForResource方法</h4><p>获取xml验证模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected int getValidationModeForResource(Resource resource) &#123;</span><br><span class="line">    int validationModeToUse = getValidationMode();</span><br><span class="line">    //优先使用指定的验证模式</span><br><span class="line">    if (validationModeToUse != VALIDATION_AUTO) &#123;</span><br><span class="line">        return validationModeToUse;</span><br><span class="line">    &#125;</span><br><span class="line">    //自动检测，查看配置文件是否包含DOCTYPE，包含则为DTD，不包含则为XSD</span><br><span class="line">    int detectedMode = detectValidationMode(resource);</span><br><span class="line">    if (detectedMode != VALIDATION_AUTO) &#123;</span><br><span class="line">        return detectedMode;</span><br><span class="line">    &#125;</span><br><span class="line">    //默认XSD</span><br><span class="line">    return VALIDATION_XSD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法"><a href="#6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法" class="headerlink" title="6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法"></a>6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected EntityResolver getEntityResolver() &#123;</span><br><span class="line">    if (this.entityResolver == null) &#123;</span><br><span class="line">        // Determine default EntityResolver to use.</span><br><span class="line">        ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">        if (resourceLoader != null) &#123;</span><br><span class="line">            this.entityResolver = new ResourceEntityResolver(resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //默认的EntityResolver</span><br><span class="line">            this.entityResolver = new DelegatingEntityResolver(getBeanClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.entityResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、XmlBeanDefinitionReader的resolveEntity方法"><a href="#7、XmlBeanDefinitionReader的resolveEntity方法" class="headerlink" title="7、XmlBeanDefinitionReader的resolveEntity方法"></a>7、XmlBeanDefinitionReader的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException &#123;</span><br><span class="line">    if (systemId != null) &#123;</span><br><span class="line">        if (systemId.endsWith(DTD_SUFFIX)) &#123;</span><br><span class="line">            //解析dtd</span><br><span class="line">            return this.dtdResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (systemId.endsWith(XSD_SUFFIX)) &#123;</span><br><span class="line">            //解析xsd</span><br><span class="line">            return this.schemaResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、BeansDtdResolver的resolveEntity方法"><a href="#8、BeansDtdResolver的resolveEntity方法" class="headerlink" title="8、BeansDtdResolver的resolveEntity方法"></a>8、BeansDtdResolver的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//publicId -//SPRING//DTD BEAN//EN</span><br><span class="line">//systemId http://www.springframework.org/dtd/spring-beans.dtd</span><br><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws IOException &#123;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Trying to resolve XML entity with public ID [&quot; + publicId +</span><br><span class="line">                &quot;] and system ID [&quot; + systemId + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (systemId != null &amp;&amp; systemId.endsWith(DTD_EXTENSION)) &#123;</span><br><span class="line">        int lastPathSeparator = systemId.lastIndexOf(&quot;/&quot;);</span><br><span class="line">        int dtdNameStart = systemId.indexOf(DTD_NAME);</span><br><span class="line">        if (dtdNameStart &gt; lastPathSeparator) &#123;</span><br><span class="line">            //spring-beans-2.0.dtd</span><br><span class="line">            String dtdFile = DTD_FILENAME + DTD_EXTENSION;</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Trying to locate [&quot; + dtdFile + &quot;] in Spring jar on classpath&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                Resource resource = new ClassPathResource(dtdFile, getClass());</span><br><span class="line">                InputSource source = new InputSource(resource.getInputStream());</span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Found beans DTD [&quot; + systemId + &quot;] in classpath: &quot; + dtdFile);</span><br><span class="line">                &#125;</span><br><span class="line">                return source;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IOException ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Could not resolve beans DTD [&quot; + systemId + &quot;]: not found in classpath&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Use the default behavior -&gt; download from website or wherever.</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、6）PluggableSchemaResolver的resolveEntity方法"><a href="#9、接（一、6）PluggableSchemaResolver的resolveEntity方法" class="headerlink" title="9、接（一、6）PluggableSchemaResolver的resolveEntity方法"></a>9、接（一、6）PluggableSchemaResolver的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//publicId null</span><br><span class="line">//systemId http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws IOException &#123;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Trying to resolve XML entity with public id [&quot; + publicId +</span><br><span class="line">                &quot;] and system id [&quot; + systemId + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (systemId != null) &#123;</span><br><span class="line">        //从META-INF/spring.schemas中获取验证文件位置,org/springframework/beans/factory/xml/spring-beans-4.0.xsd</span><br><span class="line">        String resourceLocation = getSchemaMappings().get(systemId);</span><br><span class="line">        if (resourceLocation != null) &#123;</span><br><span class="line">            Resource resource = new ClassPathResource(resourceLocation, this.classLoader);</span><br><span class="line">            try &#123;</span><br><span class="line">                InputSource source = new InputSource(resource.getInputStream());</span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Found XML schema [&quot; + systemId + &quot;] in classpath: &quot; + resourceLocation);</span><br><span class="line">                &#125;</span><br><span class="line">                return source;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (FileNotFoundException ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Couldn&apos;t find XML schema [&quot; + systemId + &quot;]: &quot; + resource, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、默认标签解析"><a href="#二、默认标签解析" class="headerlink" title="二、默认标签解析"></a>二、默认标签解析</h3><h4 id="1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法"><a href="#1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法" class="headerlink" title="1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法"></a>1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="line">public int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    //获取解析器默认DefaultBeanDefinitionDocumentReader</span><br><span class="line">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    documentReader.setEnvironment(getEnvironment());</span><br><span class="line">    int countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    //解析xml</span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    return getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"><a href="#2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法" class="headerlink" title="2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"></a>2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) &#123;</span><br><span class="line">    this.readerContext = readerContext;</span><br><span class="line">    logger.debug(&quot;Loading bean definitions&quot;);</span><br><span class="line">    Element root = doc.getDocumentElement();</span><br><span class="line">    //解析xml</span><br><span class="line">    doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"><a href="#3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法" class="headerlink" title="3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"></a>3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void doRegisterBeanDefinitions(Element root) &#123;</span><br><span class="line">    //标签的处理器</span><br><span class="line">    BeanDefinitionParserDelegate parent = this.delegate;</span><br><span class="line">    //默认为BeanDefinitionParserDelegate</span><br><span class="line">    this.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line">    //处理profile属性，只能是默认标签</span><br><span class="line">    if (this.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">        //当前beans为profile文件</span><br><span class="line">        if (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">                    profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">            //profile不是激活文件，则不处理该beans</span><br><span class="line">            if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析前处理，留给子类实现</span><br><span class="line">    preProcessXml(root);</span><br><span class="line">    //处理当前beans</span><br><span class="line">    parseBeanDefinitions(root, this.delegate);</span><br><span class="line">    //解析后处理，留给子类实现</span><br><span class="line">    postProcessXml(root);</span><br><span class="line"></span><br><span class="line">    this.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法"><a href="#4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法" class="headerlink" title="4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法"></a>4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //根标签为默认标签</span><br><span class="line">    if (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        NodeList nl = root.getChildNodes();</span><br><span class="line">        for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            if (node instanceof Element) &#123;</span><br><span class="line">                Element ele = (Element) node;</span><br><span class="line">                if (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">                    //解析默认标签</span><br><span class="line">                    parseDefaultElement(ele, delegate);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    //解析自定义标签</span><br><span class="line">                    delegate.parseCustomElement(ele);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //解析自定义标签</span><br><span class="line">        delegate.parseCustomElement(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法"><a href="#5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法" class="headerlink" title="5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法"></a>5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //处理import标签</span><br><span class="line">    if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">        importBeanDefinitionResource(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理alias标签</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">        processAliasRegistration(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理bean标签</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">        processBeanDefinition(ele, delegate);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理beans标签,递归调用(二、4)</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">        // recurse</span><br><span class="line">        doRegisterBeanDefinitions(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法"><a href="#6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法" class="headerlink" title="6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法"></a>6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //解析元素</span><br><span class="line">    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">    if (bdHolder != null) &#123;</span><br><span class="line">        //解析子节点下的自定义属性和标签</span><br><span class="line">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册bdHolder</span><br><span class="line">            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to register bean definition with name &apos;&quot; +</span><br><span class="line">                    bdHolder.getBeanName() + &quot;&apos;&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        // Send registration event.</span><br><span class="line">        //向监听器发送，该bean注册完成事件</span><br><span class="line">        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"><a href="#7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法" class="headerlink" title="7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"></a>7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) &#123;</span><br><span class="line">    return parseBeanDefinitionElement(ele, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) &#123;</span><br><span class="line">    //获取id属性</span><br><span class="line">    String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">    //获取name属性</span><br><span class="line">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    //处理别名</span><br><span class="line">    List&lt;String&gt; aliases = new ArrayList&lt;String&gt;();</span><br><span class="line">    if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">        aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">    &#125;</span><br><span class="line">    //beanName默认为id</span><br><span class="line">    String beanName = id;</span><br><span class="line">    if (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">        beanName = aliases.remove(0);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;No XML &apos;id&apos; specified - using &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos; as bean name and &quot; + aliases + &quot; as aliases&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //不是嵌套bean，检查是否重名</span><br><span class="line">    if (containingBean == null) &#123;</span><br><span class="line">        checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析bean的子标签</span><br><span class="line">    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">    if (beanDefinition != null) &#123;</span><br><span class="line">        //没有beanName则生成一个，不是嵌套bean，默认获取全类名。与注解容器中不同。</span><br><span class="line">        if (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (containingBean != null) &#123;</span><br><span class="line">                    beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                            beanDefinition, this.readerContext.getRegistry(), true);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    beanName = this.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">                    // Register an alias for the plain bean class name, if still possible,</span><br><span class="line">                    // if the generator returned the class name plus a suffix.</span><br><span class="line">                    // This is expected for Spring 1.2/2.0 backwards compatibility.</span><br><span class="line">                    String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">                    if (beanClassName != null &amp;&amp;</span><br><span class="line">                            beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                            !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                        aliases.add(beanClassName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Neither XML &apos;id&apos; nor &apos;name&apos; specified - &quot; +</span><br><span class="line">                            &quot;using generated bean name [&quot; + beanName + &quot;]&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex) &#123;</span><br><span class="line">                error(ex.getMessage(), ele);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">        //beanDefinition放入BeanDefinitionHolder中，并返回</span><br><span class="line">        return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"><a href="#8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法" class="headerlink" title="8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"></a>8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public AbstractBeanDefinition parseBeanDefinitionElement(</span><br><span class="line">        Element ele, String beanName, BeanDefinition containingBean) &#123;</span><br><span class="line"></span><br><span class="line">    this.parseState.push(new BeanEntry(beanName));</span><br><span class="line">    //解析class属性</span><br><span class="line">    String className = null;</span><br><span class="line">    if (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //解析parent属性</span><br><span class="line">        String parent = null;</span><br><span class="line">        if (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">            parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建用于存放属性的AbstractBeanDefinition，默认为GenericBeanDefinition</span><br><span class="line">        AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">        //解析bean的各个属性</span><br><span class="line">        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">        //设置描述</span><br><span class="line">        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line">        //解析元数据</span><br><span class="line">        parseMetaElements(ele, bd);</span><br><span class="line">        //解析lookup-method属性</span><br><span class="line">        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        //解析replaced-method属性</span><br><span class="line">        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        //解析构造函数参数</span><br><span class="line">        parseConstructorArgElements(ele, bd);</span><br><span class="line">        //解析property子元素</span><br><span class="line">        parsePropertyElements(ele, bd);</span><br><span class="line">        //解析qualifier子元素</span><br><span class="line">        parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">        bd.setResource(this.readerContext.getResource());</span><br><span class="line">        bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">        return bd;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        error(&quot;Bean class [&quot; + className + &quot;] not found&quot;, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (NoClassDefFoundError err) &#123;</span><br><span class="line">        error(&quot;Class that bean class [&quot; + className + &quot;] depends on not found&quot;, ele, err);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        error(&quot;Unexpected failure during bean definition parsing&quot;, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法"><a href="#9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法" class="headerlink" title="9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法"></a>9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,</span><br><span class="line">        BeanDefinition containingBean, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    //不支持singleton属性</span><br><span class="line">    if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</span><br><span class="line">        error(&quot;Old 1.x &apos;singleton&apos; attribute in use - upgrade to &apos;scope&apos; declaration&quot;, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析scope属性</span><br><span class="line">    else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    //嵌套bean，使用外部类的scope</span><br><span class="line">    else if (containingBean != null) &#123;</span><br><span class="line">        // Take default from containing bean in case of an inner bean definition.</span><br><span class="line">        bd.setScope(containingBean.getScope());</span><br><span class="line">    &#125;</span><br><span class="line">    //解析abstract属性</span><br><span class="line">    if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析lazy-init属性</span><br><span class="line">    String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE);</span><br><span class="line">    if (DEFAULT_VALUE.equals(lazyInit)) &#123;</span><br><span class="line">        lazyInit = this.defaults.getLazyInit();</span><br><span class="line">    &#125;</span><br><span class="line">    bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span><br><span class="line">    //解析autowire属性</span><br><span class="line">    String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE);</span><br><span class="line">    bd.setAutowireMode(getAutowireMode(autowire));</span><br><span class="line">    //解析dependency-check属性</span><br><span class="line">    String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE);</span><br><span class="line">    bd.setDependencyCheck(getDependencyCheck(dependencyCheck));</span><br><span class="line">    //解析depends-on属性</span><br><span class="line">    if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</span><br><span class="line">        String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE);</span><br><span class="line">        bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析autowire-candidate属性</span><br><span class="line">    String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE);</span><br><span class="line">    if (&quot;&quot;.equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) &#123;</span><br><span class="line">        String candidatePattern = this.defaults.getAutowireCandidates();</span><br><span class="line">        if (candidatePattern != null) &#123;</span><br><span class="line">            String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern);</span><br><span class="line">            bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析primary属性</span><br><span class="line">    if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析init-method属性</span><br><span class="line">    if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE);</span><br><span class="line">        if (!&quot;&quot;.equals(initMethodName)) &#123;</span><br><span class="line">            bd.setInitMethodName(initMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (this.defaults.getInitMethod() != null) &#123;</span><br><span class="line">            bd.setInitMethodName(this.defaults.getInitMethod());</span><br><span class="line">            bd.setEnforceInitMethod(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析destroy-method属性</span><br><span class="line">    if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE);</span><br><span class="line">        if (!&quot;&quot;.equals(destroyMethodName)) &#123;</span><br><span class="line">            bd.setDestroyMethodName(destroyMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (this.defaults.getDestroyMethod() != null) &#123;</span><br><span class="line">            bd.setDestroyMethodName(this.defaults.getDestroyMethod());</span><br><span class="line">            bd.setEnforceDestroyMethod(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析factory-method属性</span><br><span class="line">    if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析factory-bean属性</span><br><span class="line">    if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return bd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法"><a href="#10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法" class="headerlink" title="10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法"></a>10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void parseMetaElements(Element ele, BeanMetadataAttributeAccessor attributeAccessor) &#123;</span><br><span class="line">    NodeList nl = ele.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //该元素为meta</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">            Element metaElement = (Element) node;</span><br><span class="line">            String key = metaElement.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">            String value = metaElement.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">            BeanMetadataAttribute attribute = new BeanMetadataAttribute(key, value);</span><br><span class="line">            attribute.setSource(extractSource(metaElement));</span><br><span class="line">            //放入父类AttributeAccessorSupport的attributes中</span><br><span class="line">            attributeAccessor.addMetadataAttribute(attribute);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元数据配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;demo&quot; class=&quot;com.demo.Demo&quot;&gt;</span><br><span class="line">    &lt;meta key=&quot;testStr&quot; value=&quot;123456&quot; /&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法"><a href="#11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法" class="headerlink" title="11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法"></a>11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //元素为lookup-method</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            String methodName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">            String beanRef = ele.getAttribute(BEAN_ELEMENT);</span><br><span class="line">            //创建一个LookupOverride加入AbstractBeanDefinition的methodOverrides中</span><br><span class="line">            LookupOverride override = new LookupOverride(methodName, beanRef);</span><br><span class="line">            override.setSource(extractSource(ele));</span><br><span class="line">            overrides.addOverride(override);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lookup-method配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个水果类</span><br><span class="line">public class Fruit &#123;</span><br><span class="line">    public Fruit() &#123;</span><br><span class="line">        System.out.println(&quot;I got Fruit&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 苹果</span><br><span class="line">public class Apple extends Fruit &#123;</span><br><span class="line">    public Apple() &#123;</span><br><span class="line">        System.out.println(&quot;I got a fresh apple&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 香蕉</span><br><span class="line">public class Bananer extends Fruit &#123;</span><br><span class="line">    public Bananer () &#123;</span><br><span class="line">        System.out.println(&quot;I got a  fresh bananer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 水果盘，可以拿到水果</span><br><span class="line">public abstract class FruitPlate&#123;</span><br><span class="line">    // 抽象方法获取新鲜水果</span><br><span class="line">    protected abstract Fruit getFruit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;apple&quot; class=&quot;cn.com.willchen.test.di.Apple&quot; scope=&quot;prototype&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;bananer&quot; class=&quot;cn.com.willchen.test.di.Bananer &quot; scope=&quot;prototype&quot;/&gt;</span><br><span class="line">&lt;!-- getFruit方法返回apple --&gt;</span><br><span class="line">&lt;bean id=&quot;fruitPlate1&quot; class=&quot;cn.com.willchen.test.di.FruitPlate&quot;&gt;</span><br><span class="line">    &lt;lookup-method name=&quot;getFruit&quot; bean=&quot;apple&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- getFruit方法返回bananer --&gt;</span><br><span class="line">&lt;bean id=&quot;fruitPlate2&quot; class=&quot;cn.com.willchen.test.di.FruitPlate&quot;&gt;</span><br><span class="line">    &lt;lookup-method name=&quot;getFruit&quot; bean=&quot;bananer&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法"><a href="#12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法" class="headerlink" title="12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法"></a>12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //元素为replaced-method</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) &#123;</span><br><span class="line">            Element replacedMethodEle = (Element) node;</span><br><span class="line">            //要替换的旧的方法</span><br><span class="line">            String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">            //替代该方法的类</span><br><span class="line">            String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE);</span><br><span class="line">            ReplaceOverride replaceOverride = new ReplaceOverride(name, callback);</span><br><span class="line">            // Look for arg-type match elements.</span><br><span class="line">            //记录参数</span><br><span class="line">            List&lt;Element&gt; argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT);</span><br><span class="line">            for (Element argTypeEle : argTypeEles) &#123;</span><br><span class="line">                String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE);</span><br><span class="line">                match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle));</span><br><span class="line">                if (StringUtils.hasText(match)) &#123;</span><br><span class="line">                    replaceOverride.addTypeIdentifier(match);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            replaceOverride.setSource(extractSource(replacedMethodEle));</span><br><span class="line">            //添加到AbstractBeanDefinition的methodOverrides中</span><br><span class="line">            overrides.addOverride(replaceOverride);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>replaced-method配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class TestChangMethod&#123;</span><br><span class="line">    public void changMe()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">public class TestMethodReplacer implements MethodReplacer&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object reimplements(Object obj,Method method,Object[] args) throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;我替换了原有的方法&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;testChangeMethod&quot; class=&quot;com.demo3.TestChangeMethod&quot;&gt;&lt;</span><br><span class="line">    &lt;replaced-method name=&quot;changeMe&quot; replacer=&quot;replacer&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;replacer&quot; class=&quot;com.demo3.TestMethodReplacer&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法"><a href="#13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法" class="headerlink" title="13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法"></a>13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) &#123;</span><br><span class="line">            //解析constructor-arg</span><br><span class="line">            parseConstructorArgElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public void parseConstructorArgElement(Element ele, BeanDefinition bd) &#123;</span><br><span class="line">    //index属性</span><br><span class="line">    String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);</span><br><span class="line">    //type属性</span><br><span class="line">    String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    //name属性</span><br><span class="line">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    if (StringUtils.hasLength(indexAttr)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int index = Integer.parseInt(indexAttr);</span><br><span class="line">            if (index &lt; 0) &#123;</span><br><span class="line">                error(&quot;&apos;index&apos; cannot be lower than 0&quot;, ele);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    this.parseState.push(new ConstructorArgumentEntry(index));</span><br><span class="line">                    //解析属性元素</span><br><span class="line">                    Object value = parsePropertyValue(ele, bd, null);</span><br><span class="line">                    ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">                    if (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                        valueHolder.setType(typeAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                        valueHolder.setName(nameAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    valueHolder.setSource(extractSource(ele));</span><br><span class="line">                    //不允许重复指定参数</span><br><span class="line">                    if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) &#123;</span><br><span class="line">                        error(&quot;Ambiguous constructor-arg entries for index &quot; + index, ele);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        //添加构造器属性值</span><br><span class="line">                        bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    this.parseState.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (NumberFormatException ex) &#123;</span><br><span class="line">            error(&quot;Attribute &apos;index&apos; of tag &apos;constructor-arg&apos; must be an integer&quot;, ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.parseState.push(new ConstructorArgumentEntry());</span><br><span class="line">            //解析属性元素</span><br><span class="line">            Object value = parsePropertyValue(ele, bd, null);</span><br><span class="line">            ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">            if (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                valueHolder.setType(typeAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                valueHolder.setName(nameAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            valueHolder.setSource(extractSource(ele));</span><br><span class="line">            //添加构造器属性值</span><br><span class="line">            bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            this.parseState.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constructor-arg配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.rc.sp.Student&quot;&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;id&quot; value=&quot;1&quot;/&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;name&quot; value=&quot;student&quot;/&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;dream&quot;&gt;  </span><br><span class="line">        &lt;list&gt;  </span><br><span class="line">            &lt;value&gt;soldier&lt;/value&gt;  </span><br><span class="line">            &lt;value&gt;scientist&lt;/value&gt;  </span><br><span class="line">            &lt;value&gt;pilot&lt;/value&gt;  </span><br><span class="line">        &lt;/list&gt;  </span><br><span class="line">    &lt;/constructor-arg&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;score&quot;&gt;  </span><br><span class="line">        &lt;map&gt;  </span><br><span class="line">            &lt;entry key=&quot;math&quot; value=&quot;90&quot;/&gt;  </span><br><span class="line">            &lt;entry key=&quot;english&quot; value=&quot;85&quot;/&gt;  </span><br><span class="line">        &lt;/map&gt;  </span><br><span class="line">    &lt;/constructor-arg&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;graduation&quot; value=&quot;false&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="14、BeanDefinitionParserDelegate的parsePropertyValue方法"><a href="#14、BeanDefinitionParserDelegate的parsePropertyValue方法" class="headerlink" title="14、BeanDefinitionParserDelegate的parsePropertyValue方法"></a>14、BeanDefinitionParserDelegate的parsePropertyValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) &#123;</span><br><span class="line">    String elementName = (propertyName != null) ?</span><br><span class="line">                    &quot;&lt;property&gt; element for property &apos;&quot; + propertyName + &quot;&apos;&quot; :</span><br><span class="line">                    &quot;&lt;constructor-arg&gt; element&quot;;</span><br><span class="line"></span><br><span class="line">    // Should only have one child element: ref, value, list, etc.</span><br><span class="line">    NodeList nl = ele.getChildNodes();</span><br><span class="line">    Element subElement = null;</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //description和meta不处理</span><br><span class="line">        if (node instanceof Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class="line">                !nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">            // Child element is what we&apos;re looking for.</span><br><span class="line">            if (subElement != null) &#123;</span><br><span class="line">                error(elementName + &quot; must not contain more than one sub-element&quot;, ele);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                //子元素</span><br><span class="line">                subElement = (Element) node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析constructor-arg的ref属性</span><br><span class="line">    boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class="line">    //解析constructor-arg的value属性</span><br><span class="line">    boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">    //不能同时有ref和value</span><br><span class="line">    if ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</span><br><span class="line">            ((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != null)) &#123;</span><br><span class="line">        error(elementName +</span><br><span class="line">                &quot; is only allowed to contain either &apos;ref&apos; attribute OR &apos;value&apos; attribute OR sub-element&quot;, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //ref属性</span><br><span class="line">    if (hasRefAttribute) &#123;</span><br><span class="line">        String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class="line">        if (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">            error(elementName + &quot; contains empty &apos;ref&apos; attribute&quot;, ele);</span><br><span class="line">        &#125;</span><br><span class="line">        RuntimeBeanReference ref = new RuntimeBeanReference(refName);</span><br><span class="line">        ref.setSource(extractSource(ele));</span><br><span class="line">        return ref;</span><br><span class="line">    &#125;</span><br><span class="line">    //value属性</span><br><span class="line">    else if (hasValueAttribute) &#123;</span><br><span class="line">        TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class="line">        valueHolder.setSource(extractSource(ele));</span><br><span class="line">        return valueHolder;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析子元素</span><br><span class="line">    else if (subElement != null) &#123;</span><br><span class="line">        return parsePropertySubElement(subElement, bd);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Neither child element nor &quot;ref&quot; or &quot;value&quot; attribute found.</span><br><span class="line">        error(elementName + &quot; must specify a ref or value&quot;, ele);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"><a href="#15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法" class="headerlink" title="15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"></a>15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void parsePropertyElements(Element beanEle, BeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class="line">            parsePropertyElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void parsePropertyElement(Element ele, BeanDefinition bd) &#123;</span><br><span class="line">    //获取name属性</span><br><span class="line">    String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">        error(&quot;Tag &apos;property&apos; must have a &apos;name&apos; attribute&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.parseState.push(new PropertyEntry(propertyName));</span><br><span class="line">    try &#123;</span><br><span class="line">        if (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">            error(&quot;Multiple &apos;property&apos; definitions for property &apos;&quot; + propertyName + &quot;&apos;&quot;, ele);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析属性元素，与(一、14)相同</span><br><span class="line">        Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line">        PropertyValue pv = new PropertyValue(propertyName, val);</span><br><span class="line">        parseMetaElements(ele, pv);</span><br><span class="line">        pv.setSource(extractSource(ele));</span><br><span class="line">        bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>property配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;cn.itcast.c_property.User&quot; scope=&quot;prototype&quot;&gt;  </span><br><span class="line">    &lt;property name=&quot;id&quot; value=&quot;101&quot;&gt;&lt;/property&gt;  </span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;Jack&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"><a href="#16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法" class="headerlink" title="16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"></a>16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ELEMENT)) &#123;</span><br><span class="line">            parseQualifierElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    //type属性</span><br><span class="line">    String typeName = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasLength(typeName)) &#123;</span><br><span class="line">        error(&quot;Tag &apos;qualifier&apos; must have a &apos;type&apos; attribute&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.parseState.push(new QualifierEntry(typeName));</span><br><span class="line">    try &#123;</span><br><span class="line">        AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName);</span><br><span class="line">        qualifier.setSource(extractSource(ele));</span><br><span class="line">        String value = ele.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">        if (StringUtils.hasLength(value)) &#123;</span><br><span class="line">            qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value);</span><br><span class="line">        &#125;</span><br><span class="line">        NodeList nl = ele.getChildNodes();</span><br><span class="line">        for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) &#123;</span><br><span class="line">                Element attributeEle = (Element) node;</span><br><span class="line">                String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">                String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(attributeName) &amp;&amp; StringUtils.hasLength(attributeValue)) &#123;</span><br><span class="line">                    BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue);</span><br><span class="line">                    attribute.setSource(extractSource(attributeEle));</span><br><span class="line">                    qualifier.addMetadataAttribute(attribute);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    error(&quot;Qualifier &apos;attribute&apos; tag must have a &apos;name&apos; and &apos;value&apos;&quot;, attributeEle);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //添加限定标识符</span><br><span class="line">        bd.addQualifier(qualifier);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qualifier配置示例，限定标识符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class TestBean &#123;  </span><br><span class="line">      </span><br><span class="line">    private DataSource dataSource;  </span><br><span class="line">      </span><br><span class="line">    @Autowired  </span><br><span class="line">    public void initDataSource(@Qualifier(&quot;oracleDataSource&quot;) DataSource dataSource)&#123;  </span><br><span class="line">        this.dataSource = dataSource;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    public DataSource getDataSource() &#123;  </span><br><span class="line">        return dataSource;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;mysqlDataSourceBean&quot; class=&quot;com.bean.MysqlDriveManagerDataSource&quot;&gt;  </span><br><span class="line">    &lt;qualifier value=&quot;mysqlDataSource&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;bean id=&quot;oracleDataSourceBean&quot; class=&quot;com.bean.OracleDriveManagerDataSource&quot;&gt;  </span><br><span class="line">    &lt;qualifier value=&quot;oracleDataSource&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法"><a href="#16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法" class="headerlink" title="16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法"></a>16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void registerBeanDefinition(</span><br><span class="line">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    // Register bean definition under primary name.</span><br><span class="line">    String beanName = definitionHolder.getBeanName();</span><br><span class="line">    //使用beanName注册</span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">    //注册别名</span><br><span class="line">    // Register aliases for bean name, if any.</span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    if (aliases != null) &#123;</span><br><span class="line">        for (String alias : aliases) &#123;</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、DefaultListableBeanFactory的registerBeanDefinition方法"><a href="#17、DefaultListableBeanFactory的registerBeanDefinition方法" class="headerlink" title="17、DefaultListableBeanFactory的registerBeanDefinition方法"></a>17、DefaultListableBeanFactory的registerBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);</span><br><span class="line">    Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);</span><br><span class="line">    //校验methodOverrides不能与工厂方法并存，或者methodOverrides对应的方法不存在</span><br><span class="line">    if (beanDefinition instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Validation of bean definition failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">    oldBeanDefinition = this.beanDefinitionMap.get(beanName);</span><br><span class="line">    if (oldBeanDefinition != null) &#123;</span><br><span class="line">        //已存在且不允许被覆盖，抛出异常</span><br><span class="line">        if (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Cannot register bean definition [&quot; + beanDefinition + &quot;] for bean &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos;: There is already [&quot; + oldBeanDefinition + &quot;] bound.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            // e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span><br><span class="line">            if (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">                this.logger.warn(&quot;Overriding user-defined bean definition for bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; with a framework-generated bean definition: replacing [&quot; +</span><br><span class="line">                        oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">                this.logger.info(&quot;Overriding bean definition for bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos;: replacing [&quot; + oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //记录beanName</span><br><span class="line">        this.beanDefinitionNames.add(beanName);</span><br><span class="line">        this.manualSingletonNames.remove(beanName);</span><br><span class="line">        this.frozenBeanDefinitionNames = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //注册beanDefinition</span><br><span class="line">    this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line"></span><br><span class="line">    if (oldBeanDefinition != null || containsSingleton(beanName)) &#123;</span><br><span class="line">        //重置缓存</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（二、16）SimpleAliasRegistry的registerAlias方法"><a href="#18、接（二、16）SimpleAliasRegistry的registerAlias方法" class="headerlink" title="18、接（二、16）SimpleAliasRegistry的registerAlias方法"></a>18、接（二、16）SimpleAliasRegistry的registerAlias方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerAlias(String name, String alias) &#123;</span><br><span class="line">    Assert.hasText(name, &quot;&apos;name&apos; must not be empty&quot;);</span><br><span class="line">    Assert.hasText(alias, &quot;&apos;alias&apos; must not be empty&quot;);</span><br><span class="line">    //别名与beanName相同，则删除该别名</span><br><span class="line">    if (alias.equals(name)) &#123;</span><br><span class="line">        this.aliasMap.remove(alias);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //检验别名是否重复</span><br><span class="line">        if (!allowAliasOverriding()) &#123;</span><br><span class="line">            String registeredName = this.aliasMap.get(alias);</span><br><span class="line">            if (registeredName != null &amp;&amp; !registeredName.equals(name)) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;Cannot register alias &apos;&quot; + alias + &quot;&apos; for name &apos;&quot; +</span><br><span class="line">                        name + &quot;&apos;: It is already registered for name &apos;&quot; + registeredName + &quot;&apos;.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //A-B存在的情况下，不能存在B-A以及B-C-A</span><br><span class="line">        checkForAliasCircle(name, alias);</span><br><span class="line">        //注册别名</span><br><span class="line">        this.aliasMap.put(alias, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法"><a href="#19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法" class="headerlink" title="19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法"></a>19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">protected void processAliasRegistration(Element ele) &#123;</span><br><span class="line">    String name = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    String alias = ele.getAttribute(ALIAS_ATTRIBUTE);</span><br><span class="line">    boolean valid = true;</span><br><span class="line">    if (!StringUtils.hasText(name)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Name must not be empty&quot;, ele);</span><br><span class="line">        valid = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!StringUtils.hasText(alias)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Alias must not be empty&quot;, ele);</span><br><span class="line">        valid = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (valid) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册别名</span><br><span class="line">            getReaderContext().getRegistry().registerAlias(name, alias);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to register alias &apos;&quot; + alias +</span><br><span class="line">                    &quot;&apos; for bean with name &apos;&quot; + name + &quot;&apos;&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //通知监听器，别名注册完成事件</span><br><span class="line">        getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias标签配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;some&quot; class=&quot;src.com.Some&quot;/&gt;</span><br><span class="line">&lt;alias name=&quot;some&quot; alias=&quot;someJava,oneBean,twoBean&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法"><a href="#20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法" class="headerlink" title="20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法"></a>20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">protected void importBeanDefinitionResource(Element ele) &#123;</span><br><span class="line">    //获取resource属性</span><br><span class="line">    String location = ele.getAttribute(RESOURCE_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasText(location)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Resource location must not be empty&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Resolve system properties: e.g. &quot;$&#123;user.dir&#125;&quot;</span><br><span class="line">    //解析系统属性，如&quot;$&#123;user.dir&#125;&quot;</span><br><span class="line">    location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class="line"></span><br><span class="line">    Set&lt;Resource&gt; actualResources = new LinkedHashSet&lt;Resource&gt;(4);</span><br><span class="line"></span><br><span class="line">    // Discover whether the location is an absolute or relative URI</span><br><span class="line">    boolean absoluteLocation = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        //判断location，是绝对uri还是相对uri</span><br><span class="line">        absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (URISyntaxException ex) &#123;</span><br><span class="line">        // cannot convert to an URI, considering the location relative</span><br><span class="line">        // unless it is the well-known Spring prefix &quot;classpath*:&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Absolute or relative?</span><br><span class="line">    //绝对uri直接加载配置文件</span><br><span class="line">    if (absoluteLocation) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Imported &quot; + importCount + &quot; bean definitions from URL location [&quot; + location + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(</span><br><span class="line">                    &quot;Failed to import bean definitions from URL location [&quot; + location + &quot;]&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //相对地址加载</span><br><span class="line">    else &#123;</span><br><span class="line">        // No URL -&gt; considering resource location as relative to the current file.</span><br><span class="line">        try &#123;</span><br><span class="line">            int importCount;</span><br><span class="line">            Resource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class="line">            if (relativeResource.exists()) &#123;</span><br><span class="line">                importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class="line">                actualResources.add(relativeResource);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                String baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class="line">                importCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class="line">                        StringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Imported &quot; + importCount + &quot; bean definitions from relative location [&quot; + location + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to resolve current resource location&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to import bean definitions from relative location [&quot; + location + &quot;]&quot;,</span><br><span class="line">                    ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //监听器处理加载的文件</span><br><span class="line">    Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()]);</span><br><span class="line">    getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import标签配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;systemContext.xml&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="三、自定义标签解析"><a href="#三、自定义标签解析" class="headerlink" title="三、自定义标签解析"></a>三、自定义标签解析</h3><h4 id="1、自定义标签示例"><a href="#1、自定义标签示例" class="headerlink" title="1、自定义标签示例"></a>1、自定义标签示例</h4><p>一个普通的javaBean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;    </span><br><span class="line">    private String id;    </span><br><span class="line">    private String userName;    </span><br><span class="line">    private String email;    </span><br><span class="line">    public String getId() &#123;    </span><br><span class="line">        return id;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setId(String id) &#123;    </span><br><span class="line">        this.id = id;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public String getUserName() &#123;    </span><br><span class="line">        return userName;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setUserName(String userName) &#123;    </span><br><span class="line">        this.userName = userName;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public String getEmail() &#123;    </span><br><span class="line">        return email;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setEmail(String email) &#123;    </span><br><span class="line">        this.email = email;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class UserBeanDefinitionParser extends AbstractSingleBeanDefinitionParser &#123;    </span><br><span class="line">    @Override    </span><br><span class="line">    protected Class&lt;?&gt; getBeanClass(Element element) &#123;    </span><br><span class="line">        return User.class;    </span><br><span class="line">    &#125;    </span><br><span class="line">    @Override    </span><br><span class="line">    protected void doParse(Element element, BeanDefinitionBuilder builder) &#123;    </span><br><span class="line">        String userName=element.getAttribute(&quot;userName&quot;);    </span><br><span class="line">        String email=element.getAttribute(&quot;email&quot;);    </span><br><span class="line">        if(StringUtils.hasText(userName))&#123;    </span><br><span class="line">            builder.addPropertyValue(&quot;userName&quot;, userName);    </span><br><span class="line">        &#125;    </span><br><span class="line">        if(StringUtils.hasText(email))&#123;    </span><br><span class="line">            builder.addPropertyValue(&quot;email&quot;, email);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册解析器的Handler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MyUserNamespaceHandler extends NamespaceHandlerSupport &#123;    </span><br><span class="line">    </span><br><span class="line">    @Override    </span><br><span class="line">    public void init() &#123;    </span><br><span class="line">        registerBeanDefinitionParser(&quot;user&quot;,new UserBeanDefinitionParser());    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>xml  schema definition  (xsd)文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    </span><br><span class="line">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;    </span><br><span class="line">    xmlns=&quot;http://www.wjs.com/schema/user&quot; targetNamespace=&quot;http://www.wjs.com/schema/user&quot;    </span><br><span class="line">    elementFormDefault=&quot;qualified&quot;&gt;    </span><br><span class="line">    &lt;xsd:element name=&quot;user&quot;&gt;    </span><br><span class="line">        &lt;xsd:complexType&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;id&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;userName&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;email&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">        &lt;/xsd:complexType&gt;    </span><br><span class="line">    &lt;/xsd:element&gt;    </span><br><span class="line">&lt;/xsd:schema&gt;</span><br></pre></td></tr></table></figure></p><p>spring.handlers中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.wjs.com/schema/user=com.wjs.cosumertag.MyUserNamespaceHandler</span><br></pre></td></tr></table></figure></p><p>spring.schemas中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.wjs.com/schema/user.xsd=META-INF/spring-user.xsd</span><br></pre></td></tr></table></figure></p><p>spring 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    </span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    </span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    </span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    </span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    </span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; </span><br><span class="line">    &lt;!-- 自定义标签的命名空间 --&gt;   </span><br><span class="line">    xmlns:myTag=&quot;http://www.wjs.com/schema/user&quot;   </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd    </span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd    </span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd    </span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd    </span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd </span><br><span class="line">        &lt;!--指定了命名空间对应的Schema文档--&gt;   </span><br><span class="line">        http://www.wjs.com/schema/user http://www.wjs.com/schema/user.xsd&quot;&gt;    </span><br><span class="line">     </span><br><span class="line">    &lt;myTag:user id=&quot;testBean&quot; userName=&quot;name&quot; email=&quot;wjs@163.com&quot;/&gt;    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法"><a href="#2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法" class="headerlink" title="2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法"></a>2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parseCustomElement(Element ele) &#123;</span><br><span class="line">    return parseCustomElement(ele, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) &#123;</span><br><span class="line">    //获取命名空间</span><br><span class="line">    String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">    //根据命名空间获取对应处理器</span><br><span class="line">    NamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        error(&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot; + namespaceUri + &quot;]&quot;, ele);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //用自定义的处理器解析</span><br><span class="line">    return handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultNamespaceHandlerResolver的resolve方法"><a href="#3、DefaultNamespaceHandlerResolver的resolve方法" class="headerlink" title="3、DefaultNamespaceHandlerResolver的resolve方法"></a>3、DefaultNamespaceHandlerResolver的resolve方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public NamespaceHandler resolve(String namespaceUri) &#123;</span><br><span class="line">    //获取handler映射</span><br><span class="line">    Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class="line">    //根据命名空间找到对应的信息</span><br><span class="line">    Object handlerOrClassName = handlerMappings.get(namespaceUri);</span><br><span class="line">    if (handlerOrClassName == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (handlerOrClassName instanceof NamespaceHandler) &#123;</span><br><span class="line">        return (NamespaceHandler) handlerOrClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        String className = (String) handlerOrClassName;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; handlerClass = ClassUtils.forName(className, this.classLoader);</span><br><span class="line">            if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;Class [&quot; + className + &quot;] for namespace [&quot; + namespaceUri +</span><br><span class="line">                        &quot;] does not implement the [&quot; + NamespaceHandler.class.getName() + &quot;] interface&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //初始化类</span><br><span class="line">            NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br><span class="line">            //初始化方法，注册解析器</span><br><span class="line">            namespaceHandler.init();</span><br><span class="line">            //记录缓存</span><br><span class="line">            handlerMappings.put(namespaceUri, namespaceHandler);</span><br><span class="line">            return namespaceHandler;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new FatalBeanException(&quot;NamespaceHandler class [&quot; + className + &quot;] for namespace [&quot; +</span><br><span class="line">                    namespaceUri + &quot;] not found&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (LinkageError err) &#123;</span><br><span class="line">            throw new FatalBeanException(&quot;Invalid NamespaceHandler class [&quot; + className + &quot;] for namespace [&quot; +</span><br><span class="line">                    namespaceUri + &quot;]: problem with handler class file or dependent class&quot;, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultNamespaceHandlerResolver的getHandlerMappings方法"><a href="#4、DefaultNamespaceHandlerResolver的getHandlerMappings方法" class="headerlink" title="4、DefaultNamespaceHandlerResolver的getHandlerMappings方法"></a>4、DefaultNamespaceHandlerResolver的getHandlerMappings方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String, Object&gt; getHandlerMappings() &#123;</span><br><span class="line">    if (this.handlerMappings == null) &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (this.handlerMappings == null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //从&quot;META-INF/spring.handlers&quot;中加载命名空间和Handler的映射</span><br><span class="line">                    Properties mappings =Handler的映射</span><br><span class="line">                            PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader);</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(&quot;Loaded NamespaceHandler mappings: &quot; + mappings);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Map&lt;String, Object&gt; handlerMappings = new ConcurrentHashMap&lt;String, Object&gt;(mappings.size());</span><br><span class="line">                    CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings);</span><br><span class="line">                    this.handlerMappings = handlerMappings;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (IOException ex) &#123;</span><br><span class="line">                    throw new IllegalStateException(</span><br><span class="line">                            &quot;Unable to load NamespaceHandler mappings from location [&quot; + this.handlerMappingsLocation + &quot;]&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.handlerMappings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、NamespaceHandlerSupport的parse方法"><a href="#5、NamespaceHandlerSupport的parse方法" class="headerlink" title="5、NamespaceHandlerSupport的parse方法"></a>5、NamespaceHandlerSupport的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //获取解析器，并解析</span><br><span class="line">    return findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、NamespaceHandlerSupport的findParserForElement方法"><a href="#6、NamespaceHandlerSupport的findParserForElement方法" class="headerlink" title="6、NamespaceHandlerSupport的findParserForElement方法"></a>6、NamespaceHandlerSupport的findParserForElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //元素名 myTag:user 中为 user</span><br><span class="line">    String localName = parserContext.getDelegate().getLocalName(element);</span><br><span class="line">    //获取user的解析器</span><br><span class="line">    BeanDefinitionParser parser = this.parsers.get(localName);</span><br><span class="line">    if (parser == null) &#123;</span><br><span class="line">        parserContext.getReaderContext().fatal(</span><br><span class="line">                &quot;Cannot locate BeanDefinitionParser for element [&quot; + localName + &quot;]&quot;, element);</span><br><span class="line">    &#125;</span><br><span class="line">    return parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、2）AbstractBeanDefinitionParser的parse方法"><a href="#7、接（三、2）AbstractBeanDefinitionParser的parse方法" class="headerlink" title="7、接（三、2）AbstractBeanDefinitionParser的parse方法"></a>7、接（三、2）AbstractBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">p@Override</span><br><span class="line">public final BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //解析bean</span><br><span class="line">    AbstractBeanDefinition definition = parseInternal(element, parserContext);</span><br><span class="line">    if (definition != null &amp;&amp; !parserContext.isNested()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String id = resolveId(element, definition, parserContext);</span><br><span class="line">            if (!StringUtils.hasText(id)) &#123;</span><br><span class="line">                parserContext.getReaderContext().error(</span><br><span class="line">                        &quot;Id is required for element &apos;&quot; + parserContext.getDelegate().getLocalName(element)</span><br><span class="line">                                + &quot;&apos; when used as a top-level tag&quot;, element);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] aliases = null;</span><br><span class="line">            if (shouldParseNameAsAliases()) &#123;</span><br><span class="line">                String name = element.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(name)) &#123;</span><br><span class="line">                    aliases = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, id, aliases);</span><br><span class="line">            registerBeanDefinition(holder, parserContext.getRegistry());</span><br><span class="line">            if (shouldFireEvents()) &#123;</span><br><span class="line">                BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);</span><br><span class="line">                postProcessComponentDefinition(componentDefinition);</span><br><span class="line">                parserContext.registerComponent(componentDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(ex.getMessage(), element);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（三、2）AbstractBeanDefinitionParser的parse方法"><a href="#8、接（三、2）AbstractBeanDefinitionParser的parse方法" class="headerlink" title="8、接（三、2）AbstractBeanDefinitionParser的parse方法"></a>8、接（三、2）AbstractBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">p@Override</span><br><span class="line">public final BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //解析bean</span><br><span class="line">    AbstractBeanDefinition definition = parseInternal(element, parserContext);</span><br><span class="line">    if (definition != null &amp;&amp; !parserContext.isNested()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取beanName</span><br><span class="line">            String id = resolveId(element, definition, parserContext);</span><br><span class="line">            if (!StringUtils.hasText(id)) &#123;</span><br><span class="line">                parserContext.getReaderContext().error(</span><br><span class="line">                        &quot;Id is required for element &apos;&quot; + parserContext.getDelegate().getLocalName(element)</span><br><span class="line">                                + &quot;&apos; when used as a top-level tag&quot;, element);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] aliases = null;</span><br><span class="line">            if (shouldParseNameAsAliases()) &#123;</span><br><span class="line">                String name = element.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(name)) &#123;</span><br><span class="line">                    aliases = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //注册BeanDefinition</span><br><span class="line">            BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, id, aliases);</span><br><span class="line">            registerBeanDefinition(holder, parserContext.getRegistry());</span><br><span class="line">            if (shouldFireEvents()) &#123;</span><br><span class="line">                BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);</span><br><span class="line">                //钩子函数，在解析完自定义bean之后执行</span><br><span class="line">                postProcessComponentDefinition(componentDefinition);</span><br><span class="line">                //通知监听器，自定义bean注册完成事件</span><br><span class="line">                parserContext.registerComponent(componentDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(ex.getMessage(), element);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractSingleBeanDefinitionParser的parseInternal方法"><a href="#9、AbstractSingleBeanDefinitionParser的parseInternal方法" class="headerlink" title="9、AbstractSingleBeanDefinitionParser的parseInternal方法"></a>9、AbstractSingleBeanDefinitionParser的parseInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">    String parentName = getParentName(element);</span><br><span class="line">    if (parentName != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setParentName(parentName);</span><br><span class="line">    &#125;</span><br><span class="line">    //该方法被自定义解析器重写</span><br><span class="line">    Class&lt;?&gt; beanClass = getBeanClass(element);</span><br><span class="line">    if (beanClass != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setBeanClass(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //若没有beanClass，检查自定义解析器是否重写getBeanClassName</span><br><span class="line">        String beanClassName = getBeanClassName(element);</span><br><span class="line">        if (beanClassName != null) &#123;</span><br><span class="line">            builder.getRawBeanDefinition().setBeanClassName(beanClassName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.getRawBeanDefinition().setSource(parserContext.extractSource(element));</span><br><span class="line">    if (parserContext.isNested()) &#123;</span><br><span class="line">        // Inner bean definition must receive same scope as containing bean.</span><br><span class="line">        //若存在外部类，使用外部类的scope</span><br><span class="line">        builder.setScope(parserContext.getContainingBeanDefinition().getScope());</span><br><span class="line">    &#125;</span><br><span class="line">    if (parserContext.isDefaultLazyInit()) &#123;</span><br><span class="line">        // Default-lazy-init applies to custom bean definitions as well.</span><br><span class="line">        //配置延迟加载</span><br><span class="line">        builder.setLazyInit(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //子类重写了该方法</span><br><span class="line">    doParse(element, parserContext, builder);</span><br><span class="line">    return builder.getBeanDefinition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码Transaction</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81Transaction/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/Spring源码Transaction/</id>
    <published>2020-01-16T13:43:36.414Z</published>
    <updated>2018-07-07T15:10:02.538Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;  </span><br><span class="line">&lt;bean id=&quot;txManager&quot;  </span><br><span class="line">        class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;  </span><br><span class="line">        p:dataSource-ref=&quot;dataSource&quot;&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、解析配置文件"><a href="#一、解析配置文件" class="headerlink" title="一、解析配置文件"></a>一、解析配置文件</h3><h4 id="1、TxNamespaceHandler的init方法"><a href="#1、TxNamespaceHandler的init方法" class="headerlink" title="1、TxNamespaceHandler的init方法"></a>1、TxNamespaceHandler的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void init() &#123;</span><br><span class="line">    registerBeanDefinitionParser(&quot;advice&quot;, new TxAdviceBeanDefinitionParser());</span><br><span class="line">    //标签解析器</span><br><span class="line">    registerBeanDefinitionParser(&quot;annotation-driven&quot;, new AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;jta-transaction-manager&quot;, new JtaTransactionManagerBeanDefinitionParser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationDrivenBeanDefinitionParser的parse方法"><a href="#2、AnnotationDrivenBeanDefinitionParser的parse方法" class="headerlink" title="2、AnnotationDrivenBeanDefinitionParser的parse方法"></a>2、AnnotationDrivenBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    registerTransactionalEventListenerFactory(parserContext);</span><br><span class="line">    String mode = element.getAttribute(&quot;mode&quot;);</span><br><span class="line">    //使用aspectj方式进行事务切入</span><br><span class="line">    if (&quot;aspectj&quot;.equals(mode)) &#123;</span><br><span class="line">        // mode=&quot;aspectj&quot;</span><br><span class="line">        registerTransactionAspect(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用动态代理方式进行事务切入</span><br><span class="line">    else &#123;</span><br><span class="line">        // mode=&quot;proxy&quot;</span><br><span class="line">        AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationDrivenBeanDefinitionParser的parse方法-1"><a href="#2、AnnotationDrivenBeanDefinitionParser的parse方法-1" class="headerlink" title="2、AnnotationDrivenBeanDefinitionParser的parse方法"></a>2、AnnotationDrivenBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册事务监听器工厂TransactionalEventListenerFactory</span><br><span class="line">    registerTransactionalEventListenerFactory(parserContext);</span><br><span class="line">    String mode = element.getAttribute(&quot;mode&quot;);</span><br><span class="line">    //使用aspectj方式进行事务切入</span><br><span class="line">    if (&quot;aspectj&quot;.equals(mode)) &#123;</span><br><span class="line">        // mode=&quot;aspectj&quot;</span><br><span class="line">        registerTransactionAspect(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用动态代理方式进行事务切入</span><br><span class="line">    else &#123;</span><br><span class="line">        // mode=&quot;proxy&quot;</span><br><span class="line">        AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AopAutoProxyConfigurer的configureAutoProxyCreator方法"><a href="#3、AopAutoProxyConfigurer的configureAutoProxyCreator方法" class="headerlink" title="3、AopAutoProxyConfigurer的configureAutoProxyCreator方法"></a>3、AopAutoProxyConfigurer的configureAutoProxyCreator方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public static void configureAutoProxyCreator(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册InfrastructureAdvisorAutoProxyCreator的bean</span><br><span class="line">    AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line"></span><br><span class="line">    String txAdvisorBeanName = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME;</span><br><span class="line">    if (!parserContext.getRegistry().containsBeanDefinition(txAdvisorBeanName)) &#123;</span><br><span class="line">        Object eleSource = parserContext.extractSource(element);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionAttributeSource definition.</span><br><span class="line">        //创建TransactionAttributeSource的bean</span><br><span class="line">        RootBeanDefinition sourceDef = new RootBeanDefinition(</span><br><span class="line">                &quot;org.springframework.transaction.annotation.AnnotationTransactionAttributeSource&quot;);</span><br><span class="line">        sourceDef.setSource(eleSource);</span><br><span class="line">        //基础设施</span><br><span class="line">        sourceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //注册sourceDef</span><br><span class="line">        String sourceName = parserContext.getReaderContext().registerWithGeneratedName(sourceDef);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionInterceptor definition.</span><br><span class="line">        //创建TransactionInterceptor的bean</span><br><span class="line">        RootBeanDefinition interceptorDef = new RootBeanDefinition(TransactionInterceptor.class);</span><br><span class="line">        interceptorDef.setSource(eleSource);</span><br><span class="line">        interceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //往interceptorDef中注入TransactionManager</span><br><span class="line">        registerTransactionManager(element, interceptorDef);</span><br><span class="line">        //注入sourceDef</span><br><span class="line">        interceptorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">        //注册interceptorDef</span><br><span class="line">        String interceptorName = parserContext.getReaderContext().registerWithGeneratedName(interceptorDef);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionAttributeSourceAdvisor definition.</span><br><span class="line">        //创建BeanFactoryTransactionAttributeSourceAdvisor的bean，通知器</span><br><span class="line">        RootBeanDefinition advisorDef = new RootBeanDefinition(BeanFactoryTransactionAttributeSourceAdvisor.class);</span><br><span class="line">        advisorDef.setSource(eleSource);</span><br><span class="line">        advisorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //注入TransactionAttributeSource的bean</span><br><span class="line">        advisorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">        //注入TransactionInterceptor的bean</span><br><span class="line">        advisorDef.getPropertyValues().add(&quot;adviceBeanName&quot;, interceptorName);</span><br><span class="line">        if (element.hasAttribute(&quot;order&quot;)) &#123;</span><br><span class="line">            advisorDef.getPropertyValues().add(&quot;order&quot;, element.getAttribute(&quot;order&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        //注册advisorDef</span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(txAdvisorBeanName, advisorDef);</span><br><span class="line">        //注册组件并广播</span><br><span class="line">        CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), eleSource);</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName));</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName));</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, txAdvisorBeanName));</span><br><span class="line">        parserContext.registerComponent(compositeDef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"><a href="#4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法" class="headerlink" title="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"></a>4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">        ParserContext parserContext, Element sourceElement) &#123;</span><br><span class="line">    //注册AspectJAwareAdvisorAutoProxyCreator的bean</span><br><span class="line">    BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">            parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">    //设置使用JDK动态代理或CGLIB动态代理，设置是否支持内部调用</span><br><span class="line">    useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">    //注册组件并广播</span><br><span class="line">    registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、创建代理对象"><a href="#二、创建代理对象" class="headerlink" title="二、创建代理对象"></a>二、创建代理对象</h3><h4 id="1、AbstractAutoProxyCreator的postProcessAfterInitialization方法"><a href="#1、AbstractAutoProxyCreator的postProcessAfterInitialization方法" class="headerlink" title="1、AbstractAutoProxyCreator的postProcessAfterInitialization方法"></a>1、AbstractAutoProxyCreator的postProcessAfterInitialization方法</h4><p>InfrastructureAdvisorAutoProxyCreator的父类AbstractAutoProxyCreator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    if (bean != null) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        //检测循环依赖</span><br><span class="line">        if (!this.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">            //创建代理对象</span><br><span class="line">            return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AbstractAutoProxyCreator的wrapIfNecessary方法"><a href="#2、AbstractAutoProxyCreator的wrapIfNecessary方法" class="headerlink" title="2、AbstractAutoProxyCreator的wrapIfNecessary方法"></a>2、AbstractAutoProxyCreator的wrapIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">    //已经处理过</span><br><span class="line">    if (StringUtils.hasLength(beanName) &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //基础设施类不创建代理</span><br><span class="line">    if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create proxy if we have advice.</span><br><span class="line">    //获取增强</span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span><br><span class="line">    if (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        //创建代理对象</span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">                bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">        this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        return proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法"><a href="#3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法" class="headerlink" title="3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法"></a>3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法</h4><p>覆盖该方法，只取基础设施类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean isEligibleAdvisorBean(String beanName) &#123;</span><br><span class="line">    return (this.beanFactory != null &amp;&amp; this.beanFactory.containsBeanDefinition(beanName) &amp;&amp;</span><br><span class="line">            this.beanFactory.getBeanDefinition(beanName).getRole() == BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、AopUtils的canApply方法"><a href="#4、AopUtils的canApply方法" class="headerlink" title="4、AopUtils的canApply方法"></a>4、AopUtils的canApply方法</h4><p>中间过程与AOP相同，此处的Pointcut为TransactionAttributeSourcePointcut<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public static boolean canApply(Pointcut pc, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">    Assert.notNull(pc, &quot;Pointcut must not be null&quot;);</span><br><span class="line">    if (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回自身</span><br><span class="line">    MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line">    if (methodMatcher == MethodMatcher.TRUE) &#123;</span><br><span class="line">        // No need to iterate the methods if we&apos;re matching any method anyway...</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null;</span><br><span class="line">    if (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">        introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; classes = new LinkedHashSet&lt;&gt;();</span><br><span class="line">    //获取用户定义的类</span><br><span class="line">    if (!Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">        classes.add(ClassUtils.getUserClass(targetClass));</span><br><span class="line">    &#125;</span><br><span class="line">    classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line"></span><br><span class="line">    for (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">        Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line">        //有一个方法匹配,即认为匹配</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if (introductionAwareMethodMatcher != null ?</span><br><span class="line">                    introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :</span><br><span class="line">                    methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、TransactionAttributeSourcePointcut的matches方法"><a href="#5、TransactionAttributeSourcePointcut的matches方法" class="headerlink" title="5、TransactionAttributeSourcePointcut的matches方法"></a>5、TransactionAttributeSourcePointcut的matches方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean matches(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    //已经是该代理类</span><br><span class="line">    if (targetClass != null &amp;&amp; TransactionalProxy.class.isAssignableFrom(targetClass)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取AnnotationTransactionAttributeSource的bean</span><br><span class="line">    TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">    return (tas == null || tas.getTransactionAttribute(method, targetClass) != null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、实例化AnnotationTransactionAttributeSource"><a href="#6、实例化AnnotationTransactionAttributeSource" class="headerlink" title="6、实例化AnnotationTransactionAttributeSource"></a>6、实例化AnnotationTransactionAttributeSource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationTransactionAttributeSource() &#123;</span><br><span class="line">    this(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) &#123;</span><br><span class="line">    this.publicMethodsOnly = publicMethodsOnly;</span><br><span class="line">    this.annotationParsers = new LinkedHashSet&lt;&gt;(2);</span><br><span class="line">    //@Transactional注解解析器</span><br><span class="line">    this.annotationParsers.add(new SpringTransactionAnnotationParser());</span><br><span class="line">    if (jta12Present) &#123;</span><br><span class="line">        //javax.transaction.Transactional注解</span><br><span class="line">        this.annotationParsers.add(new JtaTransactionAnnotationParser());</span><br><span class="line">    &#125;</span><br><span class="line">    if (ejb3Present) &#123;</span><br><span class="line">        //javax.ejb.TransactionAttribute注解</span><br><span class="line">        this.annotationParsers.add(new Ejb3TransactionAnnotationParser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法"><a href="#7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法" class="headerlink" title="7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法"></a>7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法</h4><p>AnnotationTransactionAttributeSource的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    //Object的方法不用代理</span><br><span class="line">    if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // First, see if we have a cached value.</span><br><span class="line">    Object cacheKey = getCacheKey(method, targetClass);</span><br><span class="line">    Object cached = this.attributeCache.get(cacheKey);</span><br><span class="line">    if (cached != null) &#123;</span><br><span class="line">        // Value will either be canonical value indicating there is no transaction attribute,</span><br><span class="line">        // or an actual transaction attribute.</span><br><span class="line">        if (cached == NULL_TRANSACTION_ATTRIBUTE) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return (TransactionAttribute) cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // We need to work it out.</span><br><span class="line">        //提取事务属性</span><br><span class="line">        TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);</span><br><span class="line">        // Put it in the cache.</span><br><span class="line">        //添加缓存</span><br><span class="line">        if (txAttr == null) &#123;</span><br><span class="line">            this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //获取方法标识，默认类名加方法名</span><br><span class="line">            String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass);</span><br><span class="line">            if (txAttr instanceof DefaultTransactionAttribute) &#123;</span><br><span class="line">                ((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Adding transactional method &apos;&quot; + methodIdentification + &quot;&apos; with attribute: &quot; + txAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            this.attributeCache.put(cacheKey, txAttr);</span><br><span class="line">        &#125;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法"><a href="#8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法" class="headerlink" title="8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法"></a>8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    // Don&apos;t allow no-public methods as required.</span><br><span class="line">    //只有public方法可创建事务</span><br><span class="line">    if (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // The method may be on an interface, but we need attributes from the target class.</span><br><span class="line">    // If the target class is null, the method will be unchanged.</span><br><span class="line">    //获取实现类的该方法</span><br><span class="line">    Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);</span><br><span class="line"></span><br><span class="line">    // First try is the method in the target class.</span><br><span class="line">    //查找方法上的事务注解属性</span><br><span class="line">    TransactionAttribute txAttr = findTransactionAttribute(specificMethod);</span><br><span class="line">    if (txAttr != null) &#123;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Second try is the transaction attribute on the target class.</span><br><span class="line">    //查找方法所在类上的事务注解属性</span><br><span class="line">    txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());</span><br><span class="line">    if (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line">    //存在接口</span><br><span class="line">    if (specificMethod != method) &#123;</span><br><span class="line">        // Fallback is to look at the original method.</span><br><span class="line">        //查找接口方法</span><br><span class="line">        txAttr = findTransactionAttribute(method);</span><br><span class="line">        if (txAttr != null) &#123;</span><br><span class="line">            return txAttr;</span><br><span class="line">        &#125;</span><br><span class="line">        // Last fallback is the class of the original method.</span><br><span class="line">        //查找接口</span><br><span class="line">        txAttr = findTransactionAttribute(method.getDeclaringClass());</span><br><span class="line">        if (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">            return txAttr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AnnotationTransactionAttributeSource的findTransactionAttribute方法"><a href="#9、AnnotationTransactionAttributeSource的findTransactionAttribute方法" class="headerlink" title="9、AnnotationTransactionAttributeSource的findTransactionAttribute方法"></a>9、AnnotationTransactionAttributeSource的findTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute findTransactionAttribute(Method method) &#123;</span><br><span class="line">    return determineTransactionAttribute(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法"><a href="#10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法" class="headerlink" title="10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法"></a>10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) &#123;</span><br><span class="line">    for (TransactionAnnotationParser annotationParser : this.annotationParsers) &#123;</span><br><span class="line">        //解析注解</span><br><span class="line">        TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae);</span><br><span class="line">        if (attr != null) &#123;</span><br><span class="line">            return attr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法"><a href="#11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法" class="headerlink" title="11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法"></a>11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public TransactionAttribute parseTransactionAnnotation(AnnotatedElement ae) &#123;</span><br><span class="line">    //获取方法、方法类、父类的注解和元注解属性</span><br><span class="line">    AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(</span><br><span class="line">            ae, Transactional.class, false, false);</span><br><span class="line">    if (attributes != null) &#123;</span><br><span class="line">        //解析注解属性</span><br><span class="line">        return parseTransactionAnnotation(attributes);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">protected TransactionAttribute parseTransactionAnnotation(AnnotationAttributes attributes) &#123;</span><br><span class="line">    RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute();</span><br><span class="line">    //解析propagation</span><br><span class="line">    Propagation propagation = attributes.getEnum(&quot;propagation&quot;);</span><br><span class="line">    rbta.setPropagationBehavior(propagation.value());</span><br><span class="line">    //解析isolation</span><br><span class="line">    Isolation isolation = attributes.getEnum(&quot;isolation&quot;);</span><br><span class="line">    rbta.setIsolationLevel(isolation.value());</span><br><span class="line">    //解析timeout</span><br><span class="line">    rbta.setTimeout(attributes.getNumber(&quot;timeout&quot;).intValue());</span><br><span class="line">    //解析readOnly</span><br><span class="line">    rbta.setReadOnly(attributes.getBoolean(&quot;readOnly&quot;));</span><br><span class="line">    //解析value</span><br><span class="line">    rbta.setQualifier(attributes.getString(&quot;value&quot;));</span><br><span class="line">    ArrayList&lt;RollbackRuleAttribute&gt; rollBackRules = new ArrayList&lt;&gt;();</span><br><span class="line">    //解析rollbackFor</span><br><span class="line">    Class&lt;?&gt;[] rbf = attributes.getClassArray(&quot;rollbackFor&quot;);</span><br><span class="line">    for (Class&lt;?&gt; rbRule : rbf) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = new RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析rollbackForClassName</span><br><span class="line">    String[] rbfc = attributes.getStringArray(&quot;rollbackForClassName&quot;);</span><br><span class="line">    for (String rbRule : rbfc) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = new RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析noRollbackFor</span><br><span class="line">    Class&lt;?&gt;[] nrbf = attributes.getClassArray(&quot;noRollbackFor&quot;);</span><br><span class="line">    for (Class&lt;?&gt; rbRule : nrbf) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = new NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析noRollbackForClassName</span><br><span class="line">    String[] nrbfc = attributes.getStringArray(&quot;noRollbackForClassName&quot;);</span><br><span class="line">    for (String rbRule : nrbfc) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = new NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    rbta.getRollbackRules().addAll(rollBackRules);</span><br><span class="line">    return rbta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、事务增强器"><a href="#三、事务增强器" class="headerlink" title="三、事务增强器"></a>三、事务增强器</h3><h4 id="1、TransactionInterceptor的invoke方法"><a href="#1、TransactionInterceptor的invoke方法" class="headerlink" title="1、TransactionInterceptor的invoke方法"></a>1、TransactionInterceptor的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Object invoke(final MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">    // Work out the target class: may be &#123;@code null&#125;.</span><br><span class="line">    // The TransactionAttributeSource should be passed the target class</span><br><span class="line">    // as well as the method, which may be from an interface.</span><br><span class="line">    //获取被代理的类</span><br><span class="line">    Class&lt;?&gt; targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line"></span><br><span class="line">    // Adapt to TransactionAspectSupport&apos;s invokeWithinTransaction...</span><br><span class="line">    //执行事务及方法</span><br><span class="line">    return invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、TransactionInterceptor的invokeWithinTransaction方法"><a href="#2、TransactionInterceptor的invokeWithinTransaction方法" class="headerlink" title="2、TransactionInterceptor的invokeWithinTransaction方法"></a>2、TransactionInterceptor的invokeWithinTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected Object invokeWithinTransaction(Method method, @Nullable Class&lt;?&gt; targetClass,</span><br><span class="line">        final InvocationCallback invocation) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">    // If the transaction attribute is null, the method is non-transactional.</span><br><span class="line">    TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">    //获取事务属性</span><br><span class="line">    final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null);</span><br><span class="line">    //获取注册的事务管理器,DataSourceTransactionManager</span><br><span class="line">    final PlatformTransactionManager tm = determineTransactionManager(txAttr);</span><br><span class="line">    //获取方法唯一标识，类名加方法名</span><br><span class="line">    final String joinpointIdentification = methodIdentification(method, targetClass, txAttr);</span><br><span class="line">    //声明式事务处理</span><br><span class="line">    if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line">        // Standard transaction demarcation with getTransaction and commit/rollback calls.</span><br><span class="line">        //创建TransactionInfo</span><br><span class="line">        TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class="line">        Object retVal = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // This is an around advice: Invoke the next interceptor in the chain.</span><br><span class="line">            // This will normally result in a target object being invoked.</span><br><span class="line">            //执行被增强方法</span><br><span class="line">            retVal = invocation.proceedWithInvocation();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            // target invocation exception</span><br><span class="line">            //异常回滚</span><br><span class="line">            completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            //清除本事务信息，并恢复上一个事务信息</span><br><span class="line">            cleanupTransactionInfo(txInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        commitTransactionAfterReturning(txInfo);</span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    //编程式事务处理</span><br><span class="line">    else &#123;</span><br><span class="line">        final ThrowableHolder throwableHolder = new ThrowableHolder();</span><br><span class="line"></span><br><span class="line">        // It&apos;s a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span><br><span class="line">        try &#123;</span><br><span class="line">            Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -&gt; &#123;</span><br><span class="line">                //事务信息注册到本地线程</span><br><span class="line">                TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">                try &#123;</span><br><span class="line">                    return invocation.proceedWithInvocation();</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Throwable ex) &#123;</span><br><span class="line">                    if (txAttr.rollbackOn(ex)) &#123;</span><br><span class="line">                        // A RuntimeException: will lead to a rollback.</span><br><span class="line">                        if (ex instanceof RuntimeException) &#123;</span><br><span class="line">                            throw (RuntimeException) ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            throw new ThrowableHolderException(ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        // A normal return value: will lead to a commit.</span><br><span class="line">                        throwableHolder.throwable = ex;</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    cleanupTransactionInfo(txInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // Check result state: It might indicate a Throwable to rethrow.</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                throw throwableHolder.throwable;</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ThrowableHolderException ex) &#123;</span><br><span class="line">            throw ex.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TransactionSystemException ex2) &#123;</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, throwableHolder.throwable);</span><br><span class="line">                ex2.initApplicationException(throwableHolder.throwable);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex2;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex2) &#123;</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, throwableHolder.throwable);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、TransactionInterceptor的createTransactionIfNecessary方法"><a href="#3、TransactionInterceptor的createTransactionIfNecessary方法" class="headerlink" title="3、TransactionInterceptor的createTransactionIfNecessary方法"></a>3、TransactionInterceptor的createTransactionIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="line">protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,</span><br><span class="line">        @Nullable TransactionAttribute txAttr, final String joinpointIdentification) &#123;</span><br><span class="line"></span><br><span class="line">    // If no name specified, apply method identification as transaction name.</span><br><span class="line">    if (txAttr != null &amp;&amp; txAttr.getName() == null) &#123;</span><br><span class="line">        txAttr = new DelegatingTransactionAttribute(txAttr) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String getName() &#123;</span><br><span class="line">                return joinpointIdentification;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransactionStatus status = null;</span><br><span class="line">    if (txAttr != null) &#123;</span><br><span class="line">        if (tm != null) &#123;</span><br><span class="line">            //获取TransactionStatus</span><br><span class="line">            status = tm.getTransaction(txAttr);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Skipping transactional joinpoint [&quot; + joinpointIdentification +</span><br><span class="line">                        &quot;] because no transaction manager has been configured&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //为TransactionStatus创建一个TransactionInfo,并存入线程变量，并挂起老的TransactionStatus</span><br><span class="line">    return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractPlatformTransactionManager的getTransaction方法"><a href="#4、AbstractPlatformTransactionManager的getTransaction方法" class="headerlink" title="4、AbstractPlatformTransactionManager的getTransaction方法"></a>4、AbstractPlatformTransactionManager的getTransaction方法</h4><p>DataSourceTransactionManager的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException &#123;</span><br><span class="line">    //获取当前线程的事务</span><br><span class="line">    Object transaction = doGetTransaction();</span><br><span class="line"></span><br><span class="line">    // Cache debug flag to avoid repeated checks.</span><br><span class="line">    boolean debugEnabled = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">    if (definition == null) &#123;</span><br><span class="line">        // Use defaults if no transaction definition given.</span><br><span class="line">        definition = new DefaultTransactionDefinition();</span><br><span class="line">    &#125;</span><br><span class="line">    //是否存在事务，通过ConnectionHolder的transactionActive属性判断</span><br><span class="line">    if (isExistingTransaction(transaction)) &#123;</span><br><span class="line">        // Existing transaction found -&gt; check propagation behavior to find out how to behave.</span><br><span class="line">        //处理新事务</span><br><span class="line">        return handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check definition settings for new transaction.</span><br><span class="line">    //事务超时属性验证</span><br><span class="line">    if (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">        throw new InvalidTimeoutException(&quot;Invalid transaction timeout&quot;, definition.getTimeout());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span><br><span class="line">    //属性值mandatory，要求存在事务</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;No existing transaction found for transaction marked with propagation &apos;mandatory&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //需要新建事务</span><br><span class="line">    else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        //空挂起</span><br><span class="line">        SuspendedResourcesHolder suspendedResources = suspend(null);</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Creating new transaction with name [&quot; + definition.getName() + &quot;]: &quot; + definition);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            //是否能够创建新事务</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            //创建新TransactionStatus</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">            //设置事务属性</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            //绑定事务到当前线程</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            resume(null, suspendedResources);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建空事务</span><br><span class="line">    else &#123;</span><br><span class="line">        // Create &quot;empty&quot; transaction: no actual transaction, but potentially synchronization.</span><br><span class="line">        if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(&quot;Custom isolation level specified but no actual transaction initiated; &quot; +</span><br><span class="line">                    &quot;isolation level will effectively be ignored: &quot; + definition);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">        return prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、DataSourceTransactionManager的doGetTransaction方法"><a href="#5、DataSourceTransactionManager的doGetTransaction方法" class="headerlink" title="5、DataSourceTransactionManager的doGetTransaction方法"></a>5、DataSourceTransactionManager的doGetTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object doGetTransaction() &#123;</span><br><span class="line">    //创建事务</span><br><span class="line">    DataSourceTransactionObject txObject = new DataSourceTransactionObject();</span><br><span class="line">    //设置是否允许保存点</span><br><span class="line">    txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line">    //获取事务数据库连接容器，不存在返回null</span><br><span class="line">    ConnectionHolder conHolder =</span><br><span class="line">            (ConnectionHolder) TransactionSynchronizationManager.getResource(obtainDataSource());</span><br><span class="line">    //事务中设置连接容器，false表示旧，不存在返回null事务</span><br><span class="line">    txObject.setConnectionHolder(conHolder, false);</span><br><span class="line">    return txObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（三、4）DataSourceTransactionManager的doBegin方法"><a href="#6、接（三、4）DataSourceTransactionManager的doBegin方法" class="headerlink" title="6、接（三、4）DataSourceTransactionManager的doBegin方法"></a>6、接（三、4）DataSourceTransactionManager的doBegin方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doBegin(Object transaction, TransactionDefinition definition) &#123;</span><br><span class="line">    //事务</span><br><span class="line">    DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line">    Connection con = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //事务中未设置连接容器</span><br><span class="line">        if (!txObject.hasConnectionHolder() ||</span><br><span class="line">                txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">            //从数据源中获取连接</span><br><span class="line">            Connection newCon = obtainDataSource().getConnection();</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Acquired Connection [&quot; + newCon + &quot;] for JDBC transaction&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置连接容器</span><br><span class="line">            txObject.setConnectionHolder(new ConnectionHolder(newCon), true);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置连接容器已被事务获取</span><br><span class="line">        txObject.getConnectionHolder().setSynchronizedWithTransaction(true);</span><br><span class="line">        con = txObject.getConnectionHolder().getConnection();</span><br><span class="line">        //设置只读、隔离级别属性</span><br><span class="line">        Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class="line">        //设置隔离级别</span><br><span class="line">        txObject.setPreviousIsolationLevel(previousIsolationLevel);</span><br><span class="line"></span><br><span class="line">        // Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span><br><span class="line">        // so we don&apos;t want to do it unnecessarily (for example if we&apos;ve explicitly</span><br><span class="line">        // configured the connection pool to set it already).</span><br><span class="line">        //改变自动提交</span><br><span class="line">        if (con.getAutoCommit()) &#123;</span><br><span class="line">            txObject.setMustRestoreAutoCommit(true);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Switching JDBC Connection [&quot; + con + &quot;] to manual commit&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            con.setAutoCommit(false);</span><br><span class="line">        &#125;</span><br><span class="line">        //待子类实现</span><br><span class="line">        prepareTransactionalConnection(con, definition);</span><br><span class="line">        //设置当前连接存在事务</span><br><span class="line">        txObject.getConnectionHolder().setTransactionActive(true);</span><br><span class="line">        //设置超时时间</span><br><span class="line">        int timeout = determineTimeout(definition);</span><br><span class="line">        if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">            txObject.getConnectionHolder().setTimeoutInSeconds(timeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Bind the connection holder to the thread.</span><br><span class="line">        //新事务，连接容器绑定到当前线程</span><br><span class="line">        if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">            TransactionSynchronizationManager.bindResource(obtainDataSource(), txObject.getConnectionHolder());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">            DataSourceUtils.releaseConnection(con, obtainDataSource());</span><br><span class="line">            txObject.setConnectionHolder(null, false);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new CannotCreateTransactionException(&quot;Could not open JDBC Connection for transaction&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法"><a href="#7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法" class="headerlink" title="7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法"></a>7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) &#123;</span><br><span class="line">    //新的事务</span><br><span class="line">    if (status.isNewSynchronization()) &#123;</span><br><span class="line">        //事务绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());</span><br><span class="line">        //隔离级别绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(</span><br><span class="line">                definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT ?</span><br><span class="line">                        definition.getIsolationLevel() : null);</span><br><span class="line">        //只读属性绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionReadOnly(definition.isReadOnly());</span><br><span class="line">        //事务名称绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionName(definition.getName());</span><br><span class="line">        //回调函数集合绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.initSynchronization();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法"><a href="#8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法" class="headerlink" title="8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法"></a>8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">private TransactionStatus handleExistingTransaction(</span><br><span class="line">        TransactionDefinition definition, Object transaction, boolean debugEnabled)</span><br><span class="line">        throws TransactionException &#123;</span><br><span class="line">    //以非事务方式执行，如果当前存在事务，则抛出异常</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Existing transaction found for transaction marked with propagation &apos;never&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Suspending current transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //挂起当前事务</span><br><span class="line">        Object suspendedResources = suspend(transaction);</span><br><span class="line">        boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">        //创建空事务</span><br><span class="line">        return prepareTransactionStatus(</span><br><span class="line">                definition, null, false, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">    &#125;</span><br><span class="line">    //新建事务，如果当前存在事务，把当前事务挂起</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Suspending current transaction, creating new transaction with name [&quot; +</span><br><span class="line">                    definition.getName() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //挂起当前事务</span><br><span class="line">        SuspendedResourcesHolder suspendedResources = suspend(transaction);</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建新事务</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error beginEx) &#123;</span><br><span class="line">            resumeAfterBeginException(transaction, suspendedResources, beginEx);</span><br><span class="line">            throw beginEx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //嵌套事务</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        //是否允许嵌套事务</span><br><span class="line">        if (!isNestedTransactionAllowed()) &#123;</span><br><span class="line">            throw new NestedTransactionNotSupportedException(</span><br><span class="line">                    &quot;Transaction manager does not allow nested transactions by default - &quot; +</span><br><span class="line">                    &quot;specify &apos;nestedTransactionAllowed&apos; property with value &apos;true&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Creating nested transaction with name [&quot; + definition.getName() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //嵌套事务使用保存点</span><br><span class="line">        if (useSavepointForNestedTransaction()) &#123;</span><br><span class="line">            // Create savepoint within existing Spring-managed transaction,</span><br><span class="line">            // through the SavepointManager API implemented by TransactionStatus.</span><br><span class="line">            // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span><br><span class="line">            //用原来的transaction创建新的TransactionStatus</span><br><span class="line">            DefaultTransactionStatus status =</span><br><span class="line">                    prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null);</span><br><span class="line">            //创建保存点</span><br><span class="line">            status.createAndHoldSavepoint();</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //不能使用的保存点，如JTA，创建新事务</span><br><span class="line">            // Nested transaction through nested begin and commit/rollback calls.</span><br><span class="line">            // Usually only for JTA: Spring synchronization might get activated here</span><br><span class="line">            // in case of a pre-existing JTA transaction.</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, null);</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span><br><span class="line">    if (debugEnabled) &#123;</span><br><span class="line">        logger.debug(&quot;Participating in existing transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (isValidateExistingTransaction()) &#123;</span><br><span class="line">        if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123;</span><br><span class="line">            Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">            if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) &#123;</span><br><span class="line">                Constants isoConstants = DefaultTransactionDefinition.constants;</span><br><span class="line">                throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">                        definition + &quot;] specifies isolation level which is incompatible with existing transaction: &quot; +</span><br><span class="line">                        (currentIsolationLevel != null ?</span><br><span class="line">                                isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :</span><br><span class="line">                                &quot;(unknown)&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!definition.isReadOnly()) &#123;</span><br><span class="line">            if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span><br><span class="line">                throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">                        definition + &quot;] is not marked as read-only but existing transaction is&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建空事务</span><br><span class="line">    boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">    return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractPlatformTransactionManager的suspend方法"><a href="#9、AbstractPlatformTransactionManager的suspend方法" class="headerlink" title="9、AbstractPlatformTransactionManager的suspend方法"></a>9、AbstractPlatformTransactionManager的suspend方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected final SuspendedResourcesHolder suspend(@Nullable Object transaction) throws TransactionException &#123;</span><br><span class="line">    //事务信息已经绑定到当前线程</span><br><span class="line">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">        //事务回调函数</span><br><span class="line">        List&lt;TransactionSynchronization&gt; suspendedSynchronizations = doSuspendSynchronization();</span><br><span class="line">        try &#123;</span><br><span class="line">            Object suspendedResources = null;</span><br><span class="line">            if (transaction != null) &#123;</span><br><span class="line">                //挂起事务，ConnectionHolder取消绑定当前线程，并返回</span><br><span class="line">                suspendedResources = doSuspend(transaction);</span><br><span class="line">            &#125;</span><br><span class="line">            //清除当前线程绑定的事务信息</span><br><span class="line">            String name = TransactionSynchronizationManager.getCurrentTransactionName();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionName(null);</span><br><span class="line">            boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionReadOnly(false);</span><br><span class="line">            Integer isolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(null);</span><br><span class="line">            boolean wasActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line">            TransactionSynchronizationManager.setActualTransactionActive(false);</span><br><span class="line">            //创建挂起事务信息</span><br><span class="line">            return new SuspendedResourcesHolder(</span><br><span class="line">                    suspendedResources, suspendedSynchronizations, name, readOnly, isolationLevel, wasActive);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            // doSuspend failed - original transaction is still active...</span><br><span class="line">            //挂起失败，恢复当前事务</span><br><span class="line">            doResumeSynchronization(suspendedSynchronizations);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (transaction != null) &#123;</span><br><span class="line">        // Transaction active but no synchronization active.</span><br><span class="line">        //挂起事务</span><br><span class="line">        Object suspendedResources = doSuspend(transaction);</span><br><span class="line">        //创建挂起事务信息</span><br><span class="line">        return new SuspendedResourcesHolder(suspendedResources);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Neither transaction nor synchronization active.</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法"><a href="#10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法" class="headerlink" title="10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法"></a>10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) &#123;</span><br><span class="line">    //存在事务</span><br><span class="line">    if (txInfo != null &amp;&amp; txInfo.getTransactionStatus() != null) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() +</span><br><span class="line">                    &quot;] after exception: &quot; + ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //捕获到须回滚的异常</span><br><span class="line">        if (txInfo.transactionAttribute != null &amp;&amp; txInfo.transactionAttribute.rollbackOn(ex)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //回滚</span><br><span class="line">                txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (TransactionSystemException ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">                ex2.initApplicationException(ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //捕获到不须回滚的异常</span><br><span class="line">        else &#123;</span><br><span class="line">            // We don&apos;t roll back on this exception.</span><br><span class="line">            // Will still roll back if TransactionStatus.isRollbackOnly() is true.</span><br><span class="line">            try &#123;</span><br><span class="line">                //提交事务，任然有可能回滚TransactionStatus.isRollbackOnly()</span><br><span class="line">                txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (TransactionSystemException ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">                ex2.initApplicationException(ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、AbstractPlatformTransactionManager的rollback方法"><a href="#11、AbstractPlatformTransactionManager的rollback方法" class="headerlink" title="11、AbstractPlatformTransactionManager的rollback方法"></a>11、AbstractPlatformTransactionManager的rollback方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void rollback(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    //已被提交或回滚</span><br><span class="line">    if (status.isCompleted()) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">    //回滚</span><br><span class="line">    processRollback(defStatus, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractPlatformTransactionManager的processRollback方法"><a href="#12、AbstractPlatformTransactionManager的processRollback方法" class="headerlink" title="12、AbstractPlatformTransactionManager的processRollback方法"></a>12、AbstractPlatformTransactionManager的processRollback方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">private void processRollback(DefaultTransactionStatus status, boolean unexpected) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean unexpectedRollback = unexpected;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //调用回调函数的beforeCompletion方法</span><br><span class="line">            triggerBeforeCompletion(status);</span><br><span class="line"></span><br><span class="line">            if (status.hasSavepoint()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Rolling back transaction to savepoint&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //回滚到保存点</span><br><span class="line">                status.rollbackToHeldSavepoint();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (status.isNewTransaction()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Initiating transaction rollback&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //回滚</span><br><span class="line">                doRollback(status);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // Participating in larger transaction</span><br><span class="line">                //全局事务的部份</span><br><span class="line">                if (status.hasTransaction()) &#123;</span><br><span class="line">                    //TransactionStatus中回滚属性设置为true,设置全局事务回滚</span><br><span class="line">                    if (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line">                        if (status.isDebug()) &#123;</span><br><span class="line">                            logger.debug(&quot;Participating transaction failed - marking existing transaction as rollback-only&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        //设置transaction中回滚属性为true</span><br><span class="line">                        doSetRollbackOnly(status);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (status.isDebug()) &#123;</span><br><span class="line">                            logger.debug(&quot;Participating transaction failed - letting transaction originator decide on rollback&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    //打印错误日志</span><br><span class="line">                    logger.debug(&quot;Should roll back transaction but cannot - no transaction available&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                // Unexpected rollback only matters here if we&apos;re asked to fail early</span><br><span class="line">                if (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                    unexpectedRollback = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        //回调函数的afterCompletion方法</span><br><span class="line">        triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"></span><br><span class="line">        // Raise UnexpectedRollbackException if we had a global rollback-only marker</span><br><span class="line">        if (unexpectedRollback) &#123;</span><br><span class="line">            throw new UnexpectedRollbackException(</span><br><span class="line">                    &quot;Transaction rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //清空当前事务，并恢复挂起的事务</span><br><span class="line">        cleanupAfterCompletion(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法"><a href="#13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法" class="headerlink" title="13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法"></a>13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) &#123;</span><br><span class="line">    if (txInfo != null &amp;&amp; txInfo.getTransactionStatus() != null) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、AbstractPlatformTransactionManager的commit方法"><a href="#14、AbstractPlatformTransactionManager的commit方法" class="headerlink" title="14、AbstractPlatformTransactionManager的commit方法"></a>14、AbstractPlatformTransactionManager的commit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void commit(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    //已提交或回滚</span><br><span class="line">    if (status.isCompleted()) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">    //TransactionStatus中回滚属性设置为true</span><br><span class="line">    if (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line">        if (defStatus.isDebug()) &#123;</span><br><span class="line">            logger.debug(&quot;Transactional code has requested rollback&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //回滚事务</span><br><span class="line">        processRollback(defStatus, false);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //Transaction中回滚属性设置为true</span><br><span class="line">    if (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line">        if (defStatus.isDebug()) &#123;</span><br><span class="line">            logger.debug(&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        processRollback(defStatus, true);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //提交事务</span><br><span class="line">    processCommit(defStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AbstractPlatformTransactionManager的processCommit方法"><a href="#15、AbstractPlatformTransactionManager的processCommit方法" class="headerlink" title="15、AbstractPlatformTransactionManager的processCommit方法"></a>15、AbstractPlatformTransactionManager的processCommit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">private void processCommit(DefaultTransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean beforeCompletionInvoked = false;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            boolean unexpectedRollback = false;</span><br><span class="line">            //待子类覆盖</span><br><span class="line">            prepareForCommit(status);</span><br><span class="line">            //调用回调函数的beforeCommit方法</span><br><span class="line">            triggerBeforeCommit(status);</span><br><span class="line">            //调用回调函数的beforeCompletion方法</span><br><span class="line">            triggerBeforeCompletion(status);</span><br><span class="line">            beforeCompletionInvoked = true;</span><br><span class="line"></span><br><span class="line">            if (status.hasSavepoint()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Releasing transaction savepoint&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                //释放保存点</span><br><span class="line">                status.releaseHeldSavepoint();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (status.isNewTransaction()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Initiating transaction commit&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                //提交事务</span><br><span class="line">                doCommit(status);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Throw UnexpectedRollbackException if we have a global rollback-only</span><br><span class="line">            // marker but still didn&apos;t get a corresponding exception from commit.</span><br><span class="line">            if (unexpectedRollback) &#123;</span><br><span class="line">                throw new UnexpectedRollbackException(</span><br><span class="line">                        &quot;Transaction silently rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (UnexpectedRollbackException ex) &#123;</span><br><span class="line">            // can only be caused by doCommit</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TransactionException ex) &#123;</span><br><span class="line">            // can only be caused by doCommit</span><br><span class="line">            if (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">                doRollbackOnCommitException(status, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            if (!beforeCompletionInvoked) &#123;</span><br><span class="line">                triggerBeforeCompletion(status);</span><br><span class="line">            &#125;</span><br><span class="line">            doRollbackOnCommitException(status, ex);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Trigger afterCommit callbacks, with an exception thrown there</span><br><span class="line">        // propagated to callers but the transaction still considered as committed.</span><br><span class="line">        try &#123;</span><br><span class="line">            //调用回调函数的afterCommit方法</span><br><span class="line">            triggerAfterCommit(status);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            //调用回调函数的afterCompletion方法</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //清空当前事务，并恢复挂起的事务</span><br><span class="line">        cleanupAfterCompletion(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码JdbcTemplate</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81JdbcTemplate/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/spring源码JdbcTemplate/</id>
    <published>2020-01-16T13:43:36.410Z</published>
    <updated>2018-07-07T15:09:57.089Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;beans  </span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 1.配置数据源：DriverManagerDataSource --&gt;  </span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;oracle.jdbc.OracleDriver&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;scott&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;tiger&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;!--2.配置JdbcTemplate --&gt;  </span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;!-- 3.为dao接口注入jdbcTemplate属性 --&gt;  </span><br><span class="line">    &lt;bean id=&quot;userDao&quot; class=&quot;com.wzj.dao.impl.UserDaoImpl&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 业务层 、Struts2、事务等同往常一样配置--&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao&#123;  </span><br><span class="line">    //定义JdbcTemplate属性  </span><br><span class="line">    private JdbcTemplate jdbcTemplate;  </span><br><span class="line">    //省略get、set方法  </span><br><span class="line">    @Override  </span><br><span class="line">    public User selectUserByName(String name) &#123;  </span><br><span class="line">        //定义RowMapper的对象，可以将数据中的每一行数据封装成用户定义的类.  </span><br><span class="line">        //RowMapper是接口，这里创建了一个匿名类并实现了其中的方法  </span><br><span class="line">        RowMapper&lt;User&gt; row=new RowMapper&lt;User&gt;() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public User mapRow(ResultSet rs, int arg1) throws SQLException &#123;  </span><br><span class="line">                User user=new User();  </span><br><span class="line">                user.setUserId(Integer.parseInt(rs.getString(&quot;USERID&quot;)));  </span><br><span class="line">                user.setName(rs.getString(&quot;USERNAME&quot;));  </span><br><span class="line">                user.setPassword(rs.getString(&quot;USERPWD&quot;));  </span><br><span class="line">                return user;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;   </span><br><span class="line">        String sql=&quot;select * from myuser1 where username=?&quot;;  </span><br><span class="line">        //执行查询  </span><br><span class="line">        User user=jdbcTemplate.queryForObject(sql, new Object[]&#123;name&#125;, row);  </span><br><span class="line">        return user;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int insert(User user) &#123;  </span><br><span class="line">        String sql=&quot;insert into myuser1 values(user_sequence.nextVal,?,?)&quot;;  </span><br><span class="line">        //执行插入  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;user.getName(),user.getPassword()&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int delete(int userId) &#123;  </span><br><span class="line">        String sql=&quot;delete from myuser1 where userid=?&quot;;  </span><br><span class="line">        //执行修改  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;userId&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int update(User user) &#123;  </span><br><span class="line">        String sql=&quot;update myuser1 set username=?,userpwd=? where userid=?&quot;;  </span><br><span class="line">        //执行删除  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;user.getName(),user.getPassword(),user.getUserId()&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一、select执行过程"><a href="#一、select执行过程" class="headerlink" title="一、select执行过程"></a>一、select执行过程</h3><h4 id="1、JdbcTemplate的queryForObject方法"><a href="#1、JdbcTemplate的queryForObject方法" class="headerlink" title="1、JdbcTemplate的queryForObject方法"></a>1、JdbcTemplate的queryForObject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T queryForObject(String sql, Object[] args, RowMapper&lt;T&gt; rowMapper) throws DataAccessException &#123;</span><br><span class="line">    List&lt;T&gt; results = query(sql, args, new RowMapperResultSetExtractor&lt;T&gt;(rowMapper, 1));</span><br><span class="line">    //返回第一对象</span><br><span class="line">    return DataAccessUtils.requiredSingleResult(results);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T query(String sql, Object[] args, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line">    return query(sql, newArgPreparedStatementSetter(args), rse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、JdbcTemplate的query方法"><a href="#2、JdbcTemplate的query方法" class="headerlink" title="2、JdbcTemplate的query方法"></a>2、JdbcTemplate的query方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T query(String sql, PreparedStatementSetter pss, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line">    return query(new SimplePreparedStatementCreator(sql), pss, rse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T query(</span><br><span class="line">        PreparedStatementCreator psc, final PreparedStatementSetter pss, final ResultSetExtractor&lt;T&gt; rse)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(rse, &quot;ResultSetExtractor must not be null&quot;);</span><br><span class="line">    logger.debug(&quot;Executing prepared SQL query&quot;);</span><br><span class="line"></span><br><span class="line">    return execute(psc, new PreparedStatementCallback&lt;T&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public T doInPreparedStatement(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">            ResultSet rs = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (pss != null) &#123;</span><br><span class="line">                    //设置参数</span><br><span class="line">                    pss.setValues(ps);</span><br><span class="line">                &#125;</span><br><span class="line">                //执行sql</span><br><span class="line">                rs = ps.executeQuery();</span><br><span class="line">                ResultSet rsToUse = rs;</span><br><span class="line">                //转换器，对数据库clob、 blob数据型进行操作</span><br><span class="line">                if (nativeJdbcExtractor != null) &#123;</span><br><span class="line">                    rsToUse = nativeJdbcExtractor.getNativeResultSet(rs);</span><br><span class="line">                &#125;</span><br><span class="line">                //解析结果集</span><br><span class="line">                return rse.extractData(rsToUse);</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                JdbcUtils.closeResultSet(rs);</span><br><span class="line">                if (pss instanceof ParameterDisposer) &#123;</span><br><span class="line">                    ((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、JdbcTemplate的execute方法"><a href="#3、JdbcTemplate的execute方法" class="headerlink" title="3、JdbcTemplate的execute方法"></a>3、JdbcTemplate的execute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T execute(PreparedStatementCreator psc, PreparedStatementCallback&lt;T&gt; action)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(psc, &quot;PreparedStatementCreator must not be null&quot;);</span><br><span class="line">    Assert.notNull(action, &quot;Callback object must not be null&quot;);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        logger.debug(&quot;Executing prepared SQL statement&quot; + (sql != null ? &quot; [&quot; + sql + &quot;]&quot; : &quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = DataSourceUtils.getConnection(getDataSource());</span><br><span class="line">    PreparedStatement ps = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Connection conToUse = con;</span><br><span class="line">        if (this.nativeJdbcExtractor != null &amp;&amp;</span><br><span class="line">                this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativePreparedStatements()) &#123;</span><br><span class="line">            //获取原始的JDBC连接</span><br><span class="line">            conToUse = this.nativeJdbcExtractor.getNativeConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建一个PreparedStatement</span><br><span class="line">        ps = psc.createPreparedStatement(conToUse);</span><br><span class="line">        //设置默认查询边界及超时时间</span><br><span class="line">        applyStatementSettings(ps);</span><br><span class="line">        PreparedStatement psToUse = ps;</span><br><span class="line">        if (this.nativeJdbcExtractor != null) &#123;</span><br><span class="line">            //获取原始的JDBC的PreparedStatement</span><br><span class="line">            psToUse = this.nativeJdbcExtractor.getNativePreparedStatement(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行sql</span><br><span class="line">        T result = action.doInPreparedStatement(psToUse);</span><br><span class="line">        //处理警告,如数据截断异常</span><br><span class="line">        handleWarnings(ps);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        // Release Connection early, to avoid potential connection pool deadlock</span><br><span class="line">        // in the case when the exception translator hasn&apos;t been initialized yet.</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        psc = null;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        ps = null;</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">        con = null;</span><br><span class="line">        throw getExceptionTranslator().translate(&quot;PreparedStatementCallback&quot;, sql, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DataSourceUtils的getConnection方法"><a href="#4、DataSourceUtils的getConnection方法" class="headerlink" title="4、DataSourceUtils的getConnection方法"></a>4、DataSourceUtils的getConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取连接</span><br><span class="line">        return doGetConnection(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        throw new CannotGetJdbcConnectionException(&quot;Could not get JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DataSourceUtils的doGetConnection方法"><a href="#5、DataSourceUtils的doGetConnection方法" class="headerlink" title="5、DataSourceUtils的doGetConnection方法"></a>5、DataSourceUtils的doGetConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public static Connection doGetConnection(DataSource dataSource) throws SQLException &#123;</span><br><span class="line">    Assert.notNull(dataSource, &quot;No DataSource specified&quot;);</span><br><span class="line">    //获取本线程Connection容器</span><br><span class="line">    ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">    //本线程是否激活事务</span><br><span class="line">    if (conHolder != null &amp;&amp; (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) &#123;</span><br><span class="line">        //当前获取次数加一</span><br><span class="line">        conHolder.requested();</span><br><span class="line">        //没有连接获取新连接</span><br><span class="line">        if (!conHolder.hasConnection()) &#123;</span><br><span class="line">            logger.debug(&quot;Fetching resumed JDBC Connection from DataSource&quot;);</span><br><span class="line">            conHolder.setConnection(dataSource.getConnection());</span><br><span class="line">        &#125;</span><br><span class="line">        //获取容器中的连接，同一事务中使用同一个连接</span><br><span class="line">        return conHolder.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    // Else we either got no holder or an empty thread-bound holder here.</span><br><span class="line"></span><br><span class="line">    logger.debug(&quot;Fetching JDBC Connection from DataSource&quot;);</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = dataSource.getConnection();</span><br><span class="line">    //事务已开启</span><br><span class="line">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">        logger.debug(&quot;Registering transaction synchronization for JDBC Connection&quot;);</span><br><span class="line">        // Use same Connection for further JDBC actions within the transaction.</span><br><span class="line">        // Thread-bound object will get removed by synchronization at transaction completion.</span><br><span class="line">        ConnectionHolder holderToUse = conHolder;</span><br><span class="line">        if (holderToUse == null) &#123;</span><br><span class="line">            holderToUse = new ConnectionHolder(con);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            holderToUse.setConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        holderToUse.requested();</span><br><span class="line">        //添加回调函数释放资源</span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(</span><br><span class="line">                new ConnectionSynchronization(holderToUse, dataSource));</span><br><span class="line">        //设置该连接已被事务获取</span><br><span class="line">        holderToUse.setSynchronizedWithTransaction(true);</span><br><span class="line">        //新增的连接容器</span><br><span class="line">        if (holderToUse != conHolder) &#123;</span><br><span class="line">            //连接容器加入本线程变量</span><br><span class="line">            TransactionSynchronizationManager.bindResource(dataSource, holderToUse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return con;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、3）DataSourceUtils的releaseConnection方法"><a href="#6、接（一、3）DataSourceUtils的releaseConnection方法" class="headerlink" title="6、接（一、3）DataSourceUtils的releaseConnection方法"></a>6、接（一、3）DataSourceUtils的releaseConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void releaseConnection(Connection con, DataSource dataSource) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //关闭连接</span><br><span class="line">        doReleaseConnection(con, dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        logger.debug(&quot;Could not close JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        logger.debug(&quot;Unexpected exception on closing JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、DataSourceUtils的doReleaseConnection方法"><a href="#7、DataSourceUtils的doReleaseConnection方法" class="headerlink" title="7、DataSourceUtils的doReleaseConnection方法"></a>7、DataSourceUtils的doReleaseConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException &#123;</span><br><span class="line">    if (con == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (dataSource != null) &#123;</span><br><span class="line">        //当前线程存在事务，该线程目前要用同一个连接，释放则获取次数减一</span><br><span class="line">        ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">        if (conHolder != null &amp;&amp; connectionEquals(conHolder, con)) &#123;</span><br><span class="line">            // It&apos;s the transactional Connection: Don&apos;t close it.</span><br><span class="line">            conHolder.released();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(&quot;Returning JDBC Connection to DataSource&quot;);</span><br><span class="line">    //关闭连接</span><br><span class="line">    doCloseConnection(con, dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、2）ArgumentPreparedStatementSetter的setValues方法"><a href="#6、接（一、2）ArgumentPreparedStatementSetter的setValues方法" class="headerlink" title="6、接（一、2）ArgumentPreparedStatementSetter的setValues方法"></a>6、接（一、2）ArgumentPreparedStatementSetter的setValues方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void setValues(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">    if (this.args != null) &#123;</span><br><span class="line">        for (int i = 0; i &lt; this.args.length; i++) &#123;</span><br><span class="line">            Object arg = this.args[i];</span><br><span class="line">            //设置参数</span><br><span class="line">            doSetValue(ps, i + 1, arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ArgumentPreparedStatementSetter的doSetValue方法"><a href="#7、ArgumentPreparedStatementSetter的doSetValue方法" class="headerlink" title="7、ArgumentPreparedStatementSetter的doSetValue方法"></a>7、ArgumentPreparedStatementSetter的doSetValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException &#123;</span><br><span class="line">    //设置参数</span><br><span class="line">    if (argValue instanceof SqlParameterValue) &#123;</span><br><span class="line">        SqlParameterValue paramValue = (SqlParameterValue) argValue;</span><br><span class="line">        StatementCreatorUtils.setParameterValue(ps, parameterPosition, paramValue, paramValue.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        StatementCreatorUtils.setParameterValue(ps, parameterPosition, SqlTypeValue.TYPE_UNKNOWN, argValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、2）RowMapperResultSetExtractor的extractData方法"><a href="#8、接（一、2）RowMapperResultSetExtractor的extractData方法" class="headerlink" title="8、接（一、2）RowMapperResultSetExtractor的extractData方法"></a>8、接（一、2）RowMapperResultSetExtractor的extractData方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;T&gt; extractData(ResultSet rs) throws SQLException &#123;</span><br><span class="line">    List&lt;T&gt; results = (this.rowsExpected &gt; 0 ? new ArrayList&lt;T&gt;(this.rowsExpected) : new ArrayList&lt;T&gt;());</span><br><span class="line">    int rowNum = 0;</span><br><span class="line">    while (rs.next()) &#123;</span><br><span class="line">        //解析结果</span><br><span class="line">        results.add(this.rowMapper.mapRow(rs, rowNum++));</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、RowMapper的mapRow方法"><a href="#9、RowMapper的mapRow方法" class="headerlink" title="9、RowMapper的mapRow方法"></a>9、RowMapper的mapRow方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">public User mapRow(ResultSet rs, int arg1) throws SQLException &#123;  </span><br><span class="line">    User user=new User();  </span><br><span class="line">    user.setUserId(Integer.parseInt(rs.getString(&quot;USERID&quot;)));  </span><br><span class="line">    user.setName(rs.getString(&quot;USERNAME&quot;));  </span><br><span class="line">    user.setPassword(rs.getString(&quot;USERPWD&quot;));  </span><br><span class="line">    return user;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、update执行过程"><a href="#二、update执行过程" class="headerlink" title="二、update执行过程"></a>二、update执行过程</h3><h4 id="1、JdbcTemplate的update方法"><a href="#1、JdbcTemplate的update方法" class="headerlink" title="1、JdbcTemplate的update方法"></a>1、JdbcTemplate的update方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int update(String sql, Object... args) throws DataAccessException &#123;</span><br><span class="line">    return update(sql, newArgPreparedStatementSetter(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int update(String sql, PreparedStatementSetter pss) throws DataAccessException &#123;</span><br><span class="line">    return update(new SimplePreparedStatementCreator(sql), pss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected int update(final PreparedStatementCreator psc, final PreparedStatementSetter pss)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    logger.debug(&quot;Executing prepared SQL update&quot;);</span><br><span class="line">    return execute(psc, new PreparedStatementCallback&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (pss != null) &#123;</span><br><span class="line">                    //设置参数</span><br><span class="line">                    pss.setValues(ps);</span><br><span class="line">                &#125;</span><br><span class="line">                //执行sql</span><br><span class="line">                int rows = ps.executeUpdate();</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;SQL update affected &quot; + rows + &quot; rows&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return rows;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if (pss instanceof ParameterDisposer) &#123;</span><br><span class="line">                    ((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、JdbcTemplate的execute方法"><a href="#2、JdbcTemplate的execute方法" class="headerlink" title="2、JdbcTemplate的execute方法"></a>2、JdbcTemplate的execute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T execute(PreparedStatementCreator psc, PreparedStatementCallback&lt;T&gt; action)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(psc, &quot;PreparedStatementCreator must not be null&quot;);</span><br><span class="line">    Assert.notNull(action, &quot;Callback object must not be null&quot;);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        logger.debug(&quot;Executing prepared SQL statement&quot; + (sql != null ? &quot; [&quot; + sql + &quot;]&quot; : &quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = DataSourceUtils.getConnection(getDataSource());</span><br><span class="line">    PreparedStatement ps = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Connection conToUse = con;</span><br><span class="line">        if (this.nativeJdbcExtractor != null &amp;&amp;</span><br><span class="line">                this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativePreparedStatements()) &#123;</span><br><span class="line">            conToUse = this.nativeJdbcExtractor.getNativeConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建PreparedStatement</span><br><span class="line">        ps = psc.createPreparedStatement(conToUse);</span><br><span class="line">        applyStatementSettings(ps);</span><br><span class="line">        PreparedStatement psToUse = ps;</span><br><span class="line">        if (this.nativeJdbcExtractor != null) &#123;</span><br><span class="line">            psToUse = this.nativeJdbcExtractor.getNativePreparedStatement(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行sql</span><br><span class="line">        T result = action.doInPreparedStatement(psToUse);</span><br><span class="line">        handleWarnings(ps);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        // Release Connection early, to avoid potential connection pool deadlock</span><br><span class="line">        // in the case when the exception translator hasn&apos;t been initialized yet.</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        psc = null;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        ps = null;</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">        con = null;</span><br><span class="line">        throw getExceptionTranslator().translate(&quot;PreparedStatementCallback&quot;, sql, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码IOC容器</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81IOC%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/Spring源码IOC容器/</id>
    <published>2020-01-16T13:43:36.407Z</published>
    <updated>2018-07-12T13:56:14.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ClassPathXmlApplicationContext容器启动"><a href="#一、ClassPathXmlApplicationContext容器启动" class="headerlink" title="一、ClassPathXmlApplicationContext容器启动"></a>一、ClassPathXmlApplicationContext容器启动</h3><h4 id="1、实例化ClassPathXmlApplicationContext"><a href="#1、实例化ClassPathXmlApplicationContext" class="headerlink" title="1、实例化ClassPathXmlApplicationContext"></a>1、实例化ClassPathXmlApplicationContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String configLocation) throws BeansException &#123;</span><br><span class="line">    this(new String[] &#123;configLocation&#125;, true, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String... configLocations) throws BeansException &#123;</span><br><span class="line">    this(configLocations, true, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">    //获取配置文件</span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    if (refresh) &#123;</span><br><span class="line">        //启动容器</span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法"><a href="#2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法" class="headerlink" title="2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法"></a>2、AbstractRefreshableConfigApplicationContext的setConfigLocations方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void setConfigLocations(String... locations) &#123;</span><br><span class="line">    if (locations != null) &#123;</span><br><span class="line">        Assert.noNullElements(locations, &quot;Config locations must not be null&quot;);</span><br><span class="line">        this.configLocations = new String[locations.length];</span><br><span class="line">        //获取配置文件</span><br><span class="line">        for (int i = 0; i &lt; locations.length; i++) &#123;</span><br><span class="line">            this.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        this.configLocations = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（一、1）AbstractApplicationContext的refresh方法"><a href="#3、接（一、1）AbstractApplicationContext的refresh方法" class="headerlink" title="3、接（一、1）AbstractApplicationContext的refresh方法"></a>3、接（一、1）AbstractApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        // Prepare this context for refreshing.</span><br><span class="line">        //准备刷新上下文环境</span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        // Tell the subclass to refresh the internal bean factory.</span><br><span class="line">        //初始化BeanFactory，并读取配置文件</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        // Prepare the bean factory for use in this context.</span><br><span class="line">        // 对BeanFactory进行功能填充</span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">            //空方法待子类实现</span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Invoke factory processors registered as beans in the context.</span><br><span class="line">            //激活BeanFactory处理器</span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Register bean processors that intercept bean creation.</span><br><span class="line">            //注册拦截bean的处理器</span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Initialize message source for this context.</span><br><span class="line">            //初始化国际化处理</span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            // Initialize event multicaster for this context.</span><br><span class="line">            //初始化应用消息广播器</span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            // Initialize other special beans in specific context subclasses.</span><br><span class="line">            //初始化其他特殊bean，留待子类实现</span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            // Check for listener beans and register them.</span><br><span class="line">            //注册监听器</span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">            //初始化剩下的单例（非懒加载的）</span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Last step: publish corresponding event.</span><br><span class="line">            //完成刷新过程</span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception encountered during context initialization - cancelling refresh attempt&quot;, ex);</span><br><span class="line"></span><br><span class="line">            // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            // Reset &apos;active&apos; flag.</span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            // Propagate exception to caller.</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractApplicationContext的prepareRefresh方法"><a href="#4、AbstractApplicationContext的prepareRefresh方法" class="headerlink" title="4、AbstractApplicationContext的prepareRefresh方法"></a>4、AbstractApplicationContext的prepareRefresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareRefresh() &#123;</span><br><span class="line">    this.startupDate = System.currentTimeMillis();</span><br><span class="line">    //容器激活</span><br><span class="line">    this.active.set(true);</span><br><span class="line"></span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Refreshing &quot; + this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize any placeholder property sources in the context environment</span><br><span class="line">    //待子类实现，处理个性化的属性</span><br><span class="line">    initPropertySources();</span><br><span class="line"></span><br><span class="line">    // Validate that all properties marked as required are resolvable</span><br><span class="line">    // see ConfigurablePropertyResolver#setRequiredProperties</span><br><span class="line">    //验证需要的属性文件是否都已放入环境中</span><br><span class="line">    getEnvironment().validateRequiredProperties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法"><a href="#5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法" class="headerlink" title="5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法"></a>5、接（一、3）AbstractApplicationContext的obtainFreshBeanFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractRefreshableApplicationContext的refreshBeanFactory方法"><a href="#6、AbstractRefreshableApplicationContext的refreshBeanFactory方法" class="headerlink" title="6、AbstractRefreshableApplicationContext的refreshBeanFactory方法"></a>6、AbstractRefreshableApplicationContext的refreshBeanFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">    //关闭已有的BeanFactory</span><br><span class="line">    if (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建DefaultListableBeanFactory</span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        //设置序列化id</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        //设置是否允许循环依赖、覆盖</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        //加载配置文件，</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">            this.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractXmlApplicationContext的loadBeanDefinitions方法"><a href="#7、AbstractXmlApplicationContext的loadBeanDefinitions方法" class="headerlink" title="7、AbstractXmlApplicationContext的loadBeanDefinitions方法"></a>7、AbstractXmlApplicationContext的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">    //关闭已有的BeanFactory</span><br><span class="line">    if (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建DefaultListableBeanFactory</span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        //设置序列化id</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        //设置是否允许循环依赖、覆盖</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        //加载配置文件，</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">            this.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、AbstractXmlApplicationContext的loadBeanDefinitions方法"><a href="#8、AbstractXmlApplicationContext的loadBeanDefinitions方法" class="headerlink" title="8、AbstractXmlApplicationContext的loadBeanDefinitions方法"></a>8、AbstractXmlApplicationContext的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123;</span><br><span class="line">    // Create a new XmlBeanDefinitionReader for the given BeanFactory.</span><br><span class="line">    //创建xml加载器</span><br><span class="line">    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">    // Configure the bean definition reader with this context&apos;s</span><br><span class="line">    // resource loading environment.</span><br><span class="line">    beanDefinitionReader.setEnvironment(this.getEnvironment());</span><br><span class="line">    beanDefinitionReader.setResourceLoader(this);</span><br><span class="line">    beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));</span><br><span class="line"></span><br><span class="line">    // Allow a subclass to provide custom initialization of the reader,</span><br><span class="line">    // then proceed with actually loading the bean definitions.</span><br><span class="line">    //初始化加载器，该方法可以被子类覆盖</span><br><span class="line">    initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">    //读取xml配置文件</span><br><span class="line">    loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法"><a href="#9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法" class="headerlink" title="9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法"></a>9、接（一、3）AbstractApplicationContext的prepareBeanFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    // Tell the internal bean factory to use the context&apos;s class loader etc.</span><br><span class="line">    //设置context的类加载器为beanFactory的加载器</span><br><span class="line">    beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">    //设置SPEL表达式语言处理器，例如#｛bean.xxx｝，</span><br><span class="line">    //加载bean的过程中如(DefaultListableBeanFactory的evaluateBeanDefinitionString方法)，</span><br><span class="line">    //会调用StandardBeanExpressionResolver的evaluate方法</span><br><span class="line">    beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">    //属性设置管理工具,</span><br><span class="line">    //bean加载过程中AbstractBeanFactory的initBeanWrapper方法会调用ResourceEditorRegistrar的registerCustomEditors方法</span><br><span class="line">    //注册自定义属性编辑器，覆盖PropertyEditorRegistrySupport中默认属性编辑器</span><br><span class="line">    beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class="line"></span><br><span class="line">    // Configure the bean factory with context callbacks.</span><br><span class="line">    //添加BeanPostProcessor，该处理器为实现了特殊接口的bean提供处理</span><br><span class="line">    beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span><br><span class="line">    //忽略自动装配的接口</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line"></span><br><span class="line">    // BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class="line">    // MessageSource registered (and found for autowiring) as a bean.</span><br><span class="line">    //设置特殊接口的注入对象</span><br><span class="line">    beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">    beanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br><span class="line"></span><br><span class="line">    // Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br><span class="line">    //增加对AspectJ的支持</span><br><span class="line">    if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">        // Set a temporary ClassLoader for type matching.</span><br><span class="line">        beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Register default environment beans.</span><br><span class="line">    注册默认的bean</span><br><span class="line">    if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">    if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">    &#125;</span><br><span class="line">    if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法"><a href="#10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法" class="headerlink" title="10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法"></a>10、接（一、3）AbstractApplicationContext的invokeBeanFactoryPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法"><a href="#11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法" class="headerlink" title="11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法"></a>11、PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">public static void invokeBeanFactoryPostProcessors(</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</span><br><span class="line"></span><br><span class="line">    // Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><br><span class="line">    Set&lt;String&gt; processedBeans = new HashSet&lt;String&gt;();</span><br><span class="line">    //对BeanDefinitionRegistry类型的处理</span><br><span class="line">    if (beanFactory instanceof BeanDefinitionRegistry) &#123;</span><br><span class="line">        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">        List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = new LinkedList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; registryPostProcessors =</span><br><span class="line">                new LinkedList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        //硬编码注册的处理器</span><br><span class="line">        for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">            //该类型，在BeanFactoryPostProcessor的基础上还有自己定义的方法需要先调用</span><br><span class="line">            if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">                BeanDefinitionRegistryPostProcessor registryPostProcessor =</span><br><span class="line">                        (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">                //调用自己定义的方法</span><br><span class="line">                registryPostProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                registryPostProcessors.add(registryPostProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">            //常规BeanFactoryPostProcessor</span><br><span class="line">            else &#123;</span><br><span class="line">                regularPostProcessors.add(postProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">        // uninitialized to let the bean factory post-processors apply to them!</span><br><span class="line">        // Separate between BeanDefinitionRegistryPostProcessors that implement</span><br><span class="line">        // PriorityOrdered, Ordered, and the rest.</span><br><span class="line">        //配置注册的BeanDefinitionRegistryPostProcessor</span><br><span class="line">        String[] postProcessorNames =</span><br><span class="line">                beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">        // First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        for (String ppName : postProcessorNames) &#123;</span><br><span class="line">            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">                priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //排序</span><br><span class="line">        OrderComparator.sort(priorityOrderedPostProcessors);</span><br><span class="line">        //加入处理器集合</span><br><span class="line">        registryPostProcessors.addAll(priorityOrderedPostProcessors);</span><br><span class="line">        //调用自己定义的方法</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);</span><br><span class="line"></span><br><span class="line">        // Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span><br><span class="line">        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line">        for (String ppName : postProcessorNames) &#123;</span><br><span class="line">            if (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">                orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //排序</span><br><span class="line">        OrderComparator.sort(orderedPostProcessors);</span><br><span class="line">        //加入处理器集合</span><br><span class="line">        registryPostProcessors.addAll(orderedPostProcessors);</span><br><span class="line">        //调用自己定义的方法</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);</span><br><span class="line"></span><br><span class="line">        // Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span><br><span class="line">        //调用其他处理器的自己定义的方法</span><br><span class="line">        boolean reiterate = true;</span><br><span class="line">        while (reiterate) &#123;</span><br><span class="line">            reiterate = false;</span><br><span class="line">            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);</span><br><span class="line">            for (String ppName : postProcessorNames) &#123;</span><br><span class="line">                if (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">                    BeanDefinitionRegistryPostProcessor pp = beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class);</span><br><span class="line">                    registryPostProcessors.add(pp);</span><br><span class="line">                    processedBeans.add(ppName);</span><br><span class="line">                    pp.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                    reiterate = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span><br><span class="line">        //应用处理器</span><br><span class="line">        invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);</span><br><span class="line">        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">        // Invoke factory processors registered with the context instance.</span><br><span class="line">        //直接应用处理器</span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">    // uninitialized to let the bean factory post-processors apply to them!</span><br><span class="line">    //配置注册的BeanFactoryPostProcessor</span><br><span class="line">    String[] postProcessorNames =</span><br><span class="line">            beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">    // Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span><br><span class="line">    // Ordered, and the rest.</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    //对后处理器分类</span><br><span class="line">    for (String ppName : postProcessorNames) &#123;</span><br><span class="line">        if (processedBeans.contains(ppName)) &#123;</span><br><span class="line">            // skip - already processed in first phase above</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span><br><span class="line">    //排序并应用后处理器</span><br><span class="line">    OrderComparator.sort(priorityOrderedPostProcessors);</span><br><span class="line">    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    // Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    for (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">     //排序并应用后处理器</span><br><span class="line">    OrderComparator.sort(orderedPostProcessors);</span><br><span class="line">    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    // Finally, invoke all other BeanFactoryPostProcessors.</span><br><span class="line">    //应用不用排序的后处理器</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    for (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法"><a href="#12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法" class="headerlink" title="12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法"></a>12、接（一、3）AbstractApplicationContext的registerBeanPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法"><a href="#13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法" class="headerlink" title="13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法"></a>13、PostProcessorRegistrationDelegate的registerBeanPostProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public static void registerBeanPostProcessors(</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</span><br><span class="line">    //获取配置注册的BeanPostProcessor</span><br><span class="line">    String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">    // Register BeanPostProcessorChecker that logs an info message when</span><br><span class="line">    // a bean is created during BeanPostProcessor instantiation, i.e. when</span><br><span class="line">    // a bean is not eligible for getting processed by all BeanPostProcessors.</span><br><span class="line">    int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;</span><br><span class="line">    //该处理器，在bean初始化时，检测到后处理器未注册完，打印日志</span><br><span class="line">    beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line"></span><br><span class="line">    // Separate between BeanPostProcessors that implement PriorityOrdered,</span><br><span class="line">    // Ordered, and the rest.</span><br><span class="line">    List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    List&lt;BeanPostProcessor&gt; internalPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;String&gt;();</span><br><span class="line">    //分类bean处理器</span><br><span class="line">    for (String ppName : postProcessorNames) &#123;</span><br><span class="line">        if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">            priorityOrderedPostProcessors.add(pp);</span><br><span class="line">            if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">                internalPostProcessors.add(pp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // First, register the BeanPostProcessors that implement PriorityOrdered.</span><br><span class="line">    //排序并注册处理器</span><br><span class="line">    OrderComparator.sort(priorityOrderedPostProcessors);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    // Next, register the BeanPostProcessors that implement Ordered.</span><br><span class="line">    List&lt;BeanPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    for (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">        orderedPostProcessors.add(pp);</span><br><span class="line">        if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //排序并注册处理器</span><br><span class="line">    OrderComparator.sort(orderedPostProcessors);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    // Now, register all regular BeanPostProcessors.</span><br><span class="line">    //注册无序处理器</span><br><span class="line">    List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line">    for (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">        nonOrderedPostProcessors.add(pp);</span><br><span class="line">        if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    // Finally, re-register all internal BeanPostProcessors.</span><br><span class="line">    //注册MergedBeanDefinitionPostProcessor处理器，不会重复注册，会先删除</span><br><span class="line">    OrderComparator.sort(internalPostProcessors);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（一、3）AbstractApplicationContext的initMessageSource方法"><a href="#14、接（一、3）AbstractApplicationContext的initMessageSource方法" class="headerlink" title="14、接（一、3）AbstractApplicationContext的initMessageSource方法"></a>14、接（一、3）AbstractApplicationContext的initMessageSource方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">protected void initMessageSource() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">        //获取配置的messageSource记录在容器中</span><br><span class="line">        this.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</span><br><span class="line">        // Make MessageSource aware of parent MessageSource.</span><br><span class="line">        if (this.parent != null &amp;&amp; this.messageSource instanceof HierarchicalMessageSource) &#123;</span><br><span class="line">            HierarchicalMessageSource hms = (HierarchicalMessageSource) this.messageSource;</span><br><span class="line">            if (hms.getParentMessageSource() == null) &#123;</span><br><span class="line">                // Only set parent context as parent MessageSource if no parent MessageSource</span><br><span class="line">                // registered already.</span><br><span class="line">                hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Using MessageSource [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Use empty MessageSource to be able to accept getMessage calls.</span><br><span class="line">        DelegatingMessageSource dms = new DelegatingMessageSource();</span><br><span class="line">        dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">        this.messageSource = dms;</span><br><span class="line">        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Unable to locate MessageSource with name &apos;&quot; + MESSAGE_SOURCE_BEAN_NAME +</span><br><span class="line">                    &quot;&apos;: using default [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法"><a href="#15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法" class="headerlink" title="15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法"></a>15、接（一、3）AbstractApplicationContext的initApplicationEventMulticaster方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected void initApplicationEventMulticaster() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    //使用自定义广播器</span><br><span class="line">    if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">        this.applicationEventMulticaster =</span><br><span class="line">                beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Using ApplicationEventMulticaster [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //默认广播器</span><br><span class="line">    else &#123;</span><br><span class="line">        this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Unable to locate ApplicationEventMulticaster with name &apos;&quot; +</span><br><span class="line">                    APPLICATION_EVENT_MULTICASTER_BEAN_NAME +</span><br><span class="line">                    &quot;&apos;: using default [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、接（一、3）AbstractApplicationContext的registerListeners方法"><a href="#16、接（一、3）AbstractApplicationContext的registerListeners方法" class="headerlink" title="16、接（一、3）AbstractApplicationContext的registerListeners方法"></a>16、接（一、3）AbstractApplicationContext的registerListeners方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected void registerListeners() &#123;</span><br><span class="line">    // Register statically specified listeners first.</span><br><span class="line">    //注册硬编码的监听器到广播器</span><br><span class="line">    for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">    // uninitialized to let post-processors apply to them!</span><br><span class="line">    //注册配置的监听器到广播器</span><br><span class="line">    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);</span><br><span class="line">    for (String lisName : listenerBeanNames) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListenerBean(lisName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法"><a href="#17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法" class="headerlink" title="17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法"></a>17、接（一、3）AbstractApplicationContext的finishBeanFactoryInitialization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    // Initialize conversion service for this context.</span><br><span class="line">    //初始化自定义类型转换器</span><br><span class="line">    if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br><span class="line">    //该接口，加载Spring Bean时织入第三方模块，如AspectJ</span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);</span><br><span class="line">    for (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Stop using the temporary ClassLoader for type matching.</span><br><span class="line">    beanFactory.setTempClassLoader(null);</span><br><span class="line"></span><br><span class="line">    // Allow for caching all bean definition metadata, not expecting further changes.</span><br><span class="line">    //冻结bean的定义</span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">    //初始化剩下的单实例bean</span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（一、3）AbstractApplicationContext的finishRefresh方法"><a href="#18、接（一、3）AbstractApplicationContext的finishRefresh方法" class="headerlink" title="18、接（一、3）AbstractApplicationContext的finishRefresh方法"></a>18、接（一、3）AbstractApplicationContext的finishRefresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected void finishRefresh() &#123;</span><br><span class="line">    // Initialize lifecycle processor for this context.</span><br><span class="line">    //初始化bean生命周期处理器</span><br><span class="line">    initLifecycleProcessor();</span><br><span class="line"></span><br><span class="line">    // Propagate refresh to lifecycle processor first.</span><br><span class="line">    //启动实现了Lifecycle接口的bean</span><br><span class="line">    getLifecycleProcessor().onRefresh();</span><br><span class="line"></span><br><span class="line">    // Publish the final event.</span><br><span class="line">    publishEvent(new ContextRefreshedEvent(this));</span><br><span class="line"></span><br><span class="line">    // Participate in LiveBeansView MBean, if active.</span><br><span class="line">    //容器注册到MBeanServer中</span><br><span class="line">    LiveBeansView.registerApplicationContext(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、AbstractApplicationContext的initLifecycleProcessor方法"><a href="#19、AbstractApplicationContext的initLifecycleProcessor方法" class="headerlink" title="19、AbstractApplicationContext的initLifecycleProcessor方法"></a>19、AbstractApplicationContext的initLifecycleProcessor方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">protected void initLifecycleProcessor() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    if (beanFactory.containsLocalBean(LIFECYCLE_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        this.lifecycleProcessor =</span><br><span class="line">                beanFactory.getBean(LIFECYCLE_PROCESSOR_BEAN_NAME, LifecycleProcessor.class);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Using LifecycleProcessor [&quot; + this.lifecycleProcessor + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //默认bean生命周期处理器</span><br><span class="line">        DefaultLifecycleProcessor defaultProcessor = new DefaultLifecycleProcessor();</span><br><span class="line">        defaultProcessor.setBeanFactory(beanFactory);</span><br><span class="line">        this.lifecycleProcessor = defaultProcessor;</span><br><span class="line">        beanFactory.registerSingleton(LIFECYCLE_PROCESSOR_BEAN_NAME, this.lifecycleProcessor);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Unable to locate LifecycleProcessor with name &apos;&quot; +</span><br><span class="line">                    LIFECYCLE_PROCESSOR_BEAN_NAME +</span><br><span class="line">                    &quot;&apos;: using default [&quot; + this.lifecycleProcessor + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、接（一、18）DefaultLifecycleProcessor的onRefresh方法"><a href="#20、接（一、18）DefaultLifecycleProcessor的onRefresh方法" class="headerlink" title="20、接（一、18）DefaultLifecycleProcessor的onRefresh方法"></a>20、接（一、18）DefaultLifecycleProcessor的onRefresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRefresh() &#123;</span><br><span class="line">    startBeans(true);</span><br><span class="line">    this.running = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、DefaultLifecycleProcessor的startBeans方法"><a href="#21、DefaultLifecycleProcessor的startBeans方法" class="headerlink" title="21、DefaultLifecycleProcessor的startBeans方法"></a>21、DefaultLifecycleProcessor的startBeans方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void startBeans(boolean autoStartupOnly) &#123;</span><br><span class="line">    //获取实现了Lifecycle接口的bean</span><br><span class="line">    Map&lt;String, Lifecycle&gt; lifecycleBeans = getLifecycleBeans();</span><br><span class="line">    Map&lt;Integer, LifecycleGroup&gt; phases = new HashMap&lt;Integer, LifecycleGroup&gt;();</span><br><span class="line">    //根据phases分组bean</span><br><span class="line">    for (Map.Entry&lt;String, ? extends Lifecycle&gt; entry : lifecycleBeans.entrySet()) &#123;</span><br><span class="line">        Lifecycle bean = entry.getValue();</span><br><span class="line">        if (!autoStartupOnly || (bean instanceof SmartLifecycle &amp;&amp; ((SmartLifecycle) bean).isAutoStartup())) &#123;</span><br><span class="line">            int phase = getPhase(bean);</span><br><span class="line">            LifecycleGroup group = phases.get(phase);</span><br><span class="line">            if (group == null) &#123;</span><br><span class="line">                group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);</span><br><span class="line">                phases.put(phase, group);</span><br><span class="line">            &#125;</span><br><span class="line">            group.add(entry.getKey(), bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (phases.size() &gt; 0) &#123;</span><br><span class="line">        List&lt;Integer&gt; keys = new ArrayList&lt;Integer&gt;(phases.keySet());</span><br><span class="line">        Collections.sort(keys);</span><br><span class="line">        for (Integer key : keys) &#123;</span><br><span class="line">            //启动该分组的bean</span><br><span class="line">            phases.get(key).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、接（一、18）AbstractApplicationContext的publishEvent方法"><a href="#22、接（一、18）AbstractApplicationContext的publishEvent方法" class="headerlink" title="22、接（一、18）AbstractApplicationContext的publishEvent方法"></a>22、接（一、18）AbstractApplicationContext的publishEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void publishEvent(ApplicationEvent event) &#123;</span><br><span class="line">    Assert.notNull(event, &quot;Event must not be null&quot;);</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Publishing event in &quot; + getDisplayName() + &quot;: &quot; + event);</span><br><span class="line">    &#125;</span><br><span class="line">    //广播容器刷新完成事件</span><br><span class="line">    getApplicationEventMulticaster().multicastEvent(event);</span><br><span class="line">    if (this.parent != null) &#123;</span><br><span class="line">        this.parent.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、SimpleApplicationEventMulticaster的multicastEvent方法"><a href="#23、SimpleApplicationEventMulticaster的multicastEvent方法" class="headerlink" title="23、SimpleApplicationEventMulticaster的multicastEvent方法"></a>23、SimpleApplicationEventMulticaster的multicastEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void multicastEvent(final ApplicationEvent event) &#123;</span><br><span class="line">    //获取事件相关的监听器</span><br><span class="line">    for (final ApplicationListener&lt;?&gt; listener : getApplicationListeners(event)) &#123;</span><br><span class="line">        Executor executor = getTaskExecutor();</span><br><span class="line">        if (executor != null) &#123;</span><br><span class="line">            executor.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    //监听器处理事件</span><br><span class="line">                    invokeListener(listener, event);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            invokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、ClassPathXmlApplicationContext容器关闭"><a href="#二、ClassPathXmlApplicationContext容器关闭" class="headerlink" title="二、ClassPathXmlApplicationContext容器关闭"></a>二、ClassPathXmlApplicationContext容器关闭</h3><h4 id="1、AbstractApplicationContext的close方法"><a href="#1、AbstractApplicationContext的close方法" class="headerlink" title="1、AbstractApplicationContext的close方法"></a>1、AbstractApplicationContext的close方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        //关闭</span><br><span class="line">        doClose();</span><br><span class="line">        // If we registered a JVM shutdown hook, we don&apos;t need it anymore now:</span><br><span class="line">        // We&apos;ve already explicitly closed the context.</span><br><span class="line">        //移除关闭回调</span><br><span class="line">        if (this.shutdownHook != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Runtime.getRuntime().removeShutdownHook(this.shutdownHook);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IllegalStateException ex) &#123;</span><br><span class="line">                // ignore - VM is already shutting down</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractApplicationContext的doClose方法"><a href="#2、AbstractApplicationContext的doClose方法" class="headerlink" title="2、AbstractApplicationContext的doClose方法"></a>2、AbstractApplicationContext的doClose方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">protected void doClose() &#123;</span><br><span class="line">    //更新状态为关闭</span><br><span class="line">    if (this.active.get() &amp;&amp; this.closed.compareAndSet(false, true)) &#123;</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Closing &quot; + this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LiveBeansView.unregisterApplicationContext(this);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Publish shutdown event.</span><br><span class="line">            //广播容器关闭事件</span><br><span class="line">            publishEvent(new ContextClosedEvent(this));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception thrown from ApplicationListener handling ContextClosedEvent&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Stop all Lifecycle beans, to avoid delays during individual destruction.</span><br><span class="line">        try &#123;</span><br><span class="line">            //关闭实现了Lifecycle接口的bean</span><br><span class="line">            getLifecycleProcessor().onClose();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception thrown from LifecycleProcessor on context close&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Destroy all cached singletons in the context&apos;s BeanFactory.</span><br><span class="line">        //销毁bean</span><br><span class="line">        destroyBeans();</span><br><span class="line"></span><br><span class="line">        // Close the state of this context itself.</span><br><span class="line">        //销毁容器</span><br><span class="line">        closeBeanFactory();</span><br><span class="line"></span><br><span class="line">        // Let subclasses do some final clean-up if they wish...</span><br><span class="line">        //待子类实现</span><br><span class="line">        onClose();</span><br><span class="line">        //更新容器状态</span><br><span class="line">        this.active.set(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、AnnotationConfigApplicationContext容器启动"><a href="#三、AnnotationConfigApplicationContext容器启动" class="headerlink" title="三、AnnotationConfigApplicationContext容器启动"></a>三、AnnotationConfigApplicationContext容器启动</h3><h4 id="1、实例化AnnotationConfigApplicationContext"><a href="#1、实例化AnnotationConfigApplicationContext" class="headerlink" title="1、实例化AnnotationConfigApplicationContext"></a>1、实例化AnnotationConfigApplicationContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationConfigApplicationContext(String... basePackages) &#123;</span><br><span class="line">    this();</span><br><span class="line">    //扫描该包</span><br><span class="line">    scan(basePackages);</span><br><span class="line">    //启动容器</span><br><span class="line">    refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationConfigApplicationContext() &#123;</span><br><span class="line">    this.reader = new AnnotatedBeanDefinitionReader(this);</span><br><span class="line">    this.scanner = new ClassPathBeanDefinitionScanner(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public GenericApplicationContext() &#123;</span><br><span class="line">    //内置的容器</span><br><span class="line">    this.beanFactory = new DefaultListableBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化AnnotatedBeanDefinitionReader"><a href="#2、实例化AnnotatedBeanDefinitionReader" class="headerlink" title="2、实例化AnnotatedBeanDefinitionReader"></a>2、实例化AnnotatedBeanDefinitionReader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    this(registry, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) &#123;</span><br><span class="line">    Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">    Assert.notNull(environment, &quot;Environment must not be null&quot;);</span><br><span class="line">    this.registry = registry;</span><br><span class="line">    this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);</span><br><span class="line">    //注册处理器</span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法"><a href="#3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法" class="headerlink" title="3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法"></a>3、AnnotationConfigUtils的registerAnnotationConfigProcessors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    registerAnnotationConfigProcessors(registry, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;BeanDefinitionHolder&gt; registerAnnotationConfigProcessors(</span><br><span class="line">        BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    //获取容器中的DefaultListableBeanFactory容器</span><br><span class="line">    DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    if (beanFactory != null) &#123;</span><br><span class="line">        //比较器</span><br><span class="line">        if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        //确定一个bean是否要被注入的工具</span><br><span class="line">        if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefs = new LinkedHashSet&lt;BeanDefinitionHolder&gt;(4);</span><br><span class="line"></span><br><span class="line">    //配置类解析器</span><br><span class="line">    if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //@Autowired、@Value处理器</span><br><span class="line">    if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //检查带有@Required注解的所有Bean属性是否设置</span><br><span class="line">    if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span><br><span class="line">    //处理@Resource注解及WebService、EJB相关的注解</span><br><span class="line">    if (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span><br><span class="line">    //JPA相关注解的Bean后置处理器，主要解析和处理@PersistenceUnit、@PersistenceContext注解</span><br><span class="line">    if (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition();</span><br><span class="line">        try &#123;</span><br><span class="line">            def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">                    AnnotationConfigUtils.class.getClassLoader()));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new IllegalStateException(</span><br><span class="line">                    &quot;Cannot load optional framework class: &quot; + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //容器加载完单例bean之后执行处理器的afterSingletonsInstantiated方法</span><br><span class="line">    //遍历bean将其中注解了@EventListener的方法转换成监听器注册到容器中</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    //创建监听器的工厂类</span><br><span class="line">    if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">        RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（三、1）ClassPathXmlApplicationContext的scan方法"><a href="#4、接（三、1）ClassPathXmlApplicationContext的scan方法" class="headerlink" title="4、接（三、1）ClassPathXmlApplicationContext的scan方法"></a>4、接（三、1）ClassPathXmlApplicationContext的scan方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void scan(String... basePackages) &#123;</span><br><span class="line">    Assert.notEmpty(basePackages, &quot;At least one base package must be specified&quot;);</span><br><span class="line">    //扫描该包</span><br><span class="line">    this.scanner.scan(basePackages);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ClassPathBeanDefinitionScanner的scan方法"><a href="#5、ClassPathBeanDefinitionScanner的scan方法" class="headerlink" title="5、ClassPathBeanDefinitionScanner的scan方法"></a>5、ClassPathBeanDefinitionScanner的scan方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int scan(String... basePackages) &#123;</span><br><span class="line">    int beanCountAtScanStart = this.registry.getBeanDefinitionCount();</span><br><span class="line">    //扫描包</span><br><span class="line">    doScan(basePackages);</span><br><span class="line"></span><br><span class="line">    // Register annotation config processors, if necessary.</span><br><span class="line">    //注册</span><br><span class="line">    if (this.includeAnnotationConfig) &#123;</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、ClassPathBeanDefinitionScanner的doScan方法"><a href="#6、ClassPathBeanDefinitionScanner的doScan方法" class="headerlink" title="6、ClassPathBeanDefinitionScanner的doScan方法"></a>6、ClassPathBeanDefinitionScanner的doScan方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">protected Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) &#123;</span><br><span class="line">    Assert.notEmpty(basePackages, &quot;At least one base package must be specified&quot;);</span><br><span class="line">    //创建一个集合，存放扫描到Bean定义的封装类</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = new LinkedHashSet&lt;BeanDefinitionHolder&gt;();</span><br><span class="line">    //循环不同的包</span><br><span class="line">    for (String basePackage : basePackages) &#123;</span><br><span class="line">        //扫描给定包，获取符合条件的Bean定义，返回ScannedGenericBeanDefinition的集合</span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        for (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            //获取Bean定义类中@Scope注解的值，即获取Bean的作用域</span><br><span class="line">            ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            //为Bean设置注解配置的作用域</span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            //为Bean生成名称，@Component(&quot;beanName&quot;)的值或类名</span><br><span class="line">            String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry);</span><br><span class="line">            </span><br><span class="line">            if (candidate instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">                //设置Bean默认值，设置Bean是否将要被注入其他Bean</span><br><span class="line">                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (candidate instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">                //处理注解Bean中通用的注解，在分析注解Bean定义类读取器时已经分析过</span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            //根据Bean名称检查指定的Bean是否需要在容器中注册，或者在容器中冲突</span><br><span class="line">            if (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">                //根据注解中配置的作用域，为Bean应用相应的代理模式</span><br><span class="line">                definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                //向容器注册扫描到的Bean  </span><br><span class="line">                registerBeanDefinition(definitionHolder, this.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ClassPathBeanDefinitionScanner的findCandidateComponents方法"><a href="#7、ClassPathBeanDefinitionScanner的findCandidateComponents方法" class="headerlink" title="7、ClassPathBeanDefinitionScanner的findCandidateComponents方法"></a>7、ClassPathBeanDefinitionScanner的findCandidateComponents方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public Set&lt;BeanDefinition&gt; findCandidateComponents(String basePackage) &#123;</span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = new LinkedHashSet&lt;BeanDefinition&gt;();</span><br><span class="line">    try &#123;</span><br><span class="line">        //解析给定的包路径，this.resourcePattern=” **/*.class”，  </span><br><span class="line">        //ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX=“classpath:”  </span><br><span class="line">        //resolveBasePackage方法将包名中的”.”转换为文件系统的”/”  </span><br><span class="line">        String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">                resolveBasePackage(basePackage) + &quot;/&quot; + this.resourcePattern;</span><br><span class="line">        //将给定的包路径解析为Spring资源对象 </span><br><span class="line">        Resource[] resources = this.resourcePatternResolver.getResources(packageSearchPath);</span><br><span class="line">        boolean traceEnabled = logger.isTraceEnabled();</span><br><span class="line">        boolean debugEnabled = logger.isDebugEnabled();</span><br><span class="line">        //遍历扫描到的资源</span><br><span class="line">        for (Resource resource : resources) &#123;</span><br><span class="line">            if (traceEnabled) &#123;</span><br><span class="line">                logger.trace(&quot;Scanning &quot; + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            if (resource.isReadable()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //为指定资源获取元数据读取器，元信息读取器通过汇编(ASM)读取资源元信息 </span><br><span class="line">                    MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource);</span><br><span class="line">                    //如果扫描到的类符合容器配置的过滤规则</span><br><span class="line">                    if (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                        //通过汇编(ASM)读取资源字节码中的Bean定义元信息 </span><br><span class="line">                        ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);</span><br><span class="line">                        //设置Bean定义来源于resource</span><br><span class="line">                        sbd.setResource(resource);</span><br><span class="line">                        //为元数据元素设置配置资源对象</span><br><span class="line">                        sbd.setSource(resource);</span><br><span class="line">                        //检查Bean是否符合过滤器要求</span><br><span class="line">                        if (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                            if (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(&quot;Identified candidate component class: &quot; + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                            //添加BeanDefinition</span><br><span class="line">                            candidates.add(sbd);</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(&quot;Ignored because not a concrete top-level class: &quot; + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (traceEnabled) &#123;</span><br><span class="line">                            logger.trace(&quot;Ignored because not matching any filter: &quot; + resource);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Throwable ex) &#123;</span><br><span class="line">                    throw new BeanDefinitionStoreException(</span><br><span class="line">                            &quot;Failed to read candidate component class: &quot; + resource, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                if (traceEnabled) &#123;</span><br><span class="line">                    logger.trace(&quot;Ignored because not readable: &quot; + resource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(&quot;I/O failure during classpath scanning&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    return candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、ClassPathBeanDefinitionScanner的isCandidateComponent方法"><a href="#8、ClassPathBeanDefinitionScanner的isCandidateComponent方法" class="headerlink" title="8、ClassPathBeanDefinitionScanner的isCandidateComponent方法"></a>8、ClassPathBeanDefinitionScanner的isCandidateComponent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected boolean isCandidateComponent(MetadataReader metadataReader) throws IOException &#123;</span><br><span class="line">    //排除过滤器</span><br><span class="line">    for (TypeFilter tf : this.excludeFilters) &#123;</span><br><span class="line">        if (tf.match(metadataReader, this.metadataReaderFactory)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //过滤器</span><br><span class="line">    for (TypeFilter tf : this.includeFilters) &#123;</span><br><span class="line">        if (tf.match(metadataReader, this.metadataReaderFactory)) &#123;</span><br><span class="line">            return isConditionMatch(metadataReader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法"><a href="#9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法" class="headerlink" title="9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法"></a>9、ClassPathBeanDefinitionScanner的registerDefaultFilters方法</h4><p>注册默认的过滤器，在父类构ClassPathScanningCandidateComponentProvider造器中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected void registerDefaultFilters() &#123;</span><br><span class="line">    //支持Component注解</span><br><span class="line">    this.includeFilters.add(new AnnotationTypeFilter(Component.class));</span><br><span class="line">    ClassLoader cl = ClassPathScanningCandidateComponentProvider.class.getClassLoader();</span><br><span class="line">    try &#123;</span><br><span class="line">        //支持JavaEE6的@ManagedBean  </span><br><span class="line">        this.includeFilters.add(new AnnotationTypeFilter(</span><br><span class="line">                ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(&quot;javax.annotation.ManagedBean&quot;, cl)), false));</span><br><span class="line">        logger.debug(&quot;JSR-250 &apos;javax.annotation.ManagedBean&apos; found and supported for component scanning&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        // JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //支持JSR-330的@Named注解</span><br><span class="line">        this.includeFilters.add(new AnnotationTypeFilter(</span><br><span class="line">                ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(&quot;javax.inject.Named&quot;, cl)), false));</span><br><span class="line">        logger.debug(&quot;JSR-330 &apos;javax.inject.Named&apos; annotation found and supported for component scanning&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        // JSR-330 API not available - simply skip.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法"><a href="#10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法" class="headerlink" title="10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法"></a>10、接（三、4）AnnotationScopeMetadataResolver的resolveScopeMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ScopeMetadata resolveScopeMetadata(BeanDefinition definition) &#123;</span><br><span class="line">    ScopeMetadata metadata = new ScopeMetadata();</span><br><span class="line">    if (definition instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">        AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition;</span><br><span class="line">        //从注解Bean定义类的属性中查找属性为”Scope”的值，即@Scope注解的值  </span><br><span class="line">        // annDef.getMetadata()方法获取StandardAnnotationMetadata，该对象维护了Bean中所有注解和注解的值</span><br><span class="line">        AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(annDef.getMetadata(), this.scopeAnnotationType);</span><br><span class="line">        //将获取到的@Scope注解的值设置到要返回的对象中</span><br><span class="line">        if (attributes != null) &#123;</span><br><span class="line">            metadata.setScopeName(attributes.getString(&quot;value&quot;));</span><br><span class="line">            //获取@Scope注解中的proxyMode属性值，在创建代理对象时会用到</span><br><span class="line">            ScopedProxyMode proxyMode = attributes.getEnum(&quot;proxyMode&quot;);</span><br><span class="line">            //如果@Scope的proxyMode属性值为null、DEFAULT或者NO  </span><br><span class="line">            if (proxyMode == null || proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">                proxyMode = this.defaultProxyMode;</span><br><span class="line">            &#125;</span><br><span class="line">            //为返回的元数据设置proxyMode</span><br><span class="line">            metadata.setScopedProxyMode(proxyMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回解析的作用域元信息对象</span><br><span class="line">    return metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法"><a href="#11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法" class="headerlink" title="11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法"></a>11、接（三、4）AnnotationConfigUtils的processCommonDefinitionAnnotations方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) &#123;</span><br><span class="line">    processCommonDefinitionAnnotations(abd, abd.getMetadata());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line">    //如果Bean定义中有@Lazy注解，则将该Bean预实例化属性设置为@lazy注解的值</span><br><span class="line">    if (metadata.isAnnotated(Lazy.class.getName())) &#123;</span><br><span class="line">        abd.setLazyInit(attributesFor(metadata, Lazy.class).getBoolean(&quot;value&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    else if (abd.getMetadata() != metadata &amp;&amp; abd.getMetadata().isAnnotated(Lazy.class.getName())) &#123;</span><br><span class="line">        abd.setLazyInit(attributesFor(abd.getMetadata(), Lazy.class).getBoolean(&quot;value&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //如果Bean定义中有@Primary注解，则为该Bean设置为autowiring自动依赖注入配的首选对象</span><br><span class="line">    if (metadata.isAnnotated(Primary.class.getName())) &#123;</span><br><span class="line">        abd.setPrimary(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //如果Bean定义中有@ DependsOn注解，则为该Bean设置所依赖的Bean名称，  </span><br><span class="line">    //容器将确保在实例化该Bean之前首先实例化所依赖的Bean</span><br><span class="line">    if (metadata.isAnnotated(DependsOn.class.getName())) &#123;</span><br><span class="line">        abd.setDependsOn(attributesFor(metadata, DependsOn.class).getStringArray(&quot;value&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (abd instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        AbstractBeanDefinition absBd = (AbstractBeanDefinition) abd;</span><br><span class="line">        //设置@Role的值</span><br><span class="line">        if (metadata.isAnnotated(Role.class.getName())) &#123;</span><br><span class="line">            absBd.setRole(attributesFor(metadata, Role.class).getNumber(&quot;value&quot;).intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        //设置@Description得值</span><br><span class="line">        if (metadata.isAnnotated(Description.class.getName())) &#123;</span><br><span class="line">            absBd.setDescription(attributesFor(metadata, Description.class).getString(&quot;value&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（三、1）AbstractApplicationContext的refresh方法"><a href="#12、接（三、1）AbstractApplicationContext的refresh方法" class="headerlink" title="12、接（三、1）AbstractApplicationContext的refresh方法"></a>12、接（三、1）AbstractApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        // Prepare this context for refreshing.</span><br><span class="line">        //清空scanner缓存，其余逻辑与一中容器相同</span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        // Tell the subclass to refresh the internal bean factory.</span><br><span class="line">        //直接获取容器父类GenericApplicationContext中的DefaultListableBeanFactory对象</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        // Prepare the bean factory for use in this context.</span><br><span class="line">        //与一中容器相同</span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">            //待子类实现</span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Invoke factory processors registered as beans in the context.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Register bean processors that intercept bean creation.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Initialize message source for this context.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            // Initialize event multicaster for this context.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            // Initialize other special beans in specific context subclasses.</span><br><span class="line">            //待子类实现</span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            // Check for listener beans and register them.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            // Last step: publish corresponding event.</span><br><span class="line">            //与一中容器相同</span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            logger.warn(&quot;Exception encountered during context initialization - cancelling refresh attempt&quot;, ex);</span><br><span class="line"></span><br><span class="line">            // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            // Reset &apos;active&apos; flag.</span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            // Propagate exception to caller.</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"><a href="#13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器" class="headerlink" title="13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"></a>13、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public AutowiredAnnotationBeanPostProcessor() &#123;</span><br><span class="line">    //将会处理@Autowire注解</span><br><span class="line">    this.autowiredAnnotationTypes.add(Autowired.class);</span><br><span class="line">    //将会处理@Value注解</span><br><span class="line">    this.autowiredAnnotationTypes.add(Value.class);</span><br><span class="line">    try &#123;</span><br><span class="line">        //将会处理javax.inject.Inject JSR-330注解</span><br><span class="line">        this.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</span><br><span class="line">                ClassUtils.forName(&quot;javax.inject.Inject&quot;, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</span><br><span class="line">        logger.info(&quot;JSR-330 &apos;javax.inject.Inject&apos; annotation found and supported for autowiring&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        // JSR-330 API not available - simply skip.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"><a href="#14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法" class="headerlink" title="14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"></a>14、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName) &#123;</span><br><span class="line">    //获取给定类的autowire相关注解的字段及方法</span><br><span class="line">    InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, null);</span><br><span class="line">    metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法"><a href="#15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法" class="headerlink" title="15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法"></a>15、AutowiredAnnotationBeanPostProcessor的findAutowiringMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata findAutowiringMetadata(String beanName, Class&lt;?&gt; clazz, @Nullable PropertyValues pvs) &#123;</span><br><span class="line">    // Fall back to class name as cache key, for backwards compatibility with custom callers.</span><br><span class="line">    //先从缓存中获取</span><br><span class="line">    String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</span><br><span class="line">    // Quick check on the concurrent map first, with minimal locking.</span><br><span class="line">    InjectionMetadata metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">    if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">        synchronized (this.injectionMetadataCache) &#123;</span><br><span class="line">            metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">            if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">                if (metadata != null) &#123;</span><br><span class="line">                    metadata.clear(pvs);</span><br><span class="line">                &#125;</span><br><span class="line">                //解析@Autowired等注解的字段和方法</span><br><span class="line">                metadata = buildAutowiringMetadata(clazz);</span><br><span class="line">                //添加缓存</span><br><span class="line">                this.injectionMetadataCache.put(cacheKey, metadata);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法"><a href="#16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法" class="headerlink" title="16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法"></a>16、AutowiredAnnotationBeanPostProcessor的buildAutowiringMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata buildAutowiringMetadata(final Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    //存放注解信息的集合  </span><br><span class="line">    LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = new LinkedList&lt;&gt;();</span><br><span class="line">    Class&lt;?&gt; targetClass = clazz;</span><br><span class="line">    //递归遍历当前类及其所有父类，解析注解</span><br><span class="line">    do &#123;</span><br><span class="line">        //当前正在处理类注解信息的集合</span><br><span class="line">        final LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements = new LinkedList&lt;&gt;();</span><br><span class="line">        //获取字段上的注解信息</span><br><span class="line">        ReflectionUtils.doWithLocalFields(targetClass, field -&gt; &#123;</span><br><span class="line">            //遍历，获取字段上的注解</span><br><span class="line">            AnnotationAttributes ann = findAutowiredAnnotation(field);</span><br><span class="line">            if (ann != null) &#123;</span><br><span class="line">                //静态字段跳过</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(&quot;Autowired annotation is not supported on static fields: &quot; + field);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //判断注解的required属性值是否有效</span><br><span class="line">                boolean required = determineRequiredStatus(ann);</span><br><span class="line">                //字段信息加入集合</span><br><span class="line">                currElements.add(new AutowiredFieldElement(field, required));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //遍历，获取方法上的注解信息</span><br><span class="line">        ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</span><br><span class="line">            //获取桥接方法的原始方法</span><br><span class="line">            Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)</span><br><span class="line">            //方法参数和方法返回值类型不同，不处理</span><br><span class="line">            if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //获取方法上的所有注解</span><br><span class="line">            AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);</span><br><span class="line">            if (ann != null &amp;&amp; method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</span><br><span class="line">                //静态方法，不处理</span><br><span class="line">                if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                    if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(&quot;Autowired annotation is not supported on static methods: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                if (method.getParameterCount() == 0) &#123;</span><br><span class="line">                    if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(&quot;Autowired annotation should only be used on methods with parameters: &quot; +</span><br><span class="line">                                method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //判断注解的required属性值是否有效</span><br><span class="line">                boolean required = determineRequiredStatus(ann);</span><br><span class="line">                //获取当前方法的属性描述符，即方法是可读的(readable)getter方法，  </span><br><span class="line">                //还是可写的(writeable)setter方法  </span><br><span class="line">                PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                //方法信息加入集合</span><br><span class="line">                currElements.add(new AutowiredMethodElement(method, required, pd));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //当前类的注解信息存放到集合中</span><br><span class="line">        elements.addAll(0, currElements);</span><br><span class="line">        targetClass = targetClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    while (targetClass != null &amp;&amp; targetClass != Object.class);</span><br><span class="line"></span><br><span class="line">    return new InjectionMetadata(clazz, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法"><a href="#17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法" class="headerlink" title="17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法"></a>17、AutowiredAnnotationBeanPostProcessor的findAutowiredAnnotation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private AnnotationAttributes findAutowiredAnnotation(AccessibleObject ao) &#123;</span><br><span class="line">    if (ao.getAnnotations().length &gt; 0) &#123;</span><br><span class="line">        //遍历所有autowire相关的注解:@Autowire、@Value以及JSR-330等</span><br><span class="line">        for (Class&lt;? extends Annotation&gt; type : this.autowiredAnnotationTypes) &#123;</span><br><span class="line">            //获取指定类型的注解</span><br><span class="line">            AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);</span><br><span class="line">            if (attributes != null) &#123;</span><br><span class="line">                return attributes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法"><a href="#18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法" class="headerlink" title="18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法"></a>18、AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法</h4><p>获取bean时，在设置属性值之前会调用处理器的postProcessPropertyValues方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public PropertyValues postProcessPropertyValues(  </span><br><span class="line">        PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException &#123;  </span><br><span class="line">    //获取@Autowired等注解信息 </span><br><span class="line">    InjectionMetadata metadata = findAutowiringMetadata(bean.getClass());  </span><br><span class="line">    try &#123;  </span><br><span class="line">        //自动注入Bean的属性</span><br><span class="line">        metadata.inject(bean, beanName, pvs);  </span><br><span class="line">    &#125;  </span><br><span class="line">    catch (Throwable ex) &#123;  </span><br><span class="line">        throw new BeanCreationException(beanName, &quot;Injection of autowired dependencies failed&quot;, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line">    return pvs;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="19、InjectionMetadata的inject方法"><a href="#19、InjectionMetadata的inject方法" class="headerlink" title="19、InjectionMetadata的inject方法"></a>19、InjectionMetadata的inject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void inject(Object target, @Nullable String beanName, @Nullable PropertyValues pvs) throws Throwable &#123;</span><br><span class="line">    Collection&lt;InjectedElement&gt; checkedElements = this.checkedElements;</span><br><span class="line">    Collection&lt;InjectedElement&gt; elementsToIterate =</span><br><span class="line">            (checkedElements != null ? checkedElements : this.injectedElements);</span><br><span class="line">    if (!elementsToIterate.isEmpty()) &#123;</span><br><span class="line">        boolean debug = logger.isDebugEnabled();</span><br><span class="line">        for (InjectedElement element : elementsToIterate) &#123;</span><br><span class="line">            if (debug) &#123;</span><br><span class="line">                logger.debug(&quot;Processing injected element of bean &apos;&quot; + beanName + &quot;&apos;: &quot; + element);</span><br><span class="line">            &#125;</span><br><span class="line">            //自动注入Bean的属性</span><br><span class="line">            element.inject(target, beanName, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、AutowiredFieldElement的inject方法"><a href="#20、AutowiredFieldElement的inject方法" class="headerlink" title="20、AutowiredFieldElement的inject方法"></a>20、AutowiredFieldElement的inject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void inject(Object bean, @Nullable String beanName, @Nullable PropertyValues pvs) throws Throwable &#123;</span><br><span class="line">    //注入的字段</span><br><span class="line">    Field field = (Field) this.member;</span><br><span class="line">    Object value;</span><br><span class="line">    //有缓存使用缓存</span><br><span class="line">    if (this.cached) &#123;</span><br><span class="line">        value = resolvedCachedArgument(beanName, this.cachedFieldValue);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        DependencyDescriptor desc = new DependencyDescriptor(field, this.required);</span><br><span class="line">        desc.setContainingClass(bean.getClass());</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames = new LinkedHashSet&lt;&gt;(1);</span><br><span class="line">        Assert.state(beanFactory != null, &quot;No BeanFactory available&quot;);</span><br><span class="line">        TypeConverter typeConverter = beanFactory.getTypeConverter();</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取依赖对象 </span><br><span class="line">            value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            throw new UnsatisfiedDependencyException(null, beanName, new InjectionPoint(field), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            //添加缓存</span><br><span class="line">            if (!this.cached) &#123;</span><br><span class="line">                if (value != null || this.required) &#123;</span><br><span class="line">                    this.cachedFieldValue = desc;</span><br><span class="line">                    //注册依赖</span><br><span class="line">                    registerDependentBeans(beanName, autowiredBeanNames);</span><br><span class="line">                    if (autowiredBeanNames.size() == 1) &#123;</span><br><span class="line">                        String autowiredBeanName = autowiredBeanNames.iterator().next();</span><br><span class="line">                        //如果容器中有依赖对象且依赖对象类型和字段类型匹配</span><br><span class="line">                        if (beanFactory.containsBean(autowiredBeanName) &amp;&amp;</span><br><span class="line">                                beanFactory.isTypeMatch(autowiredBeanName, field.getType())) &#123;</span><br><span class="line">                            //创建缓存</span><br><span class="line">                            this.cachedFieldValue = new ShortcutDependencyDescriptor(</span><br><span class="line">                                    desc, autowiredBeanName, field.getType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    this.cachedFieldValue = null;</span><br><span class="line">                &#125;</span><br><span class="line">                this.cached = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (value != null) &#123;</span><br><span class="line">        ReflectionUtils.makeAccessible(field);</span><br><span class="line">        field.set(bean, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、AutowiredFieldElement的resolvedCachedArgument方法"><a href="#21、AutowiredFieldElement的resolvedCachedArgument方法" class="headerlink" title="21、AutowiredFieldElement的resolvedCachedArgument方法"></a>21、AutowiredFieldElement的resolvedCachedArgument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private Object resolvedCachedArgument(@Nullable String beanName, @Nullable Object cachedArgument) &#123;</span><br><span class="line">    if (cachedArgument instanceof DependencyDescriptor) &#123;</span><br><span class="line">        DependencyDescriptor descriptor = (DependencyDescriptor) cachedArgument;</span><br><span class="line">        Assert.state(beanFactory != null, &quot;No BeanFactory available&quot;);</span><br><span class="line">        //获取依赖对象，该方法在XmlBeanFactory容器中已有介绍</span><br><span class="line">        return this.beanFactory.resolveDependency(descriptor, beanName, null, null);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return cachedArgument;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"><a href="#22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器" class="headerlink" title="22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器"></a>22、接（三、3）实例化AutowiredAnnotationBeanPostProcessor处理器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        //加载WebService相关的类</span><br><span class="line">        Class&lt;? extends Annotation&gt; clazz = (Class&lt;? extends Annotation&gt;)</span><br><span class="line">                ClassUtils.forName(&quot;javax.xml.ws.WebServiceRef&quot;, CommonAnnotationBeanPostProcessor.class.getClassLoader());</span><br><span class="line">        webServiceRefClass = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        webServiceRefClass = null;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        //加载EJB相关的类  </span><br><span class="line">        Class&lt;? extends Annotation&gt; clazz = (Class&lt;? extends Annotation&gt;)</span><br><span class="line">                ClassUtils.forName(&quot;javax.ejb.EJB&quot;, CommonAnnotationBeanPostProcessor.class.getClassLoader());</span><br><span class="line">        ejbRefClass = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        ejbRefClass = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public CommonAnnotationBeanPostProcessor() &#123;</span><br><span class="line">    setOrder(Ordered.LOWEST_PRECEDENCE - 3);</span><br><span class="line">    //父类InitDestroyAnnotationBeanPostProcessor</span><br><span class="line">    //在bean初始化之前postProcessBeforeInitialization执行@PostConstruct注解方法</span><br><span class="line">    //在bean销毁之前postProcessBeforeDestruction执行@PreDestroy注解方法</span><br><span class="line">    setInitAnnotationType(PostConstruct.class);</span><br><span class="line">    setDestroyAnnotationType(PreDestroy.class);</span><br><span class="line">    //当使用@Resource注解时.忽略JAX-WS的资源类型 </span><br><span class="line">    ignoreResourceType(&quot;javax.xml.ws.WebServiceContext&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"><a href="#23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法" class="headerlink" title="23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法"></a>23、AutowiredAnnotationBeanPostProcessor的postProcessMergedBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName) &#123;</span><br><span class="line">    super.postProcessMergedBeanDefinition(beanDefinition, beanType, beanName);</span><br><span class="line">    //获取@Resource注解的属性信息</span><br><span class="line">    InjectionMetadata metadata = findResourceMetadata(beanName, beanType, null);</span><br><span class="line">    metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法"><a href="#24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法" class="headerlink" title="24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法"></a>24、AutowiredAnnotationBeanPostProcessor的findResourceMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata findResourceMetadata(String beanName, final Class&lt;?&gt; clazz, @Nullable PropertyValues pvs) &#123;</span><br><span class="line">    // Fall back to class name as cache key, for backwards compatibility with custom callers.</span><br><span class="line">    String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</span><br><span class="line">    // Quick check on the concurrent map first, with minimal locking.</span><br><span class="line">    //首先从容器缓存中查找 </span><br><span class="line">    InjectionMetadata metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">    //缓存数据过期</span><br><span class="line">    if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">        synchronized (this.injectionMetadataCache) &#123;</span><br><span class="line">            metadata = this.injectionMetadataCache.get(cacheKey);</span><br><span class="line">            if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">                if (metadata != null) &#123;</span><br><span class="line">                    metadata.clear(pvs);</span><br><span class="line">                &#125;</span><br><span class="line">                //获取@Resource注解的属性信息</span><br><span class="line">                metadata = buildResourceMetadata(clazz);</span><br><span class="line">                this.injectionMetadataCache.put(cacheKey, metadata);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法"><a href="#25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法" class="headerlink" title="25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法"></a>25、AutowiredAnnotationBeanPostProcessor的buildResourceMetadata方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">private InjectionMetadata buildResourceMetadata(final Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    //注解数据的集合</span><br><span class="line">    LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = new LinkedList&lt;&gt;();</span><br><span class="line">    Class&lt;?&gt; targetClass = clazz;</span><br><span class="line">    //递归地的解析给定类及其所有父类的注解信息</span><br><span class="line">    do &#123;</span><br><span class="line">        //存放当前类注解数据的集合</span><br><span class="line">        final LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements =</span><br><span class="line">                new LinkedList&lt;&gt;();</span><br><span class="line">        //遍历所有的字段，查找符合的注解 </span><br><span class="line">        ReflectionUtils.doWithLocalFields(targetClass, field -&gt; &#123;</span><br><span class="line">            //如果字段上配置了WebService相关的注解</span><br><span class="line">            if (webServiceRefClass != null &amp;&amp; field.isAnnotationPresent(webServiceRefClass)) &#123;</span><br><span class="line">                //静态不处理</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;@WebServiceRef annotation is not supported on static fields&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                currElements.add(new WebServiceRefElement(field, field, null));</span><br><span class="line">            &#125;</span><br><span class="line">            //如果当前字段上配置了EJB相关的注解</span><br><span class="line">            else if (ejbRefClass != null &amp;&amp; field.isAnnotationPresent(ejbRefClass)) &#123;</span><br><span class="line">                //静态不处理</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;@EJB annotation is not supported on static fields&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //加入当前注解数据的集合</span><br><span class="line">                currElements.add(new EjbRefElement(field, field, null));</span><br><span class="line">            &#125;</span><br><span class="line">            //如果当前字段上配置了@Resource注解  </span><br><span class="line">            else if (field.isAnnotationPresent(Resource.class)) &#123;</span><br><span class="line">                if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;@Resource annotation is not supported on static fields&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //如果当前自动的类型不再被忽略的Resource类型中，  </span><br><span class="line">                //加入当前注解数据的集合</span><br><span class="line">                if (!ignoredResourceTypes.contains(field.getType().getName())) &#123;</span><br><span class="line">                    currElements.add(new ResourceElement(field, field, null));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //遍历所有方法，查找相关的注解</span><br><span class="line">        ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</span><br><span class="line">            //获取桥接方法</span><br><span class="line">            Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);</span><br><span class="line">            if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //当前方法没有覆盖父类方法</span><br><span class="line">            if (method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</span><br><span class="line">                //如果方法上配置了WebService相关的注解</span><br><span class="line">                if (webServiceRefClass != null &amp;&amp; bridgedMethod.isAnnotationPresent(webServiceRefClass)) &#123;</span><br><span class="line">                    if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@WebServiceRef annotation is not supported on static methods&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (method.getParameterCount() != 1) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@WebServiceRef annotation requires a single-arg method: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //获取方法的属性描述 </span><br><span class="line">                    PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                    //加入当前注解数据的集合</span><br><span class="line">                    currElements.add(new WebServiceRefElement(method, bridgedMethod, pd));</span><br><span class="line">                &#125;</span><br><span class="line">                //如果方法上配置了EJB相关的注解  </span><br><span class="line">                else if (ejbRefClass != null &amp;&amp; bridgedMethod.isAnnotationPresent(ejbRefClass)) &#123;</span><br><span class="line">                    if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@EJB annotation is not supported on static methods&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (method.getParameterCount() != 1) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@EJB annotation requires a single-arg method: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                    currElements.add(new EjbRefElement(method, bridgedMethod, pd));</span><br><span class="line">                &#125;</span><br><span class="line">                //如果方法上配置了EJB相关的注解  </span><br><span class="line">                else if (bridgedMethod.isAnnotationPresent(Resource.class)) &#123;</span><br><span class="line">                    if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@Resource annotation is not supported on static methods&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">                    if (paramTypes.length != 1) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;@Resource annotation requires a single-arg method: &quot; + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (!ignoredResourceTypes.contains(paramTypes[0].getName())) &#123;</span><br><span class="line">                        PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                        currElements.add(new ResourceElement(method, bridgedMethod, pd));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //将当前类注解数据存放到集合中 </span><br><span class="line">        elements.addAll(0, currElements);</span><br><span class="line">        targetClass = targetClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    while (targetClass != null &amp;&amp; targetClass != Object.class);</span><br><span class="line"></span><br><span class="line">    return new InjectionMetadata(clazz, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、ClassPathXmlApplicationContext容器启动&quot;&gt;&lt;a href=&quot;#一、ClassPathXmlApplicationContext容器启动&quot; class=&quot;headerlink&quot; title=&quot;一、ClassPathXmlApplic
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码IOC及AOP总结</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81IOC%E5%8F%8AAOP%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/Spring源码IOC及AOP总结/</id>
    <published>2020-01-16T13:43:36.403Z</published>
    <updated>2018-10-13T14:01:23.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基础容器"><a href="#一、基础容器" class="headerlink" title="一、基础容器"></a>一、基础容器</h3><p><img src="/2020/01/16/spring源码/Spring源码IOC及AOP总结/基础容器结构图.png" alt="基础容器结构图"></p><h4 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h4><p>BeanFactory接口：定义了IOC容器基本方法，如getBean方法。<br>AutowireCapableBeanFactory接口：定义了创建bean及自动装配相关方法。<br>HierarchicalBeanFactory接口：定义了容器父子关系相关方法。<br>ListableBeanFactory接口：定义了容器中bean的集合相关方法。<br>ConfigurableBeanFactory接口：定义了配置基础容器相关方法，如设置类加载器、添加bean后处理器等。<br>ConfigurableListableBeanFactory接口：继承了以上所有接口，并定义了BeanDefinition的获取、冻结配置、预加载单例等方法。  </p><h4 id="2、实现类"><a href="#2、实现类" class="headerlink" title="2、实现类"></a>2、实现类</h4><p>XmlBeanFactory：最基础的ioc容器，内部拥有一个XmlBeanDefinitionReader，用来读取并解析xml文件，该类继承DefaultListableBeanFactory。<br>DefaultListableBeanFactory：实现了ConfigurableListableBeanFactory接口。实现了BeanDefinitionRegistry接口，提供了BeanDefinition的注册功能。<br>AbstractAutowireCapableBeanFactory抽象类：实现了AutowireCapableBeanFactory接口，该类doCreateBean方法完成了bean的创建及初始化。<br>AbstractBeanFactory抽象类：该类完成bean的作用域管理及循环依赖的检查。<br>DefaultSingletonBeanRegistry：该类完成单例bean的管理。  </p><h3 id="二、扩展容器"><a href="#二、扩展容器" class="headerlink" title="二、扩展容器"></a>二、扩展容器</h3><p><img src="/2020/01/16/spring源码/Spring源码IOC及AOP总结/扩展容器结构图.png" alt="扩展容器结构图"></p><h4 id="1、接口-1"><a href="#1、接口-1" class="headerlink" title="1、接口"></a>1、接口</h4><p>ApplicationContext接口：定义了扩展容器的基本方法，如getApplicationName方法。<br>ConfigurableApplicationContext接口：定义了配置扩展容器相关方法，如添加BeanFactory后处理器、监听器及刷新上下文方法。<br>WebApplicationContext接口：定义了Servlet容器基本属性。<br>ConfigurableWebApplicationContext接口：定义了配置Servlet容器相关方法。    </p><h4 id="2、实现类-1"><a href="#2、实现类-1" class="headerlink" title="2、实现类"></a>2、实现类</h4><p>AnnotationConfigApplicationContext：基于注解的IOC容器拥有ClassPathBeanDefinitionScanner扫描器，加载注解了@Component的类。该类继承GenericApplicationContext。<br>GenericApplicationContext：内部维护了一个DefaultListableBeanFactory。实现BeanDefinitionRegistry接口，提供了BeanDefinition的注册功能。<br>AbstractApplicationContext抽象类：实现了ConfigurableApplicationContext接口，提供了扩展容器配置相关方法，该类refresh方法完成容器上下文刷新。<br>AnnotationConfigServletWebServerApplicationContext：基于注解的ServletWeb的IOC容器，基于注解的IOC容器拥有ClassPathBeanDefinitionScanner扫描器，加载注解了@Component的类。该类继承ServletWebServerApplicationContext。<br>ServletWebServerApplicationContext：该类重写了父类的关于Servlet容器配置的相关方法，Servlet容器在该类中创建。<br>GenericWebApplicationContext：实现了ConfigurableWebApplicationContext接口，提供了Servlet容器配置的相关方法。</p><h3 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h3><p><img src="/2020/01/16/spring源码/Spring源码IOC及AOP总结/AOP结构图.png" alt="AOP结构图"><br>SmartInstantiationAwareBeanPostProcessor接口：bean的后处理器接口。<br>AbstractAutoProxyCreator：创建bean的代理对象。<br>ProxyFactory：代理对象创建工厂。<br>DefaultAopProxyFactory：Proxy创建工厂。<br>JdkDynamicAopProxy：基于JDK的动态代理的拦截器。<br>ObjenesisCglibAopProxy：基于cglib的动态代理的拦截器。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、基础容器&quot;&gt;&lt;a href=&quot;#一、基础容器&quot; class=&quot;headerlink&quot; title=&quot;一、基础容器&quot;&gt;&lt;/a&gt;一、基础容器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/01/16/spring源码/Spring源码IOC及AOP总结/基础容器结
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码AOP</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81AOP/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/Spring源码AOP/</id>
    <published>2020-01-16T13:43:36.399Z</published>
    <updated>2018-07-07T15:08:45.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、AOP动态代理配置文件加载"><a href="#一、AOP动态代理配置文件加载" class="headerlink" title="一、AOP动态代理配置文件加载"></a>一、AOP动态代理配置文件加载</h3><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Dao &#123;    </span><br><span class="line">    public void select();</span><br><span class="line">    public void insert();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>被代理的类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class DaoImpl implements Dao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void select() &#123;</span><br><span class="line">        System.out.println(&quot;Enter DaoImpl.select()&quot;);</span><br><span class="line">    ｝</span><br><span class="line">    @Override</span><br><span class="line">    public void insert() &#123;</span><br><span class="line">        System.out.println(&quot;Enter DaoImpl.insert()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class TimeHandler &#123;</span><br><span class="line">   public void printTime() &#123;</span><br><span class="line">       System.out.println(&quot;CurrentTime:&quot; + System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引介增强，将该类中的方法添加到被代理的类中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Mathematician &#123;  </span><br><span class="line">    public void calculate();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MathematicianImpl implements Mathematician &#123;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void calculate() &#123;  </span><br><span class="line">        System.out.println(&quot;calculate the result of the formulae&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;daoImpl&quot; class=&quot;org.xrq.action.aop.DaoImpl&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;Einstein&quot; class=&quot;org.xrq.action.aop.Einstein&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;timeHandler&quot; class=&quot;org.xrq.action.aop.TimeHandler&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config proxy-target-class=&quot;true&quot;&gt;</span><br><span class="line">        &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot;&gt;</span><br><span class="line">            &lt;aop:pointcut id=&quot;addAllMethod&quot; expression=&quot;execution(* org.xrq.action.aop.Dao.*(..))&quot; /&gt;</span><br><span class="line">            &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</span><br><span class="line">            &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</span><br><span class="line">            &lt;aop:declare-parents types-matching=&quot;org.xrq.action.aop.Dao&quot;   </span><br><span class="line">                implement-interface=&quot;org.xrq.action.aop.Mathematician&quot;  </span><br><span class="line">                default-impl=&quot;org.xrq.action.aop.MathematicianImpl&quot;/&gt;  </span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>META-INF/spring.handlers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler</span><br></pre></td></tr></table></figure></p><h4 id="1、AopNamespaceHandler的init方法"><a href="#1、AopNamespaceHandler的init方法" class="headerlink" title="1、AopNamespaceHandler的init方法"></a>1、AopNamespaceHandler的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void init() &#123;</span><br><span class="line">    // In 2.0 XSD as well as in 2.1 XSD.</span><br><span class="line">    registerBeanDefinitionParser(&quot;config&quot;, new ConfigBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;aspectj-autoproxy&quot;, new AspectJAutoProxyBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionDecorator(&quot;scoped-proxy&quot;, new ScopedProxyBeanDefinitionDecorator());</span><br><span class="line"></span><br><span class="line">    // Only in 2.0 XSD: moved to context namespace as of 2.1</span><br><span class="line">    registerBeanDefinitionParser(&quot;spring-configured&quot;, new SpringConfiguredBeanDefinitionParser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、ConfigBeanDefinitionParser的parse方法"><a href="#2、ConfigBeanDefinitionParser的parse方法" class="headerlink" title="2、ConfigBeanDefinitionParser的parse方法"></a>2、ConfigBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    CompositeComponentDefinition compositeDef =</span><br><span class="line">            new CompositeComponentDefinition(element.getTagName(), parserContext.extractSource(element));</span><br><span class="line">    parserContext.pushContainingComponent(compositeDef);</span><br><span class="line">    //注册AutoProxyCreator</span><br><span class="line">    configureAutoProxyCreator(parserContext, element);</span><br><span class="line">    //获取子元素</span><br><span class="line">    List&lt;Element&gt; childElts = DomUtils.getChildElements(element);</span><br><span class="line">    for (Element elt: childElts) &#123;</span><br><span class="line">        String localName = parserContext.getDelegate().getLocalName(elt);</span><br><span class="line">        if (POINTCUT.equals(localName)) &#123;</span><br><span class="line">            //解析pointcut元素</span><br><span class="line">            parsePointcut(elt, parserContext);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ADVISOR.equals(localName)) &#123;</span><br><span class="line">            //解析advisor元素</span><br><span class="line">            parseAdvisor(elt, parserContext);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ASPECT.equals(localName)) &#123;</span><br><span class="line">            //解析aspect元素</span><br><span class="line">            parseAspect(elt, parserContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //注册综合组件并广播</span><br><span class="line">    parserContext.popAndRegisterContainingComponent();</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ConfigBeanDefinitionParser的parse方法"><a href="#3、ConfigBeanDefinitionParser的parse方法" class="headerlink" title="3、ConfigBeanDefinitionParser的parse方法"></a>3、ConfigBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private void configureAutoProxyCreator(ParserContext parserContext, Element element) &#123;</span><br><span class="line">    AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"><a href="#4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法" class="headerlink" title="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"></a>4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">        ParserContext parserContext, Element sourceElement) &#123;</span><br><span class="line">    //注册AspectJAwareAdvisorAutoProxyCreator</span><br><span class="line">    BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">            parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">    //设置proxy-target-class和expose-proxy属性</span><br><span class="line">    useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">    //把创建器组件注册到综合组件并广播</span><br><span class="line">    registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"><a href="#5、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法" class="headerlink" title="5、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"></a>5、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    return registerOrEscalateApcAsRequired(AspectJAwareAdvisorAutoProxyCreator.class, registry, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"><a href="#6、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法" class="headerlink" title="6、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"></a>6、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private static BeanDefinition registerOrEscalateApcAsRequired(Class&lt;?&gt; cls, BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">    //已存在创建器，根据优先级判断使用哪一个</span><br><span class="line">    if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">        BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">        if (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">            int currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">            int requiredPriority = findPriorityForClass(cls);</span><br><span class="line">            if (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">                apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    RootBeanDefinition beanDefinition = new RootBeanDefinition(cls);</span><br><span class="line">    beanDefinition.setSource(source);</span><br><span class="line">    beanDefinition.getPropertyValues().add(&quot;order&quot;, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    //注册新的创建器</span><br><span class="line">    registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">    return beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（一、2）ConfigBeanDefinitionParser的parsePointcut方法"><a href="#7、接（一、2）ConfigBeanDefinitionParser的parsePointcut方法" class="headerlink" title="7、接（一、2）ConfigBeanDefinitionParser的parsePointcut方法"></a>7、接（一、2）ConfigBeanDefinitionParser的parsePointcut方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) &#123;</span><br><span class="line">    //获取id</span><br><span class="line">    String id = pointcutElement.getAttribute(ID);</span><br><span class="line">    //获取expression</span><br><span class="line">    String expression = pointcutElement.getAttribute(EXPRESSION);</span><br><span class="line"></span><br><span class="line">    AbstractBeanDefinition pointcutDefinition = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        this.parseState.push(new PointcutEntry(id));</span><br><span class="line">        //创建切点BeanDefinition</span><br><span class="line">        pointcutDefinition = createPointcutDefinition(expression);</span><br><span class="line">        pointcutDefinition.setSource(parserContext.extractSource(pointcutElement));</span><br><span class="line"></span><br><span class="line">        String pointcutBeanName = id;</span><br><span class="line">        //注册切点BeanDefinition</span><br><span class="line">        if (StringUtils.hasText(pointcutBeanName)) &#123;</span><br><span class="line">            parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">        //把切点组件注册到综合组件并广播</span><br><span class="line">        parserContext.registerComponent(</span><br><span class="line">                new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression));</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return pointcutDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、2）ConfigBeanDefinitionParser的parseAdvisor方法"><a href="#8、接（一、2）ConfigBeanDefinitionParser的parseAdvisor方法" class="headerlink" title="8、接（一、2）ConfigBeanDefinitionParser的parseAdvisor方法"></a>8、接（一、2）ConfigBeanDefinitionParser的parseAdvisor方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">private void parseAdvisor(Element advisorElement, ParserContext parserContext) &#123;</span><br><span class="line">    //创建通知器BeanDefinition</span><br><span class="line">    AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext);</span><br><span class="line">    String id = advisorElement.getAttribute(ID);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        this.parseState.push(new AdvisorEntry(id));</span><br><span class="line">        String advisorBeanName = id;</span><br><span class="line">        //注册通知器BeanDefinition</span><br><span class="line">        if (StringUtils.hasText(advisorBeanName)) &#123;</span><br><span class="line">            parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取切点</span><br><span class="line">        Object pointcut = parsePointcutProperty(advisorElement, parserContext);</span><br><span class="line">        //切点或切点引用加入通知器</span><br><span class="line">        //把通知器组件注册到综合组件并广播</span><br><span class="line">        if (pointcut instanceof BeanDefinition) &#123;</span><br><span class="line">            advisorDef.getPropertyValues().add(POINTCUT, pointcut);</span><br><span class="line">            parserContext.registerComponent(</span><br><span class="line">                    new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut));</span><br><span class="line">        &#125;</span><br><span class="line">        else if (pointcut instanceof String) &#123;</span><br><span class="line">            advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut));</span><br><span class="line">            parserContext.registerComponent(</span><br><span class="line">                    new AdvisorComponentDefinition(advisorBeanName, advisorDef));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ConfigBeanDefinitionParser的createAdvisorBeanDefinition方法"><a href="#9、ConfigBeanDefinitionParser的createAdvisorBeanDefinition方法" class="headerlink" title="9、ConfigBeanDefinitionParser的createAdvisorBeanDefinition方法"></a>9、ConfigBeanDefinitionParser的createAdvisorBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) &#123;</span><br><span class="line">    //创建通知器BeanDefinition</span><br><span class="line">    RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class);</span><br><span class="line">    advisorDefinition.setSource(parserContext.extractSource(advisorElement));</span><br><span class="line">    //获取advice引用</span><br><span class="line">    String adviceRef = advisorElement.getAttribute(ADVICE_REF);</span><br><span class="line">    //advice引用加入通知器BeanDefinition</span><br><span class="line">    if (!StringUtils.hasText(adviceRef)) &#123;</span><br><span class="line">        parserContext.getReaderContext().error(</span><br><span class="line">                &quot;&apos;advice-ref&apos; attribute contains empty value.&quot;, advisorElement, this.parseState.snapshot());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        advisorDefinition.getPropertyValues().add(</span><br><span class="line">                ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef));</span><br><span class="line">    &#125;</span><br><span class="line">    //通知器顺序</span><br><span class="line">    if (advisorElement.hasAttribute(ORDER_PROPERTY)) &#123;</span><br><span class="line">        advisorDefinition.getPropertyValues().add(</span><br><span class="line">                ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return advisorDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、8）ConfigBeanDefinitionParser的parsePointcutProperty方法"><a href="#10、接（一、8）ConfigBeanDefinitionParser的parsePointcutProperty方法" class="headerlink" title="10、接（一、8）ConfigBeanDefinitionParser的parsePointcutProperty方法"></a>10、接（一、8）ConfigBeanDefinitionParser的parsePointcutProperty方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private Object parsePointcutProperty(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    if (element.hasAttribute(POINTCUT) &amp;&amp; element.hasAttribute(POINTCUT_REF)) &#123;</span><br><span class="line">        parserContext.getReaderContext().error(</span><br><span class="line">                &quot;Cannot define both &apos;pointcut&apos; and &apos;pointcut-ref&apos; on &lt;advisor&gt; tag.&quot;,</span><br><span class="line">                element, this.parseState.snapshot());</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (element.hasAttribute(POINTCUT)) &#123;</span><br><span class="line">        // Create a pointcut for the anonymous pc and register it.</span><br><span class="line">        //获取切点表达式</span><br><span class="line">        String expression = element.getAttribute(POINTCUT);</span><br><span class="line">        //创建切点BeanDefinition</span><br><span class="line">        AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression);</span><br><span class="line">        pointcutDefinition.setSource(parserContext.extractSource(element));</span><br><span class="line">        return pointcutDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (element.hasAttribute(POINTCUT_REF)) &#123;</span><br><span class="line">        //获取切点bean的id</span><br><span class="line">        String pointcutRef = element.getAttribute(POINTCUT_REF);</span><br><span class="line">        if (!StringUtils.hasText(pointcutRef)) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(</span><br><span class="line">                    &quot;&apos;pointcut-ref&apos; attribute contains empty value.&quot;, element, this.parseState.snapshot());</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return pointcutRef;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        parserContext.getReaderContext().error(</span><br><span class="line">                &quot;Must define one of &apos;pointcut&apos; or &apos;pointcut-ref&apos; on &lt;advisor&gt; tag.&quot;,</span><br><span class="line">                element, this.parseState.snapshot());</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、ConfigBeanDefinitionParser的createPointcutDefinition方法"><a href="#11、ConfigBeanDefinitionParser的createPointcutDefinition方法" class="headerlink" title="11、ConfigBeanDefinitionParser的createPointcutDefinition方法"></a>11、ConfigBeanDefinitionParser的createPointcutDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected AbstractBeanDefinition createPointcutDefinition(String expression) &#123;</span><br><span class="line">    //创建切点BeanDefinition</span><br><span class="line">    RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class);</span><br><span class="line">    beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE);</span><br><span class="line">    beanDefinition.setSynthetic(true);</span><br><span class="line">    //添加切点表达式属性</span><br><span class="line">    beanDefinition.getPropertyValues().add(EXPRESSION, expression);</span><br><span class="line">    return beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（一、2）ConfigBeanDefinitionParser的parseAspect方法"><a href="#12、接（一、2）ConfigBeanDefinitionParser的parseAspect方法" class="headerlink" title="12、接（一、2）ConfigBeanDefinitionParser的parseAspect方法"></a>12、接（一、2）ConfigBeanDefinitionParser的parseAspect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">private void parseAspect(Element aspectElement, ParserContext parserContext) &#123;</span><br><span class="line">    //获取切面名</span><br><span class="line">    String aspectId = aspectElement.getAttribute(ID);</span><br><span class="line">    //获取切面bean名</span><br><span class="line">    String aspectName = aspectElement.getAttribute(REF);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        this.parseState.push(new AspectEntry(aspectId, aspectName));</span><br><span class="line">        List&lt;BeanDefinition&gt; beanDefinitions = new ArrayList&lt;BeanDefinition&gt;();</span><br><span class="line">        List&lt;BeanReference&gt; beanReferences = new ArrayList&lt;BeanReference&gt;();</span><br><span class="line">        //获取declare-parents类型的子元素</span><br><span class="line">        List&lt;Element&gt; declareParents = DomUtils.getChildElementsByTagName(aspectElement, DECLARE_PARENTS);</span><br><span class="line">        for (int i = METHOD_INDEX; i &lt; declareParents.size(); i++) &#123;</span><br><span class="line">            Element declareParentsElement = declareParents.get(i);</span><br><span class="line">            //解析declare-parents元素，并加入BeanDefinition集合</span><br><span class="line">            beanDefinitions.add(parseDeclareParents(declareParentsElement, parserContext));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // We have to parse &quot;advice&quot; and all the advice kinds in one loop, to get the</span><br><span class="line">        // ordering semantics right.</span><br><span class="line">        //获取子元素</span><br><span class="line">        NodeList nodeList = aspectElement.getChildNodes();</span><br><span class="line">        boolean adviceFoundAlready = false;</span><br><span class="line">        for (int i = 0; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">            Node node = nodeList.item(i);</span><br><span class="line">            //该元素节点为advice节点,如before等</span><br><span class="line">            if (isAdviceNode(node, parserContext)) &#123;</span><br><span class="line">                if (!adviceFoundAlready) &#123;</span><br><span class="line">                    adviceFoundAlready = true;</span><br><span class="line">                    if (!StringUtils.hasText(aspectName)) &#123;</span><br><span class="line">                        parserContext.getReaderContext().error(</span><br><span class="line">                                &quot;&lt;aspect&gt; tag needs aspect bean reference via &apos;ref&apos; attribute when declaring advices.&quot;,</span><br><span class="line">                                aspectElement, this.parseState.snapshot());</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //切面bean引用加入引用集合</span><br><span class="line">                    beanReferences.add(new RuntimeBeanReference(aspectName));</span><br><span class="line">                &#125;</span><br><span class="line">                //解析获取通知器BeanDefinition</span><br><span class="line">                AbstractBeanDefinition advisorDefinition = parseAdvice(</span><br><span class="line">                        aspectName, i, aspectElement, (Element) node, parserContext, beanDefinitions, beanReferences);</span><br><span class="line">                beanDefinitions.add(advisorDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //创建切面组件BeanDefinition</span><br><span class="line">        AspectComponentDefinition aspectComponentDefinition = createAspectComponentDefinition(</span><br><span class="line">                aspectElement, aspectId, beanDefinitions, beanReferences, parserContext);</span><br><span class="line">        parserContext.pushContainingComponent(aspectComponentDefinition);</span><br><span class="line">        //获取切点类型子元素</span><br><span class="line">        List&lt;Element&gt; pointcuts = DomUtils.getChildElementsByTagName(aspectElement, POINTCUT);</span><br><span class="line">        for (Element pointcutElement : pointcuts) &#123;</span><br><span class="line">            //解析切点元素</span><br><span class="line">            parsePointcut(pointcutElement, parserContext);</span><br><span class="line">        &#125;</span><br><span class="line">        //把切面组件注册到综合组件并广播</span><br><span class="line">        parserContext.popAndRegisterContainingComponent();</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、ConfigBeanDefinitionParser的parseDeclareParents方法"><a href="#13、ConfigBeanDefinitionParser的parseDeclareParents方法" class="headerlink" title="13、ConfigBeanDefinitionParser的parseDeclareParents方法"></a>13、ConfigBeanDefinitionParser的parseDeclareParents方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) &#123;</span><br><span class="line">    //通知器BeanDefinition的创建器</span><br><span class="line">    BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class);</span><br><span class="line">    //添加构造函数的参数  </span><br><span class="line">    //这里的构造函数是指DeclareParentsAdvisor的构造函数  </span><br><span class="line">    builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE));</span><br><span class="line">    //类型匹配表达式</span><br><span class="line">    builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN));</span><br><span class="line">    //接口的默认实现</span><br><span class="line">    String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL);</span><br><span class="line">    //接口的实现引用</span><br><span class="line">    String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF);</span><br><span class="line">    //指定接口实现或引用</span><br><span class="line">    if (StringUtils.hasText(defaultImpl) &amp;&amp; !StringUtils.hasText(delegateRef)) &#123;</span><br><span class="line">        builder.addConstructorArgValue(defaultImpl);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (StringUtils.hasText(delegateRef) &amp;&amp; !StringUtils.hasText(defaultImpl)) &#123;</span><br><span class="line">        builder.addConstructorArgReference(delegateRef);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        parserContext.getReaderContext().error(</span><br><span class="line">                &quot;Exactly one of the &quot; + DEFAULT_IMPL + &quot; or &quot; + DELEGATE_REF + &quot; attributes must be specified&quot;,</span><br><span class="line">                declareParentsElement, this.parseState.snapshot());</span><br><span class="line">    &#125;</span><br><span class="line">    //创建DeclareParentsAdvisor的BeanDefinition</span><br><span class="line">    AbstractBeanDefinition definition = builder.getBeanDefinition();</span><br><span class="line">    definition.setSource(parserContext.extractSource(declareParentsElement));</span><br><span class="line">    //注册该BeanDefinition</span><br><span class="line">    parserContext.getReaderContext().registerWithGeneratedName(definition);</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（一、12）ConfigBeanDefinitionParser的parseAdvice方法"><a href="#14、接（一、12）ConfigBeanDefinitionParser的parseAdvice方法" class="headerlink" title="14、接（一、12）ConfigBeanDefinitionParser的parseAdvice方法"></a>14、接（一、12）ConfigBeanDefinitionParser的parseAdvice方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">private AbstractBeanDefinition parseAdvice(</span><br><span class="line">        String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,</span><br><span class="line">        List&lt;BeanDefinition&gt; beanDefinitions, List&lt;BeanReference&gt; beanReferences) &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)));</span><br><span class="line"></span><br><span class="line">        // create the method factory bean</span><br><span class="line">        //拦截方法工厂BeanDefinition</span><br><span class="line">        RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class);</span><br><span class="line">        methodDefinition.getPropertyValues().add(&quot;targetBeanName&quot;, aspectName);</span><br><span class="line">        methodDefinition.getPropertyValues().add(&quot;methodName&quot;, adviceElement.getAttribute(&quot;method&quot;));</span><br><span class="line">        methodDefinition.setSynthetic(true);</span><br><span class="line"></span><br><span class="line">        // create instance factory definition</span><br><span class="line">        //切面工厂BeanDefinition</span><br><span class="line">        RootBeanDefinition aspectFactoryDef =</span><br><span class="line">                new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class);</span><br><span class="line">        aspectFactoryDef.getPropertyValues().add(&quot;aspectBeanName&quot;, aspectName);</span><br><span class="line">        aspectFactoryDef.setSynthetic(true);</span><br><span class="line"></span><br><span class="line">        // register the pointcut</span><br><span class="line">        //创建advice的BeanDefinition</span><br><span class="line">        AbstractBeanDefinition adviceDef = createAdviceDefinition(</span><br><span class="line">                adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,</span><br><span class="line">                beanDefinitions, beanReferences);</span><br><span class="line"></span><br><span class="line">        // configure the advisor</span><br><span class="line">        //创建通知BeanDefinition</span><br><span class="line">        RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class);</span><br><span class="line">        advisorDefinition.setSource(parserContext.extractSource(adviceElement));</span><br><span class="line">        //通知bean添加构造函数参数切面bean</span><br><span class="line">        advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef);</span><br><span class="line">        if (aspectElement.hasAttribute(ORDER_PROPERTY)) &#123;</span><br><span class="line">            advisorDefinition.getPropertyValues().add(</span><br><span class="line">                    ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // register the final advisor</span><br><span class="line">        //注册通知BeanDefinition</span><br><span class="line">        parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition);</span><br><span class="line"></span><br><span class="line">        return advisorDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、ConfigBeanDefinitionParser的createAdviceDefinition方法"><a href="#15、ConfigBeanDefinitionParser的createAdviceDefinition方法" class="headerlink" title="15、ConfigBeanDefinitionParser的createAdviceDefinition方法"></a>15、ConfigBeanDefinitionParser的createAdviceDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">private AbstractBeanDefinition createAdviceDefinition(</span><br><span class="line">        Element adviceElement, ParserContext parserContext, String aspectName, int order,</span><br><span class="line">        RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,</span><br><span class="line">        List&lt;BeanDefinition&gt; beanDefinitions, List&lt;BeanReference&gt; beanReferences) &#123;</span><br><span class="line">    //创建advice的BeanDefinition，类为AspectJMethodBeforeAdvice或AspectJAfterAdvice等</span><br><span class="line">    RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext));</span><br><span class="line">    adviceDefinition.setSource(parserContext.extractSource(adviceElement));</span><br><span class="line">    //添加切面名称</span><br><span class="line">    adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName);</span><br><span class="line">    //添加排序</span><br><span class="line">    adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order);</span><br><span class="line"></span><br><span class="line">    if (adviceElement.hasAttribute(RETURNING)) &#123;</span><br><span class="line">        adviceDefinition.getPropertyValues().add(</span><br><span class="line">                RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING));</span><br><span class="line">    &#125;</span><br><span class="line">    if (adviceElement.hasAttribute(THROWING)) &#123;</span><br><span class="line">        adviceDefinition.getPropertyValues().add(</span><br><span class="line">                THROWING_PROPERTY, adviceElement.getAttribute(THROWING));</span><br><span class="line">    &#125;</span><br><span class="line">    if (adviceElement.hasAttribute(ARG_NAMES)) &#123;</span><br><span class="line">        adviceDefinition.getPropertyValues().add(</span><br><span class="line">                ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //将拦截方法加入advice的bean的构造函数参数</span><br><span class="line">    ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues();</span><br><span class="line">    cav.addIndexedArgumentValue(METHOD_INDEX, methodDef);</span><br><span class="line">    //获取切点或切点引用并加入advice的bean的构造函数参数</span><br><span class="line">    Object pointcut = parsePointcutProperty(adviceElement, parserContext);</span><br><span class="line">    if (pointcut instanceof BeanDefinition) &#123;</span><br><span class="line">        cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut);</span><br><span class="line">        beanDefinitions.add((BeanDefinition) pointcut);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (pointcut instanceof String) &#123;</span><br><span class="line">        RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut);</span><br><span class="line">        cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef);</span><br><span class="line">        beanReferences.add(pointcutRef);</span><br><span class="line">    &#125;</span><br><span class="line">    //切面工厂加入advice的bean的构造函数参数</span><br><span class="line">    cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef);</span><br><span class="line"></span><br><span class="line">    return adviceDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、AOP动态代理代理对象创建"><a href="#二、AOP动态代理代理对象创建" class="headerlink" title="二、AOP动态代理代理对象创建"></a>二、AOP动态代理代理对象创建</h3><h4 id="1、AbstractAutoProxyCreator的postProcessBeforeInstantiation方法"><a href="#1、AbstractAutoProxyCreator的postProcessBeforeInstantiation方法" class="headerlink" title="1、AbstractAutoProxyCreator的postProcessBeforeInstantiation方法"></a>1、AbstractAutoProxyCreator的postProcessBeforeInstantiation方法</h4><p>创建bean之前会执行InstantiationAwareBeanPostProcessor处理器的postProcessBeforeInstantiation方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException &#123;</span><br><span class="line">    //获取缓存key</span><br><span class="line">    Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line">    //当前targetSourcedBeans（通过自定义TargetSourceCreator创建的TargetSource）不包含cacheKey  </span><br><span class="line">    if (beanName == null || !this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        //基础设施类（如Advisor、Advice、AopInfrastructureBean的实现），不需要创建代理</span><br><span class="line">        if (this.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">            this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create proxy here if we have a custom TargetSource.</span><br><span class="line">    // Suppresses unnecessary default instantiation of the target bean:</span><br><span class="line">    // The TargetSource will handle target instances in a custom fashion.</span><br><span class="line">    if (beanName != null) &#123;</span><br><span class="line">        //配置的自定义的TargetSourceCreator创建TargetSource  </span><br><span class="line">        TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line">        if (targetSource != null) &#123;</span><br><span class="line">            this.targetSourcedBeans.add(beanName);</span><br><span class="line">            //获取增强</span><br><span class="line">            Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">            //创建代理对象</span><br><span class="line">            Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">            this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">            return proxy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AspectJAwareAdvisorAutoProxyCreator的shouldSkip方法"><a href="#2、AspectJAwareAdvisorAutoProxyCreator的shouldSkip方法" class="headerlink" title="2、AspectJAwareAdvisorAutoProxyCreator的shouldSkip方法"></a>2、AspectJAwareAdvisorAutoProxyCreator的shouldSkip方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean shouldSkip(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">    // TODO: Consider optimization by caching the list of the aspect names</span><br><span class="line">    //获取通知bean</span><br><span class="line">    List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">    for (Advisor advisor : candidateAdvisors) &#123;</span><br><span class="line">        if (advisor instanceof AspectJPointcutAdvisor) &#123;</span><br><span class="line">            //类为切面类，返回true，不需要创建代理</span><br><span class="line">            if (((AbstractAspectJAdvice) advisor.getAdvice()).getAspectName().equals(beanName)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回false</span><br><span class="line">    return super.shouldSkip(beanClass, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractAutoProxyCreator的getEarlyBeanReference方法"><a href="#3、AbstractAutoProxyCreator的getEarlyBeanReference方法" class="headerlink" title="3、AbstractAutoProxyCreator的getEarlyBeanReference方法"></a>3、AbstractAutoProxyCreator的getEarlyBeanReference方法</h4><p>出现循环依赖会调用SmartInstantiationAwareBeanPostProcessor处理器的getEarlyBeanReference<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getEarlyBeanReference(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">    if (!this.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">        this.earlyProxyReferences.add(cacheKey);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建代理对象</span><br><span class="line">    return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、AbstractAutoProxyCreator的postProcessAfterInitialization方法"><a href="#4、AbstractAutoProxyCreator的postProcessAfterInitialization方法" class="headerlink" title="4、AbstractAutoProxyCreator的postProcessAfterInitialization方法"></a>4、AbstractAutoProxyCreator的postProcessAfterInitialization方法</h4><p>执行完自定义初始化方法后会调用BeanPostProcessor处理器的postProcessAfterInitialization方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    if (bean != null) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        //如发生循环依赖此处已经是代理对象</span><br><span class="line">        if (!this.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">            //创建代理对象</span><br><span class="line">            return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、AbstractAutoProxyCreator的wrapIfNecessary方法"><a href="#5、AbstractAutoProxyCreator的wrapIfNecessary方法" class="headerlink" title="5、AbstractAutoProxyCreator的wrapIfNecessary方法"></a>5、AbstractAutoProxyCreator的wrapIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">    //已经是代理对象</span><br><span class="line">    if (beanName != null &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //基础设施类或切面类，不需代理</span><br><span class="line">    if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //基础设施类或切面类，不需代理</span><br><span class="line">    if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create proxy if we have advice.</span><br><span class="line">    //获取增强</span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span><br><span class="line">    if (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        //创建代理</span><br><span class="line">        Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">        this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        return proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    //没有增强，不需要代理</span><br><span class="line">    this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractAutoProxyCreator的wrapIfNecessary方法"><a href="#6、AbstractAutoProxyCreator的wrapIfNecessary方法" class="headerlink" title="6、AbstractAutoProxyCreator的wrapIfNecessary方法"></a>6、AbstractAutoProxyCreator的wrapIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">    //已经是代理对象</span><br><span class="line">    if (beanName != null &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //基础设施类或切面类，不需代理</span><br><span class="line">    if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //基础设施类或切面类，不需代理</span><br><span class="line">    if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create proxy if we have advice.</span><br><span class="line">    //获取增强</span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span><br><span class="line">    if (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        //创建代理</span><br><span class="line">        Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">        this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        return proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    //没有增强，不需要代理</span><br><span class="line">    this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractAdvisorAutoProxyCreator的getAdvicesAndAdvisorsForBean方法"><a href="#7、AbstractAdvisorAutoProxyCreator的getAdvicesAndAdvisorsForBean方法" class="headerlink" title="7、AbstractAdvisorAutoProxyCreator的getAdvicesAndAdvisorsForBean方法"></a>7、AbstractAdvisorAutoProxyCreator的getAdvicesAndAdvisorsForBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource targetSource) &#123;</span><br><span class="line">    //获取通知</span><br><span class="line">    List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">    if (advisors.isEmpty()) &#123;</span><br><span class="line">        return DO_NOT_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">    return advisors.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、AbstractAdvisorAutoProxyCreator的findEligibleAdvisors方法"><a href="#8、AbstractAdvisorAutoProxyCreator的findEligibleAdvisors方法" class="headerlink" title="8、AbstractAdvisorAutoProxyCreator的findEligibleAdvisors方法"></a>8、AbstractAdvisorAutoProxyCreator的findEligibleAdvisors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findEligibleAdvisors(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">    //获取通知</span><br><span class="line">    List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">    //晒选可应用的通知</span><br><span class="line">    List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">    extendAdvisors(eligibleAdvisors);</span><br><span class="line">    if (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">        //通知排序</span><br><span class="line">        eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">    &#125;</span><br><span class="line">    return eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractAdvisorAutoProxyCreator的findCandidateAdvisors方法"><a href="#9、AbstractAdvisorAutoProxyCreator的findCandidateAdvisors方法" class="headerlink" title="9、AbstractAdvisorAutoProxyCreator的findCandidateAdvisors方法"></a>9、AbstractAdvisorAutoProxyCreator的findCandidateAdvisors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findCandidateAdvisors() &#123;</span><br><span class="line">    return this.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、BeanFactoryAdvisorRetrievalHelper的findAdvisorBeans方法"><a href="#10、BeanFactoryAdvisorRetrievalHelper的findAdvisorBeans方法" class="headerlink" title="10、BeanFactoryAdvisorRetrievalHelper的findAdvisorBeans方法"></a>10、BeanFactoryAdvisorRetrievalHelper的findAdvisorBeans方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Advisor&gt; findAdvisorBeans() &#123;</span><br><span class="line">    // Determine list of advisor bean names, if not cached already.</span><br><span class="line">    String[] advisorNames = null;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        advisorNames = this.cachedAdvisorBeanNames;</span><br><span class="line">        if (advisorNames == null) &#123;</span><br><span class="line">            // Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">            // uninitialized to let the auto-proxy creator apply to them!</span><br><span class="line">            //从容器及其父容器获取所有Advisor类型的beanName</span><br><span class="line">            advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">                    this.beanFactory, Advisor.class, true, false);</span><br><span class="line">            this.cachedAdvisorBeanNames = advisorNames;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //不存在，返回空集合</span><br><span class="line">    if (advisorNames.length == 0) &#123;</span><br><span class="line">        return new LinkedList&lt;Advisor&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    //加载advisor类型的bean，并返回</span><br><span class="line">    List&lt;Advisor&gt; advisors = new LinkedList&lt;Advisor&gt;();</span><br><span class="line">    for (String name : advisorNames) &#123;</span><br><span class="line">        //该切面是否有效，即includePatterns是否包含此类</span><br><span class="line">        if (isEligibleBean(name)) &#123;</span><br><span class="line">            if (this.beanFactory.isCurrentlyInCreation(name)) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Skipping currently created advisor &apos;&quot; + name + &quot;&apos;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    advisors.add(this.beanFactory.getBean(name, Advisor.class));</span><br><span class="line">                &#125;</span><br><span class="line">                catch (BeanCreationException ex) &#123;</span><br><span class="line">                    Throwable rootCause = ex.getMostSpecificCause();</span><br><span class="line">                    if (rootCause instanceof BeanCurrentlyInCreationException) &#123;</span><br><span class="line">                        BeanCreationException bce = (BeanCreationException) rootCause;</span><br><span class="line">                        if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) &#123;</span><br><span class="line">                            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                                logger.debug(&quot;Skipping advisor &apos;&quot; + name +</span><br><span class="line">                                        &quot;&apos; with dependency on currently created bean: &quot; + ex.getMessage());</span><br><span class="line">                            &#125;</span><br><span class="line">                            // Ignore: indicates a reference back to the bean we&apos;re trying to advise.</span><br><span class="line">                            // We want to find advisors other than the currently created bean itself.</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    throw ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（二、8）BeanFactoryAdvisorRetrievalHelper的findAdvisorsThatCanApply方法"><a href="#11、接（二、8）BeanFactoryAdvisorRetrievalHelper的findAdvisorsThatCanApply方法" class="headerlink" title="11、接（二、8）BeanFactoryAdvisorRetrievalHelper的findAdvisorsThatCanApply方法"></a>11、接（二、8）BeanFactoryAdvisorRetrievalHelper的findAdvisorsThatCanApply方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findAdvisorsThatCanApply(</span><br><span class="line">        List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line"></span><br><span class="line">    ProxyCreationContext.setCurrentProxiedBeanName(beanName);</span><br><span class="line">    try &#123;</span><br><span class="line">        return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        ProxyCreationContext.setCurrentProxiedBeanName(null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AopUtils的findAdvisorsThatCanApply方法"><a href="#12、AopUtils的findAdvisorsThatCanApply方法" class="headerlink" title="12、AopUtils的findAdvisorsThatCanApply方法"></a>12、AopUtils的findAdvisorsThatCanApply方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Advisor&gt; findAdvisorsThatCanApply(List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    if (candidateAdvisors.isEmpty()) &#123;</span><br><span class="line">        return candidateAdvisors;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Advisor&gt; eligibleAdvisors = new LinkedList&lt;Advisor&gt;();</span><br><span class="line">    //首先处理引介增强，如DeclareParentsAdvisor</span><br><span class="line">    for (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">        if (candidate instanceof IntroductionAdvisor &amp;&amp; canApply(candidate, clazz)) &#123;</span><br><span class="line">            eligibleAdvisors.add(candidate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean hasIntroductions = !eligibleAdvisors.isEmpty();</span><br><span class="line">    //普通增强</span><br><span class="line">    for (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">        if (candidate instanceof IntroductionAdvisor) &#123;</span><br><span class="line">            // already processed</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (canApply(candidate, clazz, hasIntroductions)) &#123;</span><br><span class="line">            eligibleAdvisors.add(candidate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、AopUtils的canApply方法"><a href="#13、AopUtils的canApply方法" class="headerlink" title="13、AopUtils的canApply方法"></a>13、AopUtils的canApply方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static boolean canApply(Pointcut pc, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">    Assert.notNull(pc, &quot;Pointcut must not be null&quot;);</span><br><span class="line">    //切点不匹配该类</span><br><span class="line">    if (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line">    IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null;</span><br><span class="line">    if (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">        introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">    &#125;</span><br><span class="line">    //切点只要匹配到一个方法就返回true</span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; classes = new LinkedHashSet&lt;Class&lt;?&gt;&gt;(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line">    classes.add(targetClass);</span><br><span class="line">    for (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if ((introductionAwareMethodMatcher != null &amp;&amp;</span><br><span class="line">                    introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||</span><br><span class="line">                    methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（二、5）AbstractAutoProxyCreator的createProxy方法"><a href="#14、接（二、5）AbstractAutoProxyCreator的createProxy方法" class="headerlink" title="14、接（二、5）AbstractAutoProxyCreator的createProxy方法"></a>14、接（二、5）AbstractAutoProxyCreator的createProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">protected Object createProxy(</span><br><span class="line">        Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">    ProxyFactory proxyFactory = new ProxyFactory();</span><br><span class="line">    proxyFactory.copyFrom(this);</span><br><span class="line">    //返回是否用cglib动态代理直接代理该类，用户配置</span><br><span class="line">    if (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">        //判断是否用cglib动态代理代理该类</span><br><span class="line">        if (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">            proxyFactory.setProxyTargetClass(true);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //判断是否是有合适jdk动态代理的接口，将查找到的接口加入代理工厂</span><br><span class="line">            evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取通知</span><br><span class="line">    Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    for (Advisor advisor : advisors) &#123;</span><br><span class="line">        //通知加入代理工厂，如果存在引介增强，则将引介增强的接口放入待实现接口集合</span><br><span class="line">        proxyFactory.addAdvisor(advisor);</span><br><span class="line">    &#125;</span><br><span class="line">    //要代理的类</span><br><span class="line">    proxyFactory.setTargetSource(targetSource);</span><br><span class="line">    //定制代理，待子类实现</span><br><span class="line">    customizeProxyFactory(proxyFactory);</span><br><span class="line">    //冻结代理工厂配置</span><br><span class="line">    proxyFactory.setFrozen(this.freezeProxy);</span><br><span class="line">    if (advisorsPreFiltered()) &#123;</span><br><span class="line">        proxyFactory.setPreFiltered(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建代理对象</span><br><span class="line">    return proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AbstractAutoProxyCreator的buildAdvisors方法"><a href="#15、AbstractAutoProxyCreator的buildAdvisors方法" class="headerlink" title="15、AbstractAutoProxyCreator的buildAdvisors方法"></a>15、AbstractAutoProxyCreator的buildAdvisors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) &#123;</span><br><span class="line">    // Handle prototypes correctly...</span><br><span class="line">    //解析注册到ProxyFactoryBean中的拦截器</span><br><span class="line">    Advisor[] commonInterceptors = resolveInterceptorNames();</span><br><span class="line">    //interceptorNames加入通知集合</span><br><span class="line">    List&lt;Object&gt; allInterceptors = new ArrayList&lt;Object&gt;();</span><br><span class="line">    if (specificInterceptors != null) &#123;</span><br><span class="line">        allInterceptors.addAll(Arrays.asList(specificInterceptors));</span><br><span class="line">        if (commonInterceptors != null) &#123;</span><br><span class="line">            if (this.applyCommonInterceptorsFirst) &#123;</span><br><span class="line">                allInterceptors.addAll(0, Arrays.asList(commonInterceptors));</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                allInterceptors.addAll(Arrays.asList(commonInterceptors));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0);</span><br><span class="line">        int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0);</span><br><span class="line">        logger.debug(&quot;Creating implicit proxy for bean &apos;&quot; + beanName + &quot;&apos; with &quot; + nrOfCommonInterceptors +</span><br><span class="line">                &quot; common interceptors and &quot; + nrOfSpecificInterceptors + &quot; specific interceptors&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Advisor[] advisors = new Advisor[allInterceptors.size()];</span><br><span class="line">    for (int i = 0; i &lt; allInterceptors.size(); i++) &#123;</span><br><span class="line">        //拦截器封装转化为Advisor</span><br><span class="line">        advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    return advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、DefaultAdvisorAdapterRegistry的wrap方法"><a href="#16、DefaultAdvisorAdapterRegistry的wrap方法" class="headerlink" title="16、DefaultAdvisorAdapterRegistry的wrap方法"></a>16、DefaultAdvisorAdapterRegistry的wrap方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Advisor wrap(Object adviceObject) throws UnknownAdviceTypeException &#123;</span><br><span class="line">    //已经是Advisor类型无需转换</span><br><span class="line">    if (adviceObject instanceof Advisor) &#123;</span><br><span class="line">        return (Advisor) adviceObject;</span><br><span class="line">    &#125;</span><br><span class="line">    //不是Advice则抛出异常</span><br><span class="line">    if (!(adviceObject instanceof Advice)) &#123;</span><br><span class="line">        throw new UnknownAdviceTypeException(adviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">    Advice advice = (Advice) adviceObject;</span><br><span class="line">    if (advice instanceof MethodInterceptor) &#123;</span><br><span class="line">        // So well-known it doesn&apos;t even need an adapter.</span><br><span class="line">        //使用默认切点，全部匹配</span><br><span class="line">        return new DefaultPointcutAdvisor(advice);</span><br><span class="line">    &#125;</span><br><span class="line">    //存在适配器</span><br><span class="line">    for (AdvisorAdapter adapter : this.adapters) &#123;</span><br><span class="line">        // Check that it is supported.</span><br><span class="line">        if (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">            return new DefaultPointcutAdvisor(advice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new UnknownAdviceTypeException(advice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（二、14）ProxyFactory的getProxy方法"><a href="#17、接（二、14）ProxyFactory的getProxy方法" class="headerlink" title="17、接（二、14）ProxyFactory的getProxy方法"></a>17、接（二、14）ProxyFactory的getProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object getProxy() &#123;</span><br><span class="line">    return createAopProxy().getProxy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、ProxyFactory的createAopProxy方法"><a href="#18、ProxyFactory的createAopProxy方法" class="headerlink" title="18、ProxyFactory的createAopProxy方法"></a>18、ProxyFactory的createAopProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected final synchronized AopProxy createAopProxy() &#123;</span><br><span class="line">    if (!this.active) &#123;</span><br><span class="line">        //广播代理被创建</span><br><span class="line">        activate();</span><br><span class="line">    &#125;</span><br><span class="line">    //创建代理</span><br><span class="line">    return getAopProxyFactory().createAopProxy(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、DefaultAopProxyFactory的createAopProxy方法"><a href="#19、DefaultAopProxyFactory的createAopProxy方法" class="headerlink" title="19、DefaultAopProxyFactory的createAopProxy方法"></a>19、DefaultAopProxyFactory的createAopProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException &#123;</span><br><span class="line">    //optimize 设置Cglib是否使用激进优化策略</span><br><span class="line">    //proxyTargetClass 设置是否使用Cglib代理</span><br><span class="line">    //是否存在可代理接口</span><br><span class="line">    if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">        Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">        if (targetClass == null) &#123;</span><br><span class="line">            throw new AopConfigException(&quot;TargetSource cannot determine target class: &quot; +</span><br><span class="line">                    &quot;Either an interface or a target is required for proxy creation.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //目标类为接口</span><br><span class="line">        if (targetClass.isInterface()) &#123;</span><br><span class="line">            return new JdkDynamicAopProxy(config);</span><br><span class="line">        &#125;</span><br><span class="line">        return new ObjenesisCglibAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return new JdkDynamicAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、JdkDynamicAopProxy的getProxy方法"><a href="#20、JdkDynamicAopProxy的getProxy方法" class="headerlink" title="20、JdkDynamicAopProxy的getProxy方法"></a>20、JdkDynamicAopProxy的getProxy方法</h4><p>jdk动态代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getProxy() &#123;</span><br><span class="line">    return getProxy(ClassUtils.getDefaultClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getProxy(ClassLoader classLoader) &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating JDK dynamic proxy: target source is &quot; + this.advised.getTargetSource());</span><br><span class="line">    &#125;</span><br><span class="line">    //获取要代理的全部接口,额外添加SpringProxy接口用以标识AOP代理对象，Advised接口用以操作该对象的advice</span><br><span class="line">    Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised);</span><br><span class="line">    //equals和hashCode方法是否被重写</span><br><span class="line">    findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">    //创建代理对象</span><br><span class="line">    return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、JdkDynamicAopProxy的invoke方法"><a href="#21、JdkDynamicAopProxy的invoke方法" class="headerlink" title="21、JdkDynamicAopProxy的invoke方法"></a>21、JdkDynamicAopProxy的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    MethodInvocation invocation;</span><br><span class="line">    Object oldProxy = null;</span><br><span class="line">    boolean setProxyContext = false;</span><br><span class="line"></span><br><span class="line">    TargetSource targetSource = this.advised.targetSource;</span><br><span class="line">    Class&lt;?&gt; targetClass = null;</span><br><span class="line">    Object target = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //处理equals方法</span><br><span class="line">        if (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">            // The target does not implement the equals(Object) method itself.</span><br><span class="line">            return equals(args[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        //hash方法处理</span><br><span class="line">        if (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">            // The target does not implement the hashCode() method itself.</span><br><span class="line">            return hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        //Advised的方法或者其超类接口的方法，执行ProxyFactory对象的方法，用于操作增强</span><br><span class="line">        if (!this.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">                method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">            // Service invocations on ProxyConfig with the proxy config...</span><br><span class="line">            return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object retVal;</span><br><span class="line">        //支持对象内部自我调用时，可获取到代理对象，将该代理对象放入本地线程变量</span><br><span class="line">        if (this.advised.exposeProxy) &#123;</span><br><span class="line">            // Make invocation available if necessary.</span><br><span class="line">            oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">            setProxyContext = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // May be null. Get as late as possible to minimize the time we &quot;own&quot; the target,</span><br><span class="line">        // in case it comes from a pool.</span><br><span class="line">        //被代理的对象</span><br><span class="line">        target = targetSource.getTarget();</span><br><span class="line">        if (target != null) &#123;</span><br><span class="line">            targetClass = target.getClass();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Get the interception chain for this method.</span><br><span class="line">        //获取当前方法的拦截器链</span><br><span class="line">        List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line">        // Check whether we have any advice. If we don&apos;t, we can fallback on direct</span><br><span class="line">        // reflective invocation of the target, and avoid creating a MethodInvocation.</span><br><span class="line">        if (chain.isEmpty()) &#123;</span><br><span class="line">            // We can skip creating a MethodInvocation: just invoke the target directly</span><br><span class="line">            // Note that the final invoker must be an InvokerInterceptor so we know it does</span><br><span class="line">            // nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span><br><span class="line">            //没有拦截器，直接调用对象方法</span><br><span class="line">            retVal = AopUtils.invokeJoinpointUsingReflection(target, method, args);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // We need to create a method invocation...</span><br><span class="line">            //封装拦截器链</span><br><span class="line">            invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            // Proceed to the joinpoint through the interceptor chain.</span><br><span class="line">            //执行拦截器链</span><br><span class="line">            retVal = invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Massage return value if necessary.</span><br><span class="line">        //返回结果</span><br><span class="line">        Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">        if (retVal != null &amp;&amp; retVal == target &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</span><br><span class="line">                !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">            // Special case: it returned &quot;this&quot; and the return type of the method</span><br><span class="line">            // is type-compatible. Note that we can&apos;t help if the target sets</span><br><span class="line">            // a reference to itself in another returned object.</span><br><span class="line">            retVal = proxy;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (retVal == null &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line">            throw new AopInvocationException(</span><br><span class="line">                    &quot;Null return value from advice does not match primitive return type for: &quot; + method);</span><br><span class="line">        &#125;</span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (target != null &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">            // Must have come from TargetSource.</span><br><span class="line">            targetSource.releaseTarget(target);</span><br><span class="line">        &#125;</span><br><span class="line">        if (setProxyContext) &#123;</span><br><span class="line">            // Restore old proxy.</span><br><span class="line">            AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、JdkDynamicAopProxy的getInterceptorsAndDynamicInterceptionAdvice方法"><a href="#22、JdkDynamicAopProxy的getInterceptorsAndDynamicInterceptionAdvice方法" class="headerlink" title="22、JdkDynamicAopProxy的getInterceptorsAndDynamicInterceptionAdvice方法"></a>22、JdkDynamicAopProxy的getInterceptorsAndDynamicInterceptionAdvice方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Object&gt; getInterceptorsAndDynamicInterceptionAdvice(Method method, Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    MethodCacheKey cacheKey = new MethodCacheKey(method);</span><br><span class="line">    List&lt;Object&gt; cached = this.methodCache.get(cacheKey);</span><br><span class="line">    if (cached == null) &#123;</span><br><span class="line">        //获取拦截器链</span><br><span class="line">        cached = this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(</span><br><span class="line">                this, method, targetClass);</span><br><span class="line">        this.methodCache.put(cacheKey, cached);</span><br><span class="line">    &#125;</span><br><span class="line">    return cached;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、DefaultAdvisorChainFactory的getInterceptorsAndDynamicInterceptionAdvice方法"><a href="#23、DefaultAdvisorChainFactory的getInterceptorsAndDynamicInterceptionAdvice方法" class="headerlink" title="23、DefaultAdvisorChainFactory的getInterceptorsAndDynamicInterceptionAdvice方法"></a>23、DefaultAdvisorChainFactory的getInterceptorsAndDynamicInterceptionAdvice方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;Object&gt; getInterceptorsAndDynamicInterceptionAdvice(</span><br><span class="line">        Advised config, Method method, Class&lt;?&gt; targetClass) &#123;</span><br><span class="line"></span><br><span class="line">    // This is somewhat tricky... We have to process introductions first,</span><br><span class="line">    // but we need to preserve order in the ultimate list.</span><br><span class="line">    List&lt;Object&gt; interceptorList = new ArrayList&lt;Object&gt;(config.getAdvisors().length);</span><br><span class="line">    Class&lt;?&gt; actualClass = (targetClass != null ? targetClass : method.getDeclaringClass());</span><br><span class="line">    //是否有适合该类的引介增强</span><br><span class="line">    boolean hasIntroductions = hasMatchingIntroductions(config, actualClass);</span><br><span class="line">    AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line"></span><br><span class="line">    for (Advisor advisor : config.getAdvisors()) &#123;</span><br><span class="line">        if (advisor instanceof PointcutAdvisor) &#123;</span><br><span class="line">            // Add it conditionally.</span><br><span class="line">            PointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;</span><br><span class="line">            //通知匹配该类</span><br><span class="line">            if (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                MethodInterceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();</span><br><span class="line">                //通知匹配该方法</span><br><span class="line">                if (MethodMatchers.matches(mm, method, actualClass, hasIntroductions)) &#123;</span><br><span class="line">                    //动态匹配</span><br><span class="line">                    if (mm.isRuntime()) &#123;</span><br><span class="line">                        // Creating a new object instance in the getInterceptors() method</span><br><span class="line">                        // isn&apos;t a problem as we normally cache created chains.</span><br><span class="line">                        for (MethodInterceptor interceptor : interceptors) &#123;</span><br><span class="line">                            interceptorList.add(new InterceptorAndDynamicMethodMatcher(interceptor, mm));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //普通拦截器</span><br><span class="line">                    else &#123;</span><br><span class="line">                        interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //引介增强</span><br><span class="line">        else if (advisor instanceof IntroductionAdvisor) &#123;</span><br><span class="line">            IntroductionAdvisor ia = (IntroductionAdvisor) advisor;</span><br><span class="line">            if (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                //获取引介增强的拦截器，如DelegatingIntroductionInterceptor，</span><br><span class="line">                //该拦截器会拦截引介增强接口中的方法处理然后返回，其余方法直接放行</span><br><span class="line">                Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">            interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return interceptorList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、接（二、21）ReflectiveMethodInvocation的proceed方法"><a href="#24、接（二、21）ReflectiveMethodInvocation的proceed方法" class="headerlink" title="24、接（二、21）ReflectiveMethodInvocation的proceed方法"></a>24、接（二、21）ReflectiveMethodInvocation的proceed方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object proceed() throws Throwable &#123;</span><br><span class="line">    //  We start with an index of -1 and increment early.</span><br><span class="line">    //执行完所有的通知，执行目标方法</span><br><span class="line">    if (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) &#123;</span><br><span class="line">        return invokeJoinpoint();</span><br><span class="line">    &#125;</span><br><span class="line">    //获取下一个要执行的拦截器</span><br><span class="line">    Object interceptorOrInterceptionAdvice =</span><br><span class="line">            this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);</span><br><span class="line">    //动态匹配</span><br><span class="line">    if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line">        // Evaluate dynamic method matcher here: static part will already have</span><br><span class="line">        // been evaluated and found to match.</span><br><span class="line">        InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">                (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">        if (dm.methodMatcher.matches(this.method, this.targetClass, this.arguments)) &#123;</span><br><span class="line">            return dm.interceptor.invoke(this);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Dynamic matching failed.</span><br><span class="line">            // Skip this interceptor and invoke the next in the chain.</span><br><span class="line">            //不匹配则不拦截</span><br><span class="line">            return proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // It&apos;s an interceptor, so we just invoke it: The pointcut will have</span><br><span class="line">        // been evaluated statically before this object was constructed.</span><br><span class="line">        //普通拦截器，递归调用proceed</span><br><span class="line">        return ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、CglibAopProxy的getProxy方法"><a href="#25、CglibAopProxy的getProxy方法" class="headerlink" title="25、CglibAopProxy的getProxy方法"></a>25、CglibAopProxy的getProxy方法</h4><p>CglibAopProxy的动态代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getProxy() &#123;</span><br><span class="line">    return getProxy(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getProxy(ClassLoader classLoader) &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating CGLIB proxy: target source is &quot; + this.advised.getTargetSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //代理的目标类</span><br><span class="line">        Class&lt;?&gt; rootClass = this.advised.getTargetClass();</span><br><span class="line">        Assert.state(rootClass != null, &quot;Target class must be available for creating a CGLIB proxy&quot;);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; proxySuperClass = rootClass;</span><br><span class="line">        //该类已经是代理类</span><br><span class="line">        if (ClassUtils.isCglibProxyClass(rootClass)) &#123;</span><br><span class="line">            proxySuperClass = rootClass.getSuperclass();</span><br><span class="line">            Class&lt;?&gt;[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class="line">            for (Class&lt;?&gt; additionalInterface : additionalInterfaces) &#123;</span><br><span class="line">                this.advised.addInterface(additionalInterface);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Validate the class, writing log messages as necessary.</span><br><span class="line">        //验证类及其父类有无不可被代理的方法</span><br><span class="line">        validateClassIfNecessary(proxySuperClass, classLoader);</span><br><span class="line"></span><br><span class="line">        // Configure CGLIB Enhancer...</span><br><span class="line">        Enhancer enhancer = createEnhancer();</span><br><span class="line">        if (classLoader != null) &#123;</span><br><span class="line">            enhancer.setClassLoader(classLoader);</span><br><span class="line">            if (classLoader instanceof SmartClassLoader &amp;&amp;</span><br><span class="line">                    ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class="line">                enhancer.setUseCache(false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //被代理的类</span><br><span class="line">        enhancer.setSuperclass(proxySuperClass);</span><br><span class="line">        //代理类实现的接口</span><br><span class="line">        enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));</span><br><span class="line">        enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">        enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));</span><br><span class="line">        //设置拦截器</span><br><span class="line">        Callback[] callbacks = getCallbacks(rootClass);</span><br><span class="line">        Class&lt;?&gt;[] types = new Class&lt;?&gt;[callbacks.length];</span><br><span class="line">        for (int x = 0; x &lt; types.length; x++) &#123;</span><br><span class="line">            types[x] = callbacks[x].getClass();</span><br><span class="line">        &#125;</span><br><span class="line">        // fixedInterceptorMap only populated at this point, after getCallbacks call above</span><br><span class="line">        //过滤器</span><br><span class="line">        enhancer.setCallbackFilter(new ProxyCallbackFilter(</span><br><span class="line">                this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));</span><br><span class="line">        enhancer.setCallbackTypes(types);</span><br><span class="line"></span><br><span class="line">        // Generate the proxy class and create a proxy instance.</span><br><span class="line">        //创建代理对象</span><br><span class="line">        return createProxyClassAndInstance(enhancer, callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (CodeGenerationException ex) &#123;</span><br><span class="line">        throw new AopConfigException(&quot;Could not generate CGLIB subclass of class [&quot; +</span><br><span class="line">                this.advised.getTargetClass() + &quot;]: &quot; +</span><br><span class="line">                &quot;Common causes of this problem include using a final class or a non-visible class&quot;,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IllegalArgumentException ex) &#123;</span><br><span class="line">        throw new AopConfigException(&quot;Could not generate CGLIB subclass of class [&quot; +</span><br><span class="line">                this.advised.getTargetClass() + &quot;]: &quot; +</span><br><span class="line">                &quot;Common causes of this problem include using a final class or a non-visible class&quot;,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex) &#123;</span><br><span class="line">        // TargetSource.getTarget() failed</span><br><span class="line">        throw new AopConfigException(&quot;Unexpected AOP exception&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="26、CglibAopProxy的getCallbacks方法"><a href="#26、CglibAopProxy的getCallbacks方法" class="headerlink" title="26、CglibAopProxy的getCallbacks方法"></a>26、CglibAopProxy的getCallbacks方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">private Callback[] getCallbacks(Class&lt;?&gt; rootClass) throws Exception &#123;</span><br><span class="line">    // Parameters used for optimisation choices...</span><br><span class="line">    boolean exposeProxy = this.advised.isExposeProxy();</span><br><span class="line">    boolean isFrozen = this.advised.isFrozen();</span><br><span class="line">    //getTarget每次获取的是同一个对象，默认true</span><br><span class="line">    boolean isStatic = this.advised.getTargetSource().isStatic();</span><br><span class="line"></span><br><span class="line">    // Choose an &quot;aop&quot; interceptor (used for AOP calls).</span><br><span class="line">    //拦截器</span><br><span class="line">    Callback aopInterceptor = new DynamicAdvisedInterceptor(this.advised);</span><br><span class="line"></span><br><span class="line">    // Choose a &quot;straight to target&quot; interceptor. (used for calls that are</span><br><span class="line">    // unadvised but can return this). May be required to expose the proxy.</span><br><span class="line">    Callback targetInterceptor;</span><br><span class="line">    //类内部调用时，是否增强</span><br><span class="line">    if (exposeProxy) &#123;</span><br><span class="line">        targetInterceptor = isStatic ?</span><br><span class="line">                new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) :</span><br><span class="line">                new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        targetInterceptor = isStatic ?</span><br><span class="line">                new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) :</span><br><span class="line">                new DynamicUnadvisedInterceptor(this.advised.getTargetSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Choose a &quot;direct to target&quot; dispatcher (used for</span><br><span class="line">    // unadvised calls to static targets that cannot return this).</span><br><span class="line">    Callback targetDispatcher = isStatic ?</span><br><span class="line">            new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp();</span><br><span class="line"></span><br><span class="line">    Callback[] mainCallbacks = new Callback[]&#123;</span><br><span class="line">        //aop增强</span><br><span class="line">        aopInterceptor, // for normal advice</span><br><span class="line">        //直接执行被代理对象的方法，不增强</span><br><span class="line">        targetInterceptor, // invoke target without considering advice, if optimized</span><br><span class="line">        //代理类无该方法，不处理</span><br><span class="line">        new SerializableNoOp(), // no override for methods mapped to this</span><br><span class="line">        //直接返回内部对象</span><br><span class="line">        targetDispatcher, this.advisedDispatcher,</span><br><span class="line">        //处理Equals方法</span><br><span class="line">        new EqualsInterceptor(this.advised),</span><br><span class="line">        //处理HashCode方法</span><br><span class="line">        new HashCodeInterceptor(this.advised)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Callback[] callbacks;</span><br><span class="line"></span><br><span class="line">    // If the target is a static one and the advice chain is frozen,</span><br><span class="line">    // then we can make some optimisations by sending the AOP calls</span><br><span class="line">    // direct to the target using the fixed chain for that method.</span><br><span class="line">    //getTarget每次获取同一对象且通知链不可被修改</span><br><span class="line">    if (isStatic &amp;&amp; isFrozen) &#123;</span><br><span class="line">        Method[] methods = rootClass.getMethods();</span><br><span class="line">        Callback[] fixedCallbacks = new Callback[methods.length];</span><br><span class="line">        this.fixedInterceptorMap = new HashMap&lt;String, Integer&gt;(methods.length);</span><br><span class="line"></span><br><span class="line">        // TODO: small memory optimisation here (can skip creation for methods with no advice)</span><br><span class="line">        //创建每个方法的拦截器链的缓存</span><br><span class="line">        for (int x = 0; x &lt; methods.length; x++) &#123;</span><br><span class="line">            List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass);</span><br><span class="line">            fixedCallbacks[x] = new FixedChainStaticTargetInterceptor(</span><br><span class="line">                    chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());</span><br><span class="line">            this.fixedInterceptorMap.put(methods[x].toString(), x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Now copy both the callbacks from mainCallbacks</span><br><span class="line">        // and fixedCallbacks into the callbacks array.</span><br><span class="line">        callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length];</span><br><span class="line">        System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length);</span><br><span class="line">        System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length);</span><br><span class="line">        this.fixedInterceptorOffset = mainCallbacks.length;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        callbacks = mainCallbacks;</span><br><span class="line">    &#125;</span><br><span class="line">    return callbacks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="27、ProxyCallbackFilter的accept方法"><a href="#27、ProxyCallbackFilter的accept方法" class="headerlink" title="27、ProxyCallbackFilter的accept方法"></a>27、ProxyCallbackFilter的accept方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int accept(Method method) &#123;</span><br><span class="line">    //finalize方法 不处理</span><br><span class="line">    if (AopUtils.isFinalizeMethod(method)) &#123;</span><br><span class="line">        logger.debug(&quot;Found finalize() method - using NO_OVERRIDE&quot;);</span><br><span class="line">        return NO_OVERRIDE;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回advised对象</span><br><span class="line">    if (!this.advised.isOpaque() &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">            method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Method is declared on Advised interface: &quot; + method);</span><br><span class="line">        &#125;</span><br><span class="line">        return DISPATCH_ADVISED;</span><br><span class="line">    &#125;</span><br><span class="line">    // We must always proxy equals, to direct calls to this.</span><br><span class="line">    //equals方法</span><br><span class="line">    if (AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">        logger.debug(&quot;Found &apos;equals&apos; method: &quot; + method);</span><br><span class="line">        return INVOKE_EQUALS;</span><br><span class="line">    &#125;</span><br><span class="line">    // We must always calculate hashCode based on the proxy.</span><br><span class="line">    //hashCode方法</span><br><span class="line">    if (AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">        logger.debug(&quot;Found &apos;hashCode&apos; method: &quot; + method);</span><br><span class="line">        return INVOKE_HASHCODE;</span><br><span class="line">    &#125;</span><br><span class="line">    //代理目标类</span><br><span class="line">    Class&lt;?&gt; targetClass = this.advised.getTargetClass();</span><br><span class="line">    // Proxy is not yet available, but that shouldn&apos;t matter.</span><br><span class="line">    List&lt;?&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">    //是否有通知链</span><br><span class="line">    boolean haveAdvice = !chain.isEmpty();</span><br><span class="line">    //内部调用是否执行通知链</span><br><span class="line">    boolean exposeProxy = this.advised.isExposeProxy();</span><br><span class="line">    boolean isStatic = this.advised.getTargetSource().isStatic();</span><br><span class="line">    boolean isFrozen = this.advised.isFrozen();</span><br><span class="line">    if (haveAdvice || !isFrozen) &#123;</span><br><span class="line">        // If exposing the proxy, then AOP_PROXY must be used.</span><br><span class="line">        if (exposeProxy) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Must expose proxy on advised method: &quot; + method);</span><br><span class="line">            &#125;</span><br><span class="line">            //执行AOP增强</span><br><span class="line">            return AOP_PROXY;</span><br><span class="line">        &#125;</span><br><span class="line">        String key = method.toString();</span><br><span class="line">        // Check to see if we have fixed interceptor to serve this method.</span><br><span class="line">        // Else use the AOP_PROXY.</span><br><span class="line">        //使用缓存的方法通知链</span><br><span class="line">        if (isStatic &amp;&amp; isFrozen &amp;&amp; this.fixedInterceptorMap.containsKey(key)) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Method has advice and optimisations are enabled: &quot; + method);</span><br><span class="line">            &#125;</span><br><span class="line">            // We know that we are optimising so we can use the</span><br><span class="line">            // FixedStaticChainInterceptors.</span><br><span class="line">            int index = this.fixedInterceptorMap.get(key);</span><br><span class="line">            return (index + this.fixedInterceptorOffset);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Unable to apply any optimisations to advised method: &quot; + method);</span><br><span class="line">            &#125;</span><br><span class="line">            //执行AOP增强</span><br><span class="line">            return AOP_PROXY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // See if the return type of the method is outside the class hierarchy</span><br><span class="line">        // of the target type. If so we know it never needs to have return type</span><br><span class="line">        // massage and can use a dispatcher.</span><br><span class="line">        // If the proxy is being exposed, then must use the interceptor the</span><br><span class="line">        // correct one is already configured. If the target is not static, then</span><br><span class="line">        // cannot use a dispatcher because the target cannot be released.</span><br><span class="line">        //直接执行方法</span><br><span class="line">        if (exposeProxy || !isStatic) &#123;</span><br><span class="line">            return INVOKE_TARGET;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">        //返回该代理对象</span><br><span class="line">        if (targetClass == returnType) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Method &quot; + method +</span><br><span class="line">                        &quot;has return type same as target type (may return this) - using INVOKE_TARGET&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return INVOKE_TARGET;</span><br><span class="line">        &#125;</span><br><span class="line">        //直接返回被代理对象</span><br><span class="line">        else if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Method &quot; + method +</span><br><span class="line">                        &quot; has return type that ensures this cannot be returned- using DISPATCH_TARGET&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return DISPATCH_TARGET;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Method &quot; + method +</span><br><span class="line">                        &quot;has return type that is assignable from the target type (may return this) - &quot; +</span><br><span class="line">                        &quot;using INVOKE_TARGET&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return INVOKE_TARGET;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="28、DynamicAdvisedInterceptor的intercept方法"><a href="#28、DynamicAdvisedInterceptor的intercept方法" class="headerlink" title="28、DynamicAdvisedInterceptor的intercept方法"></a>28、DynamicAdvisedInterceptor的intercept方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">    Object oldProxy = null;</span><br><span class="line">    boolean setProxyContext = false;</span><br><span class="line">    Class&lt;?&gt; targetClass = null;</span><br><span class="line">    Object target = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //内部调用代理</span><br><span class="line">        if (this.advised.exposeProxy) &#123;</span><br><span class="line">            // Make invocation available if necessary.</span><br><span class="line">            oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">            setProxyContext = true;</span><br><span class="line">        &#125;</span><br><span class="line">        // May be null. Get as late as possible to minimize the time we</span><br><span class="line">        // &quot;own&quot; the target, in case it comes from a pool...</span><br><span class="line">        target = getTarget();</span><br><span class="line">        if (target != null) &#123;</span><br><span class="line">            targetClass = target.getClass();</span><br><span class="line">        &#125;</span><br><span class="line">        //获取通知链</span><br><span class="line">        List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">        Object retVal;</span><br><span class="line">        // Check whether we only have one InvokerInterceptor: that is,</span><br><span class="line">        // no real advice, but just reflective invocation of the target.</span><br><span class="line">        if (chain.isEmpty() &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">            // We can skip creating a MethodInvocation: just invoke the target directly.</span><br><span class="line">            // Note that the final invoker must be an InvokerInterceptor, so we know</span><br><span class="line">            // it does nothing but a reflective operation on the target, and no hot</span><br><span class="line">            // swapping or fancy proxying.</span><br><span class="line">            //直接执行该方法</span><br><span class="line">            retVal = methodProxy.invoke(target, args);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // We need to create a method invocation...</span><br><span class="line">            //执行通知链</span><br><span class="line">            retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        //处理返回结果</span><br><span class="line">        retVal = processReturnType(proxy, target, method, retVal);</span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (target != null) &#123;</span><br><span class="line">            releaseTarget(target);</span><br><span class="line">        &#125;</span><br><span class="line">        if (setProxyContext) &#123;</span><br><span class="line">            // Restore old proxy.</span><br><span class="line">            AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、注解方式的AOP动态代理"><a href="#二、注解方式的AOP动态代理" class="headerlink" title="二、注解方式的AOP动态代理"></a>二、注解方式的AOP动态代理</h3><h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><p>配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;  </span><br><span class="line">       </span><br><span class="line">    &lt;!-- 开启aop注解方式,默认为false --&gt;    </span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;</span><br><span class="line">        //切面类名</span><br><span class="line">        &lt;aop:include name=&quot;aop&quot;/&gt;</span><br><span class="line">    &lt;/aop:aspectj-autoproxy&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;bean id=&quot;userDao&quot; class=&quot;com.baobaotao.simple.UserDao&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean class=&quot;com.demo.aop.AOP&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>切面示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Aspect  //指定当前类为切面类</span><br><span class="line">public class Aop &#123;</span><br><span class="line"></span><br><span class="line">    //拦截该对象下所有方法</span><br><span class="line">    @Pointcut(&quot;execution(* com.demo.aop.UserDao.*(..))&quot;)</span><br><span class="line">    public void pointCut()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Before(&quot;pointCut()&quot;)</span><br><span class="line">    public void begin()&#123;</span><br><span class="line">        System.out.println(&quot;开启事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @After(&quot;pointCut()&quot;)</span><br><span class="line">    public void close()&#123;</span><br><span class="line">        System.out.println(&quot;关闭事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      //&quot;+&quot;表示demo的所有子类；defaultImpl 表示默认需要添加的新的类</span><br><span class="line">    @DeclareParents(value = &quot;com.demo.Demo+&quot;, defaultImpl = Demo.class)</span><br><span class="line">    public UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>被增强的对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UserDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void save() &#123;</span><br><span class="line">        System.out.println(&quot;..核心业务--核心业务..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="1、AspectJAutoProxyBeanDefinitionParser的parse方法"><a href="#1、AspectJAutoProxyBeanDefinitionParser的parse方法" class="headerlink" title="1、AspectJAutoProxyBeanDefinitionParser的parse方法"></a>1、AspectJAutoProxyBeanDefinitionParser的parse方法</h4><p>读取配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line">    AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line">    //将子节点的相关信息添加到beanDefinition</span><br><span class="line">    extendBeanDefinition(element, parserContext);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AopNamespaceUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法"><a href="#2、AopNamespaceUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法" class="headerlink" title="2、AopNamespaceUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法"></a>2、AopNamespaceUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAspectJAnnotationAutoProxyCreatorIfNecessary(</span><br><span class="line">        ParserContext parserContext, Element sourceElement) &#123;</span><br><span class="line">    //注册AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line">    BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(</span><br><span class="line">            parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">    //设置proxyTargetClass和exposeProxy属性</span><br><span class="line">    useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">    //注册并广播AOP组件</span><br><span class="line">    registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AopConfigUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法"><a href="#3、AopConfigUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法" class="headerlink" title="3、AopConfigUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法"></a>3、AopConfigUtils的registerAspectJAnnotationAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AopNamespaceUtils的registerOrEscalateApcAsRequired方法"><a href="#4、AopNamespaceUtils的registerOrEscalateApcAsRequired方法" class="headerlink" title="4、AopNamespaceUtils的registerOrEscalateApcAsRequired方法"></a>4、AopNamespaceUtils的registerOrEscalateApcAsRequired方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private static BeanDefinition registerOrEscalateApcAsRequired(Class&lt;?&gt; cls, BeanDefinitionRegistry registry, Object source) &#123;</span><br><span class="line">    Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">    //已存在，选择优先级高的</span><br><span class="line">    if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">        BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">        if (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">            int currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">            int requiredPriority = findPriorityForClass(cls);</span><br><span class="line">            if (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">                apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //AnnotationAwareAspectJAutoProxyCreator的BeanDefinition</span><br><span class="line">    RootBeanDefinition beanDefinition = new RootBeanDefinition(cls);</span><br><span class="line">    beanDefinition.setSource(source);</span><br><span class="line">    //最高的优先级</span><br><span class="line">    beanDefinition.getPropertyValues().add(&quot;order&quot;, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    //基础设施</span><br><span class="line">    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    //注册该BeanDefinition</span><br><span class="line">    registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">    return beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（三、1）AspectJAutoProxyBeanDefinitionParser的extendBeanDefinition方法"><a href="#5、接（三、1）AspectJAutoProxyBeanDefinitionParser的extendBeanDefinition方法" class="headerlink" title="5、接（三、1）AspectJAutoProxyBeanDefinitionParser的extendBeanDefinition方法"></a>5、接（三、1）AspectJAutoProxyBeanDefinitionParser的extendBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void extendBeanDefinition(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    BeanDefinition beanDef =</span><br><span class="line">            parserContext.getRegistry().getBeanDefinition(AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">    if (element.hasChildNodes()) &#123;</span><br><span class="line">        //解析子节点</span><br><span class="line">        addIncludePatterns(element, parserContext, beanDef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AspectJAutoProxyBeanDefinitionParser的addIncludePatterns方法"><a href="#6、AspectJAutoProxyBeanDefinitionParser的addIncludePatterns方法" class="headerlink" title="6、AspectJAutoProxyBeanDefinitionParser的addIncludePatterns方法"></a>6、AspectJAutoProxyBeanDefinitionParser的addIncludePatterns方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void addIncludePatterns(Element element, ParserContext parserContext, BeanDefinition beanDef) &#123;</span><br><span class="line">    ManagedList&lt;TypedStringValue&gt; includePatterns = new ManagedList&lt;TypedStringValue&gt;();</span><br><span class="line">    NodeList childNodes = element.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; childNodes.getLength(); i++) &#123;</span><br><span class="line">        Node node = childNodes.item(i);</span><br><span class="line">        if (node instanceof Element) &#123;</span><br><span class="line">            Element includeElement = (Element) node;</span><br><span class="line">            TypedStringValue valueHolder = new TypedStringValue(includeElement.getAttribute(&quot;name&quot;));</span><br><span class="line">            valueHolder.setSource(parserContext.extractSource(includeElement));</span><br><span class="line">            includePatterns.add(valueHolder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!includePatterns.isEmpty()) &#123;</span><br><span class="line">        includePatterns.setSource(parserContext.extractSource(element));</span><br><span class="line">        //子节点加入bean</span><br><span class="line">        beanDef.getPropertyValues().add(&quot;includePatterns&quot;, includePatterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AnnotationAwareAspectJAutoProxyCreator的findCandidateAdvisors方法"><a href="#7、AnnotationAwareAspectJAutoProxyCreator的findCandidateAdvisors方法" class="headerlink" title="7、AnnotationAwareAspectJAutoProxyCreator的findCandidateAdvisors方法"></a>7、AnnotationAwareAspectJAutoProxyCreator的findCandidateAdvisors方法</h4><p>创建代理对象之前，首先获取通知<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected List&lt;Advisor&gt; findCandidateAdvisors() &#123;</span><br><span class="line">    // Add all the Spring advisors found according to superclass rules.</span><br><span class="line">    //父类的获取通知方法，与上一节相同</span><br><span class="line">    List&lt;Advisor&gt; advisors = super.findCandidateAdvisors();</span><br><span class="line">    // Build Advisors for all AspectJ aspects in the bean factory.</span><br><span class="line">    //获取注解AspectJ的类的通知器</span><br><span class="line">    advisors.addAll(this.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line">    return advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、BeanFactoryAspectJAdvisorsBuilder的buildAspectJAdvisors方法"><a href="#8、BeanFactoryAspectJAdvisorsBuilder的buildAspectJAdvisors方法" class="headerlink" title="8、BeanFactoryAspectJAdvisorsBuilder的buildAspectJAdvisors方法"></a>8、BeanFactoryAspectJAdvisorsBuilder的buildAspectJAdvisors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Advisor&gt; buildAspectJAdvisors() &#123;</span><br><span class="line">    List&lt;String&gt; aspectNames = null;</span><br><span class="line"></span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        aspectNames = this.aspectBeanNames;</span><br><span class="line">        if (aspectNames == null) &#123;</span><br><span class="line">            List&lt;Advisor&gt; advisors = new LinkedList&lt;Advisor&gt;();</span><br><span class="line">            aspectNames = new LinkedList&lt;String&gt;();</span><br><span class="line">            //获取所有beanName</span><br><span class="line">            String[] beanNames =</span><br><span class="line">                    BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Object.class, true, false);</span><br><span class="line">            for (String beanName : beanNames) &#123;</span><br><span class="line">                //不合法的bean，默认true，子类定义规则</span><br><span class="line">                if (!isEligibleBean(beanName)) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                // We must be careful not to instantiate beans eagerly as in this</span><br><span class="line">                // case they would be cached by the Spring container but would not</span><br><span class="line">                // have been weaved</span><br><span class="line">                Class&lt;?&gt; beanType = this.beanFactory.getType(beanName);</span><br><span class="line">                if (beanType == null) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //该类是否有Aspect注解</span><br><span class="line">                if (this.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">                    aspectNames.add(beanName);</span><br><span class="line">                    AspectMetadata amd = new AspectMetadata(beanType, beanName);</span><br><span class="line">                    if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">                        MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                                new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName);</span><br><span class="line">                        //获取类中的增强方法</span><br><span class="line">                        List&lt;Advisor&gt; classAdvisors = this.advisorFactory.getAdvisors(factory);</span><br><span class="line">                        //添加缓存</span><br><span class="line">                        if (this.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                            this.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            this.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">                        &#125;</span><br><span class="line">                        advisors.addAll(classAdvisors);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        // Per target or per this.</span><br><span class="line">                        if (this.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                            throw new IllegalArgumentException(&quot;Bean with name &apos;&quot; + beanName +</span><br><span class="line">                                    &quot;&apos; is a singleton, but aspect instantiation model is not singleton&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                                new PrototypeAspectInstanceFactory(this.beanFactory, beanName);</span><br><span class="line">                        this.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">                        advisors.addAll(this.advisorFactory.getAdvisors(factory));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            this.aspectBeanNames = aspectNames;</span><br><span class="line">            return advisors;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (aspectNames.isEmpty()) &#123;</span><br><span class="line">        return Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    //获取缓存中的通知器</span><br><span class="line">    List&lt;Advisor&gt; advisors = new LinkedList&lt;Advisor&gt;();</span><br><span class="line">    for (String aspectName : aspectNames) &#123;</span><br><span class="line">        List&lt;Advisor&gt; cachedAdvisors = this.advisorsCache.get(aspectName);</span><br><span class="line">        if (cachedAdvisors != null) &#123;</span><br><span class="line">            advisors.addAll(cachedAdvisors);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName);</span><br><span class="line">            advisors.addAll(this.advisorFactory.getAdvisors(factory));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ReflectiveAspectJAdvisorFactory的getAdvisors方法"><a href="#9、ReflectiveAspectJAdvisorFactory的getAdvisors方法" class="headerlink" title="9、ReflectiveAspectJAdvisorFactory的getAdvisors方法"></a>9、ReflectiveAspectJAdvisorFactory的getAdvisors方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;Advisor&gt; getAdvisors(MetadataAwareAspectInstanceFactory maaif) &#123;</span><br><span class="line">    final Class&lt;?&gt; aspectClass = maaif.getAspectMetadata().getAspectClass();</span><br><span class="line">    final String aspectName = maaif.getAspectMetadata().getAspectName();</span><br><span class="line">    //验证该类</span><br><span class="line">    validate(aspectClass);</span><br><span class="line"></span><br><span class="line">    // We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span><br><span class="line">    // so that it will only instantiate once.</span><br><span class="line">    final MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory =</span><br><span class="line">            new LazySingletonAspectInstanceFactoryDecorator(maaif);</span><br><span class="line"></span><br><span class="line">    final List&lt;Advisor&gt; advisors = new LinkedList&lt;Advisor&gt;();</span><br><span class="line">    //处理所有注解不为Pointcut的方法</span><br><span class="line">    for (Method method : getAdvisorMethods(aspectClass)) &#123;</span><br><span class="line">        //创建通知器</span><br><span class="line">        Advisor advisor = getAdvisor(method, lazySingletonAspectInstanceFactory, advisors.size(), aspectName);</span><br><span class="line">        if (advisor != null) &#123;</span><br><span class="line">            advisors.add(advisor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If it&apos;s a per target aspect, emit the dummy instantiating aspect.</span><br><span class="line">    //通知延迟初始化</span><br><span class="line">    if (!advisors.isEmpty() &amp;&amp; lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">        Advisor instantiationAdvisor = new SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);</span><br><span class="line">        advisors.add(0, instantiationAdvisor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Find introduction fields.</span><br><span class="line">    //处理DeclareParents注解</span><br><span class="line">    for (Field field : aspectClass.getDeclaredFields()) &#123;</span><br><span class="line">        Advisor advisor = getDeclareParentsAdvisor(field);</span><br><span class="line">        if (advisor != null) &#123;</span><br><span class="line">            advisors.add(advisor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、ReflectiveAspectJAdvisorFactory的getAdvisor方法"><a href="#10、ReflectiveAspectJAdvisorFactory的getAdvisor方法" class="headerlink" title="10、ReflectiveAspectJAdvisorFactory的getAdvisor方法"></a>10、ReflectiveAspectJAdvisorFactory的getAdvisor方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Advisor getAdvisor(Method candidateAdviceMethod, MetadataAwareAspectInstanceFactory aif,</span><br><span class="line">        int declarationOrderInAspect, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">    validate(aif.getAspectMetadata().getAspectClass());</span><br><span class="line">    //获取切点</span><br><span class="line">    AspectJExpressionPointcut ajexp =</span><br><span class="line">            getPointcut(candidateAdviceMethod, aif.getAspectMetadata().getAspectClass());</span><br><span class="line">    if (ajexp == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建通知器</span><br><span class="line">    return new InstantiationModelAwarePointcutAdvisorImpl(</span><br><span class="line">            this, ajexp, aif, candidateAdviceMethod, declarationOrderInAspect, aspectName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、ReflectiveAspectJAdvisorFactory的getPointcut方法"><a href="#11、ReflectiveAspectJAdvisorFactory的getPointcut方法" class="headerlink" title="11、ReflectiveAspectJAdvisorFactory的getPointcut方法"></a>11、ReflectiveAspectJAdvisorFactory的getPointcut方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private AspectJExpressionPointcut getPointcut(Method candidateAdviceMethod, Class&lt;?&gt; candidateAspectClass) &#123;</span><br><span class="line">    //获取方法上的注解</span><br><span class="line">    AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">            AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line">    if (aspectJAnnotation == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //切点类</span><br><span class="line">    AspectJExpressionPointcut ajexp =</span><br><span class="line">            new AspectJExpressionPointcut(candidateAspectClass, new String[0], new Class&lt;?&gt;[0]);</span><br><span class="line">    //设置节点表达式，例如@Before(&quot;pointCut()&quot;)的&quot;pointCut()&quot;</span><br><span class="line">    ajexp.setExpression(aspectJAnnotation.getPointcutExpression());</span><br><span class="line">    return ajexp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接-三、10-实例化InstantiationModelAwarePointcutAdvisorImpl"><a href="#12、接-三、10-实例化InstantiationModelAwarePointcutAdvisorImpl" class="headerlink" title="12、接(三、10)实例化InstantiationModelAwarePointcutAdvisorImpl"></a>12、接(三、10)实例化InstantiationModelAwarePointcutAdvisorImpl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public InstantiationModelAwarePointcutAdvisorImpl(AspectJAdvisorFactory af, AspectJExpressionPointcut ajexp,</span><br><span class="line">        MetadataAwareAspectInstanceFactory aif, Method method, int declarationOrderInAspect, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">    this.declaredPointcut = ajexp;</span><br><span class="line">    this.method = method;</span><br><span class="line">    this.atAspectJAdvisorFactory = af;</span><br><span class="line">    this.aspectInstanceFactory = aif;</span><br><span class="line">    this.declarationOrder = declarationOrderInAspect;</span><br><span class="line">    this.aspectName = aspectName;</span><br><span class="line"></span><br><span class="line">    if (aif.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">        // Static part of the pointcut is a lazy type.</span><br><span class="line">        Pointcut preInstantiationPointcut =</span><br><span class="line">                Pointcuts.union(aif.getAspectMetadata().getPerClausePointcut(), this.declaredPointcut);</span><br><span class="line"></span><br><span class="line">        // Make it dynamic: must mutate from pre-instantiation to post-instantiation state.</span><br><span class="line">        // If it&apos;s not a dynamic pointcut, it may be optimized out</span><br><span class="line">        // by the Spring AOP infrastructure after the first evaluation.</span><br><span class="line">        this.pointcut = new PerTargetInstantiationModelPointcut(this.declaredPointcut, preInstantiationPointcut, aif);</span><br><span class="line">        this.lazy = true;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // A singleton aspect.</span><br><span class="line">        //创建增强器</span><br><span class="line">        this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut);</span><br><span class="line">        this.pointcut = declaredPointcut;</span><br><span class="line">        this.lazy = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、InstantiationModelAwarePointcutAdvisorImpl的instantiateAdvice方法"><a href="#13、InstantiationModelAwarePointcutAdvisorImpl的instantiateAdvice方法" class="headerlink" title="13、InstantiationModelAwarePointcutAdvisorImpl的instantiateAdvice方法"></a>13、InstantiationModelAwarePointcutAdvisorImpl的instantiateAdvice方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private Advice instantiateAdvice(AspectJExpressionPointcut pcut) &#123;</span><br><span class="line">    return this.atAspectJAdvisorFactory.getAdvice(</span><br><span class="line">            this.method, pcut, this.aspectInstanceFactory, this.declarationOrder, this.aspectName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、ReflectiveAspectJAdvisorFactory的getAdvice方法"><a href="#14、ReflectiveAspectJAdvisorFactory的getAdvice方法" class="headerlink" title="14、ReflectiveAspectJAdvisorFactory的getAdvice方法"></a>14、ReflectiveAspectJAdvisorFactory的getAdvice方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut ajexp,</span><br><span class="line">        MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; candidateAspectClass = aif.getAspectMetadata().getAspectClass();</span><br><span class="line">    validate(candidateAspectClass);</span><br><span class="line">    //获取方法注解</span><br><span class="line">    AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">            AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line">    if (aspectJAnnotation == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If we get here, we know we have an AspectJ method.</span><br><span class="line">    // Check that it&apos;s an AspectJ-annotated class</span><br><span class="line">    if (!isAspect(candidateAspectClass)) &#123;</span><br><span class="line">        throw new AopConfigException(&quot;Advice must be declared inside an aspect type: &quot; +</span><br><span class="line">                &quot;Offending method &apos;&quot; + candidateAdviceMethod + &quot;&apos; in class [&quot; +</span><br><span class="line">                candidateAspectClass.getName() + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Found AspectJ method: &quot; + candidateAdviceMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AbstractAspectJAdvice springAdvice;</span><br><span class="line">    //不同的注解类型，创建不同的增强器</span><br><span class="line">    switch (aspectJAnnotation.getAnnotationType()) &#123;</span><br><span class="line">        case AtBefore:</span><br><span class="line">            springAdvice = new AspectJMethodBeforeAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">            break;</span><br><span class="line">        case AtAfter:</span><br><span class="line">            springAdvice = new AspectJAfterAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">            break;</span><br><span class="line">        case AtAfterReturning:</span><br><span class="line">            springAdvice = new AspectJAfterReturningAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">            AfterReturning afterReturningAnnotation = (AfterReturning) aspectJAnnotation.getAnnotation();</span><br><span class="line">            if (StringUtils.hasText(afterReturningAnnotation.returning())) &#123;</span><br><span class="line">                springAdvice.setReturningName(afterReturningAnnotation.returning());</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case AtAfterThrowing:</span><br><span class="line">            springAdvice = new AspectJAfterThrowingAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">            AfterThrowing afterThrowingAnnotation = (AfterThrowing) aspectJAnnotation.getAnnotation();</span><br><span class="line">            if (StringUtils.hasText(afterThrowingAnnotation.throwing())) &#123;</span><br><span class="line">                springAdvice.setThrowingName(afterThrowingAnnotation.throwing());</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case AtAround:</span><br><span class="line">            springAdvice = new AspectJAroundAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">            break;</span><br><span class="line">        case AtPointcut:</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Processing pointcut &apos;&quot; + candidateAdviceMethod.getName() + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        default:</span><br><span class="line">            throw new UnsupportedOperationException(</span><br><span class="line">                    &quot;Unsupported advice type on method &quot; + candidateAdviceMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Now to configure the advice...</span><br><span class="line">    springAdvice.setAspectName(aspectName);</span><br><span class="line">    springAdvice.setDeclarationOrder(declarationOrderInAspect);</span><br><span class="line">    String[] argNames = this.parameterNameDiscoverer.getParameterNames(candidateAdviceMethod);</span><br><span class="line">    if (argNames != null) &#123;</span><br><span class="line">        springAdvice.setArgumentNamesFromStringArray(argNames);</span><br><span class="line">    &#125;</span><br><span class="line">    springAdvice.calculateArgumentBindings();</span><br><span class="line">    return springAdvice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、AOP静态代理"><a href="#四、AOP静态代理" class="headerlink" title="四、AOP静态代理"></a>四、AOP静态代理</h3><h4 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h4><p>被代理的类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class DemoBean &#123;</span><br><span class="line">    public void run1() &#123;</span><br><span class="line">        System.out.println(&quot;run1...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void run2() throws Exception &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(2);</span><br><span class="line">        System.out.println(&quot;run2...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class ProfileAspect &#123;</span><br><span class="line">    @Around(&quot;profileMethod()&quot;)</span><br><span class="line">    public Object profile(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        StopWatch sw = new StopWatch(getClass().getName());</span><br><span class="line">        try &#123;</span><br><span class="line">            sw.start(pjp.getSignature().getName());</span><br><span class="line">            return pjp.proceed();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sw.stop();</span><br><span class="line">            System.err.println(sw.prettyPrint());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Pointcut(&quot;execution(public * org.codetree.core.spring.loadtimeweaver.*.*(..))&quot;)</span><br><span class="line">    public void profileMethod() &#123;</span><br><span class="line">        System.out.println(&quot;profileMethod..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>META-INF/aop.xml的aop.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE aspectj PUBLIC &quot;-//AspectJ//DTD//EN&quot; &quot;http://www.eclipse.org/aspectj/dtd/aspectj.dtd&quot;&gt;</span><br><span class="line">&lt;aspectj&gt;</span><br><span class="line">    &lt;weaver&gt;</span><br><span class="line">        &lt;!-- only weave classes in your application-specific packages --&gt;</span><br><span class="line">        &lt;!--被代理的目标包--&gt;</span><br><span class="line">        &lt;include within=&quot;org.codetree.core.spring.loadtimeweaver.*&quot; /&gt;</span><br><span class="line">    &lt;/weaver&gt;</span><br><span class="line">    &lt;aspects&gt;</span><br><span class="line">        &lt;!-- weave in just these aspects --&gt;</span><br><span class="line">        &lt;aspect name=&quot;org.codetree.core.spring.loadtimeweaver.ProfileAspect&quot; /&gt;</span><br><span class="line">    &lt;/aspects&gt;</span><br><span class="line">&lt;/aspectj&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class ExtInstrumentationLoadTimeWeaver extends InstrumentationLoadTimeWeaver(默认的weaver) &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void addTransformer(ClassFileTransformer transformer) &#123;  </span><br><span class="line">       try &#123;  </span><br><span class="line">           super.addTransformer(transformer);  </span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">       &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line"></span><br><span class="line">        xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">    http://www.springframework.org/schema/context</span><br><span class="line">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:load-time-weaver weaver-class=&quot;com.multidemo.spring.ExtInstrumentationLoadTimeWeaver&quot; aspectj-weaving=&quot;autodetect&quot; /&gt;  </span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.multidemo&quot;&gt;&lt;/context:component-scan&gt;  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h4 id="1、ContextNamespaceHandler的init方法"><a href="#1、ContextNamespaceHandler的init方法" class="headerlink" title="1、ContextNamespaceHandler的init方法"></a>1、ContextNamespaceHandler的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void init() &#123;</span><br><span class="line">    registerBeanDefinitionParser(&quot;property-placeholder&quot;, new PropertyPlaceholderBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;property-override&quot;, new PropertyOverrideBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;annotation-config&quot;, new AnnotationConfigBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;component-scan&quot;, new ComponentScanBeanDefinitionParser());</span><br><span class="line">    //注册该标签的解析器</span><br><span class="line">    registerBeanDefinitionParser(&quot;load-time-weaver&quot;, new LoadTimeWeaverBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;spring-configured&quot;, new SpringConfiguredBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;mbean-export&quot;, new MBeanExportBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;mbean-server&quot;, new MBeanServerBeanDefinitionParser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractBeanDefinitionParser的parse方法"><a href="#2、AbstractBeanDefinitionParser的parse方法" class="headerlink" title="2、AbstractBeanDefinitionParser的parse方法"></a>2、AbstractBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //解析配置文件</span><br><span class="line">    AbstractBeanDefinition definition = parseInternal(element, parserContext);</span><br><span class="line">    if (definition != null &amp;&amp; !parserContext.isNested()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //子类实现，返回&quot;loadTimeWeaver&quot;</span><br><span class="line">            String id = resolveId(element, definition, parserContext);</span><br><span class="line">            if (!StringUtils.hasText(id)) &#123;</span><br><span class="line">                parserContext.getReaderContext().error(</span><br><span class="line">                        &quot;Id is required for element &apos;&quot; + parserContext.getDelegate().getLocalName(element)</span><br><span class="line">                                + &quot;&apos; when used as a top-level tag&quot;, element);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] aliases = null;</span><br><span class="line">            if (shouldParseNameAsAliases()) &#123;</span><br><span class="line">                String name = element.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(name)) &#123;</span><br><span class="line">                    aliases = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, id, aliases);</span><br><span class="line">            //注册该bean</span><br><span class="line">            registerBeanDefinition(holder, parserContext.getRegistry());</span><br><span class="line">            //注册并广播该组件</span><br><span class="line">            if (shouldFireEvents()) &#123;</span><br><span class="line">                BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);</span><br><span class="line">                postProcessComponentDefinition(componentDefinition);</span><br><span class="line">                parserContext.registerComponent(componentDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(ex.getMessage(), element);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractSingleBeanDefinitionParser的parseInternal方法"><a href="#3、AbstractSingleBeanDefinitionParser的parseInternal方法" class="headerlink" title="3、AbstractSingleBeanDefinitionParser的parseInternal方法"></a>3、AbstractSingleBeanDefinitionParser的parseInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">    String parentName = getParentName(element);</span><br><span class="line">    if (parentName != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setParentName(parentName);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取weaver-class属性，子类实现，默认返回&quot;org.springframework.context.weaving.DefaultContextLoadTimeWeaver&quot;</span><br><span class="line">    //本例返回&quot;com.multidemo.spring.ExtInstrumentationLoadTimeWeaver&quot;</span><br><span class="line">    Class&lt;?&gt; beanClass = getBeanClass(element);</span><br><span class="line">    if (beanClass != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setBeanClass(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        String beanClassName = getBeanClassName(element);</span><br><span class="line">        if (beanClassName != null) &#123;</span><br><span class="line">            builder.getRawBeanDefinition().setBeanClassName(beanClassName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.getRawBeanDefinition().setSource(parserContext.extractSource(element));</span><br><span class="line">    if (parserContext.isNested()) &#123;</span><br><span class="line">        // Inner bean definition must receive same scope as containing bean.</span><br><span class="line">        builder.setScope(parserContext.getContainingBeanDefinition().getScope());</span><br><span class="line">    &#125;</span><br><span class="line">    if (parserContext.isDefaultLazyInit()) &#123;</span><br><span class="line">        // Default-lazy-init applies to custom bean definitions as well.</span><br><span class="line">        builder.setLazyInit(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析配置文件</span><br><span class="line">    doParse(element, parserContext, builder);</span><br><span class="line">    //创建BeanDefinition</span><br><span class="line">    return builder.getBeanDefinition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、LoadTimeWeaverBeanDefinitionParser的doParse方法"><a href="#4、LoadTimeWeaverBeanDefinitionParser的doParse方法" class="headerlink" title="4、LoadTimeWeaverBeanDefinitionParser的doParse方法"></a>4、LoadTimeWeaverBeanDefinitionParser的doParse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) &#123;</span><br><span class="line">    builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    //是否开启AspectJ</span><br><span class="line">    if (isAspectJWeavingEnabled(element.getAttribute(ASPECTJ_WEAVING_ATTRIBUTE), parserContext)) &#123;</span><br><span class="line">        RootBeanDefinition weavingEnablerDef = new RootBeanDefinition();</span><br><span class="line">        //&quot;org.springframework.context.weaving.AspectJWeavingEnabler&quot;</span><br><span class="line">        weavingEnablerDef.setBeanClassName(ASPECTJ_WEAVING_ENABLER_CLASS_NAME);</span><br><span class="line">        //注册该bean</span><br><span class="line">        parserContext.getReaderContext().registerWithGeneratedName(weavingEnablerDef);</span><br><span class="line">        //注册BeanDefinition</span><br><span class="line">        //类org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect</span><br><span class="line">        //bean的名字org.springframework.context.config.internalBeanConfigurerAspect</span><br><span class="line">        if (isBeanConfigurerAspectEnabled(parserContext.getReaderContext().getBeanClassLoader())) &#123;</span><br><span class="line">            new SpringConfiguredBeanDefinitionParser().parse(element, parserContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、LoadTimeWeaverBeanDefinitionParser的isAspectJWeavingEnabled方法"><a href="#5、LoadTimeWeaverBeanDefinitionParser的isAspectJWeavingEnabled方法" class="headerlink" title="5、LoadTimeWeaverBeanDefinitionParser的isAspectJWeavingEnabled方法"></a>5、LoadTimeWeaverBeanDefinitionParser的isAspectJWeavingEnabled方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected boolean isAspectJWeavingEnabled(String value, ParserContext parserContext) &#123;</span><br><span class="line">    if (&quot;on&quot;.equals(value)) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (&quot;off&quot;.equals(value)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Determine default...</span><br><span class="line">        //检查是否存在&quot;META-INF/aop.xml&quot;</span><br><span class="line">        ClassLoader cl = parserContext.getReaderContext().getResourceLoader().getClassLoader();</span><br><span class="line">        return (cl.getResource(AspectJWeavingEnabler.ASPECTJ_AOP_XML_RESOURCE) != null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、LoadTimeWeaverAwareProcessor的postProcessBeforeInitialization方法"><a href="#5、LoadTimeWeaverAwareProcessor的postProcessBeforeInitialization方法" class="headerlink" title="5、LoadTimeWeaverAwareProcessor的postProcessBeforeInitialization方法"></a>5、LoadTimeWeaverAwareProcessor的postProcessBeforeInitialization方法</h4><p>prepareBeanFactory时，会添加LoadTimeWeaverAwareProcessor以及一个临时的TempClassLoader，<br>用于类型比较或者校验的时候加载，bean实例化之前被清掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    //AspectJWeavingEnabler类实现了LoadTimeWeaverAware接口</span><br><span class="line">    if (bean instanceof LoadTimeWeaverAware) &#123;</span><br><span class="line">        LoadTimeWeaver ltw = this.loadTimeWeaver;//DefaultContextLoadTimeWeaver</span><br><span class="line">        if (ltw == null) &#123;</span><br><span class="line">            Assert.state(this.beanFactory != null,</span><br><span class="line">                    &quot;BeanFactory required if no LoadTimeWeaver explicitly specified&quot;);</span><br><span class="line">            ltw = this.beanFactory.getBean(</span><br><span class="line">                    ConfigurableApplicationContext.LOAD_TIME_WEAVER_BEAN_NAME, LoadTimeWeaver.class);</span><br><span class="line">        &#125;</span><br><span class="line">        ((LoadTimeWeaverAware) bean).setLoadTimeWeaver(ltw);</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、DefaultContextLoadTimeWeaver的setBeanClassLoader方法"><a href="#6、DefaultContextLoadTimeWeaver的setBeanClassLoader方法" class="headerlink" title="6、DefaultContextLoadTimeWeaver的setBeanClassLoader方法"></a>6、DefaultContextLoadTimeWeaver的setBeanClassLoader方法</h4><p>DefaultContextLoadTimeWeaver实现了BeanClassLoaderAware接口，在初始化的时候会执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void setBeanClassLoader(ClassLoader classLoader) &#123;</span><br><span class="line">    LoadTimeWeaver serverSpecificLoadTimeWeaver = createServerSpecificLoadTimeWeaver(classLoader);</span><br><span class="line">    if (serverSpecificLoadTimeWeaver != null) &#123;</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Determined server-specific load-time weaver: &quot; +</span><br><span class="line">                    serverSpecificLoadTimeWeaver.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        this.loadTimeWeaver = serverSpecificLoadTimeWeaver;</span><br><span class="line">    &#125;</span><br><span class="line">    //检查当前虚拟机中的Instrumentation实例是否可用</span><br><span class="line">    else if (InstrumentationLoadTimeWeaver.isInstrumentationAvailable()) &#123;</span><br><span class="line">        logger.info(&quot;Found Spring&apos;s JVM agent for instrumentation&quot;);</span><br><span class="line">        this.loadTimeWeaver = new InstrumentationLoadTimeWeaver(classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.loadTimeWeaver = new ReflectiveLoadTimeWeaver(classLoader);</span><br><span class="line">            logger.info(&quot;Using a reflective load-time weaver for class loader: &quot; +</span><br><span class="line">                    this.loadTimeWeaver.getInstrumentableClassLoader().getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IllegalStateException ex) &#123;</span><br><span class="line">            throw new IllegalStateException(ex.getMessage() + &quot; Specify a custom LoadTimeWeaver or start your &quot; +</span><br><span class="line">                    &quot;Java virtual machine with Spring&apos;s agent: -javaagent:org.springframework.instrument.jar&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7、AspectJWeavingEnabler的postProcessBeanFactory方法<br>AspectJWeavingEnabler实现了BeanFactoryPostProcessor接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException &#123;</span><br><span class="line">    enableAspectJWeaving(this.loadTimeWeaver, this.beanClassLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8、AspectJWeavingEnabler的enableAspectJWeaving方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void enableAspectJWeaving(LoadTimeWeaver weaverToUse, ClassLoader beanClassLoader) &#123;</span><br><span class="line">    //此时已经被初始化为DefaultContextLoadTimeWeaver</span><br><span class="line">    if (weaverToUse == null) &#123;</span><br><span class="line">        if (InstrumentationLoadTimeWeaver.isInstrumentationAvailable()) &#123;</span><br><span class="line">            weaverToUse = new InstrumentationLoadTimeWeaver(beanClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;No LoadTimeWeaver available&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //使用DefaultContextLoadTimeWeaver类型的bean中的loadTimeWeaver属性注册转换器</span><br><span class="line">    weaverToUse.addTransformer(new AspectJClassBypassingClassFileTransformer(</span><br><span class="line">                new ClassPreProcessorAgentAdapter()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9、InstrumentationLoadTimeWeaver的addTransformer方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void addTransformer(ClassFileTransformer transformer) &#123;</span><br><span class="line">    Assert.notNull(transformer, &quot;Transformer must not be null&quot;);</span><br><span class="line">    FilteringClassFileTransformer actualTransformer =</span><br><span class="line">            new FilteringClassFileTransformer(transformer, this.classLoader);</span><br><span class="line">    synchronized (this.transformers) &#123;</span><br><span class="line">        if (this.instrumentation == null) &#123;</span><br><span class="line">            throw new IllegalStateException(</span><br><span class="line">                    &quot;Must start with Java agent to use InstrumentationLoadTimeWeaver. See Spring documentation.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //加入到jdk的instrumentation中加载class时自动调用</span><br><span class="line">        this.instrumentation.addTransformer(actualTransformer);</span><br><span class="line">        this.transformers.add(actualTransformer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>10、FilteringClassFileTransformer的transform方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException &#123;</span><br><span class="line"></span><br><span class="line">    if (!this.targetClassLoader.equals(loader)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.targetTransformer.transform(</span><br><span class="line">            loader, className, classBeingRedefined, protectionDomain, classfileBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>11、AspectJClassBypassingClassFileTransformer的transform方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException &#123;</span><br><span class="line">    //不处理这两个包下面的</span><br><span class="line">    if (className.startsWith(&quot;org.aspectj&quot;) || className.startsWith(&quot;org/aspectj&quot;)) &#123;</span><br><span class="line">        return classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">    //委托给AspectJ代理继续处理</span><br><span class="line">    return this.delegate.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、AOP动态代理配置文件加载&quot;&gt;&lt;a href=&quot;#一、AOP动态代理配置文件加载&quot; class=&quot;headerlink&quot; title=&quot;一、AOP动态代理配置文件加载&quot;&gt;&lt;/a&gt;一、AOP动态代理配置文件加载&lt;/h3&gt;&lt;h4 id=&quot;demo&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC源码总结</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringMVC%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringMVC源码总结/</id>
    <published>2020-01-16T13:43:36.396Z</published>
    <updated>2018-10-14T10:42:54.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、SpringMVC结构"><a href="#一、SpringMVC结构" class="headerlink" title="一、SpringMVC结构"></a>一、SpringMVC结构</h3><p><img src="/2020/01/16/spring源码/SpringMVC源码总结/SpringMVC结构图.png" alt="SpringMVC结构图"></p><h4 id="1、主要类"><a href="#1、主要类" class="headerlink" title="1、主要类"></a>1、主要类</h4><p>DispatcherServlet：SpringMVC实际上就是一个Servlet，负责分发请求。<br>HandlerMapping接口：定义请求路径与处理方法的映射，默认实现为RequestMappingHandlerMapping。<br>HandlerExecutionChain：处理器链，包括前处理器、请求处理方法、后处理器。<br>HandlerAdapter接口：定义请求适配器，默认实现为RequestMappingHandlerAdapter，完成处理请求参数、调用请求方法、处理返回值等。<br>HandlerMethodArgumentResolver接口：定义参数解析器，主要实现类有RequestParamMethodArgumentResolver（处理@RequestParam的参数）、<br>    PathVariableMethodArgumentResolver（处理@PathVariable的参数）、RequestResponseBodyMethodProcessor（处理@RequestBody的参数）<br>HandlerMethodArgumentResolver接口：定义返回值处理器，主要实现类有ModelAndViewMethodReturnValueHandler（处理ModelAndView类型的返回值）、<br>    RequestResponseBodyMethodProcessor（处理注解了@ResponseBody方法或注解了@ResponseBody类的方法的返回值）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、SpringMVC结构&quot;&gt;&lt;a href=&quot;#一、SpringMVC结构&quot; class=&quot;headerlink&quot; title=&quot;一、SpringMVC结构&quot;&gt;&lt;/a&gt;一、SpringMVC结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/01/16/spri
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC源码</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringMVC%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringMVC源码/</id>
    <published>2020-01-16T13:43:36.381Z</published>
    <updated>2020-01-12T14:34:36.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、DispatcherServlet的加载"><a href="#1、DispatcherServlet的加载" class="headerlink" title="1、DispatcherServlet的加载"></a>1、DispatcherServlet的加载</h3><p>自动配置类会根据是否是web项目判断要不要引入DispatcherServlet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@AutoConfigureOrder(-2147483648)</span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnWebApplication</span><br><span class="line">@ConditionalOnClass(&#123;DispatcherServlet.class&#125;)</span><br><span class="line">@AutoConfigureAfter(&#123;EmbeddedServletContainerAutoConfiguration.class&#125;)</span><br><span class="line">public class DispatcherServletAutoConfiguration &#123;</span><br><span class="line">...省略部分</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">在容器刷新上下文的时候EmbeddedWebApplicationContext的onRefresh方法会将DispatcherServlet注入到spring容器中</span><br></pre></td></tr></table></figure></p><pre><code>protected void onRefresh() {    super.onRefresh();    try {        this.createEmbeddedServletContainer();    } catch (Throwable var2) {        throw new ApplicationContextException(&quot;Unable to start embedded container&quot;, var2);    }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">    private void createEmbeddedServletContainer() &#123;</span><br><span class="line">        EmbeddedServletContainer localContainer = this.embeddedServletContainer;</span><br><span class="line">//包装后的ApplicationContextFacade里面包含ApplicationContext,该类是tomcat的Servlet容器类并非spring容器</span><br><span class="line">//ApplicationContext中维护了一个StandardContext</span><br><span class="line">ServletContext localServletContext = this.getServletContext();</span><br><span class="line">        if (localContainer == null &amp;&amp; localServletContext == null) &#123;</span><br><span class="line">            EmbeddedServletContainerFactory containerFactory = this.getEmbeddedServletContainerFactory();</span><br><span class="line">            this.embeddedServletContainer = containerFactory.getEmbeddedServletContainer(new ServletContextInitializer[]&#123;this.getSelfInitializer()&#125;);</span><br><span class="line">        &#125; else if (localServletContext != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">//使用初始化器初始化Filter和Servlet</span><br><span class="line">                this.getSelfInitializer().onStartup(localServletContext);</span><br><span class="line">            &#125; catch (ServletException var4) &#123;</span><br><span class="line">                throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;, var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.initPropertySources();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>FilterRegistrationBean的onStartup方法添加Filter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> public void onStartup(ServletContext servletContext) throws ServletException &#123;</span><br><span class="line">     Filter filter = this.getFilter();</span><br><span class="line">     Assert.notNull(filter, &quot;Filter must not be null&quot;);</span><br><span class="line">     String name = this.getOrDeduceName(filter);</span><br><span class="line">     if (!this.isEnabled()) &#123;</span><br><span class="line">         this.logger.info(&quot;Filter &quot; + name + &quot; was not registered (disabled)&quot;);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">//将filter添加到StandardContext中</span><br><span class="line">         Dynamic added = servletContext.addFilter(name, filter);</span><br><span class="line">         if (added == null) &#123;</span><br><span class="line">             this.logger.info(&quot;Filter &quot; + name + &quot; was not registered (possibly already registered?)&quot;);</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">             this.configure(added);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>ServletRegistrationBean的onStartup方法添加Servlet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void onStartup(ServletContext servletContext) throws ServletException &#123;</span><br><span class="line">       Assert.notNull(this.servlet, &quot;Servlet must not be null&quot;);</span><br><span class="line">       String name = this.getServletName();</span><br><span class="line">       if (!this.isEnabled()) &#123;</span><br><span class="line">           logger.info(&quot;Servlet &quot; + name + &quot; was not registered (disabled)&quot;);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           logger.info(&quot;Mapping servlet: &apos;&quot; + name + &quot;&apos; to &quot; + this.urlMappings);</span><br><span class="line">//将servlet添加到StandardContext中</span><br><span class="line">           Dynamic added = servletContext.addServlet(name, this.servlet);</span><br><span class="line">           if (added == null) &#123;</span><br><span class="line">               logger.info(&quot;Servlet &quot; + name + &quot; was not registered (possibly already registered?)&quot;);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               this.configure(added);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>最终调用的是ApplicationContext的addServlet方法将servlet添加到StandardContext<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private javax.servlet.ServletRegistration.Dynamic addServlet(String servletName, String servletClass, Servlet servlet, Map&lt;String, String&gt; initParams) throws IllegalStateException &#123;</span><br><span class="line">       if (servletName != null &amp;&amp; !servletName.equals(&quot;&quot;)) &#123;</span><br><span class="line">           if (!this.context.getState().equals(LifecycleState.STARTING_PREP)) &#123;</span><br><span class="line">               throw new IllegalStateException(sm.getString(&quot;applicationContext.addServlet.ise&quot;, new Object[]&#123;this.getContextPath()&#125;));</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               Wrapper wrapper = (Wrapper)this.context.findChild(servletName);</span><br><span class="line">               if (wrapper == null) &#123;</span><br><span class="line">//将servlet包装成wrapper</span><br><span class="line">                   wrapper = this.context.createWrapper();</span><br><span class="line">                   wrapper.setName(servletName);</span><br><span class="line">//添加到context容器中</span><br><span class="line">                   this.context.addChild(wrapper);</span><br><span class="line">               &#125; else if (wrapper.getName() != null &amp;&amp; wrapper.getServletClass() != null) &#123;</span><br><span class="line">                   if (!wrapper.isOverridable()) &#123;</span><br><span class="line">                       return null;</span><br><span class="line">                   &#125;</span><br><span class="line">                   wrapper.setOverridable(false);</span><br><span class="line">               &#125;</span><br><span class="line">...省略部分</span><br><span class="line">               return registration;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           throw new IllegalArgumentException(sm.getString(&quot;applicationContext.invalidServletName&quot;, new Object[]&#123;servletName&#125;));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、请求处理过程"><a href="#2、请求处理过程" class="headerlink" title="2、请求处理过程"></a>2、请求处理过程</h3><p>首次接受请求会执行wrapper的allocate方法初始化DispatcherServlet，最终调用的是initStrategies方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  protected void initStrategies(ApplicationContext context) &#123;</span><br><span class="line">//文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析</span><br><span class="line">      this.initMultipartResolver(context);</span><br><span class="line">//本地化解析</span><br><span class="line">      this.initLocaleResolver(context);</span><br><span class="line">//主题解析</span><br><span class="line">      this.initThemeResolver(context);</span><br><span class="line">//HandlerMapping，将请求映射到处理器</span><br><span class="line">      this.initHandlerMappings(context);</span><br><span class="line">//HandlerAdapter处理入参出参等</span><br><span class="line">      this.initHandlerAdapters(context);</span><br><span class="line">//如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析  </span><br><span class="line">      this.initHandlerExceptionResolvers(context);</span><br><span class="line">//直接解析请求到视图名  </span><br><span class="line">      this.initRequestToViewNameTranslator(context);</span><br><span class="line">//通过viewResolver解析逻辑视图到具体视图实现  </span><br><span class="line">      this.initViewResolvers(context);</span><br><span class="line">//flash映射管理器 </span><br><span class="line">      this.initFlashMapManager(context);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>DispatcherServlet通过doDispatch方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = null;</span><br><span class="line">    boolean multipartRequestParsed = false;</span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ModelAndView mv = null;</span><br><span class="line">            Object dispatchException = null;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                processedRequest = this.checkMultipart(request);</span><br><span class="line">                multipartRequestParsed = processedRequest != request;</span><br><span class="line">//获取HandlerMapping,用户请求一般由RequestMappingHandlerMapping处理</span><br><span class="line">                mappedHandler = this.getHandler(processedRequest);</span><br><span class="line">                if (mappedHandler == null || mappedHandler.getHandler() == null) &#123;</span><br><span class="line">                    this.noHandlerFound(processedRequest, response);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">//获取适配器，用户请求一般用RequestMappingHandlerAdapter处理</span><br><span class="line">                HandlerAdapter ha = this.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                String method = request.getMethod();</span><br><span class="line">                boolean isGet = &quot;GET&quot;.equals(method);</span><br><span class="line">                if (isGet || &quot;HEAD&quot;.equals(method)) &#123;</span><br><span class="line">                    long lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                    if (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">                        this.logger.debug(&quot;Last-Modified value for [&quot; + getRequestUri(request) + &quot;] is: &quot; + lastModified);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if ((new ServletWebRequest(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">//执行HandlerInterceptor拦截器的preHandle方法</span><br><span class="line">                if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">//执行请求</span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                this.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">//执行HandlerInterceptor拦截器的postHandle方法</span><br><span class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">            &#125; catch (Exception var20) &#123;</span><br><span class="line">                dispatchException = var20;</span><br><span class="line">            &#125; catch (Throwable var21) &#123;</span><br><span class="line">                dispatchException = new NestedServletException(&quot;Handler dispatch failed&quot;, var21);</span><br><span class="line">            &#125;</span><br><span class="line">//处理返回结果，包括处理异常、渲染页面，发出完成通知触发Interceptor的afterCompletion</span><br><span class="line">            this.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">        &#125; catch (Exception var22) &#123;</span><br><span class="line">//执行Interceptor的afterCompletion方法</span><br><span class="line">            this.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class="line">        &#125; catch (Throwable var23) &#123;</span><br><span class="line">            this.triggerAfterCompletion(processedRequest, response, mappedHandler, new NestedServletException(&quot;Handler processing failed&quot;, var23));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            if (mappedHandler != null) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (multipartRequestParsed) &#123;</span><br><span class="line">            this.cleanupMultipart(processedRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>适配器RequestMappingHandlerAdapter通过invokeHandleMethod方法完成初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">private ModelAndView invokeHandleMethod(HttpServletRequest request,</span><br><span class="line">HttpServletResponse response, HandlerMethod handlerMethod) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">ServletWebRequest webRequest = new ServletWebRequest(request, response);</span><br><span class="line">//获取适用于当前handler的类的@InitBinder注解的方法，创建ServletRequestDataBinderFactory</span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">//获取适用于当前handler的类的@ModelAttribute注解的方法，获取缓存的sessionAttributes，创建ModelFactory</span><br><span class="line">ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line">//创建ServletInvocableHandlerMethod</span><br><span class="line">ServletInvocableHandlerMethod requestMappingMethod = createRequestMappingMethod(handlerMethod, binderFactory);</span><br><span class="line">//ModelAndView容器</span><br><span class="line">ModelAndViewContainer mavContainer = new ModelAndViewContainer();</span><br><span class="line">//获取request中的FlashMap，加入mavContainer</span><br><span class="line">mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">//初始化Model</span><br><span class="line">modelFactory.initModel(webRequest, mavContainer, requestMappingMethod);</span><br><span class="line">//请求重定向时忽略model参数</span><br><span class="line">mavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);</span><br><span class="line">//Servlet容器是否支持异步处理请求，返回StandardServletAsyncWebRequest或NoSupportAsyncWebRequest</span><br><span class="line">AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">asyncWebRequest.setTimeout(this.asyncRequestTimeout);</span><br><span class="line">//获取request的asyncManager</span><br><span class="line">final WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">//设置异步处理线程池</span><br><span class="line">asyncManager.setTaskExecutor(this.taskExecutor);</span><br><span class="line">//设置请求</span><br><span class="line">asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">//设置拦截器</span><br><span class="line">asyncManager.registerCallableInterceptors(this.callableInterceptors);</span><br><span class="line">asyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);</span><br><span class="line">//有异步请求处理完成</span><br><span class="line">if (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">//获取处理结果</span><br><span class="line">Object result = asyncManager.getConcurrentResult();</span><br><span class="line">//获取处理返回的mavContainer</span><br><span class="line">mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];</span><br><span class="line">//清除ConcurrentResult与ConcurrentResultContext</span><br><span class="line">asyncManager.clearConcurrentResult();</span><br><span class="line"></span><br><span class="line">if (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(&quot;Found concurrent result value [&quot; + result + &quot;]&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//创建ConcurrentResultHandlerMethod</span><br><span class="line">requestMappingMethod = requestMappingMethod.wrapConcurrentResult(result);</span><br><span class="line">&#125;</span><br><span class="line">//处理请求</span><br><span class="line">requestMappingMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">//正在异步处理请求</span><br><span class="line">if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">//处理并返回ModelAndView</span><br><span class="line">return getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>requestMappingMethod的invokeAndHandle继续处理请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception &#123;</span><br><span class="line">       //处理请求</span><br><span class="line">Object returnValue = this.invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">       //如方法上有@ResponseStatus注解，将注解值放入request或response</span><br><span class="line">this.setResponseStatus(webRequest);</span><br><span class="line">//没有返回值</span><br><span class="line">       if (returnValue == null) &#123;</span><br><span class="line">           if (this.isRequestNotModified(webRequest) || this.getResponseStatus() != null || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">               //设置请求已被处理完</span><br><span class="line">mavContainer.setRequestHandled(true);</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else if (StringUtils.hasText(this.getResponseStatusReason())) &#123;</span><br><span class="line">           mavContainer.setRequestHandled(true);</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       mavContainer.setRequestHandled(false);</span><br><span class="line">       try &#123;</span><br><span class="line">//处理器处理返回值</span><br><span class="line">           this.returnValueHandlers.handleReturnValue(returnValue, this.getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">       &#125; catch (Exception var6) &#123;</span><br><span class="line">           if (this.logger.isTraceEnabled()) &#123;</span><br><span class="line">               this.logger.trace(this.getReturnValueHandlingErrorMessage(&quot;Error handling return value&quot;, returnValue), var6);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           throw var6;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>继续看invokeForRequest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) throws Exception &#123;</span><br><span class="line">//获取并处理方法参数，即Controller方法中的参数  </span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">//执行Controller中的方法</span><br><span class="line">Object returnValue = doInvoke(args);</span><br><span class="line">if (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(&quot;Method [&quot; + getMethod().getName() + &quot;] returned [&quot; + returnValue + &quot;]&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、RequestMappingHandlerMapping"><a href="#3、RequestMappingHandlerMapping" class="headerlink" title="3、RequestMappingHandlerMapping"></a>3、RequestMappingHandlerMapping</h3><p>RequestMappingHandlerMapping在初始话时为每个方法创建RequestMappingInfo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protected RequestMappingInfo getMappingForMethod(Method method, Class&lt;?&gt; handlerType) &#123;</span><br><span class="line">       //方法RequestMappingInfo</span><br><span class="line">RequestMappingInfo info = this.createRequestMappingInfo(method);</span><br><span class="line">       if (info != null) &#123;</span><br><span class="line">//类RequestMappingInfo</span><br><span class="line">           RequestMappingInfo typeInfo = this.createRequestMappingInfo(handlerType);</span><br><span class="line">           if (typeInfo != null) &#123;</span><br><span class="line">//将二者组合到一起</span><br><span class="line">               info = typeInfo.combine(info);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return info;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) &#123;</span><br><span class="line">//获取RequestMapping注解中的信息</span><br><span class="line">      RequestMapping requestMapping = (RequestMapping)AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);</span><br><span class="line">      //获取自定义注解中的信息，该方法待子类实现</span><br><span class="line">RequestCondition&lt;?&gt; condition = element instanceof Class ? this.getCustomTypeCondition((Class)element) : this.getCustomMethodCondition((Method)element);</span><br><span class="line">//创建RequestMappingInfo</span><br><span class="line">return requestMapping != null ? this.createRequestMappingInfo(requestMapping, condition) : null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>查找处理方法时，使用父类AbstractHandlerMethodMapping的lookupHandlerMethod方法查找url对应的处理方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception &#123;</span><br><span class="line">List&lt;Match&gt; matches = new ArrayList&lt;Match&gt;();</span><br><span class="line">//通过path直接匹配</span><br><span class="line">List&lt;T&gt; directPathMatches = this.urlMap.get(lookupPath);</span><br><span class="line">if (directPathMatches != null) &#123;</span><br><span class="line">addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">&#125;</span><br><span class="line">if (matches.isEmpty()) &#123;</span><br><span class="line">// No choice but to go through all mappings...</span><br><span class="line">//通过表达式模糊匹配</span><br><span class="line">addMatchingMappings(this.handlerMethods.keySet(), matches, request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!matches.isEmpty()) &#123;</span><br><span class="line">//比较器</span><br><span class="line">Comparator&lt;Match&gt; comparator = new MatchComparator(getMappingComparator(request));</span><br><span class="line">//匹配多个时，排序</span><br><span class="line">Collections.sort(matches, comparator);</span><br><span class="line">if (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(&quot;Found &quot; + matches.size() + &quot; matching mapping(s) for [&quot; + lookupPath + &quot;] : &quot; + matches);</span><br><span class="line">&#125;</span><br><span class="line">//获取最匹配的</span><br><span class="line">Match bestMatch = matches.get(0);</span><br><span class="line">//多个方法匹配成功</span><br><span class="line">if (matches.size() &gt; 1) &#123;</span><br><span class="line">Match secondBestMatch = matches.get(1);</span><br><span class="line">if (comparator.compare(bestMatch, secondBestMatch) == 0) &#123;</span><br><span class="line">Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class="line">Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class="line">throw new IllegalStateException(</span><br><span class="line">&quot;Ambiguous handler methods mapped for HTTP path &apos;&quot; + request.getRequestURL() + &quot;&apos;: &#123;&quot; +</span><br><span class="line">m1 + &quot;, &quot; + m2 + &quot;&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//匹配相关信息设置到request中，包括解析后的@pathvariable参数集合</span><br><span class="line">handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line">//返回最匹配的处理方法</span><br><span class="line">return bestMatch.handlerMethod;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">return handleNoMatch(handlerMethods.keySet(), lookupPath, request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比较器comparator通过RequestMappingInfo的compareTo去比较是否匹配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public int compareTo(RequestMappingInfo other, HttpServletRequest request) &#123;</span><br><span class="line">       int result;</span><br><span class="line">//HEAD请求先根据请求方法匹配</span><br><span class="line">       if (HttpMethod.HEAD.matches(request.getMethod())) &#123;</span><br><span class="line">           result = this.methodsCondition.compareTo(other.getMethodsCondition(), request);</span><br><span class="line">           if (result != 0) &#123;</span><br><span class="line">               return result;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">//根据path信息比较</span><br><span class="line">       result = this.patternsCondition.compareTo(other.getPatternsCondition(), request);</span><br><span class="line">       if (result != 0) &#123;</span><br><span class="line">           return result;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">//根据参数信息比较</span><br><span class="line">           result = this.paramsCondition.compareTo(other.getParamsCondition(), request);</span><br><span class="line">           if (result != 0) &#123;</span><br><span class="line">               return result;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               result = this.headersCondition.compareTo(other.getHeadersCondition(), request);</span><br><span class="line">               if (result != 0) &#123;</span><br><span class="line">                   return result;</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   result = this.consumesCondition.compareTo(other.getConsumesCondition(), request);</span><br><span class="line">                   if (result != 0) &#123;</span><br><span class="line">                       return result;</span><br><span class="line">                   &#125; else &#123;</span><br><span class="line">                       result = this.producesCondition.compareTo(other.getProducesCondition(), request);</span><br><span class="line">                       if (result != 0) &#123;</span><br><span class="line">                           return result;</span><br><span class="line">                       &#125; else &#123;</span><br><span class="line">                           result = this.methodsCondition.compareTo(other.getMethodsCondition(), request);</span><br><span class="line">                           if (result != 0) &#123;</span><br><span class="line">                               return result;</span><br><span class="line">                           &#125; else &#123;</span><br><span class="line">//根据自定义信息比较</span><br><span class="line">                               result = this.customConditionHolder.compareTo(other.customConditionHolder, request);</span><br><span class="line">                               return result != 0 ? result : 0;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、RequestMappingHandlerAdapter"><a href="#4、RequestMappingHandlerAdapter" class="headerlink" title="4、RequestMappingHandlerAdapter"></a>4、RequestMappingHandlerAdapter</h3><p>适配器RequestMappingHandlerAdapter实现了InitializingBean接口，实例化后会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void afterPropertiesSet() &#123;</span><br><span class="line">//初始化ControllerAdvice注解的类</span><br><span class="line">       this.initControllerAdviceCache();</span><br><span class="line">       List handlers;</span><br><span class="line">//初始化参数处理器，如RequestParamMethodArgumentResolver处理RequestParam注解的参数</span><br><span class="line">       if (this.argumentResolvers == null) &#123;</span><br><span class="line">           handlers = this.getDefaultArgumentResolvers();</span><br><span class="line">           this.argumentResolvers = (new HandlerMethodArgumentResolverComposite()).addResolvers(handlers);</span><br><span class="line">       &#125;</span><br><span class="line">//初始化参数绑定处理器，</span><br><span class="line">       if (this.initBinderArgumentResolvers == null) &#123;</span><br><span class="line">           handlers = this.getDefaultInitBinderArgumentResolvers();</span><br><span class="line">           this.initBinderArgumentResolvers = (new HandlerMethodArgumentResolverComposite()).addResolvers(handlers);</span><br><span class="line">       &#125;</span><br><span class="line">//初始化返回值处理器，如ResponseBodyEmitterReturnValueHandler处理ResponseBody注解的处理器</span><br><span class="line">       if (this.returnValueHandlers == null) &#123;</span><br><span class="line">           handlers = this.getDefaultReturnValueHandlers();</span><br><span class="line">           this.returnValueHandlers = (new HandlerMethodReturnValueHandlerComposite()).addHandlers(handlers);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、DispatcherServlet的加载&quot;&gt;&lt;a href=&quot;#1、DispatcherServlet的加载&quot; class=&quot;headerlink&quot; title=&quot;1、DispatcherServlet的加载&quot;&gt;&lt;/a&gt;1、DispatcherServlet的
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud熔断器源码</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringCloud%E7%86%94%E6%96%AD%E5%99%A8%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringCloud熔断器源码/</id>
    <published>2020-01-16T13:43:36.378Z</published>
    <updated>2020-01-12T14:34:34.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、熔断器的创建"><a href="#1、熔断器的创建" class="headerlink" title="1、熔断器的创建"></a>1、熔断器的创建</h3><p>我们使用的FeignClient,Client对象创建时使用动态代理，拦截器为HystrixInvocationHandler，在invoke方法中创建了HystrixCommand。<br>创建HystrixCommand对象时默认的创建一个HystrixCircuitBreakerImpl熔断器.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected HystrixCircuitBreakerImpl(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixCommandProperties properties, HystrixCommandMetrics metrics) &#123;</span><br><span class="line">this.status = new AtomicReference(HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.CLOSED);</span><br><span class="line">this.circuitOpened = new AtomicLong(-1L);</span><br><span class="line">this.activeSubscription = new AtomicReference((Object)null);</span><br><span class="line">this.properties = properties;</span><br><span class="line">//HystrixCommandMetrics中维护了healthCountsStream流，该数据流为收集后的各个时间窗口内请求状态</span><br><span class="line">this.metrics = metrics;</span><br><span class="line">//订阅metrics中的healthCountsStream</span><br><span class="line">Subscription s = this.subscribeToStream();</span><br><span class="line">this.activeSubscription.set(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>来看看subscribeToStream<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private Subscription subscribeToStream() &#123;</span><br><span class="line">//订阅metrics中的healthCountsStream数据流</span><br><span class="line">return this.metrics.getHealthCountsStream().observe().subscribe(new Subscriber&lt;HealthCounts&gt;() &#123;</span><br><span class="line">public void onCompleted() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void onError(Throwable e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void onNext(HealthCounts hc) &#123;</span><br><span class="line">//一个时间窗口内，总请求数大于设定数量（默认20），失败请求比例大于设定比例（默认50），则打开熔断器</span><br><span class="line">if (hc.getTotalRequests() &gt;= (long)(Integer)HystrixCircuitBreakerImpl.this.properties.circuitBreakerRequestVolumeThreshold().get() &amp;&amp; hc.getErrorPercentage() &gt;= (Integer)HystrixCircuitBreakerImpl.this.properties.circuitBreakerErrorThresholdPercentage().get() &amp;&amp; HystrixCircuitBreakerImpl.this.status.compareAndSet(HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.CLOSED, HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.OPEN)) &#123;</span><br><span class="line">//设置熔断器打开时间</span><br><span class="line">HystrixCircuitBreakerImpl.this.circuitOpened.set(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、熔断器的数据来源"><a href="#2、熔断器的数据来源" class="headerlink" title="2、熔断器的数据来源"></a>2、熔断器的数据来源</h3><p>熔断器订阅的数据来源于HystrixCommand执行完成后的回调，AbstractCommand的toObservable方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public Observable&lt;R&gt; toObservable() &#123;</span><br><span class="line">//在Observable结束前触发回调，无论是正常还是异常终止</span><br><span class="line">        final Action0 terminateCommandCleanup = new Action0() &#123;</span><br><span class="line">            public void call() &#123;</span><br><span class="line">                if (AbstractCommand.this.commandState.compareAndSet(AbstractCommand.CommandState.OBSERVABLE_CHAIN_CREATED, AbstractCommand.CommandState.TERMINAL)) &#123;</span><br><span class="line">AbstractCommand.this.handleCommandEnd(false);</span><br><span class="line">                &#125; else if (AbstractCommand.this.commandState.compareAndSet(AbstractCommand.CommandState.USER_CODE_EXECUTED, AbstractCommand.CommandState.TERMINAL)) &#123;</span><br><span class="line">                    AbstractCommand.this.handleCommandEnd(true);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">//在Subscriber进行订阅和反订阅的时候触发回调</span><br><span class="line">        final Action0 unsubscribeCommandCleanup = new Action0() &#123;</span><br><span class="line">            public void call() &#123;</span><br><span class="line">                if (AbstractCommand.this.commandState.compareAndSet(AbstractCommand.CommandState.OBSERVABLE_CHAIN_CREATED, AbstractCommand.CommandState.UNSUBSCRIBED)) &#123;</span><br><span class="line">                    </span><br><span class="line">...省略部分</span><br><span class="line"></span><br><span class="line">                    AbstractCommand.this.handleCommandEnd(false);</span><br><span class="line">                &#125; else if (AbstractCommand.this.commandState.compareAndSet(AbstractCommand.CommandState.USER_CODE_EXECUTED, AbstractCommand.CommandState.UNSUBSCRIBED)) &#123;</span><br><span class="line">                    </span><br><span class="line">...省略部分</span><br><span class="line"></span><br><span class="line">                    AbstractCommand.this.handleCommandEnd(true);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ...省略部分</span><br><span class="line"></span><br><span class="line">        return Observable.defer(new Func0&lt;Observable&lt;R&gt;&gt;() &#123;</span><br><span class="line">            public Observable&lt;R&gt; call() &#123;</span><br><span class="line">                if (!AbstractCommand.this.commandState.compareAndSet(AbstractCommand.CommandState.NOT_STARTED, AbstractCommand.CommandState.OBSERVABLE_CHAIN_CREATED)) &#123;</span><br><span class="line">                    IllegalStateException ex = new IllegalStateException(&quot;This instance can only be executed once. Please instantiate a new instance.&quot;);</span><br><span class="line">                    throw new HystrixRuntimeException(FailureType.BAD_REQUEST_EXCEPTION, AbstractCommand.this.getClass(), AbstractCommand.this.getLogMessagePrefix() + &quot; command executed multiple times - this is not permitted.&quot;, ex, (Throwable)null);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">...省略部分</span><br><span class="line">//触发回调</span><br><span class="line">                    return afterCache.doOnTerminate(terminateCommandCleanup).doOnUnsubscribe(unsubscribeCommandCleanup).doOnCompleted(fireOnCompletedHook);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中的handleCommandEnd方法将调用结果作为事件写入流中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void handleCommandEnd(boolean commandExecutionStarted) &#123;</span><br><span class="line">//计时器</span><br><span class="line">Reference&lt;TimerListener&gt; tl = (Reference)this.timeoutTimer.get();</span><br><span class="line">       if (tl != null) &#123;</span><br><span class="line">           tl.clear();</span><br><span class="line">       &#125;</span><br><span class="line">//执行时间</span><br><span class="line">       long userThreadLatency = System.currentTimeMillis() - this.commandStartTimestamp;</span><br><span class="line">//执行结果记录</span><br><span class="line">       this.executionResult = this.executionResult.markUserThreadCompletion((long)((int)userThreadLatency));</span><br><span class="line">//将结果写入流</span><br><span class="line">       if (this.executionResultAtTimeOfCancellation == null) &#123;</span><br><span class="line">           this.metrics.markCommandDone(this.executionResult, this.commandKey, this.threadPoolKey, commandExecutionStarted);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           this.metrics.markCommandDone(this.executionResultAtTimeOfCancellation, this.commandKey, this.threadPoolKey, commandExecutionStarted);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (this.endCurrentThreadExecutingCommand != null) &#123;</span><br><span class="line">           this.endCurrentThreadExecutingCommand.call();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>metrics为创建HystrixCommand时创建的HystrixCommandMetrics对象,继续看metrics的markCommandDone方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void markCommandDone(ExecutionResult executionResult, HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, boolean executionStarted) &#123;</span><br><span class="line">       //线程绑定的HystrixThreadEventStream</span><br><span class="line">HystrixThreadEventStream.getInstance().executionDone(executionResult, commandKey, threadPoolKey);</span><br><span class="line">       if (executionStarted) &#123;</span><br><span class="line">           this.concurrentExecutionCount.decrementAndGet();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>继续看HystrixThreadEventStream的executionDone方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void executionDone(ExecutionResult executionResult, HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey) &#123;</span><br><span class="line">//将执行结果包装成事件</span><br><span class="line">HystrixCommandCompletion event = HystrixCommandCompletion.from(executionResult, commandKey, threadPoolKey);</span><br><span class="line">this.writeOnlyCommandCompletionSubject.onNext(event);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>由HystrixThreadEventStream的构造器可知，执行writeOnlyCommandCompletionSubject的onNext之前会先执行writeCommandStartsToShardedStreams回调方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> private static final Action1&lt;HystrixCommandCompletion&gt; writeCommandCompletionsToShardedStreams = new Action1&lt;HystrixCommandCompletion&gt;() &#123;</span><br><span class="line">     public void call(HystrixCommandCompletion commandCompletion) &#123;</span><br><span class="line">         //由commandKey获取数据流</span><br><span class="line">HystrixCommandCompletionStream commandStream = HystrixCommandCompletionStream.getInstance(commandCompletion.getCommandKey());</span><br><span class="line">         //将事件写入数据流</span><br><span class="line">commandStream.write(commandCompletion);</span><br><span class="line">//线程池隔离策略，由threadPoolKey获取数据流</span><br><span class="line">         if (commandCompletion.isExecutedInThread() || commandCompletion.isResponseThreadPoolRejected()) &#123;</span><br><span class="line">             HystrixThreadPoolCompletionStream threadPoolStream = HystrixThreadPoolCompletionStream.getInstance(commandCompletion.getThreadPoolKey());</span><br><span class="line">             //将事件写入数据流</span><br><span class="line">threadPoolStream.write(commandCompletion);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><h3 id="3、熔断器的数据收集"><a href="#3、熔断器的数据收集" class="headerlink" title="3、熔断器的数据收集"></a>3、熔断器的数据收集</h3><p>熔断器订阅了HystrixCommandMetrics中的HealthCountsStream，HealthCountsStream的构造器由commandKey获取了HystrixCommandCompletionStream数据流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private HealthCountsStream(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs, Func2&lt;long[], HystrixCommandCompletion, long[]&gt; reduceCommandCompletion) &#123;</span><br><span class="line">    super(HystrixCommandCompletionStream.getInstance(commandKey), numBuckets, bucketSizeInMs, reduceCommandCompletion, healthCheckAccumulator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HealthCountsStream的父类BucketedCounterStream将时间单元的数据，汇总到Bucket中。<br>父类BucketedRollingCounterStream将收集完的Bucket中的数据，汇总到window中。<br>BucketedCounterStream的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  protected BucketedCounterStream(final HystrixEventStream&lt;Event&gt; inputEventStream, int numBuckets, final int bucketSizeInMs, final Func2&lt;Bucket, Event, Bucket&gt; appendRawEventToBucket) &#123;</span><br><span class="line">      //一个Bucket的时间单元，默认500毫秒</span><br><span class="line">this.numBuckets = numBuckets;</span><br><span class="line">//将一个时间单元的请求结果汇总到Bucket中</span><br><span class="line">      this.reduceBucketToSummary = new Func1&lt;Observable&lt;Event&gt;, Observable&lt;Bucket&gt;&gt;() &#123;</span><br><span class="line">          public Observable&lt;Bucket&gt; call(Observable&lt;Event&gt; eventBucket) &#123;</span><br><span class="line">              return eventBucket.reduce(BucketedCounterStream.this.getEmptyBucketSummary(), appendRawEventToBucket);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">//起始Bucket，空的</span><br><span class="line">      final List&lt;Bucket&gt; emptyEventCountsToStart = new ArrayList();</span><br><span class="line"></span><br><span class="line">      for(int i = 0; i &lt; numBuckets; ++i) &#123;</span><br><span class="line">          emptyEventCountsToStart.add(this.getEmptyBucketSummary());</span><br><span class="line">      &#125;</span><br><span class="line">//订阅inputEventStream，就是前面获取的HystrixCommandCompletionStream，并且将数据汇总成Bucket流</span><br><span class="line">      this.bucketedStream = Observable.defer(new Func0&lt;Observable&lt;Bucket&gt;&gt;() &#123;</span><br><span class="line">          public Observable&lt;Bucket&gt; call() &#123;</span><br><span class="line">              return inputEventStream.observe().window((long)bucketSizeInMs, TimeUnit.MILLISECONDS).flatMap(BucketedCounterStream.this.reduceBucketToSummary).startWith(emptyEventCountsToStart);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>appendRawEventToBucket方法实际上是HystrixCommandMetrics中的appendEventToBucket方法，实现了一个时间单元的数据的汇总<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static final Func2&lt;long[], HystrixCommandCompletion, long[]&gt; appendEventToBucket = new Func2&lt;long[], HystrixCommandCompletion, long[]&gt;() &#123;</span><br><span class="line">     public long[] call(long[] initialCountArray, HystrixCommandCompletion execution) &#123;</span><br><span class="line">         EventCounts eventCounts = execution.getEventCounts();</span><br><span class="line">         HystrixEventType[] arr$ = HystrixCommandMetrics.ALL_EVENT_TYPES;</span><br><span class="line">         int len$ = arr$.length;</span><br><span class="line">         int i$ = 0;</span><br><span class="line">//根据eventType（也就是SUCCESS、FAILURE、TIMEOUT等）将请求数据汇总到一个数组中</span><br><span class="line">         while(i$ &lt; len$) &#123;</span><br><span class="line">             HystrixEventType eventType = arr$[i$];</span><br><span class="line">             switch(eventType) &#123;</span><br><span class="line">             default:</span><br><span class="line">                 int var10001 = eventType.ordinal();</span><br><span class="line">                 initialCountArray[var10001] += (long)eventCounts.getCount(eventType);</span><br><span class="line">             case EXCEPTION_THROWN:</span><br><span class="line">                 ++i$;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         return initialCountArray;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><p>由BucketedCounterStream构造函数可以看出请求的数据，按默认500毫秒的时间单元，汇总成Bucket。<br>继续看BucketedRollingCounterStream的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected BucketedRollingCounterStream(HystrixEventStream&lt;Event&gt; stream, final int numBuckets, int bucketSizeInMs, Func2&lt;Bucket, Event, Bucket&gt; appendRawEventToBucket, final Func2&lt;Output, Bucket, Output&gt; reduceBucket) &#123;</span><br><span class="line">       super(stream, numBuckets, bucketSizeInMs, appendRawEventToBucket);</span><br><span class="line">       //汇总数据方法</span><br><span class="line">Func1&lt;Observable&lt;Bucket&gt;, Observable&lt;Output&gt;&gt; reduceWindowToSummary = new Func1&lt;Observable&lt;Bucket&gt;, Observable&lt;Output&gt;&gt;() &#123;</span><br><span class="line">           public Observable&lt;Output&gt; call(Observable&lt;Bucket&gt; window) &#123;</span><br><span class="line">               return window.scan(BucketedRollingCounterStream.this.getEmptyOutputValue(), reduceBucket).skip(numBuckets);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">//订阅父类汇总后的Bucket数据流，并且将Bucket中的数据汇总到window中,window时间默认10秒，也就是numBuckets默认20个</span><br><span class="line">//window是由不停滑动的20个Bucket组成，滑动的步长是1个Bucket</span><br><span class="line">//数据汇总成时间窗口下的HealthCounts数据流</span><br><span class="line">       this.sourceStream = this.bucketedStream.window(numBuckets, 1).flatMap(reduceWindowToSummary).doOnSubscribe(new Action0() &#123;</span><br><span class="line">           public void call() &#123;</span><br><span class="line">               BucketedRollingCounterStream.this.isSourceCurrentlySubscribed.set(true);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).doOnUnsubscribe(new Action0() &#123;</span><br><span class="line">           public void call() &#123;</span><br><span class="line">               BucketedRollingCounterStream.this.isSourceCurrentlySubscribed.set(false);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).share().onBackpressureDrop();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>通过reduceBucket也就是HealthCountsStream中的healthCheckAccumulator方法汇总数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static final Func2&lt;HealthCounts, long[], HealthCounts&gt; healthCheckAccumulator = new Func2&lt;HealthCounts, long[], HealthCounts&gt;() &#123;</span><br><span class="line">       public HealthCounts call(HealthCounts healthCounts, long[] bucketEventCounts) &#123;</span><br><span class="line">//将数据添加到healthCounts中</span><br><span class="line">           return healthCounts.plus(bucketEventCounts);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></p><h3 id="4、熔断器的使用"><a href="#4、熔断器的使用" class="headerlink" title="4、熔断器的使用"></a>4、熔断器的使用</h3><p>HystrixCommand执行请求的是applyHystrixSemantics方法，父类AbstractCommand的applyHystrixSemantics方法为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  private Observable&lt;R&gt; applyHystrixSemantics(AbstractCommand&lt;R&gt; _cmd) &#123;</span><br><span class="line">      this.executionHook.onStart(_cmd);</span><br><span class="line">//判断熔断器是否打开</span><br><span class="line">      if (this.circuitBreaker.attemptExecution()) &#123;</span><br><span class="line">...省略部分</span><br><span class="line">//获取信号量</span><br><span class="line">          if (executionSemaphore.tryAcquire()) &#123;</span><br><span class="line">              try &#123;</span><br><span class="line">                  this.executionResult = this.executionResult.setInvocationStartTime(System.currentTimeMillis());</span><br><span class="line">                  //执行请求</span><br><span class="line">return this.executeCommandAndObserve(_cmd).doOnError(markExceptionThrown).doOnTerminate(singleSemaphoreRelease).doOnUnsubscribe(singleSemaphoreRelease);</span><br><span class="line">              &#125; catch (RuntimeException var7) &#123;</span><br><span class="line">                  return Observable.error(var7);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              return this.handleSemaphoreRejectionViaFallback();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          return this.handleShortCircuitViaFallback();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>继续追踪主流程executeCommandAndObserve方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">private Observable&lt;R&gt; executeCommandAndObserve(AbstractCommand&lt;R&gt; _cmd) &#123;</span><br><span class="line">       ...省略部分</span><br><span class="line">       Action1&lt;R&gt; markEmits = new Action1&lt;R&gt;() &#123;</span><br><span class="line">           public void call(R r) &#123;</span><br><span class="line">...省略部分</span><br><span class="line">               if (AbstractCommand.this.commandIsScalar()) &#123;</span><br><span class="line">...省略部分</span><br><span class="line">//标记成功</span><br><span class="line">                   AbstractCommand.this.circuitBreaker.markSuccess();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       Action0 markOnCompleted = new Action0() &#123;</span><br><span class="line">           public void call() &#123;</span><br><span class="line">               if (!AbstractCommand.this.commandIsScalar()) &#123;</span><br><span class="line">                   ...省略部分</span><br><span class="line">//标记成功</span><br><span class="line">                   AbstractCommand.this.circuitBreaker.markSuccess();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       Func1&lt;Throwable, Observable&lt;R&gt;&gt; handleFallback = new Func1&lt;Throwable, Observable&lt;R&gt;&gt;() &#123;</span><br><span class="line">           public Observable&lt;R&gt; call(Throwable t) &#123;</span><br><span class="line">//标记失败</span><br><span class="line">               AbstractCommand.this.circuitBreaker.markNonSuccess();</span><br><span class="line">               ...省略部分</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       ...省略部分</span><br><span class="line">//主流程执行请求</span><br><span class="line">       Observable execution;</span><br><span class="line">       if ((Boolean)this.properties.executionTimeoutEnabled().get()) &#123;</span><br><span class="line">           execution = this.executeCommandWithSpecifiedIsolation(_cmd).lift(new AbstractCommand.HystrixObservableTimeoutOperator(_cmd));</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           execution = this.executeCommandWithSpecifiedIsolation(_cmd);</span><br><span class="line">       &#125;</span><br><span class="line">//请求完成回调</span><br><span class="line">       return execution.doOnNext(markEmits).doOnCompleted(markOnCompleted).onErrorResumeNext(handleFallback).doOnEach(setRequestContext);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>主流程中请求开始之前判断熔断器是否打开，执行完成后去更改熔断器状态<br>先看attemptExecution方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public boolean attemptExecution() &#123;</span><br><span class="line">//是否强制打开</span><br><span class="line">if ((Boolean)this.properties.circuitBreakerForceOpen().get()) &#123;</span><br><span class="line">return false;</span><br><span class="line">//是否强制关闭</span><br><span class="line">&#125; else if ((Boolean)this.properties.circuitBreakerForceClosed().get()) &#123;</span><br><span class="line">return true;</span><br><span class="line">//是否未打开</span><br><span class="line">&#125; else if (this.circuitOpened.get() == -1L) &#123;</span><br><span class="line">return true;</span><br><span class="line">//熔断器打开后，经过一定时间允许进入半开状态，默认5秒</span><br><span class="line">&#125; else if (this.isAfterSleepWindow()) &#123;</span><br><span class="line">//进入半开状态，允许单个请求访问</span><br><span class="line">return this.status.compareAndSet(HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.OPEN, HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.HALF_OPEN);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续看markSuccess、markNonSuccess方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void markSuccess() &#123;</span><br><span class="line">//半开状态下，请求成功，将状态改为关闭状态</span><br><span class="line">if (this.status.compareAndSet(HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.HALF_OPEN, HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.CLOSED)) &#123;</span><br><span class="line">//重置数据流</span><br><span class="line">this.metrics.resetStream();</span><br><span class="line">Subscription previousSubscription = (Subscription)this.activeSubscription.get();</span><br><span class="line">if (previousSubscription != null) &#123;</span><br><span class="line">previousSubscription.unsubscribe();</span><br><span class="line">&#125;</span><br><span class="line">//重新订阅数据流</span><br><span class="line">Subscription newSubscription = this.subscribeToStream();</span><br><span class="line">this.activeSubscription.set(newSubscription);</span><br><span class="line">//设置打开时间为-1</span><br><span class="line">this.circuitOpened.set(-1L);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void markNonSuccess() &#123;</span><br><span class="line">//半开状态下，请求成功，将状态改为打开状态</span><br><span class="line">if (this.status.compareAndSet(HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.HALF_OPEN, HystrixCircuitBreaker.HystrixCircuitBreakerImpl.Status.OPEN)) &#123;</span><br><span class="line">//重置打开时间</span><br><span class="line">this.circuitOpened.set(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、熔断器的创建&quot;&gt;&lt;a href=&quot;#1、熔断器的创建&quot; class=&quot;headerlink&quot; title=&quot;1、熔断器的创建&quot;&gt;&lt;/a&gt;1、熔断器的创建&lt;/h3&gt;&lt;p&gt;我们使用的FeignClient,Client对象创建时使用动态代理，拦截器为Hystrix
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud注册中心源码</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringCloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringCloud注册中心源码/</id>
    <published>2020-01-16T13:43:36.375Z</published>
    <updated>2020-01-12T14:34:35.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、EurekaServer启动过程"><a href="#1、EurekaServer启动过程" class="headerlink" title="1、EurekaServer启动过程"></a>1、EurekaServer启动过程</h3><p>通过自动配置类EurekaServerAutoConfiguration引入相关配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(&#123;EurekaServerInitializerConfiguration.class&#125;)</span><br><span class="line">@ConditionalOnBean(&#123;Marker.class&#125;)</span><br><span class="line">@EnableConfigurationProperties(&#123;EurekaDashboardProperties.class, InstanceRegistryProperties.class&#125;)</span><br><span class="line">@PropertySource(&#123;&quot;classpath:/eureka/server.properties&quot;&#125;)</span><br><span class="line">public class EurekaServerAutoConfiguration extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">//用来从别的节点获取服务信息</span><br><span class="line">    @Autowired</span><br><span class="line">    private EurekaClient eurekaClient;</span><br><span class="line"></span><br><span class="line">//EurekaController, spring-cloud 提供了一些额外的接口，用来获取eurekaServer的信息</span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnProperty( prefix = &quot;eureka.dashboard&quot;, name = &#123;&quot;enabled&quot;&#125;, matchIfMissing = true)</span><br><span class="line">    public EurekaController eurekaController() &#123;</span><br><span class="line">        return new EurekaController(this.applicationInfoManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//服务注册器</span><br><span class="line">@Bean</span><br><span class="line">    public PeerAwareInstanceRegistry peerAwareInstanceRegistry(ServerCodecs serverCodecs) &#123;</span><br><span class="line">        this.eurekaClient.getApplications();</span><br><span class="line">        return new InstanceRegistry(this.eurekaServerConfig, this.eurekaClientConfig, serverCodecs, this.eurekaClient, this.instanceRegistryProperties.getExpectedNumberOfRenewsPerMin(), this.instanceRegistryProperties.getDefaultOpenForTrafficCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//服务节点信息</span><br><span class="line">@Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    public PeerEurekaNodes peerEurekaNodes(PeerAwareInstanceRegistry registry, ServerCodecs serverCodecs) &#123;</span><br><span class="line">        return new PeerEurekaNodes(registry, this.eurekaServerConfig, this.eurekaClientConfig, serverCodecs, this.applicationInfoManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//服务上下文</span><br><span class="line">@Bean</span><br><span class="line">    public EurekaServerContext eurekaServerContext(ServerCodecs serverCodecs, PeerAwareInstanceRegistry registry, PeerEurekaNodes peerEurekaNodes) &#123;</span><br><span class="line">        return new DefaultEurekaServerContext(this.eurekaServerConfig, serverCodecs, registry, peerEurekaNodes, this.applicationInfoManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//spring-cloud和原生eureka的胶水代码，通过这个类来启动EurekaSever</span><br><span class="line">@Bean</span><br><span class="line">    public EurekaServerBootstrap eurekaServerBootstrap(PeerAwareInstanceRegistry registry, EurekaServerContext serverContext) &#123;</span><br><span class="line">        return new EurekaServerBootstrap(this.applicationInfoManager, this.eurekaClientConfig, this.eurekaServerConfig, registry, serverContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>DefaultEurekaServerContext在创建时执行了初始化方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  @PostConstruct</span><br><span class="line">  public void initialize() throws Exception &#123;</span><br><span class="line">//启动一个线程，定时（默认10分钟）通过updatePeerEurekaNodes方法读取其他集群节点的信息</span><br><span class="line">      this.peerEurekaNodes.start();</span><br><span class="line">//每15分钟更新一次最小心跳次数及需要开启保护状态的心跳次数，默认心跳次数小于最小次数的0.85则开启保护</span><br><span class="line">      this.registry.init(this.peerEurekaNodes);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>该类还引入了EurekaServerInitializerConfiguration配置类，这个类实现了Lifecycle方法，因此在spring启动的过程中会执行start方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line">       (new Thread(new Runnable() &#123;</span><br><span class="line">           public void run() &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">//初始化EurekaServer，同时启动Eureka Server</span><br><span class="line">                   EurekaServerInitializerConfiguration.this.eurekaServerBootstrap.contextInitialized(EurekaServerInitializerConfiguration.this.servletContext);</span><br><span class="line">                   EurekaServerInitializerConfiguration.log.info(&quot;Started Eureka Server&quot;);</span><br><span class="line">                   //发送Eureka注册事件</span><br><span class="line">EurekaServerInitializerConfiguration.this.publish(new EurekaRegistryAvailableEvent(EurekaServerInitializerConfiguration.this.getEurekaServerConfig()));</span><br><span class="line">                   //设置状态</span><br><span class="line">EurekaServerInitializerConfiguration.this.running = true;</span><br><span class="line">                   //发送Eureka启动事件</span><br><span class="line">EurekaServerInitializerConfiguration.this.publish(new EurekaServerStartedEvent(EurekaServerInitializerConfiguration.this.getEurekaServerConfig()));</span><br><span class="line">               &#125; catch (Exception var2) &#123;</span><br><span class="line">                   EurekaServerInitializerConfiguration.log.error(&quot;Could not initialize Eureka servlet context&quot;, var2);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>EurekaServerBootstrap调用initEurekaServerContext方法初始化上下文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  protected void initEurekaServerContext() throws Exception &#123;</span><br><span class="line">      JsonXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), 10000);</span><br><span class="line">      XmlXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), 10000);</span><br><span class="line">      if (this.isAws(this.applicationInfoManager.getInfo())) &#123;</span><br><span class="line">          this.awsBinder = new AwsBinderDelegate(this.eurekaServerConfig, this.eurekaClientConfig, this.registry, this.applicationInfoManager);</span><br><span class="line">          this.awsBinder.start();</span><br><span class="line">      &#125;</span><br><span class="line">//初始化eureka server上下文</span><br><span class="line">      EurekaServerContextHolder.initialize(this.serverContext);</span><br><span class="line">      log.info(&quot;Initialized server context&quot;);</span><br><span class="line">//从相邻的eureka节点复制注册表</span><br><span class="line">      int registryCount = this.registry.syncUp();</span><br><span class="line">// 修改eureka状态为up，并开启定时任务，清理60秒没有心跳的客户端</span><br><span class="line">      this.registry.openForTraffic(this.applicationInfoManager, registryCount);</span><br><span class="line">      EurekaMonitors.registerAllStats();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>openForTraffic方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void openForTraffic(ApplicationInfoManager applicationInfoManager, int count) &#123;</span><br><span class="line">       //预估心跳次数</span><br><span class="line">this.expectedNumberOfRenewsPerMin = count * 2;</span><br><span class="line">//预估开启保护心跳次数</span><br><span class="line">       this.numberOfRenewsPerMinThreshold = (int)((double)this.expectedNumberOfRenewsPerMin * this.serverConfig.getRenewalPercentThreshold());</span><br><span class="line">       </span><br><span class="line">       this.startupTime = System.currentTimeMillis();</span><br><span class="line">       if (count &gt; 0) &#123;</span><br><span class="line">           this.peerInstancesTransferEmptyOnStartup = false;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">...//省略代码</span><br><span class="line"></span><br><span class="line">//设置实例的状态为UP</span><br><span class="line">       applicationInfoManager.setInstanceStatus(InstanceStatus.UP);</span><br><span class="line">//开启定时任务，默认60秒执行一次，用于清理60秒之内没有心跳的实例</span><br><span class="line">       super.postInit();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、服务注册"><a href="#2、服务注册" class="headerlink" title="2、服务注册"></a>2、服务注册</h3><p>ApplicationResource的addInstance方法对外提供注册服务的功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@POST</span><br><span class="line">   @Consumes(&#123;&quot;application/json&quot;, &quot;application/xml&quot;&#125;)</span><br><span class="line">   public Response addInstance(InstanceInfo info, @HeaderParam(&quot;x-netflix-discovery-replication&quot;) String isReplication) &#123;</span><br><span class="line">           //注册服务</span><br><span class="line">this.registry.register(info, &quot;true&quot;.equals(isReplication));</span><br><span class="line">           return Response.status(204).build();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>PeerAwareInstanceRegistryImpl的register方法执行注册逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  public void register(InstanceInfo info, boolean isReplication) &#123;</span><br><span class="line">//默认90秒过期</span><br><span class="line">      int leaseDuration = 90;</span><br><span class="line">//客户端提供以客户端为准</span><br><span class="line">      if (info.getLeaseInfo() != null &amp;&amp; info.getLeaseInfo().getDurationInSecs() &gt; 0) &#123;</span><br><span class="line">          leaseDuration = info.getLeaseInfo().getDurationInSecs();</span><br><span class="line">      &#125;</span><br><span class="line">//注册服务</span><br><span class="line">      super.register(info, leaseDuration, isReplication);</span><br><span class="line">//复制到其他节点上去</span><br><span class="line">      this.replicateToPeers(PeerAwareInstanceRegistryImpl.Action.Register, info.getAppName(), info.getId(), info, (InstanceStatus)null, isReplication);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"> public void register(InstanceInfo registrant, int leaseDuration, boolean isReplication) &#123;</span><br><span class="line">     try &#123;</span><br><span class="line">   //读锁</span><br><span class="line">         this.read.lock();</span><br><span class="line">//由服务名获取实例集合</span><br><span class="line">         Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = (Map)this.registry.get(registrant.getAppName());</span><br><span class="line">         //增加注册次数到监控信息里面去</span><br><span class="line">EurekaMonitors.REGISTER.increment(isReplication);</span><br><span class="line">//不存在该服务，则新建集合</span><br><span class="line">         if (gMap == null) &#123;</span><br><span class="line">             ConcurrentHashMap&lt;String, Lease&lt;InstanceInfo&gt;&gt; gNewMap = new ConcurrentHashMap();</span><br><span class="line">             gMap = (Map)this.registry.putIfAbsent(registrant.getAppName(), gNewMap);</span><br><span class="line">             if (gMap == null) &#123;</span><br><span class="line">                 gMap = gNewMap;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">//从集合中根据instanceId获取实例对象包装类</span><br><span class="line">         Lease&lt;InstanceInfo&gt; existingLease = (Lease)((Map)gMap).get(registrant.getId());</span><br><span class="line">         if (existingLease != null &amp;&amp; existingLease.getHolder() != null) &#123;</span><br><span class="line">//已存在则比较lastDirtyTimestamp时间，时间最新的为有效的</span><br><span class="line">             Long existingLastDirtyTimestamp = ((InstanceInfo)existingLease.getHolder()).getLastDirtyTimestamp();</span><br><span class="line">             Long registrationLastDirtyTimestamp = registrant.getLastDirtyTimestamp();</span><br><span class="line">             logger.debug(&quot;Existing lease found (existing=&#123;&#125;, provided=&#123;&#125;&quot;, existingLastDirtyTimestamp, registrationLastDirtyTimestamp);</span><br><span class="line">             if (existingLastDirtyTimestamp &gt; registrationLastDirtyTimestamp) &#123;</span><br><span class="line">                 logger.warn(&quot;There is an existing lease and the existing lease&apos;s dirty timestamp &#123;&#125; is greater than the one that is being registered &#123;&#125;&quot;, existingLastDirtyTimestamp, registrationLastDirtyTimestamp);</span><br><span class="line">                 logger.warn(&quot;Using the existing instanceInfo instead of the new instanceInfo as the registrant&quot;);</span><br><span class="line">                 registrant = (InstanceInfo)existingLease.getHolder();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">//增加预估心跳次数，和预估开启保护心跳次数</span><br><span class="line">             synchronized(this.lock) &#123;</span><br><span class="line">                 if (this.expectedNumberOfRenewsPerMin &gt; 0) &#123;</span><br><span class="line">                     this.expectedNumberOfRenewsPerMin += 2;</span><br><span class="line">                     this.numberOfRenewsPerMinThreshold = (int)((double)this.expectedNumberOfRenewsPerMin * this.serverConfig.getRenewalPercentThreshold());</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             logger.debug(&quot;No previous lease information found; it is new registration&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">//创建Lease对象</span><br><span class="line">         Lease&lt;InstanceInfo&gt; lease = new Lease(registrant, leaseDuration);</span><br><span class="line">         if (existingLease != null) &#123;</span><br><span class="line">//lease已存在，设置serviceUpTimestamp, 保证服务开启的时间一直是第一次的那个</span><br><span class="line">             lease.setServiceUpTimestamp(existingLease.getServiceUpTimestamp());</span><br><span class="line">         &#125;</span><br><span class="line">//放入集合</span><br><span class="line">         ((Map)gMap).put(registrant.getId(), lease);</span><br><span class="line">//添加到最近的注册队列里面去，以时间戳作为Key，名称作为value</span><br><span class="line">         synchronized(this.recentRegisteredQueue) &#123;</span><br><span class="line">             this.recentRegisteredQueue.add(new Pair(System.currentTimeMillis(), registrant.getAppName() + &quot;(&quot; + registrant.getId() + &quot;)&quot;));</span><br><span class="line">         &#125;</span><br><span class="line">//是否有覆盖状态</span><br><span class="line">         if (!InstanceStatus.UNKNOWN.equals(registrant.getOverriddenStatus())) &#123;</span><br><span class="line">             logger.debug(&quot;Found overridden status &#123;&#125; for instance &#123;&#125;. Checking to see if needs to be add to the overrides&quot;, registrant.getOverriddenStatus(), registrant.getId());</span><br><span class="line">             if (!this.overriddenInstanceStatusMap.containsKey(registrant.getId())) &#123;</span><br><span class="line">                 logger.info(&quot;Not found overridden id &#123;&#125; and hence adding it&quot;, registrant.getId());</span><br><span class="line">                 this.overriddenInstanceStatusMap.put(registrant.getId(), registrant.getOverriddenStatus());</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">InstanceStatus overriddenStatusFromMap = (InstanceStatus)this.overriddenInstanceStatusMap.get(registrant.getId());</span><br><span class="line">         if (overriddenStatusFromMap != null) &#123;</span><br><span class="line">             logger.info(&quot;Storing overridden status &#123;&#125; from map&quot;, overriddenStatusFromMap);</span><br><span class="line">             registrant.setOverriddenStatus(overriddenStatusFromMap);</span><br><span class="line">         &#125;</span><br><span class="line">//获取实例状态，如果为UP则开启服务</span><br><span class="line">         InstanceStatus overriddenInstanceStatus = this.getOverriddenInstanceStatus(registrant, existingLease, isReplication);</span><br><span class="line">         registrant.setStatusWithoutDirty(overriddenInstanceStatus);</span><br><span class="line">if (InstanceStatus.UP.equals(registrant.getStatus())) &#123;</span><br><span class="line">             lease.serviceUp();</span><br><span class="line">         &#125;</span><br><span class="line">//设置注册类型为添加</span><br><span class="line">         registrant.setActionType(ActionType.ADDED);</span><br><span class="line">//服务变更记录队列，记录了实例的每次变化，用于注册信息的增量获取</span><br><span class="line">         this.recentlyChangedQueue.add(new AbstractInstanceRegistry.RecentlyChangedItem(lease));</span><br><span class="line">         registrant.setLastUpdatedTimestamp();</span><br><span class="line">         //清理缓存</span><br><span class="line">this.invalidateCache(registrant.getAppName(), registrant.getVIPAddress(), registrant.getSecureVipAddress());</span><br><span class="line">         logger.info(&quot;Registered instance &#123;&#125;/&#123;&#125; with status &#123;&#125; (replication=&#123;&#125;)&quot;, new Object[]&#123;registrant.getAppName(), registrant.getId(), registrant.getStatus(), isReplication&#125;);</span><br><span class="line">     &#125; finally &#123;</span><br><span class="line">         this.read.unlock();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>replicateToPeers方法发起同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private void replicateToPeers(PeerAwareInstanceRegistryImpl.Action action, String appName, String id, InstanceInfo info, InstanceStatus newStatus, boolean isReplication) &#123;</span><br><span class="line">       Stopwatch tracer = action.getTimer().start();</span><br><span class="line"></span><br><span class="line">       try &#123;</span><br><span class="line">//集群同步请求，则记录最后一分钟的同步次数</span><br><span class="line">           if (isReplication) &#123;</span><br><span class="line">               this.numberOfReplicationsLastMin.increment();</span><br><span class="line">           &#125;</span><br><span class="line">//集群节点不为空且不是同步请求</span><br><span class="line">           if (this.peerEurekaNodes != Collections.EMPTY_LIST &amp;&amp; !isReplication) &#123;</span><br><span class="line">               Iterator var8 = this.peerEurekaNodes.getPeerEurekaNodes().iterator();</span><br><span class="line">//遍历节点分别发起同步</span><br><span class="line">               while(var8.hasNext()) &#123;</span><br><span class="line">                   PeerEurekaNode node = (PeerEurekaNode)var8.next();</span><br><span class="line">//判断url不是自己</span><br><span class="line">                   if (!this.peerEurekaNodes.isThisMyUrl(node.getServiceUrl())) &#123;</span><br><span class="line">                       //发起同步请求</span><br><span class="line">this.replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           tracer.stop();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>replicateInstanceActionsToPeers执行同步逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void replicateInstanceActionsToPeers(PeerAwareInstanceRegistryImpl.Action action, String appName, String id, InstanceInfo info, InstanceStatus newStatus, PeerEurekaNode node) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           InstanceInfo infoFromRegistry = null;</span><br><span class="line">           CurrentRequestVersion.set(Version.V2);</span><br><span class="line">           switch(action) &#123;</span><br><span class="line">           case Cancel://下线</span><br><span class="line">               node.cancel(appName, id);</span><br><span class="line">               break;</span><br><span class="line">           case Heartbeat://心跳</span><br><span class="line">               InstanceStatus overriddenStatus = (InstanceStatus)this.overriddenInstanceStatusMap.get(id);</span><br><span class="line">               infoFromRegistry = this.getInstanceByAppAndId(appName, id, false);</span><br><span class="line">               node.heartbeat(appName, id, infoFromRegistry, overriddenStatus, false);</span><br><span class="line">               break;</span><br><span class="line">           case Register://注册</span><br><span class="line">               node.register(info);</span><br><span class="line">               break;</span><br><span class="line">           case StatusUpdate://设置覆盖状态</span><br><span class="line">               infoFromRegistry = this.getInstanceByAppAndId(appName, id, false);</span><br><span class="line">               node.statusUpdate(appName, id, newStatus, infoFromRegistry);</span><br><span class="line">               break;</span><br><span class="line">           case DeleteStatusOverride://删除覆盖状态</span><br><span class="line">               infoFromRegistry = this.getInstanceByAppAndId(appName, id, false);</span><br><span class="line">               node.deleteStatusOverride(appName, id, infoFromRegistry);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Throwable var9) &#123;</span><br><span class="line">           logger.error(&quot;Cannot replicate information to &#123;&#125; for action &#123;&#125;&quot;, new Object[]&#123;node.getServiceUrl(), action.name(), var9&#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、服务心跳"><a href="#3、服务心跳" class="headerlink" title="3、服务心跳"></a>3、服务心跳</h3><p>InstanceResource的renewLease方法接受心跳<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@PUT</span><br><span class="line">   public Response renewLease(@HeaderParam(&quot;x-netflix-discovery-replication&quot;) String isReplication, @QueryParam(&quot;overriddenstatus&quot;) String overriddenStatus, @QueryParam(&quot;status&quot;) String status, @QueryParam(&quot;lastDirtyTimestamp&quot;) String lastDirtyTimestamp) &#123;</span><br><span class="line">//同步请求</span><br><span class="line">boolean isFromReplicaNode = &quot;true&quot;.equals(isReplication);</span><br><span class="line">//心跳</span><br><span class="line">       boolean isSuccess = this.registry.renew(this.app.getName(), this.id, isFromReplicaNode);</span><br><span class="line"></span><br><span class="line">if (!isSuccess) &#123;</span><br><span class="line">//心跳失败，需重新发起注册</span><br><span class="line">           return Response.status(Status.NOT_FOUND).build();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           Response response = null;</span><br><span class="line">//如果lastDirtyTimestamp不同需重新同步</span><br><span class="line">           if (lastDirtyTimestamp != null &amp;&amp; this.serverConfig.shouldSyncWhenTimestampDiffers()) &#123;</span><br><span class="line">               //比较lastDirtyTimestamp的大小，请求lastDirtyTimestamp&gt;本地的时间，则认为当前实例是无效的，返回404错误，需重新发起注册</span><br><span class="line">response = this.validateDirtyTimestamp(Long.valueOf(lastDirtyTimestamp), isFromReplicaNode);</span><br><span class="line">               if (response.getStatus() == Status.NOT_FOUND.getStatusCode() &amp;&amp; overriddenStatus != null &amp;&amp; !InstanceStatus.UNKNOWN.name().equals(overriddenStatus) &amp;&amp; isFromReplicaNode) &#123;</span><br><span class="line">                   this.registry.storeOverriddenStatusIfRequired(this.app.getAppName(), this.id, InstanceStatus.valueOf(overriddenStatus));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               response = Response.ok().build();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           logger.debug(&quot;Found (Renew): &#123;&#125; - &#123;&#125;; reply status=&#123;&#125;&quot; + this.app.getName(), this.id, response.getStatus());</span><br><span class="line">           return response;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>renew方法执行心跳逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean renew(String appName, String id, boolean isReplication) &#123;</span><br><span class="line">//执行心跳</span><br><span class="line">       if (super.renew(appName, id, isReplication)) &#123;</span><br><span class="line">//向其他节点同步心跳</span><br><span class="line">           this.replicateToPeers(PeerAwareInstanceRegistryImpl.Action.Heartbeat, appName, id, (InstanceInfo)null, (InstanceStatus)null, isReplication);</span><br><span class="line">           return true;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public boolean renew(String appName, String id, boolean isReplication) &#123;</span><br><span class="line">//统计心跳次数</span><br><span class="line">       EurekaMonitors.RENEW.increment(isReplication);</span><br><span class="line">//获取实例</span><br><span class="line">       Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = (Map)this.registry.get(appName);</span><br><span class="line">       Lease&lt;InstanceInfo&gt; leaseToRenew = null;</span><br><span class="line">       if (gMap != null) &#123;</span><br><span class="line">           leaseToRenew = (Lease)gMap.get(id);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (leaseToRenew == null) &#123;</span><br><span class="line">//未发现该实例</span><br><span class="line">           EurekaMonitors.RENEW_NOT_FOUND.increment(isReplication);</span><br><span class="line">           logger.warn(&quot;DS: Registry: lease doesn&apos;t exist, registering resource: &#123;&#125; - &#123;&#125;&quot;, appName, id);</span><br><span class="line">           return false;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">//获取实例</span><br><span class="line">           InstanceInfo instanceInfo = (InstanceInfo)leaseToRenew.getHolder();</span><br><span class="line">           if (instanceInfo != null) &#123;</span><br><span class="line">               InstanceStatus overriddenInstanceStatus = this.getOverriddenInstanceStatus(instanceInfo, leaseToRenew, isReplication);</span><br><span class="line">               if (overriddenInstanceStatus == InstanceStatus.UNKNOWN) &#123;</span><br><span class="line">                   logger.info(&quot;Instance status UNKNOWN possibly due to deleted override for instance &#123;&#125;; re-register required&quot;, instanceInfo.getId());</span><br><span class="line">                   EurekaMonitors.RENEW_NOT_FOUND.increment(isReplication);</span><br><span class="line">                   return false;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               if (!instanceInfo.getStatus().equals(overriddenInstanceStatus)) &#123;</span><br><span class="line">                   Object[] args = new Object[]&#123;instanceInfo.getStatus().name(), instanceInfo.getOverriddenStatus().name(), instanceInfo.getId()&#125;;</span><br><span class="line">                   logger.info(&quot;The instance status &#123;&#125; is different from overridden instance status &#123;&#125; for instance &#123;&#125;. Hence setting the status to overridden status&quot;, args);</span><br><span class="line">                   instanceInfo.setStatusWithoutDirty(overriddenInstanceStatus);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">//心跳次数加1</span><br><span class="line">           this.renewsLastMin.increment();</span><br><span class="line">//执行心跳（lastUpdateTimestamp = System.currentTimeMillis() + duration）</span><br><span class="line">           leaseToRenew.renew();</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4、获取服务信息"><a href="#4、获取服务信息" class="headerlink" title="4、获取服务信息"></a>4、获取服务信息</h3><p>ApplicationsResource的getContainers方法提供全量拉取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@GET</span><br><span class="line">   public Response getContainers(@PathParam(&quot;version&quot;) String version, @HeaderParam(&quot;Accept&quot;) String acceptHeader, @HeaderParam(&quot;Accept-Encoding&quot;) String acceptEncoding, @HeaderParam(&quot;X-Eureka-Accept&quot;) String eurekaAccept, @Context UriInfo uriInfo, @Nullable @QueryParam(&quot;regions&quot;) String regionsStr) &#123;</span><br><span class="line">       //获取注册列表的区域</span><br><span class="line">boolean isRemoteRegionRequested = null != regionsStr &amp;&amp; !regionsStr.isEmpty();</span><br><span class="line">       String[] regions = null;</span><br><span class="line">       if (!isRemoteRegionRequested) &#123;</span><br><span class="line">           EurekaMonitors.GET_ALL.increment();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           regions = regionsStr.toLowerCase().split(&quot;,&quot;);</span><br><span class="line">           Arrays.sort(regions);</span><br><span class="line">           EurekaMonitors.GET_ALL_WITH_REMOTE_REGIONS.increment();</span><br><span class="line">       &#125;</span><br><span class="line">//是否可以访问</span><br><span class="line">       if (!this.registry.shouldAllowAccess(isRemoteRegionRequested)) &#123;</span><br><span class="line">           return Response.status(Status.FORBIDDEN).build();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">//设置API版本</span><br><span class="line">           CurrentRequestVersion.set(Version.toEnum(version));</span><br><span class="line">//key默认JSON类型</span><br><span class="line">           KeyType keyType = KeyType.JSON;</span><br><span class="line">//默认返回类型为JSON</span><br><span class="line">           String returnMediaType = &quot;application/json&quot;;</span><br><span class="line">//Accept为空，或者不包含JSON字符串,则设置返回XML类型的</span><br><span class="line">           if (acceptHeader == null || !acceptHeader.contains(&quot;json&quot;)) &#123;</span><br><span class="line">               keyType = KeyType.XML;</span><br><span class="line">               returnMediaType = &quot;application/xml&quot;;</span><br><span class="line">           &#125;</span><br><span class="line">//构建缓存KEY </span><br><span class="line">           Key cacheKey = new Key(EntityType.Application, &quot;ALL_APPS&quot;, keyType, CurrentRequestVersion.get(), EurekaAccept.fromString(eurekaAccept), regions);</span><br><span class="line">           Response response;</span><br><span class="line">           //获取缓存信息，返回给客户端</span><br><span class="line">//判断请求接收类型是否是gzip ,如果是，则返回gzip的流出去</span><br><span class="line">if (acceptEncoding != null &amp;&amp; acceptEncoding.contains(&quot;gzip&quot;)) &#123;</span><br><span class="line">               response = Response.ok(this.responseCache.getGZIP(cacheKey)).header(&quot;Content-Encoding&quot;, &quot;gzip&quot;).header(&quot;Content-Type&quot;, returnMediaType).build();</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               response = Response.ok(this.responseCache.get(cacheKey)).build();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return response;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>getContainerDifferential方法进行增量获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Path(&quot;delta&quot;)</span><br><span class="line">   @GET</span><br><span class="line">   public Response getContainerDifferential(@PathParam(&quot;version&quot;) String version, @HeaderParam(&quot;Accept&quot;) String acceptHeader, @HeaderParam(&quot;Accept-Encoding&quot;) String acceptEncoding, @HeaderParam(&quot;X-Eureka-Accept&quot;) String eurekaAccept, @Context UriInfo uriInfo, @Nullable @QueryParam(&quot;regions&quot;) String regionsStr) &#123;</span><br><span class="line">       boolean isRemoteRegionRequested = null != regionsStr &amp;&amp; !regionsStr.isEmpty();</span><br><span class="line">       if (!this.serverConfig.shouldDisableDelta() &amp;&amp; this.registry.shouldAllowAccess(isRemoteRegionRequested)) &#123;</span><br><span class="line">           ...//省略代码</span><br><span class="line">//从缓存中获取，除了key不同，其他与全量相同</span><br><span class="line">           Key cacheKey = new Key(EntityType.Application, &quot;ALL_APPS_DELTA&quot;, keyType, CurrentRequestVersion.get(), EurekaAccept.fromString(eurekaAccept), regions);</span><br><span class="line">           return acceptEncoding != null &amp;&amp; acceptEncoding.contains(&quot;gzip&quot;) ? Response.ok(this.responseCache.getGZIP(cacheKey)).header(&quot;Content-Encoding&quot;, &quot;gzip&quot;).header(&quot;Content-Type&quot;, returnMediaType).build() : Response.ok(this.responseCache.get(cacheKey)).build();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return Response.status(Status.FORBIDDEN).build();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>缓存实现类为ResponseCacheImpl，当不存在缓存，则使用generatePayload方法获取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">private ResponseCacheImpl.Value generatePayload(Key key) &#123;</span><br><span class="line">    Stopwatch tracer = null;</span><br><span class="line"></span><br><span class="line">    ResponseCacheImpl.Value var8;</span><br><span class="line">    try &#123;</span><br><span class="line">        String payload;</span><br><span class="line">        switch(key.getEntityType()) &#123;</span><br><span class="line">        case Application:</span><br><span class="line">            boolean isRemoteRegionRequested = key.hasRegions();</span><br><span class="line">//全量获取</span><br><span class="line">            if (&quot;ALL_APPS&quot;.equals(key.getName())) &#123;</span><br><span class="line">//是否是分区域获取注册表信息</span><br><span class="line">                if (isRemoteRegionRequested) &#123;</span><br><span class="line">                    tracer = this.serializeAllAppsWithRemoteRegionTimer.start();</span><br><span class="line">payload = this.getPayLoad(key, this.registry.getApplicationsFromMultipleRegions(key.getRegions()));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    tracer = this.serializeAllAppsTimer.start();</span><br><span class="line">//获取服务信息</span><br><span class="line">                    payload = this.getPayLoad(key, this.registry.getApplications());</span><br><span class="line">                &#125;</span><br><span class="line">//增量获取</span><br><span class="line">            &#125; else if (&quot;ALL_APPS_DELTA&quot;.equals(key.getName())) &#123;</span><br><span class="line">                if (isRemoteRegionRequested) &#123;</span><br><span class="line">                    tracer = this.serializeDeltaAppsWithRemoteRegionTimer.start();</span><br><span class="line">                    this.versionDeltaWithRegions.incrementAndGet();</span><br><span class="line">                    versionDeltaWithRegionsLegacy.incrementAndGet();</span><br><span class="line">                    payload = this.getPayLoad(key, this.registry.getApplicationDeltasFromMultipleRegions(key.getRegions()));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    tracer = this.serializeDeltaAppsTimer.start();</span><br><span class="line">//设置增量版本号</span><br><span class="line">                    this.versionDelta.incrementAndGet();</span><br><span class="line">                    versionDeltaLegacy.incrementAndGet();</span><br><span class="line">//获取服务信息</span><br><span class="line">                    payload = this.getPayLoad(key, this.registry.getApplicationDeltas());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">//根据key直接获取注册信息</span><br><span class="line">                tracer = this.serializeOneApptimer.start();</span><br><span class="line">                payload = this.getPayLoad(key, this.registry.getApplication(key.getName()));</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case VIP:</span><br><span class="line">        case SVIP:</span><br><span class="line">            tracer = this.serializeViptimer.start();</span><br><span class="line">            payload = this.getPayLoad(key, getApplicationsForVip(key, this.registry));</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            logger.error(&quot;Unidentified entity type: &quot; + key.getEntityType() + &quot; found in the cache key.&quot;);</span><br><span class="line">            payload = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var8 = new ResponseCacheImpl.Value(payload);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (tracer != null) &#123;</span><br><span class="line">            tracer.stop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return var8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>全量获取和增量获取分别为AbstractInstanceRegistry的getApplications和getApplicationDeltas方法<br>全量获取最终使用getApplicationsFromMultipleRegions方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  public Applications getApplicationsFromMultipleRegions(String[] remoteRegions) &#123;</span><br><span class="line">      boolean includeRemoteRegion = null != remoteRegions &amp;&amp; remoteRegions.length != 0;</span><br><span class="line">      logger.debug(&quot;Fetching applications registry with remote regions: &#123;&#125;, Regions argument &#123;&#125;&quot;, includeRemoteRegion, Arrays.toString(remoteRegions));</span><br><span class="line">      //默认为false</span><br><span class="line">if (includeRemoteRegion) &#123;</span><br><span class="line">          EurekaMonitors.GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS.increment();</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          EurekaMonitors.GET_ALL_CACHE_MISS.increment();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Applications apps = new Applications();</span><br><span class="line">      apps.setVersion(1L);</span><br><span class="line">//registry为服务集合，key为服务名，value为服务实例集合</span><br><span class="line">      Iterator var4 = this.registry.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">      while(var4.hasNext()) &#123;</span><br><span class="line">          Entry&lt;String, Map&lt;String, Lease&lt;InstanceInfo&gt;&gt;&gt; entry = (Entry)var4.next();</span><br><span class="line">          Application app = null;</span><br><span class="line">          Lease lease;</span><br><span class="line">          if (entry.getValue() != null) &#123;</span><br><span class="line">              //遍历服务实例，添加到app中</span><br><span class="line">for(Iterator var7 = ((Map)entry.getValue()).entrySet().iterator(); var7.hasNext(); app.addInstance(this.decorateInstanceInfo(lease))) &#123;</span><br><span class="line">                  Entry&lt;String, Lease&lt;InstanceInfo&gt;&gt; stringLeaseEntry = (Entry)var7.next();</span><br><span class="line">                  lease = (Lease)stringLeaseEntry.getValue();</span><br><span class="line">                  if (app == null) &#123;</span><br><span class="line">                      app = new Application(((InstanceInfo)lease.getHolder()).getAppName());</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">//服务信息加入注册表</span><br><span class="line">          if (app != null) &#123;</span><br><span class="line">              apps.addApplication(app);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">...//省略部分</span><br><span class="line">      apps.setAppsHashCode(apps.getReconcileHashCode());</span><br><span class="line">      return apps;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>增量获取方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  public Applications getApplicationDeltas() &#123;</span><br><span class="line">      EurekaMonitors.GET_ALL_CACHE_MISS_DELTA.increment();</span><br><span class="line"></span><br><span class="line">//注册表</span><br><span class="line">      Applications apps = new Applications();</span><br><span class="line">//增量获取的版本号</span><br><span class="line">      apps.setVersion(this.responseCache.getVersionDelta().get());</span><br><span class="line">      HashMap applicationInstancesMap = new HashMap();</span><br><span class="line"></span><br><span class="line">      Applications var18;</span><br><span class="line">      try &#123;</span><br><span class="line">//写锁</span><br><span class="line">          this.write.lock();</span><br><span class="line">//服务实例最近状态变化队列，这个队列默认30秒清理一次过期数据，数据3分钟过期</span><br><span class="line">          Iterator&lt;AbstractInstanceRegistry.RecentlyChangedItem&gt; iter = this.recentlyChangedQueue.iterator();</span><br><span class="line">          logger.debug(&quot;The number of elements in the delta queue is :&quot; + this.recentlyChangedQueue.size());</span><br><span class="line"></span><br><span class="line">          Lease lease;</span><br><span class="line">          Application app;</span><br><span class="line">//循环队列</span><br><span class="line">          for(; iter.hasNext(); app.addInstance(this.decorateInstanceInfo(lease))) &#123;</span><br><span class="line">//获取服务实例的封装类</span><br><span class="line">              lease = ((AbstractInstanceRegistry.RecentlyChangedItem)iter.next()).getLeaseInfo();</span><br><span class="line">              InstanceInfo instanceInfo = (InstanceInfo)lease.getHolder();</span><br><span class="line">              Object[] args = new Object[]&#123;instanceInfo.getId(), instanceInfo.getStatus().name(), instanceInfo.getActionType().name()&#125;;</span><br><span class="line">              logger.debug(&quot;The instance id %s is found with status %s and actiontype %s&quot;, args);</span><br><span class="line">              app = (Application)applicationInstancesMap.get(instanceInfo.getAppName());</span><br><span class="line">              if (app == null) &#123;</span><br><span class="line">//实例放进服务的app中</span><br><span class="line">                  app = new Application(instanceInfo.getAppName());</span><br><span class="line">                  applicationInstancesMap.put(instanceInfo.getAppName(), app);</span><br><span class="line">//app加入注册表</span><br><span class="line">                  apps.addApplication(app);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          。。。//省略代码</span><br><span class="line">//设置appsHashCode，哈希码为每个应用实例状态+数量拼接而来 </span><br><span class="line">          allAppsInLocalRegion = this.getApplications(!disableTransparentFallback);</span><br><span class="line">          apps.setAppsHashCode(allAppsInLocalRegion.getReconcileHashCode());</span><br><span class="line"></span><br><span class="line">          var18 = apps;</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">          this.write.unlock();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return var18;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、覆盖状态"><a href="#5、覆盖状态" class="headerlink" title="5、覆盖状态"></a>5、覆盖状态</h3><p>InstanceResource的statusUpdate方法提供修改服务实例状态的接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> @PUT</span><br><span class="line"> @Path(&quot;status&quot;)</span><br><span class="line"> public Response statusUpdate(@QueryParam(&quot;value&quot;) String newStatus, @HeaderParam(&quot;x-netflix-discovery-replication&quot;) String isReplication, @QueryParam(&quot;lastDirtyTimestamp&quot;) String lastDirtyTimestamp) &#123;</span><br><span class="line">     try &#123;</span><br><span class="line">//实力不存在，更新失败</span><br><span class="line">         if (this.registry.getInstanceByAppAndId(this.app.getName(), this.id) == null) &#123;</span><br><span class="line">             logger.warn(&quot;Instance not found: &#123;&#125;/&#123;&#125;&quot;, this.app.getName(), this.id);</span><br><span class="line">             return Response.status(Status.NOT_FOUND).build();</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">//更新状态</span><br><span class="line">             boolean isSuccess = this.registry.statusUpdate(this.app.getName(), this.id, InstanceStatus.valueOf(newStatus), lastDirtyTimestamp, &quot;true&quot;.equals(isReplication));</span><br><span class="line">             if (isSuccess) &#123;</span><br><span class="line">                 logger.info(&quot;Status updated: &quot; + this.app.getName() + &quot; - &quot; + this.id + &quot; - &quot; + newStatus);</span><br><span class="line">                 return Response.ok().build();</span><br><span class="line">             &#125; else &#123;</span><br><span class="line">                 logger.warn(&quot;Unable to update status: &quot; + this.app.getName() + &quot; - &quot; + this.id + &quot; - &quot; + newStatus);</span><br><span class="line">                 return Response.serverError().build();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (Throwable var5) &#123;</span><br><span class="line">         logger.error(&quot;Error updating instance &#123;&#125; for status &#123;&#125;&quot;, this.id, newStatus);</span><br><span class="line">         return Response.serverError().build();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>PeerAwareInstanceRegistryImpl的statusUpdate方法更新状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  public boolean statusUpdate(String appName, String id, InstanceStatus newStatus, String lastDirtyTimestamp, boolean isReplication) &#123;</span><br><span class="line">      //更新状态</span><br><span class="line">if (super.statusUpdate(appName, id, newStatus, lastDirtyTimestamp, isReplication)) &#123;</span><br><span class="line">          //集群同步</span><br><span class="line">this.replicateToPeers(PeerAwareInstanceRegistryImpl.Action.StatusUpdate, appName, id, (InstanceInfo)null, newStatus, isReplication);</span><br><span class="line">          return true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          return false;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> public boolean statusUpdate(String appName, String id, InstanceStatus newStatus, String lastDirtyTimestamp, boolean isReplication) &#123;</span><br><span class="line">     boolean var15;</span><br><span class="line">     try &#123;</span><br><span class="line">         this.read.lock();</span><br><span class="line">//更新状态的次数</span><br><span class="line">         EurekaMonitors.STATUS_UPDATE.increment(isReplication);</span><br><span class="line">//获取服务的实例集合</span><br><span class="line">         Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = (Map)this.registry.get(appName);</span><br><span class="line">         Lease&lt;InstanceInfo&gt; lease = null;</span><br><span class="line">         if (gMap != null) &#123;</span><br><span class="line">             lease = (Lease)gMap.get(id);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         if (lease == null) &#123;</span><br><span class="line">             boolean var14 = false;</span><br><span class="line">             return var14;</span><br><span class="line">         &#125;</span><br><span class="line">//心跳，更新下lastUpdateTimestamp时间</span><br><span class="line">         lease.renew();</span><br><span class="line">//获取实例</span><br><span class="line">         InstanceInfo info = (InstanceInfo)lease.getHolder();</span><br><span class="line">         if (info == null) &#123;</span><br><span class="line">             logger.error(&quot;Found Lease without a holder for instance id &#123;&#125;&quot;, id);</span><br><span class="line">         &#125;</span><br><span class="line">//instance信息不为空</span><br><span class="line">         if (info != null &amp;&amp; !info.getStatus().equals(newStatus)) &#123;</span><br><span class="line">//新状态是UP的状态，启动一下serviceUp()</span><br><span class="line">             if (InstanceStatus.UP.equals(newStatus)) &#123;</span><br><span class="line">                 lease.serviceUp();</span><br><span class="line">             &#125;</span><br><span class="line">//将instanceId和这个状态的映射信息放入覆盖缓存MAP</span><br><span class="line">             this.overriddenInstanceStatusMap.put(id, newStatus);</span><br><span class="line">//设置覆盖状态</span><br><span class="line">             info.setOverriddenStatus(newStatus);</span><br><span class="line">             long replicaDirtyTimestamp = 0L;</span><br><span class="line">             info.setStatusWithoutDirty(newStatus);</span><br><span class="line">             if (lastDirtyTimestamp != null) &#123;</span><br><span class="line">                 replicaDirtyTimestamp = Long.valueOf(lastDirtyTimestamp);</span><br><span class="line">             &#125;</span><br><span class="line">//更新LastDirtyTimestamp</span><br><span class="line">             if (replicaDirtyTimestamp &gt; info.getLastDirtyTimestamp()) &#123;</span><br><span class="line">                 info.setLastDirtyTimestamp(replicaDirtyTimestamp);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             info.setActionType(ActionType.MODIFIED);</span><br><span class="line">//将instance的变化放入变化队列，客户端增量获取注册信息从队列获取</span><br><span class="line">             this.recentlyChangedQueue.add(new AbstractInstanceRegistry.RecentlyChangedItem(lease));</span><br><span class="line">             info.setLastUpdatedTimestamp();</span><br><span class="line">             this.invalidateCache(appName, info.getVIPAddress(), info.getSecureVipAddress());</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         var15 = true;</span><br><span class="line">     &#125; finally &#123;</span><br><span class="line">         this.read.unlock();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     return var15;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、EurekaServer启动过程&quot;&gt;&lt;a href=&quot;#1、EurekaServer启动过程&quot; class=&quot;headerlink&quot; title=&quot;1、EurekaServer启动过程&quot;&gt;&lt;/a&gt;1、EurekaServer启动过程&lt;/h3&gt;&lt;p&gt;通过自动配置
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud客户端源码</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringCloud%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringCloud客户端源码/</id>
    <published>2020-01-16T13:43:36.370Z</published>
    <updated>2020-01-12T14:34:34.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、服务发现"><a href="#1、服务发现" class="headerlink" title="1、服务发现"></a>1、服务发现</h3><p>通过自动配置类EurekaDiscoveryClientConfiguration，引入了EurekaClient，EurekaClient的实现为DiscoveryClient，<br>DiscoveryClient的构造器如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">DiscoveryClient(ApplicationInfoManager applicationInfoManager, EurekaClientConfig config, AbstractDiscoveryClientOptionalArgs args, Provider&lt;BackupRegistry&gt; backupRegistryProvider) &#123;</span><br><span class="line">      ...省略部分</span><br><span class="line"></span><br><span class="line">//应用实例信息管理器</span><br><span class="line">      this.applicationInfoManager = applicationInfoManager;</span><br><span class="line">//本应用实例信息</span><br><span class="line">      InstanceInfo myInfo = applicationInfoManager.getInfo();</span><br><span class="line"></span><br><span class="line">      ...省略部分</span><br><span class="line"></span><br><span class="line">//初始化应用集合在本地的缓存</span><br><span class="line">      this.localRegionApps.set(new Applications());</span><br><span class="line"></span><br><span class="line">      ...省略部分</span><br><span class="line"></span><br><span class="line">      logger.info(&quot;Initializing Eureka in region &#123;&#125;&quot;, this.clientConfig.getRegion());</span><br><span class="line">//不需要拉取服务，也不许要注册本服务</span><br><span class="line">      if (!config.shouldRegisterWithEureka() &amp;&amp; !config.shouldFetchRegistry()) &#123;</span><br><span class="line">          ...省略部分</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">//定时线程池</span><br><span class="line">              this.scheduler = Executors.newScheduledThreadPool(2, (new ThreadFactoryBuilder()).setNameFormat(&quot;DiscoveryClient-%d&quot;).setDaemon(true).build());</span><br><span class="line">              //心跳线程池</span><br><span class="line">this.heartbeatExecutor = new ThreadPoolExecutor(1, this.clientConfig.getHeartbeatExecutorThreadPoolSize(), 0L, TimeUnit.SECONDS, new SynchronousQueue(), (new ThreadFactoryBuilder()).setNameFormat(&quot;DiscoveryClient-HeartbeatExecutor-%d&quot;).setDaemon(true).build());</span><br><span class="line">              this.cacheRefreshExecutor = new ThreadPoolExecutor(1, this.clientConfig.getCacheRefreshExecutorThreadPoolSize(), 0L, TimeUnit.SECONDS, new SynchronousQueue(), (new ThreadFactoryBuilder()).setNameFormat(&quot;DiscoveryClient-CacheRefreshExecutor-%d&quot;).setDaemon(true).build());</span><br><span class="line">              //与注册中心通信器</span><br><span class="line">this.eurekaTransport = new DiscoveryClient.EurekaTransport();</span><br><span class="line">              this.scheduleServerEndpointTask(this.eurekaTransport, args);</span><br><span class="line">              Object azToRegionMapper;</span><br><span class="line">              if (this.clientConfig.shouldUseDnsForFetchingServiceUrls()) &#123;</span><br><span class="line">                  azToRegionMapper = new DNSBasedAzToRegionMapper(this.clientConfig);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  azToRegionMapper = new PropertyBasedAzToRegionMapper(this.clientConfig);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              if (null != this.remoteRegionsToFetch.get()) &#123;</span><br><span class="line">                  ((AzToRegionMapper)azToRegionMapper).setRegionsToFetch(((String)this.remoteRegionsToFetch.get()).split(&quot;,&quot;));</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              this.instanceRegionChecker = new InstanceRegionChecker((AzToRegionMapper)azToRegionMapper, this.clientConfig.getRegion());</span><br><span class="line">          &#125; catch (Throwable var8) &#123;</span><br><span class="line">              throw new RuntimeException(&quot;Failed to initialize DiscoveryClient!&quot;, var8);</span><br><span class="line">          &#125;</span><br><span class="line">//拉取数据</span><br><span class="line">          if (this.clientConfig.shouldFetchRegistry() &amp;&amp; !this.fetchRegistry(false)) &#123;</span><br><span class="line">//从备份注册中心拉取数据</span><br><span class="line">              this.fetchRegistryFromBackup();</span><br><span class="line">          &#125;</span><br><span class="line">//注册前的处理器</span><br><span class="line">          if (this.preRegistrationHandler != null) &#123;</span><br><span class="line">              this.preRegistrationHandler.beforeRegistration();</span><br><span class="line">          &#125;</span><br><span class="line">//初始化拉取、注册任务</span><br><span class="line">          this.initScheduledTasks();</span><br><span class="line"></span><br><span class="line">          try &#123;</span><br><span class="line">              Monitors.registerObject(this);</span><br><span class="line">          &#125; catch (Throwable var7) &#123;</span><br><span class="line">              logger.warn(&quot;Cannot register timers&quot;, var7);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          DiscoveryManager.getInstance().setDiscoveryClient(this);</span><br><span class="line">          DiscoveryManager.getInstance().setEurekaClientConfig(config);</span><br><span class="line">          this.initTimestampMs = System.currentTimeMillis();</span><br><span class="line">          logger.info(&quot;Discovery Client initialized at timestamp &#123;&#125; with initial instances count: &#123;&#125;&quot;, this.initTimestampMs, this.getApplications().size());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>继续看初始化注册和拉取任务的方法initScheduledTasks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  private void initScheduledTasks() &#123;</span><br><span class="line">      int renewalIntervalInSecs;</span><br><span class="line">      int expBackOffBound;</span><br><span class="line">//需要拉取服务</span><br><span class="line">      if (this.clientConfig.shouldFetchRegistry()) &#123;</span><br><span class="line">//间隔时间默认30秒</span><br><span class="line">renewalIntervalInSecs = this.clientConfig.getRegistryFetchIntervalSeconds();</span><br><span class="line">          expBackOffBound = this.clientConfig.getCacheRefreshExecutorExponentialBackOffBound();</span><br><span class="line">          //向定时线程池提交任务DiscoveryClient.CacheRefreshThread()</span><br><span class="line">this.scheduler.schedule(new TimedSupervisorTask(&quot;cacheRefresh&quot;, this.scheduler, this.cacheRefreshExecutor, renewalIntervalInSecs, TimeUnit.SECONDS, expBackOffBound, new DiscoveryClient.CacheRefreshThread()), (long)renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line">      &#125;</span><br><span class="line">//需要注册到注册中心</span><br><span class="line">      if (this.clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line">//间隔时间</span><br><span class="line">          renewalIntervalInSecs = this.instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();</span><br><span class="line">          expBackOffBound = this.clientConfig.getHeartbeatExecutorExponentialBackOffBound();</span><br><span class="line">          logger.info(&quot;Starting heartbeat executor: renew interval is: &quot; + renewalIntervalInSecs);</span><br><span class="line">          //向定时线程池提交任务DiscoveryClient.HeartbeatThread()</span><br><span class="line">this.scheduler.schedule(new TimedSupervisorTask(&quot;heartbeat&quot;, this.scheduler, this.heartbeatExecutor, renewalIntervalInSecs, TimeUnit.SECONDS, expBackOffBound, new DiscoveryClient.HeartbeatThread()), (long)renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line">          this.instanceInfoReplicator = new InstanceInfoReplicator(this, this.instanceInfo, this.clientConfig.getInstanceInfoReplicationIntervalSeconds(), 2);</span><br><span class="line">          this.statusChangeListener = new StatusChangeListener() &#123;</span><br><span class="line">              public String getId() &#123;</span><br><span class="line">                  return &quot;statusChangeListener&quot;;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              public void notify(StatusChangeEvent statusChangeEvent) &#123;</span><br><span class="line">                  if (InstanceStatus.DOWN != statusChangeEvent.getStatus() &amp;&amp; InstanceStatus.DOWN != statusChangeEvent.getPreviousStatus()) &#123;</span><br><span class="line">                      DiscoveryClient.logger.info(&quot;Saw local status change event &#123;&#125;&quot;, statusChangeEvent);</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                      DiscoveryClient.logger.warn(&quot;Saw local status change event &#123;&#125;&quot;, statusChangeEvent);</span><br><span class="line">                  &#125;</span><br><span class="line">                  DiscoveryClient.this.instanceInfoReplicator.onDemandUpdate();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          if (this.clientConfig.shouldOnDemandUpdateStatusChange()) &#123;</span><br><span class="line">              this.applicationInfoManager.registerStatusChangeListener(this.statusChangeListener);</span><br><span class="line">          &#125;</span><br><span class="line">          this.instanceInfoReplicator.start(this.clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          logger.info(&quot;Not registering with Eureka server per configuration&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>DiscoveryClient.HeartbeatThread()中通过refreshRegistry方法实现拉取服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">private boolean fetchRegistry(boolean forceFullRegistryFetch) &#123;</span><br><span class="line">       Stopwatch tracer = this.FETCH_REGISTRY_TIMER.start();</span><br><span class="line"></span><br><span class="line">       label122: &#123;</span><br><span class="line">           boolean var4;</span><br><span class="line">           try &#123;</span><br><span class="line">//应用实例集合</span><br><span class="line">               Applications applications = this.getApplications();</span><br><span class="line">               if (!this.clientConfig.shouldDisableDelta() &amp;&amp; Strings.isNullOrEmpty(this.clientConfig.getRegistryRefreshSingleVipAddress()) &amp;&amp; !forceFullRegistryFetch &amp;&amp; applications != null &amp;&amp; applications.getRegisteredApplications().size() != 0 &amp;&amp; applications.getVersion() != -1L) &#123;</span><br><span class="line">                   //增量拉取</span><br><span class="line">this.getAndUpdateDelta(applications);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                   ...省略部分</span><br><span class="line"></span><br><span class="line">                   //全量拉取</span><br><span class="line">this.getAndStoreFullRegistry();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               applications.setAppsHashCode(applications.getReconcileHashCode());</span><br><span class="line">               this.logTotalInstances();</span><br><span class="line">               break label122;</span><br><span class="line">           &#125; catch (Throwable var8) &#123;</span><br><span class="line">               logger.error(&quot;DiscoveryClient_&quot; + this.appPathIdentifier + &quot; - was unable to refresh its cache! status = &quot; + var8.getMessage(), var8);</span><br><span class="line">               var4 = false;</span><br><span class="line">           &#125; finally &#123;</span><br><span class="line">               if (tracer != null) &#123;</span><br><span class="line">                   tracer.stop();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return var4;</span><br><span class="line">       &#125;</span><br><span class="line">//发送事件</span><br><span class="line">       this.onCacheRefreshed();</span><br><span class="line">       this.updateInstanceRemoteStatus();</span><br><span class="line">       return true;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>先看全量拉取getAndStoreFullRegistry方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void getAndStoreFullRegistry() throws Throwable &#123;</span><br><span class="line">       long currentUpdateGeneration = this.fetchRegistryGeneration.get();</span><br><span class="line">       logger.info(&quot;Getting all instance registry info from the eureka server&quot;);</span><br><span class="line">       Applications apps = null;</span><br><span class="line">//拉取应用实例信息</span><br><span class="line">       EurekaHttpResponse&lt;Applications&gt; httpResponse = this.clientConfig.getRegistryRefreshSingleVipAddress() == null ? this.eurekaTransport.queryClient.getApplications((String[])this.remoteRegionsRef.get()) : this.eurekaTransport.queryClient.getVip(this.clientConfig.getRegistryRefreshSingleVipAddress(), (String[])this.remoteRegionsRef.get());</span><br><span class="line">       if (httpResponse.getStatusCode() == Status.OK.getStatusCode()) &#123;</span><br><span class="line">           apps = (Applications)httpResponse.getEntity();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       logger.info(&quot;The response status is &#123;&#125;&quot;, httpResponse.getStatusCode());</span><br><span class="line">       if (apps == null) &#123;</span><br><span class="line">           logger.error(&quot;The application is null for some reason. Not storing this information&quot;);</span><br><span class="line">//设置更新版本信息</span><br><span class="line">       &#125; else if (this.fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1L)) &#123;</span><br><span class="line">//过滤掉不是up状态的应用实例</span><br><span class="line">           this.localRegionApps.set(this.filterAndShuffle(apps));</span><br><span class="line">           logger.debug(&quot;Got full registry with apps hashcode &#123;&#125;&quot;, apps.getAppsHashCode());</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           logger.warn(&quot;Not updating applications as another thread is updating it already&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>再看增量量拉取getAndUpdateDelta方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  private void getAndUpdateDelta(Applications applications) throws Throwable &#123;</span><br><span class="line">//上次更新版本</span><br><span class="line">      long currentUpdateGeneration = this.fetchRegistryGeneration.get();</span><br><span class="line">      Applications delta = null;</span><br><span class="line">//拉取应用实例</span><br><span class="line">      EurekaHttpResponse&lt;Applications&gt; httpResponse = this.eurekaTransport.queryClient.getDelta((String[])this.remoteRegionsRef.get());</span><br><span class="line">      if (httpResponse.getStatusCode() == Status.OK.getStatusCode()) &#123;</span><br><span class="line">          delta = (Applications)httpResponse.getEntity();</span><br><span class="line">      &#125;</span><br><span class="line">//只允许全量拉取</span><br><span class="line">      if (delta == null) &#123;</span><br><span class="line">          logger.warn(&quot;The server does not allow the delta revision to be applied because it is not safe. Hence got the full registry.&quot;);</span><br><span class="line">          this.getAndStoreFullRegistry();</span><br><span class="line">//更新版本</span><br><span class="line">      &#125; else if (this.fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1L)) &#123;</span><br><span class="line">          logger.debug(&quot;Got delta update with apps hashcode &#123;&#125;&quot;, delta.getAppsHashCode());</span><br><span class="line">          String reconcileHashCode = &quot;&quot;;</span><br><span class="line">          if (this.fetchRegistryUpdateLock.tryLock()) &#123;</span><br><span class="line">              try &#123;</span><br><span class="line">//更新应用实例集合</span><br><span class="line">                  this.updateDelta(delta);</span><br><span class="line">                  reconcileHashCode = this.getReconcileHashCode(applications);</span><br><span class="line">              &#125; finally &#123;</span><br><span class="line">                  this.fetchRegistryUpdateLock.unlock();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              logger.warn(&quot;Cannot acquire update lock, aborting getAndUpdateDelta&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">//一致性哈希值不相等,全量拉取</span><br><span class="line">          if (!reconcileHashCode.equals(delta.getAppsHashCode()) || this.clientConfig.shouldLogDeltaDiff()) &#123;</span><br><span class="line">              this.reconcileAndLogDifference(delta, reconcileHashCode);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          logger.warn(&quot;Not updating application delta as another thread is updating it already&quot;);</span><br><span class="line">          logger.debug(&quot;Ignoring delta update with apps hashcode &#123;&#125;, as another thread is updating it already&quot;, delta.getAppsHashCode());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>继续看更新实例方法updateDelta<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">  private void updateDelta(Applications delta) &#123;</span><br><span class="line">      int deltaCount = 0;</span><br><span class="line">      Iterator var3 = delta.getRegisteredApplications().iterator();</span><br><span class="line">//遍历拉取的实例</span><br><span class="line">      while(var3.hasNext()) &#123;</span><br><span class="line">          Application app = (Application)var3.next();</span><br><span class="line">          Iterator var5 = app.getInstances().iterator();</span><br><span class="line">//遍历已有的实例</span><br><span class="line">          while(var5.hasNext()) &#123;</span><br><span class="line">              InstanceInfo instance = (InstanceInfo)var5.next();</span><br><span class="line">              Applications applications = this.getApplications();</span><br><span class="line">              String instanceRegion = this.instanceRegionChecker.getInstanceRegion(instance);</span><br><span class="line">              if (!this.instanceRegionChecker.isLocalRegion(instanceRegion)) &#123;</span><br><span class="line">                  Applications remoteApps = (Applications)this.remoteRegionVsApps.get(instanceRegion);</span><br><span class="line">                  if (null == remoteApps) &#123;</span><br><span class="line">                      remoteApps = new Applications();</span><br><span class="line">                      this.remoteRegionVsApps.put(instanceRegion, remoteApps);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  applications = remoteApps;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              ++deltaCount;</span><br><span class="line">              Application existingApp;</span><br><span class="line">//新增实例</span><br><span class="line">              if (ActionType.ADDED.equals(instance.getActionType())) &#123;</span><br><span class="line">//根据实例名查找已存在的实例集合</span><br><span class="line">                  existingApp = applications.getRegisteredApplications(instance.getAppName());</span><br><span class="line">//新增Application</span><br><span class="line">                  if (existingApp == null) &#123;</span><br><span class="line">                      applications.addApplication(app);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  logger.debug(&quot;Added instance &#123;&#125; to the existing apps in region &#123;&#125;&quot;, instance.getId(), instanceRegion);</span><br><span class="line">                  //向集合里添加实例</span><br><span class="line">applications.getRegisteredApplications(instance.getAppName()).addInstance(instance);</span><br><span class="line">              &#125; else if (ActionType.MODIFIED.equals(instance.getActionType())) &#123;</span><br><span class="line">                  //根据实例名查找已存在的实例集合</span><br><span class="line">existingApp = applications.getRegisteredApplications(instance.getAppName());</span><br><span class="line">                  if (existingApp == null) &#123;</span><br><span class="line">                      applications.addApplication(app);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  logger.debug(&quot;Modified instance &#123;&#125; to the existing apps &quot;, instance.getId());</span><br><span class="line">                  //向集合里添加实例，会根据id替换掉原有实例</span><br><span class="line">applications.getRegisteredApplications(instance.getAppName()).addInstance(instance);</span><br><span class="line">              &#125; else if (ActionType.DELETED.equals(instance.getActionType())) &#123;</span><br><span class="line">                  //根据实例名查找已存在的实例集合</span><br><span class="line">existingApp = applications.getRegisteredApplications(instance.getAppName());</span><br><span class="line">                  if (existingApp == null) &#123;</span><br><span class="line">                      applications.addApplication(app);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  logger.debug(&quot;Deleted instance &#123;&#125; to the existing apps &quot;, instance.getId());</span><br><span class="line">                  //删除该实例</span><br><span class="line">applications.getRegisteredApplications(instance.getAppName()).removeInstance(instance);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      logger.debug(&quot;The total number of instances fetched by the delta processor : &#123;&#125;&quot;, deltaCount);</span><br><span class="line">      //设置Applications拉取更新版本</span><br><span class="line">this.getApplications().setVersion(delta.getVersion());</span><br><span class="line">//根据UP状态过滤实例</span><br><span class="line">      this.getApplications().shuffleInstances(this.clientConfig.shouldFilterOnlyUpInstances());</span><br><span class="line">      var3 = this.remoteRegionVsApps.values().iterator();</span><br><span class="line"></span><br><span class="line">      while(var3.hasNext()) &#123;</span><br><span class="line">          Applications applications = (Applications)var3.next();</span><br><span class="line">          applications.setVersion(delta.getVersion());</span><br><span class="line">          applications.shuffleInstances(this.clientConfig.shouldFilterOnlyUpInstances());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>DiscoveryClient.renew()方法往注册中心发送心跳<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">boolean renew() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">//往注册中心发送带有本实例信息的心跳</span><br><span class="line">           EurekaHttpResponse&lt;InstanceInfo&gt; httpResponse = this.eurekaTransport.registrationClient.sendHeartBeat(this.instanceInfo.getAppName(), this.instanceInfo.getId(), this.instanceInfo, (InstanceStatus)null);</span><br><span class="line">           logger.debug(&quot;&#123;&#125; - Heartbeat status: &#123;&#125;&quot;, &quot;DiscoveryClient_&quot; + this.appPathIdentifier, httpResponse.getStatusCode());</span><br><span class="line">           if (httpResponse.getStatusCode() == 404) &#123;</span><br><span class="line">               this.REREGISTER_COUNTER.increment();</span><br><span class="line">               logger.info(&quot;&#123;&#125; - Re-registering apps/&#123;&#125;&quot;, &quot;DiscoveryClient_&quot; + this.appPathIdentifier, this.instanceInfo.getAppName());</span><br><span class="line">               long timestamp = this.instanceInfo.setIsDirtyWithTime();</span><br><span class="line">               boolean success = this.register();</span><br><span class="line">               if (success) &#123;</span><br><span class="line">                   this.instanceInfo.unsetIsDirty(timestamp);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               return success;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               return httpResponse.getStatusCode() == 200;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Throwable var5) &#123;</span><br><span class="line">           logger.error(&quot;&#123;&#125; - was unable to send heartbeat!&quot;, &quot;DiscoveryClient_&quot; + this.appPathIdentifier, var5);</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、服务发现&quot;&gt;&lt;a href=&quot;#1、服务发现&quot; class=&quot;headerlink&quot; title=&quot;1、服务发现&quot;&gt;&lt;/a&gt;1、服务发现&lt;/h3&gt;&lt;p&gt;通过自动配置类EurekaDiscoveryClientConfiguration，引入了EurekaCli
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot自动配置源码</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringBoot自动配置源码/</id>
    <published>2020-01-16T13:43:36.367Z</published>
    <updated>2020-01-12T14:34:33.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、引入自动配置"><a href="#1、引入自动配置" class="headerlink" title="1、引入自动配置"></a>1、引入自动配置</h3><p>通过EnableAutoConfiguration注解引入EnableAutoConfigurationImportSelector实现自动配置，<br>EnableAutoConfigurationImportSelector的父类AutoConfigurationImportSelector的selectImports方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">       if (!this.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">           return NO_IMPORTS;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               //获取注解元数据</span><br><span class="line">AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);</span><br><span class="line">               //获取注解属性</span><br><span class="line">AnnotationAttributes attributes = this.getAttributes(annotationMetadata);</span><br><span class="line">//从META-INF/spring.factories中获取自动注解类 </span><br><span class="line">               List&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">               //去除重复</span><br><span class="line">configurations = this.removeDuplicates(configurations);</span><br><span class="line">//排序</span><br><span class="line">               configurations = this.sort(configurations, autoConfigurationMetadata);</span><br><span class="line">//获取注解中需要排除的</span><br><span class="line">               Set&lt;String&gt; exclusions = this.getExclusions(annotationMetadata, attributes);</span><br><span class="line">               this.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">//排除不需要的</span><br><span class="line">               configurations.removeAll(exclusions);</span><br><span class="line">//根据条件注解筛选</span><br><span class="line">               configurations = this.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">               this.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">//返回最终的配之类</span><br><span class="line">               return (String[])configurations.toArray(new String[configurations.size()]);</span><br><span class="line">           &#125; catch (IOException var6) &#123;</span><br><span class="line">               throw new IllegalStateException(var6);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>springboot自动配置包下默认的自动配置类在文件META-INF/spring.factories下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></p><p>filter方法根据条件注解筛选<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;String&gt; filter(List&lt;String&gt; configurations, AutoConfigurationMetadata autoConfigurationMetadata) &#123;</span><br><span class="line">       long startTime = System.nanoTime();</span><br><span class="line">       String[] candidates = (String[])configurations.toArray(new String[configurations.size()]);</span><br><span class="line">       boolean[] skip = new boolean[candidates.length];</span><br><span class="line">       boolean skipped = false;</span><br><span class="line">//获取条件处理类</span><br><span class="line">       Iterator var8 = this.getAutoConfigurationImportFilters().iterator();</span><br><span class="line"></span><br><span class="line">       while(var8.hasNext()) &#123;</span><br><span class="line">           AutoConfigurationImportFilter filter = (AutoConfigurationImportFilter)var8.next();</span><br><span class="line">           this.invokeAwareMethods(filter);</span><br><span class="line">//根据条件注解判断是否匹配</span><br><span class="line">           boolean[] match = filter.match(candidates, autoConfigurationMetadata);</span><br><span class="line">//根据是否匹配确定该配置类是否需要</span><br><span class="line">           for(int i = 0; i &lt; match.length; ++i) &#123;</span><br><span class="line">               if (!match[i]) &#123;</span><br><span class="line">                   skip[i] = true;</span><br><span class="line">                   skipped = true;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (!skipped) &#123;</span><br><span class="line">           return configurations;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           List&lt;String&gt; result = new ArrayList(candidates.length);</span><br><span class="line"></span><br><span class="line">           int numberFiltered;</span><br><span class="line">//跳过不需要的配置类</span><br><span class="line">           for(numberFiltered = 0; numberFiltered &lt; candidates.length; ++numberFiltered) &#123;</span><br><span class="line">               if (!skip[numberFiltered]) &#123;</span><br><span class="line">                   result.add(candidates[numberFiltered]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return new ArrayList(result);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>AutoConfigurationImportFilter的实现类为SpringBootCondition，SpringBootCondition为抽象类又有实现类如OnClassCondition<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata) &#123;</span><br><span class="line">       ConditionEvaluationReport report = this.getConditionEvaluationReport();</span><br><span class="line">       //条件判断结果</span><br><span class="line">ConditionOutcome[] outcomes = this.getOutcomes(autoConfigurationClasses, autoConfigurationMetadata);</span><br><span class="line">       boolean[] match = new boolean[outcomes.length];</span><br><span class="line">//结果赋值给match数组</span><br><span class="line">       for(int i = 0; i &lt; outcomes.length; ++i) &#123;</span><br><span class="line">           match[i] = outcomes[i] == null || outcomes[i].isMatch();</span><br><span class="line">           if (!match[i] &amp;&amp; outcomes[i] != null) &#123;</span><br><span class="line">               this.logOutcome(autoConfigurationClasses[i], outcomes[i]);</span><br><span class="line">               if (report != null) &#123;</span><br><span class="line">                   report.recordConditionEvaluation(autoConfigurationClasses[i], this, outcomes[i]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return match;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>getOutcomes方法获取配置类是否满足条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata) &#123;</span><br><span class="line">       //将自动配置类分为两组异步处理</span><br><span class="line">int split = autoConfigurationClasses.length / 2;</span><br><span class="line">       OnClassCondition.OutcomesResolver firstHalfResolver = this.createOutcomesResolver(autoConfigurationClasses, 0, split, autoConfigurationMetadata);</span><br><span class="line">       OnClassCondition.OutcomesResolver secondHalfResolver = new OnClassCondition.StandardOutcomesResolver(autoConfigurationClasses, split, autoConfigurationClasses.length, autoConfigurationMetadata, this.beanClassLoader);</span><br><span class="line">       //处理配置类</span><br><span class="line">ConditionOutcome[] secondHalf = secondHalfResolver.resolveOutcomes();</span><br><span class="line">       ConditionOutcome[] firstHalf = firstHalfResolver.resolveOutcomes();</span><br><span class="line">       ConditionOutcome[] outcomes = new ConditionOutcome[autoConfigurationClasses.length];</span><br><span class="line">       System.arraycopy(firstHalf, 0, outcomes, 0, firstHalf.length);</span><br><span class="line">       System.arraycopy(secondHalf, 0, outcomes, split, secondHalf.length);</span><br><span class="line">       return outcomes;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses, int start, int end, AutoConfigurationMetadata autoConfigurationMetadata) &#123;</span><br><span class="line">           ConditionOutcome[] outcomes = new ConditionOutcome[end - start];</span><br><span class="line">//循环判断配置类条件</span><br><span class="line">           for(int i = start; i &lt; end; ++i) &#123;</span><br><span class="line">               String autoConfigurationClass = autoConfigurationClasses[i];</span><br><span class="line">//获取ConditionalOnClass注解所需要的类</span><br><span class="line">               Set&lt;String&gt; candidates = autoConfigurationMetadata.getSet(autoConfigurationClass, &quot;ConditionalOnClass&quot;);</span><br><span class="line">               if (candidates != null) &#123;</span><br><span class="line">                   outcomes[i - start] = this.getOutcome(candidates);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return outcomes;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>获取某个配置匹配的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private ConditionOutcome getOutcome(Set&lt;String&gt; candidates) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//判断是否有缺失</span><br><span class="line">List&lt;String&gt; missing = OnClassCondition.this.getMatches(candidates, OnClassCondition.MatchType.MISSING, this.beanClassLoader);</span><br><span class="line">if (!missing.isEmpty()) &#123;</span><br><span class="line">//返回不匹配</span><br><span class="line">return ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnClass.class, new Object[0]).didNotFind(&quot;required class&quot;, &quot;required classes&quot;).items(Style.QUOTE, missing));</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception var3) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>getMatches方法中对条件注解中要求的类分别判断是否存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MISSING &#123;</span><br><span class="line">public boolean matches(String className, ClassLoader classLoader) &#123;</span><br><span class="line">//isPresent方法中尝试加在所需类 不抛异常则认为存在</span><br><span class="line">return !OnClassCondition.MatchType.isPresent(className, classLoader);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、引入自动配置&quot;&gt;&lt;a href=&quot;#1、引入自动配置&quot; class=&quot;headerlink&quot; title=&quot;1、引入自动配置&quot;&gt;&lt;/a&gt;1、引入自动配置&lt;/h3&gt;&lt;p&gt;通过EnableAutoConfiguration注解引入EnableAutoConfigu
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot自动配置</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/springboot自动配置/</id>
    <published>2020-01-16T13:43:36.364Z</published>
    <updated>2019-01-20T11:57:28.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、EnableAutoConfiguration"><a href="#一、EnableAutoConfiguration" class="headerlink" title="一、EnableAutoConfiguration"></a>一、EnableAutoConfiguration</h3><h4 id="1、创建EnableAutoConfigurationImportSelector"><a href="#1、创建EnableAutoConfigurationImportSelector" class="headerlink" title="1、创建EnableAutoConfigurationImportSelector"></a>1、创建EnableAutoConfigurationImportSelector</h4><p>通过@Import的方式引入EnableAutoConfigurationImportSelector，AutoConfigurationImportSelector的selectImports方法，<br>获取自动配置类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    //检查是否开启自动配置&quot;spring.boot.enableautoconfiguration&quot;，默认开启</span><br><span class="line">    if (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    //从配置文件&quot;META-INF/spring-autoconfigure-metadata.properties&quot;中加载配置</span><br><span class="line">    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">            .loadMetadata(this.beanClassLoader);</span><br><span class="line">    //获取注解的EnableAutoConfiguration注解值信息</span><br><span class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    //从&quot;META-INF\spring.factories&quot;中获取自动配置类</span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">            attributes);</span><br><span class="line">    //去重</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    //排序</span><br><span class="line">    configurations = sort(configurations, autoConfigurationMetadata);</span><br><span class="line">    //获取EnableAutoConfiguration中的或配置中要去除的自动配置类</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    //检查是否有无效的排除类</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    //删除排除的配置类</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    //过滤配置类</span><br><span class="line">    configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">    //广播事件 AutoConfigurationImportEvent</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    return StringUtils.toStringArray(configurations);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置类排序通过@AutoConfigureOrder及注解@AutoConfigureBefore @AutoConfigureAfter排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;String&gt; getInPriorityOrder(Collection&lt;String&gt; classNames) &#123;</span><br><span class="line">final AutoConfigurationClasses classes = new AutoConfigurationClasses(</span><br><span class="line">this.metadataReaderFactory, this.autoConfigurationMetadata, classNames);</span><br><span class="line">List&lt;String&gt; orderedClassNames = new ArrayList&lt;String&gt;(classNames);</span><br><span class="line">// Initially sort alphabetically</span><br><span class="line">//先根据字母排序</span><br><span class="line">Collections.sort(orderedClassNames);</span><br><span class="line">// Then sort by order</span><br><span class="line">//通过@AutoConfigureOrder排序</span><br><span class="line">Collections.sort(orderedClassNames, new Comparator&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int compare(String o1, String o2) &#123;</span><br><span class="line">int i1 = classes.get(o1).getOrder();</span><br><span class="line">int i2 = classes.get(o2).getOrder();</span><br><span class="line">return (i1 &lt; i2) ? -1 : (i1 &gt; i2) ? 1 : 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">// Then respect @AutoConfigureBefore @AutoConfigureAfter</span><br><span class="line">//通过@AutoConfigureBefore @AutoConfigureAfter排序</span><br><span class="line">orderedClassNames = sortByAnnotation(classes, orderedClassNames);</span><br><span class="line">return orderedClassNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>过滤配置器通过SpringBootCondition条件过滤,这里主要通过OnClassCondition过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;String&gt; filter(List&lt;String&gt; configurations,</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata) &#123;</span><br><span class="line">    long startTime = System.nanoTime();</span><br><span class="line">    String[] candidates = StringUtils.toStringArray(configurations);</span><br><span class="line">    boolean[] skip = new boolean[candidates.length];</span><br><span class="line">    boolean skipped = false;</span><br><span class="line">    //从配置&quot;META-INF\spring.factories&quot;中获取过滤器OnClassCondition</span><br><span class="line">    for (AutoConfigurationImportFilter filter : getAutoConfigurationImportFilters()) &#123;</span><br><span class="line">        //设置相应的资源</span><br><span class="line">        invokeAwareMethods(filter);</span><br><span class="line">        //是否匹配</span><br><span class="line">        boolean[] match = filter.match(candidates, autoConfigurationMetadata);</span><br><span class="line">        //不匹配须过滤</span><br><span class="line">        for (int i = 0; i &lt; match.length; i++) &#123;</span><br><span class="line">            if (!match[i]) &#123;</span><br><span class="line">                skip[i] = true;</span><br><span class="line">                skipped = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //全部匹配</span><br><span class="line">    if (!skipped) &#123;</span><br><span class="line">        return configurations;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; result = new ArrayList&lt;&gt;(candidates.length);</span><br><span class="line">    for (int i = 0; i &lt; candidates.length; i++) &#123;</span><br><span class="line">        //判断是否跳过</span><br><span class="line">        if (!skip[i]) &#123;</span><br><span class="line">            result.add(candidates[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        int numberFiltered = configurations.size() - result.size();</span><br><span class="line">        logger.trace(&quot;Filtered &quot; + numberFiltered + &quot; auto configuration class in &quot;</span><br><span class="line">                + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)</span><br><span class="line">                + &quot; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return new ArrayList&lt;&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、EnableAutoConfiguration&quot;&gt;&lt;a href=&quot;#一、EnableAutoConfiguration&quot; class=&quot;headerlink&quot; title=&quot;一、EnableAutoConfiguration&quot;&gt;&lt;/a&gt;一、EnableAut
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot源码默认注解</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringBoot%E6%BA%90%E7%A0%81%E9%BB%98%E8%AE%A4%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringBoot源码默认注解/</id>
    <published>2020-01-16T13:43:36.360Z</published>
    <updated>2018-07-14T05:58:09.932Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(excludeFilters = &#123;</span><br><span class="line">        @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line">public @interface SpringBootApplication &#123;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、SpringBoot组合注解"><a href="#一、SpringBoot组合注解" class="headerlink" title="一、SpringBoot组合注解"></a>一、SpringBoot组合注解</h3><h4 id="1、-SpringBootConfiguration注解"><a href="#1、-SpringBootConfiguration注解" class="headerlink" title="1、@SpringBootConfiguration注解"></a>1、@SpringBootConfiguration注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//ElementType.TYPE表示SpringBootConfiguration注解作用于接口、类、枚举类</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">//RetentionPolicy.RUNTIME表示SpringBootConfiguration注解信息保留至运行时</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">//表示@SpringBootConfiguration注解会被javadoc工具提取成文档</span><br><span class="line">@Documented</span><br><span class="line">//被本注解或组合注解，注解的类是springboot的配置类</span><br><span class="line">@Configuration</span><br><span class="line">public @interface SpringBootConfiguration &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-Target注解"><a href="#2、-Target注解" class="headerlink" title="2、@Target注解"></a>2、@Target注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">//ElementType.ANNOTATION_TYPE表示Target只能作用于注解类</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Target &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Returns an array of the kinds of elements an annotation type</span><br><span class="line">     * can be applied to.</span><br><span class="line">     * @return an array of the kinds of elements an annotation type</span><br><span class="line">     * can be applied to</span><br><span class="line">     */</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（一、1）-Retention注解"><a href="#3、接（一、1）-Retention注解" class="headerlink" title="3、接（一、1）@Retention注解"></a>3、接（一、1）@Retention注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Retention &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Returns the retention policy.</span><br><span class="line">     * @return the retention policy</span><br><span class="line">     */</span><br><span class="line">    RetentionPolicy value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（一、1）-Configuration注解"><a href="#4、接（一、1）-Configuration注解" class="headerlink" title="4、接（一、1）@Configuration注解"></a>4、接（一、1）@Configuration注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">//被本注解或组合注解，注解的类能被spring扫描器获取</span><br><span class="line">@Component</span><br><span class="line">public @interface Configuration &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Explicitly specify the name of the Spring bean definition associated</span><br><span class="line">     * with this Configuration class. If left unspecified (the common case),</span><br><span class="line">     * a bean name will be automatically generated.</span><br><span class="line">     * &lt;p&gt;The custom name applies only if the Configuration class is picked up via</span><br><span class="line">     * component scanning or supplied directly to a &#123;@link AnnotationConfigApplicationContext&#125;.</span><br><span class="line">     * If the Configuration class is registered as a traditional XML bean definition,</span><br><span class="line">     * the name/id of the bean element will take precedence.</span><br><span class="line">     * @return the suggested component name, if any (or empty String otherwise)</span><br><span class="line">     * @see org.springframework.beans.factory.support.DefaultBeanNameGenerator</span><br><span class="line">     */</span><br><span class="line">    @AliasFor(annotation = Component.class)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、开启自动配置注解"><a href="#二、开启自动配置注解" class="headerlink" title="二、开启自动配置注解"></a>二、开启自动配置注解</h3><h4 id="1、-EnableAutoConfiguration注解"><a href="#1、-EnableAutoConfiguration注解" class="headerlink" title="1、@EnableAutoConfiguration注解"></a>1、@EnableAutoConfiguration注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">//EnableAutoConfiguration作用于一个class，则被用于该class的子类</span><br><span class="line">@Inherited</span><br><span class="line">//注册配置类的包为项目基础包</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">//从配置文件&quot;META-INF/spring-autoconfigure-metadata.properties&quot;中加载自动配置类</span><br><span class="line">@Import(AutoConfigurationImportSelector.class)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Exclude specific auto-configuration classes such that they will never be applied.</span><br><span class="line">     * @return the classes to exclude</span><br><span class="line">     */</span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Exclude specific auto-configuration class names such that they will never be</span><br><span class="line">     * applied.</span><br><span class="line">     * @return the class names to exclude</span><br><span class="line">     * @since 1.3.0</span><br><span class="line">     */</span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-AutoConfigurationPackage注解"><a href="#2、-AutoConfigurationPackage注解" class="headerlink" title="2、@AutoConfigurationPackage注解"></a>2、@AutoConfigurationPackage注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class="line">public @interface AutoConfigurationPackage &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AutoConfigurationPackages-Registrar的registerBeanDefinitions方法"><a href="#3、AutoConfigurationPackages-Registrar的registerBeanDefinitions方法" class="headerlink" title="3、AutoConfigurationPackages.Registrar的registerBeanDefinitions方法"></a>3、AutoConfigurationPackages.Registrar的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(AnnotationMetadata metadata,</span><br><span class="line">        BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    //注册配置类的包名</span><br><span class="line">    register(registry, new PackageImport(metadata).getPackageName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AutoConfigurationPackages-Registrar的register方法"><a href="#4、AutoConfigurationPackages-Registrar的register方法" class="headerlink" title="4、AutoConfigurationPackages.Registrar的register方法"></a>4、AutoConfigurationPackages.Registrar的register方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void register(BeanDefinitionRegistry registry, String... packageNames) &#123;</span><br><span class="line">    //检查是否有AutoConfigurationPackages类型的bean</span><br><span class="line">    if (registry.containsBeanDefinition(BEAN)) &#123;</span><br><span class="line">        BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);</span><br><span class="line">        ConstructorArgumentValues constructorArguments = beanDefinition</span><br><span class="line">                .getConstructorArgumentValues();</span><br><span class="line">        //配置类的包，注册为基础包</span><br><span class="line">        constructorArguments.addIndexedArgumentValue(0,</span><br><span class="line">                addBasePackages(constructorArguments, packageNames));</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();</span><br><span class="line">        beanDefinition.setBeanClass(BasePackages.class);</span><br><span class="line">        //配置类的包，注册为基础包</span><br><span class="line">        beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,</span><br><span class="line">                packageNames);</span><br><span class="line">        beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        registry.registerBeanDefinition(BEAN, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（二、1）AutoConfigurationImportSelector的selectImports方法"><a href="#5、接（二、1）AutoConfigurationImportSelector的selectImports方法" class="headerlink" title="5、接（二、1）AutoConfigurationImportSelector的selectImports方法"></a>5、接（二、1）AutoConfigurationImportSelector的selectImports方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    //检查是否开启自动配置&quot;spring.boot.enableautoconfiguration&quot;，默认开启</span><br><span class="line">    if (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    //从配置文件&quot;META-INF/spring-autoconfigure-metadata.properties&quot;中加载配置</span><br><span class="line">    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">            .loadMetadata(this.beanClassLoader);</span><br><span class="line">    //获取注解的EnableAutoConfiguration注解值信息</span><br><span class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    //从&quot;META-INF\spring.factories&quot;中获取自动配置类</span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">            attributes);</span><br><span class="line">    //去重</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    //获取EnableAutoConfiguration中的或配置中要去除的自动配置类</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    //检查是否有无效的排除类</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    //删除排除的配置类</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    //应用过滤器</span><br><span class="line">    configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">    //广播事件 AutoConfigurationImportEvent</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    return StringUtils.toStringArray(configurations);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>META-INF\spring.factories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></p><h4 id="6、AutoConfigurationImportSelector的filter方法"><a href="#6、AutoConfigurationImportSelector的filter方法" class="headerlink" title="6、AutoConfigurationImportSelector的filter方法"></a>6、AutoConfigurationImportSelector的filter方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;String&gt; filter(List&lt;String&gt; configurations,</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata) &#123;</span><br><span class="line">    long startTime = System.nanoTime();</span><br><span class="line">    String[] candidates = StringUtils.toStringArray(configurations);</span><br><span class="line">    boolean[] skip = new boolean[candidates.length];</span><br><span class="line">    boolean skipped = false;</span><br><span class="line">    //从配置&quot;META-INF\spring.factories&quot;中获取过滤器OnClassCondition</span><br><span class="line">    for (AutoConfigurationImportFilter filter : getAutoConfigurationImportFilters()) &#123;</span><br><span class="line">        //设置相应的资源</span><br><span class="line">        invokeAwareMethods(filter);</span><br><span class="line">        //是否匹配</span><br><span class="line">        boolean[] match = filter.match(candidates, autoConfigurationMetadata);</span><br><span class="line">        //不匹配须过滤</span><br><span class="line">        for (int i = 0; i &lt; match.length; i++) &#123;</span><br><span class="line">            if (!match[i]) &#123;</span><br><span class="line">                skip[i] = true;</span><br><span class="line">                skipped = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //全部匹配</span><br><span class="line">    if (!skipped) &#123;</span><br><span class="line">        return configurations;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; result = new ArrayList&lt;&gt;(candidates.length);</span><br><span class="line">    for (int i = 0; i &lt; candidates.length; i++) &#123;</span><br><span class="line">        //判断是否跳过</span><br><span class="line">        if (!skip[i]) &#123;</span><br><span class="line">            result.add(candidates[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        int numberFiltered = configurations.size() - result.size();</span><br><span class="line">        logger.trace(&quot;Filtered &quot; + numberFiltered + &quot; auto configuration class in &quot;</span><br><span class="line">                + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)</span><br><span class="line">                + &quot; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return new ArrayList&lt;&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>META-INF\spring.factories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition</span><br></pre></td></tr></table></figure></p><h4 id="7、OnClassCondition的match方法"><a href="#7、OnClassCondition的match方法" class="headerlink" title="7、OnClassCondition的match方法"></a>7、OnClassCondition的match方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean[] match(String[] autoConfigurationClasses,</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata) &#123;</span><br><span class="line">    ConditionEvaluationReport report = getConditionEvaluationReport();</span><br><span class="line">    //查看配置&quot;META-INF/spring-autoconfigure-metadata.properties&quot;中，配置的ConditionalOnClass，在依赖中是否存在</span><br><span class="line">    ConditionOutcome[] outcomes = getOutcomes(autoConfigurationClasses,</span><br><span class="line">            autoConfigurationMetadata);</span><br><span class="line">    boolean[] match = new boolean[outcomes.length];</span><br><span class="line">    for (int i = 0; i &lt; outcomes.length; i++) &#123;</span><br><span class="line">        //匹配结果</span><br><span class="line">        match[i] = (outcomes[i] == null || outcomes[i].isMatch());</span><br><span class="line">        if (!match[i] &amp;&amp; outcomes[i] != null) &#123;</span><br><span class="line">            logOutcome(autoConfigurationClasses[i], outcomes[i]);</span><br><span class="line">            if (report != null) &#123;</span><br><span class="line">                report.recordConditionEvaluation(autoConfigurationClasses[i], this,</span><br><span class="line">                        outcomes[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return match;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、自动扫描组件注解"><a href="#三、自动扫描组件注解" class="headerlink" title="三、自动扫描组件注解"></a>三、自动扫描组件注解</h3><h4 id="1、-ComponentScan注解"><a href="#1、-ComponentScan注解" class="headerlink" title="1、@ComponentScan注解"></a>1、@ComponentScan注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Documented</span><br><span class="line">//ComponentScan注解可重复注解</span><br><span class="line">@Repeatable(ComponentScans.class)</span><br><span class="line">public @interface ComponentScan &#123;</span><br><span class="line">    。。。</span><br><span class="line">    /**</span><br><span class="line">     * Specifies which types are eligible for component scanning.</span><br><span class="line">     * &lt;p&gt;Further narrows the set of candidate components from everything in &#123;@link #basePackages&#125;</span><br><span class="line">     * to everything in the base packages that matches the given filter or filters.</span><br><span class="line">     * &lt;p&gt;Note that these filters will be applied in addition to the default filters, if specified.</span><br><span class="line">     * Any type under the specified base packages which matches a given filter will be included,</span><br><span class="line">     * even if it does not match the default filters (i.e. is not annotated with &#123;@code @Component&#125;).</span><br><span class="line">     * @see #resourcePattern()</span><br><span class="line">     * @see #useDefaultFilters()</span><br><span class="line">     */</span><br><span class="line">    //过滤器</span><br><span class="line">    Filter[] includeFilters() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Specifies which types are not eligible for component scanning.</span><br><span class="line">     * @see #resourcePattern</span><br><span class="line">     */</span><br><span class="line">    //过滤器</span><br><span class="line">    Filter[] excludeFilters() default &#123;&#125;;</span><br><span class="line">    。。。</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h4 id="2、TypeExcludeFilter的match方法"><a href="#2、TypeExcludeFilter的match方法" class="headerlink" title="2、TypeExcludeFilter的match方法"></a>2、TypeExcludeFilter的match方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean match(MetadataReader metadataReader,</span><br><span class="line">        MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">    if (this.beanFactory instanceof ListableBeanFactory</span><br><span class="line">            &amp;&amp; getClass() == TypeExcludeFilter.class) &#123;</span><br><span class="line">        //获取容器中的TypeExcludeFilter</span><br><span class="line">        Collection&lt;TypeExcludeFilter&gt; delegates = ((ListableBeanFactory) this.beanFactory)</span><br><span class="line">                .getBeansOfType(TypeExcludeFilter.class).values();</span><br><span class="line">        //有一个能能匹配则反回true</span><br><span class="line">        for (TypeExcludeFilter delegate : delegates) &#123;</span><br><span class="line">            if (delegate.match(metadataReader, metadataReaderFactory)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AutoConfigurationExcludeFilter的match方法"><a href="#3、AutoConfigurationExcludeFilter的match方法" class="headerlink" title="3、AutoConfigurationExcludeFilter的match方法"></a>3、AutoConfigurationExcludeFilter的match方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean match(MetadataReader metadataReader,</span><br><span class="line">        MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">    //是配置类,并且是自动配置类，返回ture，即不扫描自动配置类</span><br><span class="line">    return isConfiguration(metadataReader) &amp;&amp; isAutoConfiguration(metadataReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、动态代理自动配置类"><a href="#四、动态代理自动配置类" class="headerlink" title="四、动态代理自动配置类"></a>四、动态代理自动配置类</h3><h4 id="1、AopAutoConfiguration自动配置类"><a href="#1、AopAutoConfiguration自动配置类" class="headerlink" title="1、AopAutoConfiguration自动配置类"></a>1、AopAutoConfiguration自动配置类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">//条件注解，EnableAspectJAutoProxy、Aspect、Advice类存在，才能解析此配置类</span><br><span class="line">@ConditionalOnClass(&#123; EnableAspectJAutoProxy.class, Aspect.class, Advice.class,</span><br><span class="line">     AnnotatedElement.class &#125;)</span><br><span class="line">//配置文件中存在&quot;spring.aop.auto=true&quot;才能解析此配置类</span><br><span class="line">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;auto&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span><br><span class="line">public class AopAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    //创建AnnotationAwareAspectJAutoProxyCreator，采用Jdk动态代理</span><br><span class="line">    @EnableAspectJAutoProxy(proxyTargetClass = false)</span><br><span class="line">    //配置文件中存在&quot;spring.aop.proxy-target-class=false&quot;才能解析此配置类</span><br><span class="line">    @ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;false&quot;, matchIfMissing = false)</span><br><span class="line">    public static class JdkDynamicAutoProxyConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    //创建AnnotationAwareAspectJAutoProxyCreator，采用Cglib动态代理</span><br><span class="line">    @EnableAspectJAutoProxy(proxyTargetClass = true)</span><br><span class="line">    //配置文件中存在&quot;spring.aop.proxy-target-class=true&quot;才能解析此配置类</span><br><span class="line">    @ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span><br><span class="line">    public static class CglibAutoProxyConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-ConditionalOnClass注解"><a href="#2、-ConditionalOnClass注解" class="headerlink" title="2、@ConditionalOnClass注解"></a>2、@ConditionalOnClass注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">//条件注解</span><br><span class="line">@Conditional(OnClassCondition.class)</span><br><span class="line">public @interface ConditionalOnClass &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The classes that must be present. Since this annotation is parsed by loading class</span><br><span class="line">     * bytecode, it is safe to specify classes here that may ultimately not be on the</span><br><span class="line">     * classpath, only if this annotation is directly on the affected component and</span><br><span class="line">     * &lt;b&gt;not&lt;/b&gt; if this annotation is used as a composed, meta-annotation. In order to</span><br><span class="line">     * use this annotation as a meta-annotation, only use the &#123;@link #name&#125; attribute.</span><br><span class="line">     * @return the classes that must be present</span><br><span class="line">     */</span><br><span class="line">    Class&lt;?&gt;[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The classes names that must be present.</span><br><span class="line">     * @return the class names that must be present.</span><br><span class="line">     */</span><br><span class="line">    String[] name() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、SpringBootCondition的matches方法"><a href="#3、SpringBootCondition的matches方法" class="headerlink" title="3、SpringBootCondition的matches方法"></a>3、SpringBootCondition的matches方法</h4><p>OnClassCondition的父类，返回true则表示满足条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final boolean matches(ConditionContext context,</span><br><span class="line">        AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line">    String classOrMethodName = getClassOrMethodName(metadata);</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取条件是否满足</span><br><span class="line">        ConditionOutcome outcome = getMatchOutcome(context, metadata);</span><br><span class="line">        logOutcome(classOrMethodName, outcome);</span><br><span class="line">        recordEvaluation(context, classOrMethodName, outcome);</span><br><span class="line">        return outcome.isMatch();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (NoClassDefFoundError ex) &#123;</span><br><span class="line">        throw new IllegalStateException(</span><br><span class="line">                &quot;Could not evaluate condition on &quot; + classOrMethodName + &quot; due to &quot;</span><br><span class="line">                        + ex.getMessage() + &quot; not &quot;</span><br><span class="line">                        + &quot;found. Make sure your own configuration does not rely on &quot;</span><br><span class="line">                        + &quot;that class. This can also happen if you are &quot;</span><br><span class="line">                        + &quot;@ComponentScanning a springframework package (e.g. if you &quot;</span><br><span class="line">                        + &quot;put a @ComponentScan in the default package by mistake)&quot;,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (RuntimeException ex) &#123;</span><br><span class="line">        throw new IllegalStateException(</span><br><span class="line">                &quot;Error processing condition on &quot; + getName(metadata), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、OnClassCondition的getMatchOutcome方法"><a href="#4、OnClassCondition的getMatchOutcome方法" class="headerlink" title="4、OnClassCondition的getMatchOutcome方法"></a>4、OnClassCondition的getMatchOutcome方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ConditionOutcome getMatchOutcome(ConditionContext context,</span><br><span class="line">        AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line">    ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">    ConditionMessage matchMessage = ConditionMessage.empty();</span><br><span class="line">    //获取需要存在的类</span><br><span class="line">    List&lt;String&gt; onClasses = getCandidates(metadata, ConditionalOnClass.class);</span><br><span class="line">    if (onClasses != null) &#123;</span><br><span class="line">        //获取需要存在但不存在的类</span><br><span class="line">        List&lt;String&gt; missing = getMatches(onClasses, MatchType.MISSING, classLoader);</span><br><span class="line">        if (!missing.isEmpty()) &#123;</span><br><span class="line">            //条件不满足</span><br><span class="line">            return ConditionOutcome</span><br><span class="line">                    .noMatch(ConditionMessage.forCondition(ConditionalOnClass.class)</span><br><span class="line">                            .didNotFind(&quot;required class&quot;, &quot;required classes&quot;)</span><br><span class="line">                            .items(Style.QUOTE, missing));</span><br><span class="line">        &#125;</span><br><span class="line">        matchMessage = matchMessage.andCondition(ConditionalOnClass.class)</span><br><span class="line">                .found(&quot;required class&quot;, &quot;required classes&quot;).items(Style.QUOTE,</span><br><span class="line">                        getMatches(onClasses, MatchType.PRESENT, classLoader));</span><br><span class="line">    &#125;</span><br><span class="line">    //获取需要不存在的类</span><br><span class="line">    List&lt;String&gt; onMissingClasses = getCandidates(metadata,</span><br><span class="line">            ConditionalOnMissingClass.class);</span><br><span class="line">    if (onMissingClasses != null) &#123;</span><br><span class="line">        List&lt;String&gt; present = getMatches(onMissingClasses, MatchType.PRESENT,</span><br><span class="line">                classLoader);</span><br><span class="line">        if (!present.isEmpty()) &#123;</span><br><span class="line">            return ConditionOutcome.noMatch(</span><br><span class="line">                    ConditionMessage.forCondition(ConditionalOnMissingClass.class)</span><br><span class="line">                            .found(&quot;unwanted class&quot;, &quot;unwanted classes&quot;)</span><br><span class="line">                            .items(Style.QUOTE, present));</span><br><span class="line">        &#125;</span><br><span class="line">        matchMessage = matchMessage.andCondition(ConditionalOnMissingClass.class)</span><br><span class="line">                .didNotFind(&quot;unwanted class&quot;, &quot;unwanted classes&quot;).items(Style.QUOTE,</span><br><span class="line">                        getMatches(onMissingClasses, MatchType.MISSING, classLoader));</span><br><span class="line">    &#125;</span><br><span class="line">    //满足条件</span><br><span class="line">    return ConditionOutcome.match(matchMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（四、1）-EnableAspectJAutoProxy注解"><a href="#5、接（四、1）-EnableAspectJAutoProxy注解" class="headerlink" title="5、接（四、1）@EnableAspectJAutoProxy注解"></a>5、接（四、1）@EnableAspectJAutoProxy注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Import(AspectJAutoProxyRegistrar.class)</span><br><span class="line">public @interface EnableAspectJAutoProxy &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span><br><span class="line">     * to standard Java interface-based proxies. The default is &#123;@code false&#125;.</span><br><span class="line">     */</span><br><span class="line">    boolean proxyTargetClass() default false;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Indicate that the proxy should be exposed by the AOP framework as a &#123;@code ThreadLocal&#125;</span><br><span class="line">     * for retrieval via the &#123;@link org.springframework.aop.framework.AopContext&#125; class.</span><br><span class="line">     * Off by default, i.e. no guarantees that &#123;@code AopContext&#125; access will work.</span><br><span class="line">     * @since 4.3.1</span><br><span class="line">     */</span><br><span class="line">    boolean exposeProxy() default false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AspectJAutoProxyRegistrar的registerBeanDefinitions方法"><a href="#6、AspectJAutoProxyRegistrar的registerBeanDefinitions方法" class="headerlink" title="6、AspectJAutoProxyRegistrar的registerBeanDefinitions方法"></a>6、AspectJAutoProxyRegistrar的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(</span><br><span class="line">        AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    //注册AnnotationAwareAspectJAutoProxyCreator</span><br><span class="line">    AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">    //获取EnableAspectJAutoProxy注解的值</span><br><span class="line">    AnnotationAttributes enableAspectJAutoProxy =</span><br><span class="line">            AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);</span><br><span class="line">    //设置proxyTargetClass和exposeProxy属性</span><br><span class="line">    if (enableAspectJAutoProxy != null) &#123;</span><br><span class="line">        if (enableAspectJAutoProxy.getBoolean(&quot;proxyTargetClass&quot;)) &#123;</span><br><span class="line">            AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">        &#125;</span><br><span class="line">        if (enableAspectJAutoProxy.getBoolean(&quot;exposeProxy&quot;)) &#123;</span><br><span class="line">            AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、数据源自动配置类"><a href="#五、数据源自动配置类" class="headerlink" title="五、数据源自动配置类"></a>五、数据源自动配置类</h3><p>1、DataSourceAutoConfiguration自动配置类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">//条件注解，须存在DataSource、EmbeddedDatabaseType类,才解析该配置类</span><br><span class="line">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span><br><span class="line">//自动配置数据源属性</span><br><span class="line">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><span class="line">//注入配置类</span><br><span class="line">//DataSourcePoolMetadataProvidersConfiguration创建DataSourcePoolMetadata，如TomcatDataSourcePoolMetadata</span><br><span class="line">//DataSourceInitializationConfiguration注册DataSourceInitializerPostProcessor处理器</span><br><span class="line">@Import(&#123; DataSourcePoolMetadataProvidersConfiguration.class,</span><br><span class="line">        DataSourceInitializationConfiguration.class &#125;)</span><br><span class="line">public class DataSourceAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    //条件注解，须存在内置数据库连接EmbeddedDatabaseConnection类,才解析该配置类</span><br><span class="line">    @Conditional(EmbeddedDatabaseCondition.class)</span><br><span class="line">    //条件注解，不存在DataSource、XADataSource对象,才解析该配置类</span><br><span class="line">    @ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span><br><span class="line">    //注入配置类，该配置类创建内置数据源EmbeddedDatabase</span><br><span class="line">    @Import(EmbeddedDataSourceConfiguration.class)</span><br><span class="line">    protected static class EmbeddedDatabaseConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    //条件注解，须存在&quot;com.zaxxer.hikari.HikariDataSource&quot;或</span><br><span class="line">    //&quot;org.apache.tomcat.jdbc.pool.DataSource&quot;或</span><br><span class="line">    //&quot;org.apache.commons.dbcp2.BasicDataSource&quot;类,才解析该配置类</span><br><span class="line">    @Conditional(PooledDataSourceCondition.class)</span><br><span class="line">    //条件注解，不存在DataSource、XADataSource对象,才解析该配置类</span><br><span class="line">    @ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span><br><span class="line">    //注入配置类</span><br><span class="line">    //如DataSourceConfiguration.Tomcat.class，创建org.apache.tomcat.jdbc.pool.DataSource数据源</span><br><span class="line">    @Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span><br><span class="line">            DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span><br><span class="line">            DataSourceJmxConfiguration.class &#125;)</span><br><span class="line">    protected static class PooledDataSourceConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    。。。</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><h4 id="2、-EnableConfigurationProperties注解"><a href="#2、-EnableConfigurationProperties注解" class="headerlink" title="2、@EnableConfigurationProperties注解"></a>2、@EnableConfigurationProperties注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">//注入ConfigurationPropertiesBeanRegistrar、ConfigurationPropertiesBindingPostProcessorRegistrar</span><br><span class="line">//ConfigurationPropertiesBeanRegistrar注册DataSourceProperties的bean</span><br><span class="line">//ConfigurationPropertiesBindingPostProcessorRegistrar注册ConfigurationPropertiesBindingPostProcessor属性绑定处理器</span><br><span class="line">@Import(EnableConfigurationPropertiesImportSelector.class)</span><br><span class="line">public @interface EnableConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Convenient way to quickly register &#123;@link ConfigurationProperties&#125; annotated beans</span><br><span class="line">     * with Spring. Standard Spring Beans will also be scanned regardless of this value.</span><br><span class="line">     * @return &#123;@link ConfigurationProperties&#125; annotated beans to register</span><br><span class="line">     */</span><br><span class="line">    Class&lt;?&gt;[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ConfigurationPropertiesBindingPostProcessor的postProcessBeforeInitialization方法"><a href="#3、ConfigurationPropertiesBindingPostProcessor的postProcessBeforeInitialization方法" class="headerlink" title="3、ConfigurationPropertiesBindingPostProcessor的postProcessBeforeInitialization方法"></a>3、ConfigurationPropertiesBindingPostProcessor的postProcessBeforeInitialization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessBeforeInitialization(Object bean, String beanName)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    //获取bean的ConfigurationProperties注解</span><br><span class="line">    ConfigurationProperties annotation = getAnnotation(bean, beanName,</span><br><span class="line">            ConfigurationProperties.class);</span><br><span class="line">    //存在该注解</span><br><span class="line">    if (annotation != null) &#123;</span><br><span class="line">        //绑定属性</span><br><span class="line">        bind(bean, beanName, annotation);</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、ConfigurationPropertiesBindingPostProcessor的bind方法"><a href="#4、ConfigurationPropertiesBindingPostProcessor的bind方法" class="headerlink" title="4、ConfigurationPropertiesBindingPostProcessor的bind方法"></a>4、ConfigurationPropertiesBindingPostProcessor的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private void bind(Object bean, String beanName, ConfigurationProperties annotation) &#123;</span><br><span class="line">    //获取bean的类型</span><br><span class="line">    ResolvableType type = getBeanType(bean, beanName);</span><br><span class="line">    //获取类的@Validated</span><br><span class="line">    Validated validated = getAnnotation(bean, beanName, Validated.class);</span><br><span class="line">    Annotation[] annotations = (validated != null</span><br><span class="line">            ? new Annotation[] &#123; annotation, validated &#125;</span><br><span class="line">            : new Annotation[] &#123; annotation &#125;);</span><br><span class="line">    //绑定属性的对象</span><br><span class="line">    Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(bean)</span><br><span class="line">            .withAnnotations(annotations);</span><br><span class="line">    try &#123;</span><br><span class="line">        //绑定属性</span><br><span class="line">        this.configurationPropertiesBinder.bind(target);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex) &#123;</span><br><span class="line">        throw new ConfigurationPropertiesBindException(beanName, bean, annotation,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（五、1）DataSourceProperties连接池属性"><a href="#5、接（五、1）DataSourceProperties连接池属性" class="headerlink" title="5、接（五、1）DataSourceProperties连接池属性"></a>5、接（五、1）DataSourceProperties连接池属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//属性前缀</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br><span class="line">public class DataSourceProperties implements BeanClassLoaderAware, InitializingBean &#123;</span><br><span class="line">    ...</span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">        //获取内置数据库连接</span><br><span class="line">        this.embeddedDatabaseConnection = EmbeddedDatabaseConnection</span><br><span class="line">            .get(this.classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //创建数据库连接池</span><br><span class="line">    public DataSourceBuilder&lt;?&gt; initializeDataSourceBuilder() &#123;</span><br><span class="line">        return DataSourceBuilder.create(getClassLoader()).type(getType())</span><br><span class="line">                .driverClassName(determineDriverClassName()).url(determineUrl())</span><br><span class="line">                .username(determineUsername()).password(determinePassword());</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h4 id="6、接（五、1）DataSourceConfiguration-Tomcat-class"><a href="#6、接（五、1）DataSourceConfiguration-Tomcat-class" class="headerlink" title="6、接（五、1）DataSourceConfiguration.Tomcat.class"></a>6、接（五、1）DataSourceConfiguration.Tomcat.class</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//条件注解</span><br><span class="line">@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)</span><br><span class="line">//条件注解</span><br><span class="line">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;, havingValue = &quot;org.apache.tomcat.jdbc.pool.DataSource&quot;, matchIfMissing = true)</span><br><span class="line">static class Tomcat extends DataSourceConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConfigurationProperties(prefix = &quot;spring.datasource.tomcat&quot;)</span><br><span class="line">    //创建数据源</span><br><span class="line">    public org.apache.tomcat.jdbc.pool.DataSource dataSource(</span><br><span class="line">            DataSourceProperties properties) &#123;</span><br><span class="line">        //创建连接池</span><br><span class="line">        org.apache.tomcat.jdbc.pool.DataSource dataSource = createDataSource(</span><br><span class="line">                properties, org.apache.tomcat.jdbc.pool.DataSource.class);</span><br><span class="line">        //获取数据库驱动</span><br><span class="line">        DatabaseDriver databaseDriver = DatabaseDriver</span><br><span class="line">                .fromJdbcUrl(properties.determineUrl());</span><br><span class="line">        String validationQuery = databaseDriver.getValidationQuery();</span><br><span class="line">        if (validationQuery != null) &#123;</span><br><span class="line">            dataSource.setTestOnBorrow(true);</span><br><span class="line">            dataSource.setValidationQuery(validationQuery);</span><br><span class="line">        &#125;</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、事务管理器自动配置类"><a href="#六、事务管理器自动配置类" class="headerlink" title="六、事务管理器自动配置类"></a>六、事务管理器自动配置类</h3><h4 id="1、DataSourceTransactionManagerAutoConfiguration自动配置类"><a href="#1、DataSourceTransactionManagerAutoConfiguration自动配置类" class="headerlink" title="1、DataSourceTransactionManagerAutoConfiguration自动配置类"></a>1、DataSourceTransactionManagerAutoConfiguration自动配置类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">//条件注解</span><br><span class="line">@ConditionalOnClass(&#123; JdbcTemplate.class, PlatformTransactionManager.class &#125;)</span><br><span class="line">//自动配置优先级</span><br><span class="line">@AutoConfigureOrder(Ordered.LOWEST_PRECEDENCE)</span><br><span class="line">//自动配置数据源属性</span><br><span class="line">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><span class="line">public class DataSourceTransactionManagerAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    //条件注解，只有一个数据源</span><br><span class="line">    @ConditionalOnSingleCandidate(DataSource.class)</span><br><span class="line">    static class DataSourceTransactionManagerConfiguration &#123;</span><br><span class="line"></span><br><span class="line">        private final DataSource dataSource;</span><br><span class="line"></span><br><span class="line">        private final TransactionManagerCustomizers transactionManagerCustomizers;</span><br><span class="line"></span><br><span class="line">        DataSourceTransactionManagerConfiguration(DataSource dataSource,</span><br><span class="line">                ObjectProvider&lt;TransactionManagerCustomizers&gt; transactionManagerCustomizers) &#123;</span><br><span class="line">            this.dataSource = dataSource;</span><br><span class="line">            this.transactionManagerCustomizers = transactionManagerCustomizers</span><br><span class="line">                    .getIfAvailable();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        //条件注解</span><br><span class="line">        @ConditionalOnMissingBean(PlatformTransactionManager.class)</span><br><span class="line">        //创建数据源事务管理器</span><br><span class="line">        public DataSourceTransactionManager transactionManager(</span><br><span class="line">                DataSourceProperties properties) &#123;</span><br><span class="line">            DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(</span><br><span class="line">                    this.dataSource);</span><br><span class="line">            if (this.transactionManagerCustomizers != null) &#123;</span><br><span class="line">                this.transactionManagerCustomizers.customize(transactionManager);</span><br><span class="line">            &#125;</span><br><span class="line">            return transactionManager;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、事务自动配置类"><a href="#七、事务自动配置类" class="headerlink" title="七、事务自动配置类"></a>七、事务自动配置类</h3><h4 id="1、TransactionAutoConfiguration自动配置类"><a href="#1、TransactionAutoConfiguration自动配置类" class="headerlink" title="1、TransactionAutoConfiguration自动配置类"></a>1、TransactionAutoConfiguration自动配置类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(PlatformTransactionManager.class)</span><br><span class="line">//检查解析配置类顺序</span><br><span class="line">@AutoConfigureAfter(&#123; JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class,</span><br><span class="line">        DataSourceTransactionManagerAutoConfiguration.class,</span><br><span class="line">        Neo4jDataAutoConfiguration.class &#125;)</span><br><span class="line">//自动配置事务属性</span><br><span class="line">@EnableConfigurationProperties(TransactionProperties.class)</span><br><span class="line">public class TransactionAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    //创建初始化器</span><br><span class="line">    public TransactionManagerCustomizers platformTransactionManagerCustomizers(</span><br><span class="line">            ObjectProvider&lt;List&lt;PlatformTransactionManagerCustomizer&lt;?&gt;&gt;&gt; customizers) &#123;</span><br><span class="line">        return new TransactionManagerCustomizers(customizers.getIfAvailable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    @ConditionalOnSingleCandidate(PlatformTransactionManager.class)</span><br><span class="line">    public static class TransactionTemplateConfiguration &#123;</span><br><span class="line"></span><br><span class="line">        private final PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">        public TransactionTemplateConfiguration(</span><br><span class="line">                PlatformTransactionManager transactionManager) &#123;</span><br><span class="line">            this.transactionManager = transactionManager;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        @ConditionalOnMissingBean</span><br><span class="line">        //编程式事务</span><br><span class="line">        public TransactionTemplate transactionTemplate() &#123;</span><br><span class="line">            return new TransactionTemplate(this.transactionManager);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    @ConditionalOnBean(PlatformTransactionManager.class)</span><br><span class="line">    //不存在该bean，说明未解析事务配置类</span><br><span class="line">    @ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)</span><br><span class="line">    public static class EnableTransactionManagementConfiguration &#123;</span><br><span class="line"></span><br><span class="line">        @Configuration</span><br><span class="line">        @EnableTransactionManagement(proxyTargetClass = false)</span><br><span class="line">        @ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;false&quot;, matchIfMissing = false)</span><br><span class="line">        //Jdk动态代理的方式实现事务</span><br><span class="line">        public static class JdkDynamicAutoProxyConfiguration &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Configuration</span><br><span class="line">        @EnableTransactionManagement(proxyTargetClass = true)</span><br><span class="line">        @ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span><br><span class="line">        //Cglib动态代理方式实现事务</span><br><span class="line">        public static class CglibAutoProxyConfiguration &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-EnableTransactionManagement注解"><a href="#2、-EnableTransactionManagement注解" class="headerlink" title="2、@EnableTransactionManagement注解"></a>2、@EnableTransactionManagement注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Import(TransactionManagementConfigurationSelector.class)</span><br><span class="line">public @interface EnableTransactionManagement &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、TransactionManagementConfigurationSelector的selectImports方法"><a href="#3、TransactionManagementConfigurationSelector的selectImports方法" class="headerlink" title="3、TransactionManagementConfigurationSelector的selectImports方法"></a>3、TransactionManagementConfigurationSelector的selectImports方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">    switch (adviceMode) &#123;</span><br><span class="line">        //动态代理方式实现事务</span><br><span class="line">        case PROXY:</span><br><span class="line">            return new String[] &#123;AutoProxyRegistrar.class.getName(), ProxyTransactionManagementConfiguration.class.getName()&#125;;</span><br><span class="line">        //ASPECTJ方式实现事务</span><br><span class="line">        case ASPECTJ:</span><br><span class="line">            return new String[] &#123;TransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;;</span><br><span class="line">        default:</span><br><span class="line">            return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AutoProxyRegistrar的registerBeanDefinitions方法"><a href="#4、AutoProxyRegistrar的registerBeanDefinitions方法" class="headerlink" title="4、AutoProxyRegistrar的registerBeanDefinitions方法"></a>4、AutoProxyRegistrar的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    boolean candidateFound = false;</span><br><span class="line">    Set&lt;String&gt; annoTypes = importingClassMetadata.getAnnotationTypes();</span><br><span class="line">    for (String annoType : annoTypes) &#123;</span><br><span class="line">        //获取注解信息</span><br><span class="line">        AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);</span><br><span class="line">        if (candidate == null) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        Object mode = candidate.get(&quot;mode&quot;);</span><br><span class="line">        Object proxyTargetClass = candidate.get(&quot;proxyTargetClass&quot;);</span><br><span class="line">        if (mode != null &amp;&amp; proxyTargetClass != null &amp;&amp; AdviceMode.class == mode.getClass() &amp;&amp;</span><br><span class="line">                Boolean.class == proxyTargetClass.getClass()) &#123;</span><br><span class="line">            candidateFound = true;</span><br><span class="line">            //AOP代理方式实现事务</span><br><span class="line">            if (mode == AdviceMode.PROXY) &#123;</span><br><span class="line">                //注册InfrastructureAdvisorAutoProxyCreator</span><br><span class="line">                AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">                if ((Boolean) proxyTargetClass) &#123;</span><br><span class="line">                    //设置&quot;proxyTargetClass&quot;属性</span><br><span class="line">                    AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!candidateFound) &#123;</span><br><span class="line">        String name = getClass().getSimpleName();</span><br><span class="line">        logger.warn(String.format(&quot;%s was imported but no annotations were found &quot; +</span><br><span class="line">                &quot;having both &apos;mode&apos; and &apos;proxyTargetClass&apos; attributes of type &quot; +</span><br><span class="line">                &quot;AdviceMode and boolean respectively. This means that auto proxy &quot; +</span><br><span class="line">                &quot;creator registration and configuration may not have occurred as &quot; +</span><br><span class="line">                &quot;intended, and components may not be proxied as expected. Check to &quot; +</span><br><span class="line">                &quot;ensure that %s has been @Import&apos;ed on the same class where these &quot; +</span><br><span class="line">                &quot;annotations are declared; otherwise remove the import of %s &quot; +</span><br><span class="line">                &quot;altogether.&quot;, name, name, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（七、3）ProxyTransactionManagementConfiguration配置类"><a href="#5、接（七、3）ProxyTransactionManagementConfiguration配置类" class="headerlink" title="5、接（七、3）ProxyTransactionManagementConfiguration配置类"></a>5、接（七、3）ProxyTransactionManagementConfiguration配置类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)</span><br><span class="line">    @Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">    //注册通知器</span><br><span class="line">    public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor() &#123;</span><br><span class="line">        BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor();</span><br><span class="line">        advisor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class="line">        advisor.setAdvice(transactionInterceptor());</span><br><span class="line">        if (this.enableTx != null) &#123;</span><br><span class="line">            advisor.setOrder(this.enableTx.&lt;Integer&gt;getNumber(&quot;order&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        return advisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">    //注册TransactionAttributeSource</span><br><span class="line">    public TransactionAttributeSource transactionAttributeSource() &#123;</span><br><span class="line">        return new AnnotationTransactionAttributeSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">    //注册TransactionInterceptor事务增强器</span><br><span class="line">    public TransactionInterceptor transactionInterceptor() &#123;</span><br><span class="line">        TransactionInterceptor interceptor = new TransactionInterceptor();</span><br><span class="line">        interceptor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class="line">        if (this.txManager != null) &#123;</span><br><span class="line">            interceptor.setTransactionManager(this.txManager);</span><br><span class="line">        &#125;</span><br><span class="line">        return interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、Mybatis自动配置类"><a href="#八、Mybatis自动配置类" class="headerlink" title="八、Mybatis自动配置类"></a>八、Mybatis自动配置类</h3><h4 id="1、MybatisAutoConfiguration自动配置类"><a href="#1、MybatisAutoConfiguration自动配置类" class="headerlink" title="1、MybatisAutoConfiguration自动配置类"></a>1、MybatisAutoConfiguration自动配置类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@org.springframework.context.annotation.Configuration</span><br><span class="line">@ConditionalOnClass(&#123; SqlSessionFactory.class, SqlSessionFactoryBean.class &#125;)</span><br><span class="line">@ConditionalOnBean(DataSource.class)</span><br><span class="line">//自动处理属性注解</span><br><span class="line">@EnableConfigurationProperties(MybatisProperties.class)</span><br><span class="line">@AutoConfigureAfter(DataSourceAutoConfiguration.class)</span><br><span class="line">public class MybatisAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    //创建SqlSessionFactory</span><br><span class="line">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class="line">        SqlSessionFactoryBean factory = new SqlSessionFactoryBean();</span><br><span class="line">        factory.setDataSource(dataSource);</span><br><span class="line">        factory.setVfs(SpringBootVFS.class);</span><br><span class="line">        //设置配置文件地址</span><br><span class="line">        if (StringUtils.hasText(this.properties.getConfigLocation())) &#123;</span><br><span class="line">            factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));</span><br><span class="line">        &#125;</span><br><span class="line">        Configuration configuration = this.properties.getConfiguration();</span><br><span class="line">        if (configuration == null &amp;&amp; !StringUtils.hasText(this.properties.getConfigLocation())) &#123;</span><br><span class="line">            //创建configuration</span><br><span class="line">            configuration = new Configuration();</span><br><span class="line">        &#125;</span><br><span class="line">        if (configuration != null &amp;&amp; !CollectionUtils.isEmpty(this.configurationCustomizers)) &#123;</span><br><span class="line">            for (ConfigurationCustomizer customizer : this.configurationCustomizers) &#123;</span><br><span class="line">                customizer.customize(configuration);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //设置configuration</span><br><span class="line">        factory.setConfiguration(configuration);</span><br><span class="line">        if (this.properties.getConfigurationProperties() != null) &#123;</span><br><span class="line">            factory.setConfigurationProperties(this.properties.getConfigurationProperties());</span><br><span class="line">        &#125;</span><br><span class="line">        //设置拦截器</span><br><span class="line">        if (!ObjectUtils.isEmpty(this.interceptors)) &#123;</span><br><span class="line">            factory.setPlugins(this.interceptors);</span><br><span class="line">        &#125;</span><br><span class="line">        if (this.databaseIdProvider != null) &#123;</span><br><span class="line">            factory.setDatabaseIdProvider(this.databaseIdProvider);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置注册别名的包</span><br><span class="line">        if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) &#123;</span><br><span class="line">            factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) &#123;</span><br><span class="line">            factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());</span><br><span class="line">        &#125;</span><br><span class="line">        //mapper文件地址</span><br><span class="line">        if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) &#123;</span><br><span class="line">            factory.setMapperLocations(this.properties.resolveMapperLocations());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    //创建SqlSessionTemplate</span><br><span class="line">    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">        ExecutorType executorType = this.properties.getExecutorType();</span><br><span class="line">        if (executorType != null) &#123;</span><br><span class="line">            return new SqlSessionTemplate(sqlSessionFactory, executorType);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link org.mybatis.spring.annotation.MapperScan&#125; ultimately ends up</span><br><span class="line">     * creating instances of &#123;@link MapperFactoryBean&#125;. If</span><br><span class="line">     * &#123;@link org.mybatis.spring.annotation.MapperScan&#125; is used then this</span><br><span class="line">     * auto-configuration is not needed. If it is _not_ used, however, then this</span><br><span class="line">     * will bring in a bean registrar and automatically register components based</span><br><span class="line">     * on the same component-scanning path as Spring Boot itself.</span><br><span class="line">     */</span><br><span class="line">    @org.springframework.context.annotation.Configuration</span><br><span class="line">    //执行AutoConfiguredMapperScannerRegistrar的registerBeanDefinitions</span><br><span class="line">    @Import(&#123; AutoConfiguredMapperScannerRegistrar.class &#125;)</span><br><span class="line">    @ConditionalOnMissingBean(MapperFactoryBean.class)</span><br><span class="line">    public static class MapperScannerRegistrarNotFoundConfiguration &#123;</span><br><span class="line"></span><br><span class="line">        @PostConstruct</span><br><span class="line">        public void afterPropertiesSet() &#123;</span><br><span class="line">            logger.debug(&quot;No &#123;&#125; found.&quot;, MapperFactoryBean.class.getName());</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AutoConfiguredMapperScannerRegistrar的registerBeanDefinitions方法"><a href="#2、AutoConfiguredMapperScannerRegistrar的registerBeanDefinitions方法" class="headerlink" title="2、AutoConfiguredMapperScannerRegistrar的registerBeanDefinitions方法"></a>2、AutoConfiguredMapperScannerRegistrar的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line"></span><br><span class="line">    logger.debug(&quot;Searching for mappers annotated with @Mapper&quot;);</span><br><span class="line">    //扫描器</span><br><span class="line">    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (this.resourceLoader != null) &#123;</span><br><span class="line">            scanner.setResourceLoader(this.resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        //从IOC容器中，获取包路径</span><br><span class="line">        List&lt;String&gt; packages = AutoConfigurationPackages.get(this.beanFactory);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            for (String pkg : packages) &#123;</span><br><span class="line">                logger.debug(&quot;Using auto-configuration base package &apos;&#123;&#125;&apos;&quot;, pkg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //设置扫描的注解</span><br><span class="line">        scanner.setAnnotationClass(Mapper.class);</span><br><span class="line">        //设置过滤器</span><br><span class="line">        scanner.registerFilters();</span><br><span class="line">        //扫描包</span><br><span class="line">        scanner.doScan(StringUtils.toStringArray(packages));</span><br><span class="line">    &#125; catch (IllegalStateException ex) &#123;</span><br><span class="line">        logger.debug(&quot;Could not determine auto-configuration package, automatic mapper scanning disabled.&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot源码启动过程</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/SpringBoot%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/SpringBoot源码启动过程/</id>
    <published>2020-01-16T13:43:36.356Z</published>
    <updated>2018-07-13T12:23:52.248Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、springboot启动过程"><a href="#一、springboot启动过程" class="headerlink" title="一、springboot启动过程"></a>一、springboot启动过程</h3><h4 id="1、SpringApplication的run方法"><a href="#1、SpringApplication的run方法" class="headerlink" title="1、SpringApplication的run方法"></a>1、SpringApplication的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static ConfigurableApplicationContext run(Class&lt;?&gt; primarySource,</span><br><span class="line">        String... args) &#123;</span><br><span class="line">    return run(new Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static ConfigurableApplicationContext run(Class&lt;?&gt;[] primarySources,</span><br><span class="line">        String[] args) &#123;</span><br><span class="line">    return new SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化SpringApplication"><a href="#2、实例化SpringApplication" class="headerlink" title="2、实例化SpringApplication"></a>2、实例化SpringApplication</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SpringApplication(Class&lt;?&gt;... primarySources) &#123;</span><br><span class="line">    this(null, primarySources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) &#123;</span><br><span class="line">    this.resourceLoader = resourceLoader;</span><br><span class="line">    Assert.notNull(primarySources, &quot;PrimarySources must not be null&quot;);</span><br><span class="line">    //Application类</span><br><span class="line">    this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    //判断应用类型是Standard还是Web</span><br><span class="line">    this.webApplicationType = deduceWebApplicationType();</span><br><span class="line">    //设置初始化器Initializer,从META-INF/spring.factories中获取配置的ApplicationContextInitializer类</span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">            ApplicationContextInitializer.class));</span><br><span class="line">    //设置监听器Listener,从META-INF/spring.factories中获取配置的ApplicationListener类</span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    //获取应用入口类</span><br><span class="line">    this.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认META-INF/spring.factories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Application Context Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br></pre></td></tr></table></figure><h4 id="3、SpringApplication的deduceWebApplicationType方法"><a href="#3、SpringApplication的deduceWebApplicationType方法" class="headerlink" title="3、SpringApplication的deduceWebApplicationType方法"></a>3、SpringApplication的deduceWebApplicationType方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private WebApplicationType deduceWebApplicationType() &#123;</span><br><span class="line">    //有org.springframework.web.reactive.DispatcherHandler类</span><br><span class="line">    //且无org.springframework.web.servlet.DispatcherServlet类，则认为是reactive web application</span><br><span class="line">    if (ClassUtils.isPresent(REACTIVE_WEB_ENVIRONMENT_CLASS, null)</span><br><span class="line">            &amp;&amp; !ClassUtils.isPresent(MVC_WEB_ENVIRONMENT_CLASS, null)) &#123;</span><br><span class="line">        return WebApplicationType.REACTIVE;</span><br><span class="line">    &#125;</span><br><span class="line">    //没有javax.servlet.Servlet和org.springframework.web.context.ConfigurableWebApplicationContext类</span><br><span class="line">    //则认为不是web项目   </span><br><span class="line">    for (String className : WEB_ENVIRONMENT_CLASSES) &#123;</span><br><span class="line">        if (!ClassUtils.isPresent(className, null)) &#123;</span><br><span class="line">            return WebApplicationType.NONE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //servlet-based web application</span><br><span class="line">    return WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（一、2）SpringApplication的deduceWebApplicationType方法"><a href="#4、接（一、2）SpringApplication的deduceWebApplicationType方法" class="headerlink" title="4、接（一、2）SpringApplication的deduceWebApplicationType方法"></a>4、接（一、2）SpringApplication的deduceWebApplicationType方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setInitializers(</span><br><span class="line">        Collection&lt;? extends ApplicationContextInitializer&lt;?&gt;&gt; initializers) &#123;</span><br><span class="line">    this.initializers = new ArrayList&lt;&gt;();</span><br><span class="line">    this.initializers.addAll(initializers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、2）SpringApplication的getSpringFactoriesInstances方法"><a href="#5、接（一、2）SpringApplication的getSpringFactoriesInstances方法" class="headerlink" title="5、接（一、2）SpringApplication的getSpringFactoriesInstances方法"></a>5、接（一、2）SpringApplication的getSpringFactoriesInstances方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private &lt;T&gt; Collection&lt;T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type) &#123;</span><br><span class="line">    //从META-INF/spring.factories中获取配置的type类</span><br><span class="line">    return getSpringFactoriesInstances(type, new Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private &lt;T&gt; Collection&lt;T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type,</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes, Object... args) &#123;</span><br><span class="line">    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    // Use names and ensure unique to protect against duplicates</span><br><span class="line">    //加载并获取该类</span><br><span class="line">    Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;(</span><br><span class="line">            SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">    //实例化names的类</span><br><span class="line">    List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">            classLoader, args, names);</span><br><span class="line">    //排序</span><br><span class="line">    AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line">    return instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、2）SpringApplication的deduceMainApplicationClass方法"><a href="#6、接（一、2）SpringApplication的deduceMainApplicationClass方法" class="headerlink" title="6、接（一、2）SpringApplication的deduceMainApplicationClass方法"></a>6、接（一、2）SpringApplication的deduceMainApplicationClass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line">    //构造一个运行时异常，通过异常栈中方法名为main的栈帧来得到入口类的名字</span><br><span class="line">    try &#123;</span><br><span class="line">        StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();</span><br><span class="line">        for (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line">            if (&quot;main&quot;.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line">                return Class.forName(stackTraceElement.getClassName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        // Swallow and continue</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（一、1）SpringApplication的run方法"><a href="#7、接（一、1）SpringApplication的run方法" class="headerlink" title="7、接（一、1）SpringApplication的run方法"></a>7、接（一、1）SpringApplication的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">public ConfigurableApplicationContext run(String... args) &#123;</span><br><span class="line">    //计时工具</span><br><span class="line">    StopWatch stopWatch = new StopWatch();</span><br><span class="line">    //启动计时器，设置开始时间</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    //容器</span><br><span class="line">    ConfigurableApplicationContext context = null;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList&lt;&gt;();</span><br><span class="line">    //设置java.awt.headless系统属性为true - 没有图形化界面</span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    //获取SpringApplicationRunListeners</span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    // 广播开始启动事件</span><br><span class="line">    listeners.starting();</span><br><span class="line">    try &#123;</span><br><span class="line">        // 构造一个应用程序参数持有类</span><br><span class="line">        ApplicationArguments applicationArguments = new DefaultApplicationArguments(</span><br><span class="line">                args);</span><br><span class="line">        //根据SpringApplicationRunListeners以及参数来准备环境</span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">                applicationArguments);</span><br><span class="line">        //设置是否跳过搜索BeanInfo类，默认true</span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        //准备Banner打印器 - 就是启动Spring Boot的时候打印在console上的ASCII艺术字体</span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        //创建Spring容器</span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        //准备异常报告器</span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">                SpringBootExceptionReporter.class,</span><br><span class="line">                new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        //Spring容器上下文前置处理</span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">                printedBanner);</span><br><span class="line">        //Spring容器上下文刷新</span><br><span class="line">        refreshContext(context);</span><br><span class="line">        //Spring容器上下文后置处理,默认为空</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        //停止计时器,设置结束时机</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        if (this.logStartupInfo) &#123;</span><br><span class="line">            new StartupInfoLogger(this.mainApplicationClass)</span><br><span class="line">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        //广播启动完成事件</span><br><span class="line">        listeners.started(context);</span><br><span class="line">        // 调用Spring容器中的ApplicationRunner和CommandLineRunner接口的实现类</span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        throw new IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, null);</span><br><span class="line">        throw new IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    return context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常报告器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Error Reporters</span><br><span class="line">org.springframework.boot.SpringBootExceptionReporter=\</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzers</span><br></pre></td></tr></table></figure></p><h4 id="8、SpringApplication的getRunListeners方法"><a href="#8、SpringApplication的getRunListeners方法" class="headerlink" title="8、SpringApplication的getRunListeners方法"></a>8、SpringApplication的getRunListeners方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private SpringApplicationRunListeners getRunListeners(String[] args) &#123;</span><br><span class="line">    Class&lt;?&gt;[] types = new Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line">    //从META-INF/spring.factories中获取配置的SpringApplicationRunListener类,构造SpringApplicationRunListeners</span><br><span class="line">    return new SpringApplicationRunListeners(logger, getSpringFactoriesInstances(</span><br><span class="line">            SpringApplicationRunListener.class, types, this, args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br></pre></td></tr></table></figure><h4 id="9、实例化EventPublishingRunListener"><a href="#9、实例化EventPublishingRunListener" class="headerlink" title="9、实例化EventPublishingRunListener"></a>9、实例化EventPublishingRunListener</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public EventPublishingRunListener(SpringApplication application, String[] args) &#123;</span><br><span class="line">    this.application = application;</span><br><span class="line">    this.args = args;</span><br><span class="line">    //事件转发器</span><br><span class="line">    this.initialMulticaster = new SimpleApplicationEventMulticaster();</span><br><span class="line">    //添加监听器</span><br><span class="line">    for (ApplicationListener&lt;?&gt; listener : application.getListeners()) &#123;</span><br><span class="line">        this.initialMulticaster.addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、7）SpringApplication的getRunListeners方法"><a href="#10、接（一、7）SpringApplication的getRunListeners方法" class="headerlink" title="10、接（一、7）SpringApplication的getRunListeners方法"></a>10、接（一、7）SpringApplication的getRunListeners方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void starting() &#123;</span><br><span class="line">    for (SpringApplicationRunListener listener : this.listeners) &#123;</span><br><span class="line">        //默认只有EventPublishingRunListener监听器</span><br><span class="line">        listener.starting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、EventPublishingRunListener的starting方法"><a href="#11、EventPublishingRunListener的starting方法" class="headerlink" title="11、EventPublishingRunListener的starting方法"></a>11、EventPublishingRunListener的starting方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void starting() &#123;</span><br><span class="line">    //事件转发给相应的监听器</span><br><span class="line">    this.initialMulticaster.multicastEvent(</span><br><span class="line">            new ApplicationStartingEvent(this.application, this.args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（一、7）SpringApplication的prepareEnvironment方法"><a href="#12、接（一、7）SpringApplication的prepareEnvironment方法" class="headerlink" title="12、接（一、7）SpringApplication的prepareEnvironment方法"></a>12、接（一、7）SpringApplication的prepareEnvironment方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private ConfigurableEnvironment prepareEnvironment(</span><br><span class="line">        SpringApplicationRunListeners listeners,</span><br><span class="line">        ApplicationArguments applicationArguments) &#123;</span><br><span class="line">    // Create and configure the environment</span><br><span class="line">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    //设置环境</span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    //广播一个准备环境事件</span><br><span class="line">    listeners.environmentPrepared(environment);</span><br><span class="line">    //环境绑定到SpringApplication</span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    if (this.webApplicationType == WebApplicationType.NONE) &#123;</span><br><span class="line">        environment = new EnvironmentConverter(getClassLoader())</span><br><span class="line">                .convertToStandardEnvironmentIfNecessary(environment);</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    return environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、SpringApplication的getOrCreateEnvironment方法"><a href="#13、SpringApplication的getOrCreateEnvironment方法" class="headerlink" title="13、SpringApplication的getOrCreateEnvironment方法"></a>13、SpringApplication的getOrCreateEnvironment方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private ConfigurableEnvironment getOrCreateEnvironment() &#123;</span><br><span class="line">    if (this.environment != null) &#123;</span><br><span class="line">        return this.environment;</span><br><span class="line">    &#125;</span><br><span class="line">    //SERVLET的环境参数</span><br><span class="line">    if (this.webApplicationType == WebApplicationType.SERVLET) &#123;</span><br><span class="line">        return new StandardServletEnvironment();</span><br><span class="line">    &#125;</span><br><span class="line">    //标准环境参数</span><br><span class="line">    return new StandardEnvironment();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（一、7）SpringApplication的createApplicationContext方法"><a href="#14、接（一、7）SpringApplication的createApplicationContext方法" class="headerlink" title="14、接（一、7）SpringApplication的createApplicationContext方法"></a>14、接（一、7）SpringApplication的createApplicationContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">protected ConfigurableApplicationContext createApplicationContext() &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = this.applicationContextClass;</span><br><span class="line">    if (contextClass == null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            switch (this.webApplicationType) &#123;</span><br><span class="line">            //基于Servlet的IOC容器AnnotationConfigServletWebServerApplicationContext</span><br><span class="line">            case SERVLET:</span><br><span class="line">                contextClass = Class.forName(DEFAULT_WEB_CONTEXT_CLASS);</span><br><span class="line">                break;</span><br><span class="line">            //响应式的IOC容器AnnotationConfigReactiveWebServerApplicationContext</span><br><span class="line">            case REACTIVE:</span><br><span class="line">                contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                break;</span><br><span class="line">            //标准spring容器AnnotationConfigApplicationContext</span><br><span class="line">            default:</span><br><span class="line">                contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new IllegalStateException(</span><br><span class="line">                    &quot;Unable create a default ApplicationContext, &quot;</span><br><span class="line">                            + &quot;please specify an ApplicationContextClass&quot;,</span><br><span class="line">                    ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建容器对象</span><br><span class="line">    return (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（一、7）SpringApplication的prepareContext方法"><a href="#15、接（一、7）SpringApplication的prepareContext方法" class="headerlink" title="15、接（一、7）SpringApplication的prepareContext方法"></a>15、接（一、7）SpringApplication的prepareContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">private void prepareContext(ConfigurableApplicationContext context,</span><br><span class="line">        ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span><br><span class="line">        ApplicationArguments applicationArguments, Banner printedBanner) &#123;</span><br><span class="line">    //往容器中设置环境</span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    //配置Bean生成器以及资源加载器</span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    //应用初始化器</span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    //广播Spring Boot启动过程的contextPrepared事件</span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    //打印启动信息</span><br><span class="line">    if (this.logStartupInfo) &#123;</span><br><span class="line">        logStartupInfo(context.getParent() == null);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Add boot specific singleton beans</span><br><span class="line">    // 添加两个Spring Boot中的特殊单例Beans - springApplicationArguments以及springBootBanner</span><br><span class="line">    context.getBeanFactory().registerSingleton(&quot;springApplicationArguments&quot;,</span><br><span class="line">            applicationArguments);</span><br><span class="line">    if (printedBanner != null) &#123;</span><br><span class="line">        context.getBeanFactory().registerSingleton(&quot;springBootBanner&quot;, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Load the sources</span><br><span class="line">    // 加载sources 本例中为Application.class</span><br><span class="line">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">    Assert.notEmpty(sources, &quot;Sources must not be empty&quot;);</span><br><span class="line">    //加载sources中的类，Application.class被解析为AnnotatedGenericBeanDefinition注册到容器中</span><br><span class="line">    load(context, sources.toArray(new Object[0]));</span><br><span class="line">    //广播Spring Boot启动过程的contextLoaded事件</span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、SpringApplicationRunListeners的postProcessApplicationContext方法"><a href="#16、SpringApplicationRunListeners的postProcessApplicationContext方法" class="headerlink" title="16、SpringApplicationRunListeners的postProcessApplicationContext方法"></a>16、SpringApplicationRunListeners的postProcessApplicationContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">protected void postProcessApplicationContext(ConfigurableApplicationContext context) &#123;</span><br><span class="line">    //注册beanName生成器</span><br><span class="line">    if (this.beanNameGenerator != null) &#123;</span><br><span class="line">        context.getBeanFactory().registerSingleton(</span><br><span class="line">                AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,</span><br><span class="line">                this.beanNameGenerator);</span><br><span class="line">    &#125;</span><br><span class="line">    //将ApplicationContext中的资源加载器放入容器中</span><br><span class="line">    if (this.resourceLoader != null) &#123;</span><br><span class="line">        if (context instanceof GenericApplicationContext) &#123;</span><br><span class="line">            ((GenericApplicationContext) context)</span><br><span class="line">                    .setResourceLoader(this.resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        if (context instanceof DefaultResourceLoader) &#123;</span><br><span class="line">            ((DefaultResourceLoader) context)</span><br><span class="line">                    .setClassLoader(this.resourceLoader.getClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（一、7）SpringApplication的refreshContext方法"><a href="#17、接（一、7）SpringApplication的refreshContext方法" class="headerlink" title="17、接（一、7）SpringApplication的refreshContext方法"></a>17、接（一、7）SpringApplication的refreshContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void refreshContext(ConfigurableApplicationContext context) &#123;</span><br><span class="line">    //刷新容器</span><br><span class="line">    refresh(context);</span><br><span class="line">    if (this.registerShutdownHook) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 注册一个关闭容器时的钩子函数</span><br><span class="line">            context.registerShutdownHook();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (AccessControlException ex) &#123;</span><br><span class="line">            // Not allowed in some environments.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（一、7）SpringApplication的callRunners方法"><a href="#18、接（一、7）SpringApplication的callRunners方法" class="headerlink" title="18、接（一、7）SpringApplication的callRunners方法"></a>18、接（一、7）SpringApplication的callRunners方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void callRunners(ApplicationContext context, ApplicationArguments args) &#123;</span><br><span class="line">    List&lt;Object&gt; runners = new ArrayList&lt;&gt;();</span><br><span class="line">    // 找出Spring容器中ApplicationRunner接口的实现类</span><br><span class="line">    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">    // 找出Spring容器中CommandLineRunner接口的实现类</span><br><span class="line">    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">    // 对runners进行排序</span><br><span class="line">    AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line">    // 遍历runners依次执行</span><br><span class="line">    for (Object runner : new LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class="line">        if (runner instanceof ApplicationRunner) &#123;</span><br><span class="line">            callRunner((ApplicationRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">        if (runner instanceof CommandLineRunner) &#123;</span><br><span class="line">            callRunner((CommandLineRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、AnnotationConfigApplicationContext容器"><a href="#二、AnnotationConfigApplicationContext容器" class="headerlink" title="二、AnnotationConfigApplicationContext容器"></a>二、AnnotationConfigApplicationContext容器</h3><h4 id="1、ConfigurationClassPostProcessor的postProcessBeanDefinitionRegistry方法"><a href="#1、ConfigurationClassPostProcessor的postProcessBeanDefinitionRegistry方法" class="headerlink" title="1、ConfigurationClassPostProcessor的postProcessBeanDefinitionRegistry方法"></a>1、ConfigurationClassPostProcessor的postProcessBeanDefinitionRegistry方法</h4><p>AnnotationConfigApplicationContext容器，上篇（三、3）中注册了配置类处理器ConfigurationClassPostProcessor<br>该处理器实现了BeanDefinitionRegistryPostProcessor，在invokeBeanFactoryPostProcessors方法中会调用该类的<br>postProcessBeanDefinitionRegistry方法和postProcessBeanFactory方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    int registryId = System.identityHashCode(registry);</span><br><span class="line">    if (this.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">        throw new IllegalStateException(</span><br><span class="line">                &quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot; + registry);</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">        throw new IllegalStateException(</span><br><span class="line">                &quot;postProcessBeanFactory already called on this post-processor against &quot; + registry);</span><br><span class="line">    &#125;</span><br><span class="line">    this.registriesPostProcessed.add(registryId);</span><br><span class="line">    //处理配置类</span><br><span class="line">    processConfigBeanDefinitions(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ConfigurationClassPostProcessor的processConfigBeanDefinitions方法"><a href="#2、ConfigurationClassPostProcessor的processConfigBeanDefinitions方法" class="headerlink" title="2、ConfigurationClassPostProcessor的processConfigBeanDefinitions方法"></a>2、ConfigurationClassPostProcessor的processConfigBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    List&lt;BeanDefinitionHolder&gt; configCandidates = new ArrayList&lt;&gt;();</span><br><span class="line">    //获取已有的beanName，Application也作为BeanDefinition注册到了容器中</span><br><span class="line">    String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">    for (String beanName : candidateNames) &#123;</span><br><span class="line">        BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">        //BeanDefinition 中的configurationClass 属性为full 或者lite ,则意味着已经处理</span><br><span class="line">        if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||</span><br><span class="line">                ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Bean definition has already been processed as a configuration class: &quot; + beanDef);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果类存在@Configuration、@Component、@ComponentScan、@Import、@ImportResource</span><br><span class="line">        //或者存在被@bean注解的方法，则加入configCandidates</span><br><span class="line">        else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) &#123;</span><br><span class="line">            configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return immediately if no @Configuration classes were found</span><br><span class="line">    if (configCandidates.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Sort by previously determined @Order value, if applicable</span><br><span class="line">    //对configCandidates排序,按照@Order配置的值进行排序</span><br><span class="line">    configCandidates.sort((bd1, bd2) -&gt; &#123;</span><br><span class="line">        int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">        int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">        return Integer.compare(i1, i2);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Detect any custom bean name generation strategy supplied through the enclosing application context</span><br><span class="line">    SingletonBeanRegistry sbr = null;</span><br><span class="line">    //DefaultListableBeanFactory是SingletonBeanRegistry的子类</span><br><span class="line">    if (registry instanceof SingletonBeanRegistry) &#123;</span><br><span class="line">        sbr = (SingletonBeanRegistry) registry;</span><br><span class="line">        if (!this.localBeanNameGeneratorSet) &#123;</span><br><span class="line">            BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">            if (generator != null) &#123;</span><br><span class="line">                this.componentScanBeanNameGenerator = generator;</span><br><span class="line">                this.importBeanNameGenerator = generator;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.environment == null) &#123;</span><br><span class="line">        this.environment = new StandardEnvironment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Parse each @Configuration class</span><br><span class="line">    //实例化ConfigurationClassParser解析配置类</span><br><span class="line">    ConfigurationClassParser parser = new ConfigurationClassParser(</span><br><span class="line">            this.metadataReaderFactory, this.problemReporter, this.environment,</span><br><span class="line">            this.resourceLoader, this.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; candidates = new LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">    Set&lt;ConfigurationClass&gt; alreadyParsed = new HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">    do &#123;</span><br><span class="line">        //解析配置类</span><br><span class="line">        parser.parse(candidates);</span><br><span class="line">        //校验，配置类不能为final，@Bean注解的方法如不是static的则必须能被覆盖</span><br><span class="line">        parser.validate();</span><br><span class="line">        //解析完的配置类，除重，除去已加载的配置类</span><br><span class="line">        Set&lt;ConfigurationClass&gt; configClasses = new LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">        configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">        // Read the model and create bean definitions based on its content</span><br><span class="line">        if (this.reader == null) &#123;</span><br><span class="line">            this.reader = new ConfigurationClassBeanDefinitionReader(</span><br><span class="line">                    registry, this.sourceExtractor, this.resourceLoader, this.environment,</span><br><span class="line">                    this.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">        //加载资源</span><br><span class="line">        this.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">        //该配置类已处理</span><br><span class="line">        alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">        candidates.clear();</span><br><span class="line">        //获取注册的bean的BeanDefinition</span><br><span class="line">        if (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">            String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">            Set&lt;String&gt; oldCandidateNames = new HashSet&lt;&gt;(Arrays.asList(candidateNames));</span><br><span class="line">            Set&lt;String&gt; alreadyParsedClasses = new HashSet&lt;&gt;();</span><br><span class="line">            for (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">                alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">            &#125;</span><br><span class="line">            for (String candidateName : newCandidateNames) &#123;</span><br><span class="line">                if (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">                    BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line">                    //新加载的BeanDefinition中的配置类</span><br><span class="line">                    if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &amp;&amp;</span><br><span class="line">                            !alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">                        candidates.add(new BeanDefinitionHolder(bd, candidateName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            candidateNames = newCandidateNames;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //处理新加载的BeanDefinition中的配置类</span><br><span class="line">    while (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">    // Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span><br><span class="line">    if (sbr != null &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">        //注册一个ImportRegistry(ImportStack),</span><br><span class="line">        sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">    &#125;</span><br><span class="line">    //清除缓存</span><br><span class="line">    if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) &#123;</span><br><span class="line">        // Clear cache in externally provided MetadataReaderFactory; this is a no-op</span><br><span class="line">        // for a shared cache since it&apos;ll be cleared by the ApplicationContext.</span><br><span class="line">        ((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ConfigurationClassUtils的checkConfigurationClassCandidate方法"><a href="#3、ConfigurationClassUtils的checkConfigurationClassCandidate方法" class="headerlink" title="3、ConfigurationClassUtils的checkConfigurationClassCandidate方法"></a>3、ConfigurationClassUtils的checkConfigurationClassCandidate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) &#123;</span><br><span class="line">    //获取类名</span><br><span class="line">    String className = beanDef.getBeanClassName();</span><br><span class="line">    if (className == null || beanDef.getFactoryMethodName() != null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //获得AnnotationMetadata</span><br><span class="line">    AnnotationMetadata metadata;</span><br><span class="line">    if (beanDef instanceof AnnotatedBeanDefinition &amp;&amp;</span><br><span class="line">            className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) &#123;</span><br><span class="line">        // Can reuse the pre-parsed metadata from the given BeanDefinition...</span><br><span class="line">        //直接从BeanDefinition获得Metadata</span><br><span class="line">        metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata();</span><br><span class="line">    &#125;</span><br><span class="line">    else if (beanDef instanceof AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) beanDef).hasBeanClass()) &#123;</span><br><span class="line">        // Check already loaded Class if present...</span><br><span class="line">        // since we possibly can&apos;t even load the class file for this Class.</span><br><span class="line">        Class&lt;?&gt; beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass();</span><br><span class="line">        //实例化StandardAnnotationMetadata</span><br><span class="line">        metadata = new StandardAnnotationMetadata(beanClass, true);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过MetadataReaderFactory中的MetadataReader进行读取</span><br><span class="line">            MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className);</span><br><span class="line">            metadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException ex) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Could not find class file for introspecting configuration annotations: &quot; + className, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //存在Configuration注解,则为BeanDefinition 设置configurationClass属性为full</span><br><span class="line">    if (isFullConfigurationCandidate(metadata)) &#123;</span><br><span class="line">        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL);</span><br><span class="line">    &#125;</span><br><span class="line">    //存在Component,ComponentScan,Import,ImportResource注解中的任意一个,或者存在被@bean注解的方法</span><br><span class="line">    //则设置configurationClass属性为lite</span><br><span class="line">    else if (isLiteConfigurationCandidate(metadata)) &#123;</span><br><span class="line">        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // It&apos;s a full or lite configuration candidate... Let&apos;s determine the order value, if any.</span><br><span class="line">    //如果该类被@Order所注解,则设置order属性为@Order的值</span><br><span class="line">    Integer order = getOrder(metadata);</span><br><span class="line">    if (order != null) &#123;</span><br><span class="line">        beanDef.setAttribute(ORDER_ATTRIBUTE, order);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、ConfigurationClassUtils的isFullConfigurationCandidate方法"><a href="#4、ConfigurationClassUtils的isFullConfigurationCandidate方法" class="headerlink" title="4、ConfigurationClassUtils的isFullConfigurationCandidate方法"></a>4、ConfigurationClassUtils的isFullConfigurationCandidate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) &#123;</span><br><span class="line">    //是否存在Configuration注解</span><br><span class="line">    return metadata.isAnnotated(Configuration.class.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、StandardAnnotationMetadata的isAnnotated方法"><a href="#5、StandardAnnotationMetadata的isAnnotated方法" class="headerlink" title="5、StandardAnnotationMetadata的isAnnotated方法"></a>5、StandardAnnotationMetadata的isAnnotated方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean isAnnotated(String annotationName) &#123;</span><br><span class="line">    //是否存在annotationName注解</span><br><span class="line">    return (this.annotations.length &gt; 0 &amp;&amp;</span><br><span class="line">            AnnotatedElementUtils.isAnnotated(getIntrospectedClass(), annotationName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AnnotatedElementUtils的isAnnotated方法"><a href="#6、AnnotatedElementUtils的isAnnotated方法" class="headerlink" title="6、AnnotatedElementUtils的isAnnotated方法"></a>6、AnnotatedElementUtils的isAnnotated方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isAnnotated(AnnotatedElement element, String annotationName) &#123;</span><br><span class="line">    //是否存在annotationName注解</span><br><span class="line">    return Boolean.TRUE.equals(searchWithGetSemantics(element, null, annotationName, alwaysTrueAnnotationProcessor));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AnnotatedElementUtils的searchWithGetSemantics方法"><a href="#7、AnnotatedElementUtils的searchWithGetSemantics方法" class="headerlink" title="7、AnnotatedElementUtils的searchWithGetSemantics方法"></a>7、AnnotatedElementUtils的searchWithGetSemantics方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private static &lt;T&gt; T searchWithGetSemantics(AnnotatedElement element,</span><br><span class="line">        @Nullable Class&lt;? extends Annotation&gt; annotationType,</span><br><span class="line">        @Nullable String annotationName, Processor&lt;T&gt; processor) &#123;</span><br><span class="line">    //查找并处理annotationName注解</span><br><span class="line">    return searchWithGetSemantics(element, annotationType, annotationName, null, processor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private static &lt;T&gt; T searchWithGetSemantics(AnnotatedElement element,</span><br><span class="line">        @Nullable Class&lt;? extends Annotation&gt; annotationType, @Nullable String annotationName,</span><br><span class="line">        @Nullable Class&lt;? extends Annotation&gt; containerType, Processor&lt;T&gt; processor) &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //查找并处理annotationName注解</span><br><span class="line">        return searchWithGetSemantics(element, annotationType, annotationName, containerType, processor,</span><br><span class="line">                new HashSet&lt;&gt;(), 0);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        AnnotationUtils.rethrowAnnotationConfigurationException(ex);</span><br><span class="line">        throw new IllegalStateException(&quot;Failed to introspect annotations on &quot; + element, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private static &lt;T&gt; T searchWithGetSemantics(AnnotatedElement element,</span><br><span class="line">        @Nullable Class&lt;? extends Annotation&gt; annotationType, @Nullable String annotationName,</span><br><span class="line">        @Nullable Class&lt;? extends Annotation&gt; containerType, Processor&lt;T&gt; processor,</span><br><span class="line">        Set&lt;AnnotatedElement&gt; visited, int metaDepth) &#123;</span><br><span class="line">    //该配置类加入已处理的集合</span><br><span class="line">    if (visited.add(element)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // Start searching within locally declared annotations</span><br><span class="line">            //获取该类的直接注解</span><br><span class="line">            List&lt;Annotation&gt; declaredAnnotations = Arrays.asList(element.getDeclaredAnnotations());</span><br><span class="line">            //查找并处理annotationName注解</span><br><span class="line">            T result = searchWithGetSemanticsInAnnotations(element, declaredAnnotations,</span><br><span class="line">                    annotationType, annotationName, containerType, processor, visited, metaDepth);</span><br><span class="line">            if (result != null) &#123;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (element instanceof Class) &#123; // otherwise getAnnotations doesn&apos;t return anything new</span><br><span class="line">                List&lt;Annotation&gt; inheritedAnnotations = new ArrayList&lt;&gt;();</span><br><span class="line">                //获取该类的继承而来的注解</span><br><span class="line">                for (Annotation annotation : element.getAnnotations()) &#123;</span><br><span class="line">                    if (!declaredAnnotations.contains(annotation)) &#123;</span><br><span class="line">                        inheritedAnnotations.add(annotation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Continue searching within inherited annotations</span><br><span class="line">                result = searchWithGetSemanticsInAnnotations(element, inheritedAnnotations,</span><br><span class="line">                        annotationType, annotationName, containerType, processor, visited, metaDepth);</span><br><span class="line">                if (result != null) &#123;</span><br><span class="line">                    return result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            AnnotationUtils.handleIntrospectionFailure(element, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、AnnotatedElementUtils的searchWithGetSemanticsInAnnotations方法"><a href="#8、AnnotatedElementUtils的searchWithGetSemanticsInAnnotations方法" class="headerlink" title="8、AnnotatedElementUtils的searchWithGetSemanticsInAnnotations方法"></a>8、AnnotatedElementUtils的searchWithGetSemanticsInAnnotations方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private static &lt;T&gt; T searchWithGetSemanticsInAnnotations(@Nullable AnnotatedElement element,</span><br><span class="line">        List&lt;Annotation&gt; annotations, @Nullable Class&lt;? extends Annotation&gt; annotationType,</span><br><span class="line">        @Nullable String annotationName, @Nullable Class&lt;? extends Annotation&gt; containerType,</span><br><span class="line">        Processor&lt;T&gt; processor, Set&lt;AnnotatedElement&gt; visited, int metaDepth) &#123;</span><br><span class="line"></span><br><span class="line">    // Search in annotations</span><br><span class="line">    //循环该类注解</span><br><span class="line">    for (Annotation annotation : annotations) &#123;</span><br><span class="line">        Class&lt;? extends Annotation&gt; currentAnnotationType = annotation.annotationType();</span><br><span class="line">        if (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) &#123;</span><br><span class="line">            //查找并处理annotationName注解</span><br><span class="line">            if (currentAnnotationType == annotationType ||</span><br><span class="line">                    currentAnnotationType.getName().equals(annotationName) ||</span><br><span class="line">                    processor.alwaysProcesses()) &#123;</span><br><span class="line">                T result = processor.process(element, annotation, metaDepth);</span><br><span class="line">                if (result != null) &#123;</span><br><span class="line">                    if (processor.aggregates() &amp;&amp; metaDepth == 0) &#123;</span><br><span class="line">                        processor.getAggregatedResults().add(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        return result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // Repeatable annotations in container?</span><br><span class="line">            else if (currentAnnotationType == containerType) &#123;</span><br><span class="line">                for (Annotation contained : getRawAnnotationsFromContainer(element, annotation)) &#123;</span><br><span class="line">                    T result = processor.process(element, contained, metaDepth);</span><br><span class="line">                    if (result != null) &#123;</span><br><span class="line">                        // No need to post-process since repeatable annotations within a</span><br><span class="line">                        // container cannot be composed annotations.</span><br><span class="line">                        processor.getAggregatedResults().add(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Recursively search in meta-annotations</span><br><span class="line">    //循环该类注解</span><br><span class="line">    for (Annotation annotation : annotations) &#123;</span><br><span class="line">        //获取注解类型</span><br><span class="line">        Class&lt;? extends Annotation&gt; currentAnnotationType = annotation.annotationType();</span><br><span class="line">        if (hasSearchableMetaAnnotations(currentAnnotationType, annotationType, annotationName)) &#123;</span><br><span class="line">            //查找并处理annotationName注解</span><br><span class="line">            T result = searchWithGetSemantics(currentAnnotationType, annotationType,</span><br><span class="line">                    annotationName, containerType, processor, visited, metaDepth + 1);</span><br><span class="line">            if (result != null) &#123;</span><br><span class="line">                processor.postProcess(element, annotation, result);</span><br><span class="line">                if (processor.aggregates() &amp;&amp; metaDepth == 0) &#123;</span><br><span class="line">                    processor.getAggregatedResults().add(result);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    return result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（二、2）ConfigurationClassParser的parse方法"><a href="#9、接（二、2）ConfigurationClassParser的parse方法" class="headerlink" title="9、接（二、2）ConfigurationClassParser的parse方法"></a>9、接（二、2）ConfigurationClassParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) &#123;</span><br><span class="line">    this.deferredImportSelectors = new LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    for (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">        BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line">        try &#123;</span><br><span class="line">            //解析配置类</span><br><span class="line">            if (bd instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">                parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            else if (bd instanceof AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">                parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(</span><br><span class="line">                    &quot;Failed to parse configuration class [&quot; + bd.getBeanClassName() + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    processDeferredImportSelectors();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected final void parse(AnnotationMetadata metadata, String beanName) throws IOException &#123;</span><br><span class="line">    //解析配置类</span><br><span class="line">    processConfigurationClass(new ConfigurationClass(metadata, beanName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、ConfigurationClassParser的processConfigurationClass方法"><a href="#10、ConfigurationClassParser的processConfigurationClass方法" class="headerlink" title="10、ConfigurationClassParser的processConfigurationClass方法"></a>10、ConfigurationClassParser的processConfigurationClass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">protected void processConfigurationClass(ConfigurationClass configClass) throws IOException &#123;</span><br><span class="line">    //该类有条件注解，且不匹配，不处理</span><br><span class="line">    if (this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConfigurationClass existingClass = this.configurationClasses.get(configClass);</span><br><span class="line">    if (existingClass != null) &#123;</span><br><span class="line">        //该类已解析，且为import的类，合并导入信息，不处理该类</span><br><span class="line">        if (configClass.isImported()) &#123;</span><br><span class="line">            if (existingClass.isImported()) &#123;</span><br><span class="line">                existingClass.mergeImportedBy(configClass);</span><br><span class="line">            &#125;</span><br><span class="line">            // Otherwise ignore new imported config class; existing non-imported class overrides it.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //删除旧配置类，重新解析</span><br><span class="line">        else &#123;</span><br><span class="line">            // Explicit bean definition found, probably replacing an import.</span><br><span class="line">            // Let&apos;s remove the old one and go with the new one.</span><br><span class="line">            this.configurationClasses.remove(configClass);</span><br><span class="line">            this.knownSuperclasses.values().removeIf(configClass::equals);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Recursively process the configuration class and its superclass hierarchy.</span><br><span class="line">    //配置类</span><br><span class="line">    SourceClass sourceClass = asSourceClass(configClass);</span><br><span class="line">    do &#123;</span><br><span class="line">        //解析配置类</span><br><span class="line">        sourceClass = doProcessConfigurationClass(configClass, sourceClass);</span><br><span class="line">    &#125;</span><br><span class="line">    while (sourceClass != null);</span><br><span class="line"></span><br><span class="line">    this.configurationClasses.put(configClass, configClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、ConfigurationClassParser的doProcessConfigurationClass方法"><a href="#11、ConfigurationClassParser的doProcessConfigurationClass方法" class="headerlink" title="11、ConfigurationClassParser的doProcessConfigurationClass方法"></a>11、ConfigurationClassParser的doProcessConfigurationClass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected final SourceClass doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    // Recursively process any member (nested) classes first</span><br><span class="line">    //处理内部类</span><br><span class="line">    processMemberClasses(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    // Process any @PropertySource annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@PropertySource注解</span><br><span class="line">    for (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), PropertySources.class,</span><br><span class="line">            org.springframework.context.annotation.PropertySource.class)) &#123;</span><br><span class="line">        if (this.environment instanceof ConfigurableEnvironment) &#123;</span><br><span class="line">            processPropertySource(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            logger.warn(&quot;Ignoring @PropertySource annotation on [&quot; + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                    &quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process any @ComponentScan annotations</span><br><span class="line">    //获取配置类、配置类父类、配置类注解类的@ComponentScan注解</span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">    if (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">            !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        for (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">            // The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span><br><span class="line">            //解析注解，并扫描</span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                    this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            // Check the set of scanned definitions for any further config classes and parse recursively if needed</span><br><span class="line">            for (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">                BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                if (bdCand == null) &#123;</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line">                //继续解析扫描获取到的配置类</span><br><span class="line">                if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) &#123;</span><br><span class="line">                    parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process any @Import annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@Import注解</span><br><span class="line">    //将注解的值注册到容器中</span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), true);</span><br><span class="line"></span><br><span class="line">    // Process any @ImportResource annotations</span><br><span class="line">    //处理配置类、配置类父类、配置类注解类的@ImportResource注解的值</span><br><span class="line">    AnnotationAttributes importResource =</span><br><span class="line">            AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">    if (importResource != null) &#123;</span><br><span class="line">        //获取资源</span><br><span class="line">        String[] resources = importResource.getStringArray(&quot;locations&quot;);</span><br><span class="line">        Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(&quot;reader&quot;);</span><br><span class="line">        //遍历资源,加入到configClass中</span><br><span class="line">        for (String resource : resources) &#123;</span><br><span class="line">            String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">            configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process individual @Bean methods</span><br><span class="line">    //配置类的@Bean注解的方法,添加到configClass</span><br><span class="line">    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">    for (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">        configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process default methods on interfaces</span><br><span class="line">    //配置类接口的方法,添加到configClass</span><br><span class="line">    processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    // Process superclass, if any</span><br><span class="line">    //配置类有父类则继续处理</span><br><span class="line">    if (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">        String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">        if (superclass != null &amp;&amp; !superclass.startsWith(&quot;java&quot;) &amp;&amp;</span><br><span class="line">                !this.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">            this.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">            // Superclass found, return its annotation metadata and recurse</span><br><span class="line">            return sourceClass.getSuperClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // No superclass -&gt; processing is complete</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、ConfigurationClassParser的processMemberClasses方法"><a href="#12、ConfigurationClassParser的processMemberClasses方法" class="headerlink" title="12、ConfigurationClassParser的processMemberClasses方法"></a>12、ConfigurationClassParser的processMemberClasses方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private void processMemberClasses(ConfigurationClass configClass, SourceClass sourceClass) throws IOException &#123;</span><br><span class="line">    //获取内部类</span><br><span class="line">    Collection&lt;SourceClass&gt; memberClasses = sourceClass.getMemberClasses();</span><br><span class="line">    if (!memberClasses.isEmpty()) &#123;</span><br><span class="line">        List&lt;SourceClass&gt; candidates = new ArrayList&lt;&gt;(memberClasses.size());</span><br><span class="line">        //遍历class中的内部类,将配置类加入candidates</span><br><span class="line">        for (SourceClass memberClass : memberClasses) &#123;</span><br><span class="line">            if (ConfigurationClassUtils.isConfigurationCandidate(memberClass.getMetadata()) &amp;&amp;</span><br><span class="line">                    !memberClass.getMetadata().getClassName().equals(configClass.getMetadata().getClassName())) &#123;</span><br><span class="line">                candidates.add(memberClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //排序</span><br><span class="line">        OrderComparator.sort(candidates);</span><br><span class="line">        //遍历candidates</span><br><span class="line">        for (SourceClass candidate : candidates) &#123;</span><br><span class="line">            //importStack包含该configClass的类,说明发生了循环依赖</span><br><span class="line">            if (this.importStack.contains(configClass)) &#123;</span><br><span class="line">                this.problemReporter.error(new CircularImportProblem(configClass, this.importStack));</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                this.importStack.push(configClass);</span><br><span class="line">                try &#123;</span><br><span class="line">                    //解析该配置类</span><br><span class="line">                    processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    this.importStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（二、11）ConfigurationClassParser的processPropertySource方法"><a href="#13、接（二、11）ConfigurationClassParser的processPropertySource方法" class="headerlink" title="13、接（二、11）ConfigurationClassParser的processPropertySource方法"></a>13、接（二、11）ConfigurationClassParser的processPropertySource方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">private void processPropertySource(AnnotationAttributes propertySource) throws IOException &#123;</span><br><span class="line">    String name = propertySource.getString(&quot;name&quot;);</span><br><span class="line">    if (!StringUtils.hasLength(name)) &#123;</span><br><span class="line">        name = null;</span><br><span class="line">    &#125;</span><br><span class="line">    String encoding = propertySource.getString(&quot;encoding&quot;);</span><br><span class="line">    if (!StringUtils.hasLength(encoding)) &#123;</span><br><span class="line">        encoding = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取资源地址</span><br><span class="line">    String[] locations = propertySource.getStringArray(&quot;value&quot;);</span><br><span class="line">    Assert.isTrue(locations.length &gt; 0, &quot;At least one @PropertySource(value) location is required&quot;);</span><br><span class="line">    //是否忽略未发现资源</span><br><span class="line">    boolean ignoreResourceNotFound = propertySource.getBoolean(&quot;ignoreResourceNotFound&quot;);</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends PropertySourceFactory&gt; factoryClass = propertySource.getClass(&quot;factory&quot;);</span><br><span class="line">    //默认DefaultPropertySourceFactory</span><br><span class="line">    PropertySourceFactory factory = (factoryClass == PropertySourceFactory.class ?</span><br><span class="line">            DEFAULT_PROPERTY_SOURCE_FACTORY : BeanUtils.instantiateClass(factoryClass));</span><br><span class="line"></span><br><span class="line">    for (String location : locations) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //对location进行SPEL表达式的解析。比如$&#123;app&#125;</span><br><span class="line">            String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);</span><br><span class="line">            Resource resource = this.resourceLoader.getResource(resolvedLocation);</span><br><span class="line">            //将指定的资源处理之后，添加到当前springboot运行的环境中</span><br><span class="line">            addPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IllegalArgumentException | FileNotFoundException | UnknownHostException ex) &#123;</span><br><span class="line">            // Placeholders not resolvable or resource not found when trying to open it</span><br><span class="line">            if (ignoreResourceNotFound) &#123;</span><br><span class="line">                if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(&quot;Properties location [&quot; + location + &quot;] not resolvable: &quot; + ex.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（二、11）ComponentScanAnnotationParser的parse方法"><a href="#14、接（二、11）ComponentScanAnnotationParser的parse方法" class="headerlink" title="14、接（二、11）ComponentScanAnnotationParser的parse方法"></a>14、接（二、11）ComponentScanAnnotationParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public Set&lt;BeanDefinitionHolder&gt; parse(AnnotationAttributes componentScan, final String declaringClass) &#123;</span><br><span class="line">    //扫描器</span><br><span class="line">    ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(this.registry,</span><br><span class="line">            componentScan.getBoolean(&quot;useDefaultFilters&quot;), this.environment, this.resourceLoader);</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends BeanNameGenerator&gt; generatorClass = componentScan.getClass(&quot;nameGenerator&quot;);</span><br><span class="line">    boolean useInheritedGenerator = (BeanNameGenerator.class == generatorClass);</span><br><span class="line">    //设置beanName生成器</span><br><span class="line">    scanner.setBeanNameGenerator(useInheritedGenerator ? this.beanNameGenerator :</span><br><span class="line">            BeanUtils.instantiateClass(generatorClass));</span><br><span class="line">    //代理，解决向大作用域bean注入小作用域bean的问题</span><br><span class="line">    ScopedProxyMode scopedProxyMode = componentScan.getEnum(&quot;scopedProxy&quot;);</span><br><span class="line">    if (scopedProxyMode != ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">        scanner.setScopedProxyMode(scopedProxyMode);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Class&lt;? extends ScopeMetadataResolver&gt; resolverClass = componentScan.getClass(&quot;scopeResolver&quot;);</span><br><span class="line">        scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));</span><br><span class="line">    &#125;</span><br><span class="line">    //对资源进行筛选的正则表达式</span><br><span class="line">    scanner.setResourcePattern(componentScan.getString(&quot;resourcePattern&quot;));</span><br><span class="line">    //过滤器，指定扫描资源</span><br><span class="line">    for (AnnotationAttributes filter : componentScan.getAnnotationArray(&quot;includeFilters&quot;)) &#123;</span><br><span class="line">        for (TypeFilter typeFilter : typeFiltersFor(filter)) &#123;</span><br><span class="line">            scanner.addIncludeFilter(typeFilter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //过滤器，排除不扫描资源</span><br><span class="line">    for (AnnotationAttributes filter : componentScan.getAnnotationArray(&quot;excludeFilters&quot;)) &#123;</span><br><span class="line">        for (TypeFilter typeFilter : typeFiltersFor(filter)) &#123;</span><br><span class="line">            scanner.addExcludeFilter(typeFilter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //是否延迟加载</span><br><span class="line">    boolean lazyInit = componentScan.getBoolean(&quot;lazyInit&quot;);</span><br><span class="line">    if (lazyInit) &#123;</span><br><span class="line">        scanner.getBeanDefinitionDefaults().setLazyInit(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取扫描资源的包路径</span><br><span class="line">    Set&lt;String&gt; basePackages = new LinkedHashSet&lt;&gt;();</span><br><span class="line">    //获取配置的包路径</span><br><span class="line">    String[] basePackagesArray = componentScan.getStringArray(&quot;basePackages&quot;);</span><br><span class="line">    for (String pkg : basePackagesArray) &#123;</span><br><span class="line">        String[] tokenized = StringUtils.tokenizeToStringArray(this.environment.resolvePlaceholders(pkg),</span><br><span class="line">                ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        Collections.addAll(basePackages, tokenized);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Class&lt;?&gt; clazz : componentScan.getClassArray(&quot;basePackageClasses&quot;)) &#123;</span><br><span class="line">        basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">    &#125;</span><br><span class="line">    //默认扫描配置类的包</span><br><span class="line">    if (basePackages.isEmpty()) &#123;</span><br><span class="line">        basePackages.add(ClassUtils.getPackageName(declaringClass));</span><br><span class="line">    &#125;</span><br><span class="line">    //排除自己</span><br><span class="line">    scanner.addExcludeFilter(new AbstractTypeHierarchyTraversingFilter(false, false) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected boolean matchClassName(String className) &#123;</span><br><span class="line">            return declaringClass.equals(className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //扫描加载资源，在上篇已有解析</span><br><span class="line">    return scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（二、11）ComponentScanAnnotationParser的processImports方法"><a href="#14、接（二、11）ComponentScanAnnotationParser的processImports方法" class="headerlink" title="14、接（二、11）ComponentScanAnnotationParser的processImports方法"></a>14、接（二、11）ComponentScanAnnotationParser的processImports方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">private void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,</span><br><span class="line">        Collection&lt;SourceClass&gt; importCandidates, boolean checkForCircularImports) &#123;</span><br><span class="line">    //import的类为空</span><br><span class="line">    if (importCandidates.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //检查循环依赖</span><br><span class="line">    if (checkForCircularImports &amp;&amp; isChainedImportOnStack(configClass)) &#123;</span><br><span class="line">        this.problemReporter.error(new CircularImportProblem(configClass, this.importStack));</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        this.importStack.push(configClass);</span><br><span class="line">        try &#123;</span><br><span class="line">            //遍历处理</span><br><span class="line">            for (SourceClass candidate : importCandidates) &#123;</span><br><span class="line">                //ImportSelector的子类</span><br><span class="line">                if (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">                    // Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    //实例化该类</span><br><span class="line">                    ImportSelector selector = BeanUtils.instantiateClass(candidateClass, ImportSelector.class);</span><br><span class="line">                    //给实现特定接口的类设置资源</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            selector, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                    //DeferredImportSelector的实现,加入到deferredImportSelectors</span><br><span class="line">                    if (this.deferredImportSelectors != null &amp;&amp; selector instanceof DeferredImportSelector) &#123;</span><br><span class="line">                        this.deferredImportSelectors.add(</span><br><span class="line">                                new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        //获取该类中定义的需要import的类</span><br><span class="line">                        String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                        Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames);</span><br><span class="line">                        //循环调用该方法，处理importSourceClasses</span><br><span class="line">                        processImports(configClass, currentSourceClass, importSourceClasses, false);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //ImportBeanDefinitionRegistrar的子类</span><br><span class="line">                else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;</span><br><span class="line">                    // Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span><br><span class="line">                    // delegate to it to register additional bean definitions</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    ImportBeanDefinitionRegistrar registrar =</span><br><span class="line">                            BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            registrar, this.environment, this.resourceLoader, this.registry);</span><br><span class="line">                    //添加到configClass中</span><br><span class="line">                    configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    // Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;</span><br><span class="line">                    // process it as an @Configuration class</span><br><span class="line">                    this.importStack.registerImport(</span><br><span class="line">                            currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">                    //调用processConfigurationClass进行处理,当成普通配置类</span><br><span class="line">                    processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(</span><br><span class="line">                    &quot;Failed to process import candidates for configuration class [&quot; +</span><br><span class="line">                    configClass.getMetadata().getClassName() + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            this.importStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（二、9）ConfigurationClassParser的parse方法"><a href="#15、接（二、9）ConfigurationClassParser的parse方法" class="headerlink" title="15、接（二、9）ConfigurationClassParser的parse方法"></a>15、接（二、9）ConfigurationClassParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">private void processDeferredImportSelectors() &#123;</span><br><span class="line">    //import进来的DeferredImportSelector</span><br><span class="line">    List&lt;DeferredImportSelectorHolder&gt; deferredImports = this.deferredImportSelectors;</span><br><span class="line">    this.deferredImportSelectors = null;</span><br><span class="line">    if (deferredImports == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //排序</span><br><span class="line">    deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);</span><br><span class="line">    Map&lt;Object, DeferredImportSelectorGrouping&gt; groupings = new LinkedHashMap&lt;&gt;();</span><br><span class="line">    Map&lt;AnnotationMetadata, ConfigurationClass&gt; configurationClasses = new HashMap&lt;&gt;();</span><br><span class="line">    //DeferredImportSelector分组</span><br><span class="line">    for (DeferredImportSelectorHolder deferredImport : deferredImports) &#123;</span><br><span class="line">        Class&lt;? extends Group&gt; group = deferredImport.getImportSelector().getImportGroup();</span><br><span class="line">        DeferredImportSelectorGrouping grouping = groupings.computeIfAbsent(</span><br><span class="line">                (group == null ? deferredImport : group),</span><br><span class="line">                (key) -&gt; new DeferredImportSelectorGrouping(createGroup(group)));</span><br><span class="line">        grouping.add(deferredImport);</span><br><span class="line">        configurationClasses.put(deferredImport.getConfigurationClass().getMetadata(),</span><br><span class="line">                deferredImport.getConfigurationClass());</span><br><span class="line">    &#125;</span><br><span class="line">    for (DeferredImportSelectorGrouping grouping : groupings.values()) &#123;</span><br><span class="line">        //获取、排序、遍历DeferredImportSelector中要导入的类</span><br><span class="line">        grouping.getImports().forEach((entry) -&gt; &#123;</span><br><span class="line">            ConfigurationClass configurationClass = configurationClasses.get(</span><br><span class="line">                    entry.getMetadata());</span><br><span class="line">            try &#123;</span><br><span class="line">                //导入、解析并注册到容器中</span><br><span class="line">                processImports(configurationClass, asSourceClass(configurationClass),</span><br><span class="line">                        asSourceClasses(entry.getImportClassName()), false);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Throwable ex) &#123;</span><br><span class="line">                throw new BeanDefinitionStoreException(</span><br><span class="line">                        &quot;Failed to process import candidates for configuration class [&quot; +</span><br><span class="line">                                configurationClass.getMetadata().getClassName() + &quot;]&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、AutoConfigurationGroup的sortAutoConfigurations方法"><a href="#16、AutoConfigurationGroup的sortAutoConfigurations方法" class="headerlink" title="16、AutoConfigurationGroup的sortAutoConfigurations方法"></a>16、AutoConfigurationGroup的sortAutoConfigurations方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;String&gt; sortAutoConfigurations() &#123;</span><br><span class="line">    List&lt;String&gt; autoConfigurations = new ArrayList&lt;&gt;(this.entries.keySet());</span><br><span class="line">    if (this.entries.size() &lt;= 1) &#123;</span><br><span class="line">        return autoConfigurations;</span><br><span class="line">    &#125;</span><br><span class="line">    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">            .loadMetadata(this.beanClassLoader);</span><br><span class="line">    //对即将导入的类排序</span><br><span class="line">    return new AutoConfigurationSorter(getMetadataReaderFactory(),</span><br><span class="line">            autoConfigurationMetadata).getInPriorityOrder(autoConfigurations);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、AutoConfigurationSorter的sortAutoConfigurations方法"><a href="#17、AutoConfigurationSorter的sortAutoConfigurations方法" class="headerlink" title="17、AutoConfigurationSorter的sortAutoConfigurations方法"></a>17、AutoConfigurationSorter的sortAutoConfigurations方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;String&gt; getInPriorityOrder(Collection&lt;String&gt; classNames) &#123;</span><br><span class="line">    AutoConfigurationClasses classes = new AutoConfigurationClasses(</span><br><span class="line">            this.metadataReaderFactory, this.autoConfigurationMetadata, classNames);</span><br><span class="line">    List&lt;String&gt; orderedClassNames = new ArrayList&lt;&gt;(classNames);</span><br><span class="line">    // Initially sort alphabetically</span><br><span class="line">    //按照名称字母排序</span><br><span class="line">    Collections.sort(orderedClassNames);</span><br><span class="line">    // Then sort by order</span><br><span class="line">    //按照@AutoConfigureOrder值排序</span><br><span class="line">    orderedClassNames.sort((o1, o2) -&gt; &#123;</span><br><span class="line">        int i1 = classes.get(o1).getOrder();</span><br><span class="line">        int i2 = classes.get(o2).getOrder();</span><br><span class="line">        return Integer.compare(i1, i2);</span><br><span class="line">    &#125;);</span><br><span class="line">    // Then respect @AutoConfigureBefore @AutoConfigureAfter</span><br><span class="line">    //检查@AutoConfigureBefore @AutoConfigureAfter规定的顺序是否满足</span><br><span class="line">    orderedClassNames = sortByAnnotation(classes, orderedClassNames);</span><br><span class="line">    return orderedClassNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（二、2）ConfigurationClassBeanDefinitionReader的loadBeanDefinitions方法"><a href="#18、接（二、2）ConfigurationClassBeanDefinitionReader的loadBeanDefinitions方法" class="headerlink" title="18、接（二、2）ConfigurationClassBeanDefinitionReader的loadBeanDefinitions方法"></a>18、接（二、2）ConfigurationClassBeanDefinitionReader的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void loadBeanDefinitions(Set&lt;ConfigurationClass&gt; configurationModel) &#123;</span><br><span class="line">    //条件注解处理器</span><br><span class="line">    TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator();</span><br><span class="line">    //遍历处理配置类</span><br><span class="line">    for (ConfigurationClass configClass : configurationModel) &#123;</span><br><span class="line">        loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForConfigurationClass方法"><a href="#19、ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForConfigurationClass方法" class="headerlink" title="19、ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForConfigurationClass方法"></a>19、ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForConfigurationClass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void loadBeanDefinitionsForConfigurationClass(</span><br><span class="line">        ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) &#123;</span><br><span class="line">    //使用条件注解判断是否需要跳过这个配置类</span><br><span class="line">    if (trackedConditionEvaluator.shouldSkip(configClass)) &#123;</span><br><span class="line">        //跳过配置类则移除Spring容器中bean的注册</span><br><span class="line">        String beanName = configClass.getBeanName();</span><br><span class="line">        if (StringUtils.hasLength(beanName) &amp;&amp; this.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            this.registry.removeBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        //从importRegistry进行删除</span><br><span class="line">        this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //配置类是被@Import注释所import的，注册自己</span><br><span class="line">    if (configClass.isImported()) &#123;</span><br><span class="line">        registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">    &#125;</span><br><span class="line">    //遍历BeanMethods,依次对其进行注册</span><br><span class="line">    for (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">        loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    //注册@ImportResource注解注释的资源文件中的bean</span><br><span class="line">    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">    //注册@Import注解中的ImportBeanDefinitionRegistrar接口的registerBeanDefinitions</span><br><span class="line">    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、ConfigurationClassBeanDefinitionReader的registerBeanDefinitionForImportedConfigurationClass方法"><a href="#20、ConfigurationClassBeanDefinitionReader的registerBeanDefinitionForImportedConfigurationClass方法" class="headerlink" title="20、ConfigurationClassBeanDefinitionReader的registerBeanDefinitionForImportedConfigurationClass方法"></a>20、ConfigurationClassBeanDefinitionReader的registerBeanDefinitionForImportedConfigurationClass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) &#123;</span><br><span class="line">    //根据configClass中配置的AnnotationMetadata 实例化AnnotatedGenericBeanDefinition</span><br><span class="line">    AnnotationMetadata metadata = configClass.getMetadata();</span><br><span class="line">    AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata);</span><br><span class="line">    //解析并设置该configClass的Scope</span><br><span class="line">    ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef);</span><br><span class="line">    configBeanDef.setScope(scopeMetadata.getScopeName());</span><br><span class="line">    //生成bean的id</span><br><span class="line">    String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry);</span><br><span class="line">    //设置bean的一些属性,如LazyInit,Primary,DependsOn等</span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata);</span><br><span class="line">    //生成BeanDefinitionHolder,并对其尝试进行代理,最后向registry进行注册</span><br><span class="line">    BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName);</span><br><span class="line">    definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);</span><br><span class="line">    this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition());</span><br><span class="line">    configClass.setBeanName(configBeanName);</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Registered bean definition for imported class &apos;&quot; + configBeanName + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForBeanMethod方法"><a href="#21、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForBeanMethod方法" class="headerlink" title="21、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForBeanMethod方法"></a>21、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsForBeanMethod方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) &#123;</span><br><span class="line">    //获得声明该BeanMethod的ConfigurationClass</span><br><span class="line">    ConfigurationClass configClass = beanMethod.getConfigurationClass();</span><br><span class="line">    //获得BeanMethod的MethodMetadata和methodName</span><br><span class="line">    MethodMetadata metadata = beanMethod.getMetadata();</span><br><span class="line">    String methodName = metadata.getMethodName();</span><br><span class="line"></span><br><span class="line">    // Do we need to mark the bean as skipped by its condition?</span><br><span class="line">    //更具condition判断是否该跳过</span><br><span class="line">    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        configClass.skippedBeanMethods.add(methodName);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (configClass.skippedBeanMethods.contains(methodName)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //从@Bean中获得配置的names,如果names不为空的话,则第一个为bean的id,否则该方法名字作为bean的id</span><br><span class="line">    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);</span><br><span class="line">    Assert.state(bean != null, &quot;No @Bean annotation attributes&quot;);</span><br><span class="line"></span><br><span class="line">    // Consider name and any aliases</span><br><span class="line">    List&lt;String&gt; names = new ArrayList&lt;&gt;(Arrays.asList(bean.getStringArray(&quot;name&quot;)));</span><br><span class="line">    String beanName = (!names.isEmpty() ? names.remove(0) : methodName);</span><br><span class="line"></span><br><span class="line">    // Register aliases even when overridden</span><br><span class="line">    for (String alias : names) &#123;</span><br><span class="line">        this.registry.registerAlias(beanName, alias);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Has this effectively been overridden before (e.g. via XML)?</span><br><span class="line">    //重复定义,直接return</span><br><span class="line">    if (isOverriddenByExistingDefinition(beanMethod, beanName)) &#123;</span><br><span class="line">        if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),</span><br><span class="line">                    beanName, &quot;Bean name derived from @Bean method &apos;&quot; + beanMethod.getMetadata().getMethodName() +</span><br><span class="line">                    &quot;&apos; clashes with bean name for containing configuration class; please make those names unique!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);</span><br><span class="line">    beanDef.setResource(configClass.getResource());</span><br><span class="line">    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));</span><br><span class="line">    //该方法是静态的,则将methodName设置为工厂方法</span><br><span class="line">    if (metadata.isStatic()) &#123;</span><br><span class="line">        // static @Bean method</span><br><span class="line">        beanDef.setBeanClassName(configClass.getMetadata().getClassName());</span><br><span class="line">        beanDef.setFactoryMethodName(methodName);</span><br><span class="line">    &#125;</span><br><span class="line">    //实例方法,则将configClass的BeanName设置为FactoryBeanName,methodName设置为UniqueFactoryMethodName</span><br><span class="line">    else &#123;</span><br><span class="line">        // instance @Bean method</span><br><span class="line">        beanDef.setFactoryBeanName(configClass.getBeanName());</span><br><span class="line">        beanDef.setUniqueFactoryMethodName(methodName);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置AutowireMode为构造器注入</span><br><span class="line">    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);</span><br><span class="line">    //设置skipRequiredCheck属性为true</span><br><span class="line">    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);</span><br><span class="line">    //设置属性</span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);</span><br><span class="line"></span><br><span class="line">    Autowire autowire = bean.getEnum(&quot;autowire&quot;);</span><br><span class="line">    if (autowire.isAutowire()) &#123;</span><br><span class="line">        beanDef.setAutowireMode(autowire.value());</span><br><span class="line">    &#125;</span><br><span class="line">    //设置InitMethod</span><br><span class="line">    String initMethodName = bean.getString(&quot;initMethod&quot;);</span><br><span class="line">    if (StringUtils.hasText(initMethodName)) &#123;</span><br><span class="line">        beanDef.setInitMethodName(initMethodName);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置DestroyMethod</span><br><span class="line">    String destroyMethodName = bean.getString(&quot;destroyMethod&quot;);</span><br><span class="line">    beanDef.setDestroyMethodName(destroyMethodName);</span><br><span class="line"></span><br><span class="line">    // Consider scoping</span><br><span class="line">    //设置ScopedProxyMode</span><br><span class="line">    ScopedProxyMode proxyMode = ScopedProxyMode.NO;</span><br><span class="line">    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);</span><br><span class="line">    if (attributes != null) &#123;</span><br><span class="line">        beanDef.setScope(attributes.getString(&quot;value&quot;));</span><br><span class="line">        proxyMode = attributes.getEnum(&quot;proxyMode&quot;);</span><br><span class="line">        if (proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">            proxyMode = ScopedProxyMode.NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Replace the original bean definition with the target one, if necessary</span><br><span class="line">    //ScopedProxyMode不等于NO,则生成代理</span><br><span class="line">    BeanDefinition beanDefToRegister = beanDef;</span><br><span class="line">    if (proxyMode != ScopedProxyMode.NO) &#123;</span><br><span class="line">        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(</span><br><span class="line">                new BeanDefinitionHolder(beanDef, beanName), this.registry,</span><br><span class="line">                proxyMode == ScopedProxyMode.TARGET_CLASS);</span><br><span class="line">        beanDefToRegister = new ConfigurationClassBeanDefinition(</span><br><span class="line">                (RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(String.format(&quot;Registering bean definition for @Bean method %s.%s()&quot;,</span><br><span class="line">                configClass.getMetadata().getClassName(), beanName));</span><br><span class="line">    &#125;</span><br><span class="line">    //进行注册</span><br><span class="line">    this.registry.registerBeanDefinition(beanName, beanDefToRegister);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromImportedResources方法"><a href="#18、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromImportedResources方法" class="headerlink" title="18、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromImportedResources方法"></a>18、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromImportedResources方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">private void loadBeanDefinitionsFromImportedResources(</span><br><span class="line">        Map&lt;String, Class&lt;? extends BeanDefinitionReader&gt;&gt; importedResources) &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Class&lt;?&gt;, BeanDefinitionReader&gt; readerInstanceCache = new HashMap&lt;&gt;();</span><br><span class="line">    //遍历importedResources</span><br><span class="line">    importedResources.forEach((resource, readerClass) -&gt; &#123;</span><br><span class="line">        // Default reader selection necessary?</span><br><span class="line">        //选择BeanDefinitionReader</span><br><span class="line">        if (BeanDefinitionReader.class == readerClass) &#123;</span><br><span class="line">            //如果是.groovy,则使用GroovyBeanDefinitionReader</span><br><span class="line">            if (StringUtils.endsWithIgnoreCase(resource, &quot;.groovy&quot;)) &#123;</span><br><span class="line">                // When clearly asking for Groovy, that&apos;s what they&apos;ll get...</span><br><span class="line">                readerClass = GroovyBeanDefinitionReader.class;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // Primarily &quot;.xml&quot; files but for any other extension as well</span><br><span class="line">                //否则为XmlBeanDefinitionReader,一般都是XmlBeanDefinitionReader</span><br><span class="line">                readerClass = XmlBeanDefinitionReader.class;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //从缓存里获取</span><br><span class="line">        BeanDefinitionReader reader = readerInstanceCache.get(readerClass);</span><br><span class="line">        //实例化一个reader</span><br><span class="line">        if (reader == null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // Instantiate the specified BeanDefinitionReader</span><br><span class="line">                reader = readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);</span><br><span class="line">                // Delegate the current ResourceLoader to it if possible</span><br><span class="line">                if (reader instanceof AbstractBeanDefinitionReader) &#123;</span><br><span class="line">                    AbstractBeanDefinitionReader abdr = ((AbstractBeanDefinitionReader) reader);</span><br><span class="line">                    abdr.setResourceLoader(this.resourceLoader);</span><br><span class="line">                    abdr.setEnvironment(this.environment);</span><br><span class="line">                &#125;</span><br><span class="line">                readerInstanceCache.put(readerClass, reader);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Throwable ex) &#123;</span><br><span class="line">                throw new IllegalStateException(</span><br><span class="line">                        &quot;Could not instantiate BeanDefinitionReader class [&quot; + readerClass.getName() + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // TODO SPR-6310: qualify relative path locations as done in AbstractContextLoader.modifyLocations</span><br><span class="line">        //读取配置文件，与前文XmlBeanFactory中一样</span><br><span class="line">        reader.loadBeanDefinitions(resource);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromRegistrars方法"><a href="#19、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromRegistrars方法" class="headerlink" title="19、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromRegistrars方法"></a>19、接（二、19）ConfigurationClassBeanDefinitionReader的loadBeanDefinitionsFromRegistrars方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void loadBeanDefinitionsFromRegistrars(Map&lt;ImportBeanDefinitionRegistrar, AnnotationMetadata&gt; registrars) &#123;</span><br><span class="line">    //将被注解的配置类的相关信息，注册到@Import的ImportBeanDefinitionRegistrar中</span><br><span class="line">    registrars.forEach((registrar, metadata) -&gt;</span><br><span class="line">            registrar.registerBeanDefinitions(metadata, this.registry));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里配置类解析就结束了，获取bean在前文AnnotationConfigApplicationContext中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot源码内嵌tomcat</title>
    <link href="http://yoursite.com/2020/01/16/spring%E6%BA%90%E7%A0%81/springboot%E6%BA%90%E7%A0%81%E5%86%85%E5%B5%8Ctomcat/"/>
    <id>http://yoursite.com/2020/01/16/spring源码/springboot源码内嵌tomcat/</id>
    <published>2020-01-16T13:43:36.353Z</published>
    <updated>2018-07-14T02:51:27.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、EmbeddedServletContainerAutoConfiguration自动配置类"><a href="#一、EmbeddedServletContainerAutoConfiguration自动配置类" class="headerlink" title="一、EmbeddedServletContainerAutoConfiguration自动配置类"></a>一、EmbeddedServletContainerAutoConfiguration自动配置类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">//存在该类</span><br><span class="line">@ConditionalOnClass(ServletRequest.class)</span><br><span class="line">//判断是否是servlet web环境</span><br><span class="line">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="line">//自动配置server属性</span><br><span class="line">@EnableConfigurationProperties(ServerProperties.class)</span><br><span class="line">//注册webServerFactoryCustomizerBeanPostProcessor处理器,实例化容器工厂bean时初始化容器工厂</span><br><span class="line">//注册容器工厂</span><br><span class="line">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="line">        ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="line">        ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="line">        ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br><span class="line">public class ServletWebServerFactoryAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    //创建servlet初始化器工厂</span><br><span class="line">    public ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(</span><br><span class="line">            ServerProperties serverProperties) &#123;</span><br><span class="line">        return new ServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnClass(name = &quot;org.apache.catalina.startup.Tomcat&quot;)</span><br><span class="line">    //创建tomcat初始化器工厂</span><br><span class="line">    public TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(</span><br><span class="line">            ServerProperties serverProperties) &#123;</span><br><span class="line">        return new TomcatServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat"><a href="#1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat" class="headerlink" title="1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat"></a>1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">//存在Servlet、Tomcat、UpgradeProtocol类</span><br><span class="line">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</span><br><span class="line">//未创建ServletWebServerFactory的bean</span><br><span class="line">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line">public static class EmbeddedTomcat &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    //创建容器工厂</span><br><span class="line">    public TomcatServletWebServerFactory tomcatServletWebServerFactory() &#123;</span><br><span class="line">        return new TomcatServletWebServerFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、AnnotationConfigServletWebServerApplicationContext容器"><a href="#二、AnnotationConfigServletWebServerApplicationContext容器" class="headerlink" title="二、AnnotationConfigServletWebServerApplicationContext容器"></a>二、AnnotationConfigServletWebServerApplicationContext容器</h3><h4 id="1、实例化AnnotationConfigServletWebServerApplicationContext"><a href="#1、实例化AnnotationConfigServletWebServerApplicationContext" class="headerlink" title="1、实例化AnnotationConfigServletWebServerApplicationContext"></a>1、实例化AnnotationConfigServletWebServerApplicationContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationConfigServletWebServerApplicationContext() &#123;</span><br><span class="line">    this.reader = new AnnotatedBeanDefinitionReader(this);</span><br><span class="line">    this.scanner = new ClassPathBeanDefinitionScanner(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationConfigServletWebServerApplicationContext的refresh方法"><a href="#2、AnnotationConfigServletWebServerApplicationContext的refresh方法" class="headerlink" title="2、AnnotationConfigServletWebServerApplicationContext的refresh方法"></a>2、AnnotationConfigServletWebServerApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //刷新容器</span><br><span class="line">        super.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (RuntimeException ex) &#123;</span><br><span class="line">        //关闭web容器</span><br><span class="line">        stopAndReleaseReactiveWebServer();</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractApplicationContext的refresh方法"><a href="#3、AbstractApplicationContext的refresh方法" class="headerlink" title="3、AbstractApplicationContext的refresh方法"></a>3、AbstractApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">        synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">            // Prepare this context for refreshing.</span><br><span class="line">            //清空scanner缓存、准备刷新容器,与前文容器相同</span><br><span class="line">            prepareRefresh();</span><br><span class="line"></span><br><span class="line">            // Tell the subclass to refresh the internal bean factory.</span><br><span class="line">            //直接获取容器父类GenericApplicationContext中的DefaultListableBeanFactory对象</span><br><span class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">            // Prepare the bean factory for use in this context.</span><br><span class="line">            //对BeanFactory进行功能填充，与前文容器相同</span><br><span class="line">            prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                // Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">                //扫描器扫描AnnotationConfigReactiveWebServerApplicationContext的basePackages</span><br><span class="line">                //并且解析annotatedClasses</span><br><span class="line">                postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Invoke factory processors registered as beans in the context.</span><br><span class="line">                //激活BeanFactory处理器，与前文容器相同</span><br><span class="line">                invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Register bean processors that intercept bean creation.</span><br><span class="line">                //注册拦截bean的处理器，与前文容器相同</span><br><span class="line">                registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Initialize message source for this context.</span><br><span class="line">                //初始化国际化处理，与前文容器相同</span><br><span class="line">                initMessageSource();</span><br><span class="line"></span><br><span class="line">                // Initialize event multicaster for this context.</span><br><span class="line">                //初始化应用消息广播器，与前文容器相同</span><br><span class="line">                initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">                // Initialize other special beans in specific context subclasses.</span><br><span class="line">                //创建web容器</span><br><span class="line">                onRefresh();</span><br><span class="line"></span><br><span class="line">                // Check for listener beans and register them.</span><br><span class="line">                //注册监听器，与前文容器相同</span><br><span class="line">                registerListeners();</span><br><span class="line"></span><br><span class="line">                // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">                //初始化剩下的单例（非懒加载的），与前文容器相同</span><br><span class="line">                finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Last step: publish corresponding event.</span><br><span class="line">                //完成刷新过程，与前文容器相同</span><br><span class="line">                finishRefresh();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            catch (BeansException ex) &#123;</span><br><span class="line">                if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">                            &quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">                destroyBeans();</span><br><span class="line"></span><br><span class="line">                // Reset &apos;active&apos; flag.</span><br><span class="line">                cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">                // Propagate exception to caller.</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            finally &#123;</span><br><span class="line">                // Reset common introspection caches in Spring&apos;s core, since we</span><br><span class="line">                // might not ever need metadata for singleton beans anymore...</span><br><span class="line">                //清空缓存</span><br><span class="line">                resetCommonCaches();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line">#### 4、ServletWebServerApplicationContext的onRefresh方法</span><br></pre></td></tr></table></figure><pre><code>@Overrideprotected void onRefresh() {    super.onRefresh();    try {        //创建web容器        createWebServer();    }    catch (Throwable ex) {        throw new ApplicationContextException(&quot;Unable to start reactive web server&quot;,                ex);    }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 5、ServletWebServerApplicationContext的createWebServer方法</span><br></pre></td></tr></table></figure><pre><code>private void createWebServer() {    WebServer webServer = this.webServer;    ServletContext servletContext = getServletContext();    if (webServer == null &amp;&amp; servletContext == null) {        //获取容器工厂，TomcatServletWebServerFactory        ServletWebServerFactory factory = getWebServerFactory();        //创建web容器，参数为ServletWebServerApplicationContext的selfInitialize方法        this.webServer = factory.getWebServer(getSelfInitializer());    }    else if (servletContext != null) {        try {            getSelfInitializer().onStartup(servletContext);        }        catch (ServletException ex) {            throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;,                    ex);        }    }    //将环境属性初始化到servletContext中    initPropertySources();}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 6、TomcatServletWebServerFactory的getWebServer方法</span><br></pre></td></tr></table></figure><pre><code>@Overridepublic WebServer getWebServer(ServletContextInitializer... initializers) {    //创建tomcat对象    Tomcat tomcat = new Tomcat();    //tomcat安装路径    File baseDir = (this.baseDirectory != null ? this.baseDirectory            : createTempDir(&quot;tomcat&quot;));    tomcat.setBaseDir(baseDir.getAbsolutePath());    //tomcat连接器，默认Http11NioProtocol协议    Connector connector = new Connector(this.protocol);    tomcat.getService().addConnector(connector);    //初始化连接器    customizeConnector(connector);    tomcat.setConnector(connector);    //关闭自动部署    tomcat.getHost().setAutoDeploy(false);    //初始化Engine    configureEngine(tomcat.getEngine());    //添加自定义的连接器    for (Connector additionalConnector : this.additionalTomcatConnectors) {        tomcat.getService().addConnector(additionalConnector);    }    //初始化context    prepareContext(tomcat.getHost(), initializers);    //创建TomcatWebServer    return getTomcatWebServer(tomcat);}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 7、TomcatServletWebServerFactory的customizeConnector方法</span><br></pre></td></tr></table></figure><pre><code>protected void customizeConnector(Connector connector) {    int port = (getPort() &gt;= 0 ? getPort() : 0);    //设置端口    connector.setPort(port);    if (StringUtils.hasText(this.getServerHeader())) {        connector.setAttribute(&quot;server&quot;, this.getServerHeader());    }    //设置地址    if (connector.getProtocolHandler() instanceof AbstractProtocol) {        customizeProtocol((AbstractProtocol&lt;?&gt;) connector.getProtocolHandler());    }    //设置编码方式    if (getUriEncoding() != null) {        connector.setURIEncoding(getUriEncoding().name());    }    // Don&apos;t bind to the socket prematurely if ApplicationContext is slow to start    //设置连接器启动时套接字socket被绑定，连接器停止时套接字socket解除绑定    connector.setProperty(&quot;bindOnInit&quot;, &quot;false&quot;);    //使用SSL协议    if (getSsl() != null &amp;&amp; getSsl().isEnabled()) {        customizeSsl(connector);    }    //设置connector的压缩功能    TomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(            getCompression());    compression.customize(connector);    //自定义的初始化器    for (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {        customizer.customize(connector);    }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 8、CompressionConnectorCustomizer的customize方法</span><br></pre></td></tr></table></figure><pre><code>@Overridepublic void customize(Connector connector) {    //压缩功能配置    if (this.compression != null &amp;&amp; this.compression.getEnabled()) {        ProtocolHandler handler = connector.getProtocolHandler();        if (handler instanceof AbstractHttp11Protocol) {            customize((AbstractHttp11Protocol&lt;?&gt;) handler);        }    }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">    private void customize(AbstractHttp11Protocol&lt;?&gt; protocol) &#123;</span><br><span class="line">        Compression compression = this.compression;</span><br><span class="line">        //打开压缩功能</span><br><span class="line">        protocol.setCompression(&quot;on&quot;);</span><br><span class="line">        //启用压缩的输出内容大小大于2048k</span><br><span class="line">        protocol.setCompressionMinSize(compression.getMinResponseSize());</span><br><span class="line">        //设置压缩类型</span><br><span class="line">        protocol.setCompressibleMimeType(</span><br><span class="line">                StringUtils.arrayToCommaDelimitedString(compression.getMimeTypes()));</span><br><span class="line">        //设置不启用压缩的浏览器类型</span><br><span class="line">        if (this.compression.getExcludedUserAgents() != null) &#123;</span><br><span class="line">            protocol.setNoCompressionUserAgents(StringUtils.arrayToCommaDelimitedString(</span><br><span class="line">                    this.compression.getExcludedUserAgents()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、6）TomcatServletWebServerFactory的configureEngine方法"><a href="#9、接（一、6）TomcatServletWebServerFactory的configureEngine方法" class="headerlink" title="9、接（一、6）TomcatServletWebServerFactory的configureEngine方法"></a>9、接（一、6）TomcatServletWebServerFactory的configureEngine方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void configureEngine(Engine engine) &#123;</span><br><span class="line">    //设置后台线程执行时间间隔</span><br><span class="line">    engine.setBackgroundProcessorDelay(this.backgroundProcessorDelay);</span><br><span class="line">    //添加自定义的engine管道的value</span><br><span class="line">    for (Valve valve : this.engineValves) &#123;</span><br><span class="line">        engine.getPipeline().addValve(valve);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、6）TomcatServletWebServerFactory的prepareContext方法"><a href="#10、接（一、6）TomcatServletWebServerFactory的prepareContext方法" class="headerlink" title="10、接（一、6）TomcatServletWebServerFactory的prepareContext方法"></a>10、接（一、6）TomcatServletWebServerFactory的prepareContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareContext(Host host, ServletContextInitializer[] initializers) &#123;</span><br><span class="line">    //准备Host的docBase</span><br><span class="line">    File documentRoot = getValidDocumentRoot();</span><br><span class="line">    //创建内置的context</span><br><span class="line">    TomcatEmbeddedContext context = new TomcatEmbeddedContext();</span><br><span class="line">    //初始化WebResouceRoot,WebResouceRoot维护了Web应用的资源（Class文件、Jar包以及其他资源文件）</span><br><span class="line">    if (documentRoot != null) &#123;</span><br><span class="line">        context.setResources(new LoaderHidingResourceRoot(context));</span><br><span class="line">    &#125;</span><br><span class="line">    context.setName(getContextPath());</span><br><span class="line">    context.setDisplayName(getDisplayName());</span><br><span class="line">    context.setPath(getContextPath());</span><br><span class="line">    //创建临时目录</span><br><span class="line">    File docBase = (documentRoot != null ? documentRoot</span><br><span class="line">            : createTempDir(&quot;tomcat-docbase&quot;));</span><br><span class="line">    context.setDocBase(docBase.getAbsolutePath());</span><br><span class="line">    context.addLifecycleListener(new FixContextListener());</span><br><span class="line">    //设置当前加载器为web应用父加载器</span><br><span class="line">    context.setParentClassLoader(</span><br><span class="line">            this.resourceLoader != null ? this.resourceLoader.getClassLoader()</span><br><span class="line">                    : ClassUtils.getDefaultClassLoader());</span><br><span class="line">    resetDefaultLocaleMapping(context);</span><br><span class="line">    addLocaleMappings(context);</span><br><span class="line">    context.setUseRelativeRedirects(false);</span><br><span class="line">    configureTldSkipPatterns(context);</span><br><span class="line">    //创建Web应用类加载器</span><br><span class="line">    WebappLoader loader = new WebappLoader(context.getParentClassLoader());</span><br><span class="line">    //设置内置的Web应用类加载器</span><br><span class="line">    loader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName());</span><br><span class="line">    loader.setDelegate(true);</span><br><span class="line">    context.setLoader(loader);</span><br><span class="line">    //添加默认的DefaultServlet，匹配&quot;/&quot;</span><br><span class="line">    if (isRegisterDefaultServlet()) &#123;</span><br><span class="line">        addDefaultServlet(context);</span><br><span class="line">    &#125;</span><br><span class="line">    //添加JspServlet,匹配&quot;*.jsp&quot;、&quot;*.jspx&quot;</span><br><span class="line">    if (shouldRegisterJspServlet()) &#123;</span><br><span class="line">        addJspServlet(context);</span><br><span class="line">        //添加JasperInitializer</span><br><span class="line">        addJasperInitializer(context);</span><br><span class="line">    &#125;</span><br><span class="line">    //监听器，将&quot;/META-INF/resources&quot;下的资源加入ResourceSet</span><br><span class="line">    context.addLifecycleListener(new StaticResourceConfigurer(context));</span><br><span class="line">    ServletContextInitializer[] initializersToUse = mergeInitializers(initializers);</span><br><span class="line">    //context添加到host中</span><br><span class="line">    host.addChild(context);</span><br><span class="line">    //初始化context</span><br><span class="line">    configureContext(context, initializersToUse);</span><br><span class="line">    //待子类实现</span><br><span class="line">    postProcessContext(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（一、6）实例化TomcatWebServer"><a href="#11、接（一、6）实例化TomcatWebServer" class="headerlink" title="11、接（一、6）实例化TomcatWebServer"></a>11、接（一、6）实例化TomcatWebServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public TomcatWebServer(Tomcat tomcat, boolean autoStart) &#123;</span><br><span class="line">    Assert.notNull(tomcat, &quot;Tomcat Server must not be null&quot;);</span><br><span class="line">    this.tomcat = tomcat;</span><br><span class="line">    this.autoStart = autoStart;</span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、TomcatWebServer的initialize方法"><a href="#12、TomcatWebServer的initialize方法" class="headerlink" title="12、TomcatWebServer的initialize方法"></a>12、TomcatWebServer的initialize方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private void initialize() throws WebServerException &#123;</span><br><span class="line">    TomcatWebServer.logger</span><br><span class="line">            .info(&quot;Tomcat initialized with port(s): &quot; + getPortsDescription(false));</span><br><span class="line">    synchronized (this.monitor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //设置engineid</span><br><span class="line">            addInstanceIdToEngineName();</span><br><span class="line">            //检查是否有context</span><br><span class="line">            Context context = findContext();</span><br><span class="line">            //添加删除connector监听器</span><br><span class="line">            context.addLifecycleListener((event) -&gt; &#123;</span><br><span class="line">                if (context.equals(event.getSource())</span><br><span class="line">                        &amp;&amp; Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">                    // Remove service connectors so that protocol binding doesn&apos;t</span><br><span class="line">                    // happen when the service is started.</span><br><span class="line">                    removeServiceConnectors();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // Start the server to trigger initialization listeners</span><br><span class="line">            //启动tomcat</span><br><span class="line">            this.tomcat.start();</span><br><span class="line"></span><br><span class="line">            // We can re-throw failure exception directly in the main thread</span><br><span class="line">            rethrowDeferredStartupExceptions();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                ContextBindings.bindClassLoader(context, context.getNamingToken(),</span><br><span class="line">                        getClass().getClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (NamingException ex) &#123;</span><br><span class="line">                // Naming is not enabled. Continue</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Unlike Jetty, all Tomcat threads are daemon threads. We create a</span><br><span class="line">            // blocking non-daemon to stop immediate shutdown</span><br><span class="line">            //启动线程等待tomcat关闭命令</span><br><span class="line">            startDaemonAwaitThread();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            stopSilently();</span><br><span class="line">            throw new WebServerException(&quot;Unable to start embedded Tomcat&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、EmbeddedServletContainerAutoConfiguration自动配置类&quot;&gt;&lt;a href=&quot;#一、EmbeddedServletContainerAutoConfiguration自动配置类&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
</feed>
