<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-15T08:22:16.693Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小远</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring源码IOC及AOP总结</title>
    <link href="http://yoursite.com/2018/09/15/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81IOC%E5%8F%8AAOP%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/09/15/spring源码/Spring源码IOC及AOP总结/</id>
    <published>2018-09-15T08:22:36.404Z</published>
    <updated>2018-09-15T08:22:16.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基础容器"><a href="#一、基础容器" class="headerlink" title="一、基础容器"></a>一、基础容器</h3><p>基础容器结构图<br><img src="/基础容器结构图.png" alt="avatar"></p><h4 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h4><p>BeanFactory接口：定义了IOC容器基本方法，如getBean方法。<br>AutowireCapableBeanFactory接口：定义了创建bean及自动装配相关方法。<br>HierarchicalBeanFactory接口：定义了容器父子关系相关方法。<br>ListableBeanFactory接口：定义了容器中bean的集合相关方法。<br>ConfigurableBeanFactory接口：定义了配置基础容器相关方法，如设置类加载器、添加bean后处理器等。<br>ConfigurableListableBeanFactory接口：继承了以上所有接口，并定义了BeanDefinition的获取、冻结配置、预加载单例等方法。  </p><h4 id="2、实现类"><a href="#2、实现类" class="headerlink" title="2、实现类"></a>2、实现类</h4><p>XmlBeanFactory：最基础的ioc容器，内部拥有一个XmlBeanDefinitionReader，用来读取并解析xml文件，该类继承DefaultListableBeanFactory。<br>DefaultListableBeanFactory：实现了ConfigurableListableBeanFactory接口。实现了BeanDefinitionRegistry接口，提供了BeanDefinition的注册功能。<br>AbstractAutowireCapableBeanFactory抽象类：实现了AutowireCapableBeanFactory接口，该类doCreateBean方法完成了bean的创建及初始化。<br>AbstractBeanFactory抽象类：该类完成bean的作用域管理及循环依赖的检查。<br>DefaultSingletonBeanRegistry：该类完成单例bean的管理。  </p><h3 id="二、扩展容器"><a href="#二、扩展容器" class="headerlink" title="二、扩展容器"></a>二、扩展容器</h3><p>扩展容器结构图<br><img src="/扩展容器结构图.png" alt="avatar"></p><h4 id="1、接口-1"><a href="#1、接口-1" class="headerlink" title="1、接口"></a>1、接口</h4><p>ApplicationContext接口：定义了扩展容器的基本方法，如getApplicationName方法。<br>ConfigurableApplicationContext接口：定义了配置扩展容器相关方法，如添加BeanFactory后处理器、监听器及刷新上下文方法。<br>WebApplicationContext接口：定义了Servlet容器基本属性。<br>ConfigurableWebApplicationContext接口：定义了配置Servlet容器相关方法。    </p><h4 id="2、实现类-1"><a href="#2、实现类-1" class="headerlink" title="2、实现类"></a>2、实现类</h4><p>AnnotationConfigApplicationContext：基于注解的IOC容器拥有ClassPathBeanDefinitionScanner扫描器，加载注解了@Component的类。该类继承GenericApplicationContext。<br>GenericApplicationContext：内部维护了一个DefaultListableBeanFactory。实现BeanDefinitionRegistry接口，提供了BeanDefinition的注册功能。<br>AbstractApplicationContext抽象类：实现了ConfigurableApplicationContext接口，提供了扩展容器配置相关方法，该类refresh方法完成容器上下文刷新。<br>AnnotationConfigServletWebServerApplicationContext：基于注解的ServletWeb的IOC容器，基于注解的IOC容器拥有ClassPathBeanDefinitionScanner扫描器，加载注解了@Component的类。该类继承ServletWebServerApplicationContext。<br>ServletWebServerApplicationContext：该类重写了父类的关于Servlet容器配置的相关方法，Servlet容器在该类中创建。<br>GenericWebApplicationContext：实现了ConfigurableWebApplicationContext接口，提供了Servlet容器配置的相关方法。</p><h3 id="一、AOP"><a href="#一、AOP" class="headerlink" title="一、AOP"></a>一、AOP</h3><p>基于注解的AOP代理对象的创建器AnnotationAwareAspectJAutoProxyCreator的父类AbstractAutoProxyCreator实现了SmartInstantiationAwareBeanPostProcessor后处理器<br>在bean的初始化完成后postProcessAfterInitialization方法会进行代理对象的创建。<br>基于JDK的动态代理，拦截器为JdkDynamicAopProxy，其中拥有一个AdvisedSupport，用来维护方法的拦截器链。<br>基于cglib的动态代理，拦截器为CglibAopProxy，同样通过AdvisedSupport来维护方法的拦截器链。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、基础容器&quot;&gt;&lt;a href=&quot;#一、基础容器&quot; class=&quot;headerlink&quot; title=&quot;一、基础容器&quot;&gt;&lt;/a&gt;一、基础容器&lt;/h3&gt;&lt;p&gt;基础容器结构图&lt;br&gt;&lt;img src=&quot;/基础容器结构图.png&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>rocketmq源码Producer生产者</title>
    <link href="http://yoursite.com/2018/09/08/rocketmq%E6%BA%90%E7%A0%81/rocketmq%E6%BA%90%E7%A0%81Producer%E7%94%9F%E4%BA%A7%E8%80%85/"/>
    <id>http://yoursite.com/2018/09/08/rocketmq源码/rocketmq源码Producer生产者/</id>
    <published>2018-09-08T09:15:07.381Z</published>
    <updated>2018-09-08T08:51:43.758Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class Producer &#123;</span><br><span class="line">    public static void main(String[] args) throws MQClientException&#123;</span><br><span class="line">        /**</span><br><span class="line">         * 一个应用创建一个Producer，由应用来维护此对象，可以设置为全局对象或者单例&lt;br&gt;</span><br><span class="line">         * 注意：ProducerGroupName需要由应用来保证唯一&lt;br&gt;</span><br><span class="line">         * ProducerGroup这个概念发送普通的消息时，作用不大，但是发送分布式事务消息时，比较关键，</span><br><span class="line">         * 因为服务器会回查这个Group下的任意一个Producer</span><br><span class="line">         */</span><br><span class="line">        DefaultMQProducer producer = new DefaultMQProducer(&quot;ProducerGroupTest&quot;);</span><br><span class="line">        </span><br><span class="line">        producer.setNamesrvAddr(&quot;ip:port&quot;);</span><br><span class="line">        /**</span><br><span class="line">         * Producer对象在使用之前必须要调用start初始化，初始化一次即可&lt;br&gt;</span><br><span class="line">         * 注意：切记不可以在每次发送消息时，都调用start方法</span><br><span class="line">         */</span><br><span class="line">        producer.start();</span><br><span class="line"> </span><br><span class="line">        /**</span><br><span class="line">         * 下面这段代码表明一个Producer对象可以发送多个topic，多个tag的消息。</span><br><span class="line">         * 注意：send方法是同步调用，只要不抛异常就标识成功。但是发送成功也可会有多种状态，&lt;br&gt;</span><br><span class="line">         * 例如消息写入Master成功，但是Slave不成功，这种情况消息属于成功，但是对于个别应用如果对消息可靠性要求极高，&lt;br&gt;</span><br><span class="line">         * 需要对这种情况做处理。另外，消息可能会存在发送失败的情况，失败重试由应用来处理。</span><br><span class="line">         */</span><br><span class="line">        try &#123;</span><br><span class="line">              &#123;</span><br><span class="line">                Message msg = new Message(&quot;broker-a&quot;,// topic</span><br><span class="line">                    &quot;TagB&quot;,// tag</span><br><span class="line">                    &quot;OrderID002&quot;,// key</span><br><span class="line">                    (&quot;Hello MetaQ2&quot;).getBytes());// body</span><br><span class="line">                SendResult sendResult = producer.send(msg);</span><br><span class="line">                System.out.println(sendResult);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        /**</span><br><span class="line">         * 应用退出时，要调用shutdown来清理资源，关闭网络连接，从MetaQ服务器上注销自己</span><br><span class="line">         * 注意：我们建议应用在JBOSS、Tomcat等容器的退出钩子里调用shutdown方法</span><br><span class="line">         */</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、Producer启动过程"><a href="#一、Producer启动过程" class="headerlink" title="一、Producer启动过程"></a>一、Producer启动过程</h3><h4 id="1、实例化DefaultMQProducer"><a href="#1、实例化DefaultMQProducer" class="headerlink" title="1、实例化DefaultMQProducer"></a>1、实例化DefaultMQProducer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public DefaultMQProducer(String producerGroup) &#123;</span><br><span class="line">    this(producerGroup, (RPCHook) null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public DefaultMQProducer(final String producerGroup, RPCHook rpcHook) &#123;</span><br><span class="line">    this.producerGroup = producerGroup;</span><br><span class="line">    defaultMQProducerImpl = new DefaultMQProducerImpl(this, rpcHook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultMQProducer的start方法"><a href="#2、DefaultMQProducer的start方法" class="headerlink" title="2、DefaultMQProducer的start方法"></a>2、DefaultMQProducer的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void start() throws MQClientException &#123;</span><br><span class="line">    this.defaultMQProducerImpl.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultMQProducerImpl的start方法"><a href="#3、DefaultMQProducerImpl的start方法" class="headerlink" title="3、DefaultMQProducerImpl的start方法"></a>3、DefaultMQProducerImpl的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void start() throws MQClientException &#123;</span><br><span class="line">    this.start(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public void start(final boolean startFactory) throws MQClientException &#123;</span><br><span class="line">    switch (this.serviceState) &#123;</span><br><span class="line">        case CREATE_JUST:</span><br><span class="line">            //切换Producer状态</span><br><span class="line">            this.serviceState = ServiceState.START_FAILED;</span><br><span class="line">            //检查生产者组名是否正确配置</span><br><span class="line">            this.checkConfig();</span><br><span class="line">            //jvm进程id作为producer的intancename名</span><br><span class="line">            if (!this.defaultMQProducer.getProducerGroup().equals(MixAll.CLIENT_INNER_PRODUCER_GROUP)) &#123;</span><br><span class="line">                this.defaultMQProducer.changeInstanceNameToPID();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //初始化mQClientFactory为MQClientInstance，并将该实例加入factoryTable</span><br><span class="line">            this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQProducer, rpcHook);</span><br><span class="line">            //将producer注册到MQClientInstance.producerTbale</span><br><span class="line">            boolean registerOK = mQClientFactory.registerProducer(this.defaultMQProducer.getProducerGroup(), this);</span><br><span class="line">            //注册失败</span><br><span class="line">            if (!registerOK) &#123;</span><br><span class="line">                this.serviceState = ServiceState.CREATE_JUST;</span><br><span class="line">                throw new MQClientException(&quot;The producer group[&quot; + this.defaultMQProducer.getProducerGroup()</span><br><span class="line">                    + &quot;] has been created before, specify another name please.&quot; + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),</span><br><span class="line">                    null);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //保存topic对应的routeInfo</span><br><span class="line">            this.topicPublishInfoTable.put(this.defaultMQProducer.getCreateTopicKey(), new TopicPublishInfo());</span><br><span class="line"></span><br><span class="line">            if (startFactory) &#123;</span><br><span class="line">                //启动MQClientInstance</span><br><span class="line">                mQClientFactory.start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.info(&quot;the producer [&#123;&#125;] start OK. sendMessageWithVIPChannel=&#123;&#125;&quot;, this.defaultMQProducer.getProducerGroup(),</span><br><span class="line">                this.defaultMQProducer.isSendMessageWithVIPChannel());</span><br><span class="line">            //切换Producer状态</span><br><span class="line">            this.serviceState = ServiceState.RUNNING;</span><br><span class="line">            break;</span><br><span class="line">        case RUNNING:</span><br><span class="line">        case START_FAILED:</span><br><span class="line">        case SHUTDOWN_ALREADY:</span><br><span class="line">            throw new MQClientException(&quot;The producer service state not OK, maybe started once, &quot;</span><br><span class="line">                + this.serviceState</span><br><span class="line">                + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),</span><br><span class="line">                null);</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动的时候向所有的broker发送heartbeat</span><br><span class="line">    this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、MQClientInstance的start方法"><a href="#4、MQClientInstance的start方法" class="headerlink" title="4、MQClientInstance的start方法"></a>4、MQClientInstance的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public void start() throws MQClientException &#123;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        switch (this.serviceState) &#123;</span><br><span class="line">            case CREATE_JUST:</span><br><span class="line">                this.serviceState = ServiceState.START_FAILED;</span><br><span class="line">                // If not specified,looking address from name server</span><br><span class="line">                //获取注册中心地址</span><br><span class="line">                if (null == this.clientConfig.getNamesrvAddr()) &#123;</span><br><span class="line">                    this.mQClientAPIImpl.fetchNameServerAddr();</span><br><span class="line">                &#125;</span><br><span class="line">                // Start request-response channel</span><br><span class="line">                //启动client与注册中心的通讯,ClientRemotingProcessor处理请求</span><br><span class="line">                this.mQClientAPIImpl.start();</span><br><span class="line">                // Start various schedule tasks</span><br><span class="line">                //启动调度服务</span><br><span class="line">                this.startScheduledTask();</span><br><span class="line">                // Start pull service</span><br><span class="line">                //启动拉服务</span><br><span class="line">                this.pullMessageService.start();</span><br><span class="line">                // Start rebalance service</span><br><span class="line">                //启动负载均衡</span><br><span class="line">                this.rebalanceService.start();</span><br><span class="line">                // Start push service</span><br><span class="line">                //启动推服务</span><br><span class="line">                this.defaultMQProducer.getDefaultMQProducerImpl().start(false);</span><br><span class="line">                log.info(&quot;the client factory [&#123;&#125;] start OK&quot;, this.clientId);</span><br><span class="line">                this.serviceState = ServiceState.RUNNING;</span><br><span class="line">                break;</span><br><span class="line">            case RUNNING:</span><br><span class="line">                break;</span><br><span class="line">            case SHUTDOWN_ALREADY:</span><br><span class="line">                break;</span><br><span class="line">            case START_FAILED:</span><br><span class="line">                throw new MQClientException(&quot;The Factory object[&quot; + this.getClientId() + &quot;] has been created before, and failed.&quot;, null);</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、MQClientInstance的startScheduledTask方法"><a href="#5、MQClientInstance的startScheduledTask方法" class="headerlink" title="5、MQClientInstance的startScheduledTask方法"></a>5、MQClientInstance的startScheduledTask方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">private void startScheduledTask() &#123;</span><br><span class="line">    if (null == this.clientConfig.getNamesrvAddr()) &#123;</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //获取nameServer的地址</span><br><span class="line">                    MQClientInstance.this.mQClientAPIImpl.fetchNameServerAddr();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    log.error(&quot;ScheduledTask fetchNameServerAddr exception&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //更新topicRouteData</span><br><span class="line">                MQClientInstance.this.updateTopicRouteInfoFromNameServer();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;ScheduledTask updateTopicRouteInfoFromNameServer exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 10, this.clientConfig.getPollNameServerInterval(), TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //清理掉线的broker</span><br><span class="line">                MQClientInstance.this.cleanOfflineBroker();</span><br><span class="line">                //给broker发送心跳</span><br><span class="line">                MQClientInstance.this.sendHeartbeatToAllBrokerWithLock();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;ScheduledTask sendHeartbeatToAllBroker exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000, this.clientConfig.getHeartbeatBrokerInterval(), TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //保存consumerOffset</span><br><span class="line">                MQClientInstance.this.persistAllConsumerOffset();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;ScheduledTask persistAllConsumerOffset exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000 * 10, this.clientConfig.getPersistConsumerOffsetInterval(), TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //根据processQueueTable的大小决定是否需要增加或者减少threadPool的大小</span><br><span class="line">                MQClientInstance.this.adjustThreadPool();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;ScheduledTask adjustThreadPool exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1, 1, TimeUnit.MINUTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Producer推送消息"><a href="#二、Producer推送消息" class="headerlink" title="二、Producer推送消息"></a>二、Producer推送消息</h3><h4 id="1、DefaultMQProducer的send方法"><a href="#1、DefaultMQProducer的send方法" class="headerlink" title="1、DefaultMQProducer的send方法"></a>1、DefaultMQProducer的send方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SendResult send(Message msg) throws MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    return this.defaultMQProducerImpl.send(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultMQProducerImpl的send方法"><a href="#2、DefaultMQProducerImpl的send方法" class="headerlink" title="2、DefaultMQProducerImpl的send方法"></a>2、DefaultMQProducerImpl的send方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SendResult send(Message msg) throws MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    return send(msg, this.defaultMQProducer.getSendMsgTimeout());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SendResult send(Message msg,long timeout) throws MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    return this.sendDefaultImpl(msg, CommunicationMode.SYNC, null, timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultMQProducerImpl的sendDefaultImpl方法"><a href="#3、DefaultMQProducerImpl的sendDefaultImpl方法" class="headerlink" title="3、DefaultMQProducerImpl的sendDefaultImpl方法"></a>3、DefaultMQProducerImpl的sendDefaultImpl方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">private SendResult sendDefaultImpl(</span><br><span class="line">    Message msg,</span><br><span class="line">    final CommunicationMode communicationMode,</span><br><span class="line">    final SendCallback sendCallback,</span><br><span class="line">    final long timeout</span><br><span class="line">) throws MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    //检查运行状态</span><br><span class="line">    this.makeSureStateOK();</span><br><span class="line">    Validators.checkMessage(msg, this.defaultMQProducer);</span><br><span class="line"></span><br><span class="line">    final long invokeID = random.nextLong();</span><br><span class="line">    long beginTimestampFirst = System.currentTimeMillis();</span><br><span class="line">    long beginTimestampPrev = beginTimestampFirst;</span><br><span class="line">    long endTimestamp = beginTimestampFirst;</span><br><span class="line">    //根据消息的topic来获取相关topicd的路由信息</span><br><span class="line">    TopicPublishInfo topicPublishInfo = this.tryToFindTopicPublishInfo(msg.getTopic());</span><br><span class="line">    if (topicPublishInfo != null &amp;&amp; topicPublishInfo.ok()) &#123;</span><br><span class="line">        MessageQueue mq = null;</span><br><span class="line">        Exception exception = null;</span><br><span class="line">        SendResult sendResult = null;</span><br><span class="line">        int timesTotal = communicationMode == CommunicationMode.SYNC ? 1 + this.defaultMQProducer.getRetryTimesWhenSendFailed() : 1;</span><br><span class="line">        int times = 0;</span><br><span class="line">        String[] brokersSent = new String[timesTotal];</span><br><span class="line">        //消息发送失败重发次数</span><br><span class="line">        for (; times &lt; timesTotal; times++) &#123;</span><br><span class="line">            String lastBrokerName = null == mq ? null : mq.getBrokerName();</span><br><span class="line">            //根据lastBrokerName选择发送队列</span><br><span class="line">            MessageQueue mqSelected = this.selectOneMessageQueue(topicPublishInfo, lastBrokerName);</span><br><span class="line">            if (mqSelected != null) &#123;</span><br><span class="line">                mq = mqSelected;</span><br><span class="line">                brokersSent[times] = mq.getBrokerName();</span><br><span class="line">                try &#123;</span><br><span class="line">                    //发送start时间</span><br><span class="line">                    beginTimestampPrev = System.currentTimeMillis();</span><br><span class="line">                    //发送消息</span><br><span class="line">                    sendResult = this.sendKernelImpl(msg, mq, communicationMode, sendCallback, topicPublishInfo, timeout);</span><br><span class="line">                    //发送结束时间</span><br><span class="line">                    endTimestamp = System.currentTimeMillis();</span><br><span class="line">                    //更新broker的延迟情况</span><br><span class="line">                    this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, false);</span><br><span class="line">                    switch (communicationMode) &#123;</span><br><span class="line">                        case ASYNC:</span><br><span class="line">                            return null;</span><br><span class="line">                        case ONEWAY:</span><br><span class="line">                            return null;</span><br><span class="line">                        case SYNC:</span><br><span class="line">                            if (sendResult.getSendStatus() != SendStatus.SEND_OK) &#123;</span><br><span class="line">                                //同步发送成功但存储有问题时&amp;&amp;配置存储异常时重新发送时，进行重试</span><br><span class="line">                                if (this.defaultMQProducer.isRetryAnotherBrokerWhenNotStoreOK()) &#123;</span><br><span class="line">                                    continue;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            return sendResult;</span><br><span class="line">                        default:</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (RemotingException e) &#123;</span><br><span class="line">                    endTimestamp = System.currentTimeMillis();</span><br><span class="line">                    this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, true);</span><br><span class="line">                    log.warn(String.format(&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                    log.warn(msg.toString());</span><br><span class="line">                    exception = e;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125; catch (MQClientException e) &#123;</span><br><span class="line">                    endTimestamp = System.currentTimeMillis();</span><br><span class="line">                    this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, true);</span><br><span class="line">                    log.warn(String.format(&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                    log.warn(msg.toString());</span><br><span class="line">                    exception = e;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125; catch (MQBrokerException e) &#123;</span><br><span class="line">                    endTimestamp = System.currentTimeMillis();</span><br><span class="line">                    this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, true);</span><br><span class="line">                    log.warn(String.format(&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                    log.warn(msg.toString());</span><br><span class="line">                    exception = e;</span><br><span class="line">                    switch (e.getResponseCode()) &#123;</span><br><span class="line">                        case ResponseCode.TOPIC_NOT_EXIST:</span><br><span class="line">                        case ResponseCode.SERVICE_NOT_AVAILABLE:</span><br><span class="line">                        case ResponseCode.SYSTEM_ERROR:</span><br><span class="line">                        case ResponseCode.NO_PERMISSION:</span><br><span class="line">                        case ResponseCode.NO_BUYER_ID:</span><br><span class="line">                        case ResponseCode.NOT_IN_CURRENT_UNIT:</span><br><span class="line">                            continue;</span><br><span class="line">                        default:</span><br><span class="line">                            if (sendResult != null) &#123;</span><br><span class="line">                                return sendResult;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            throw e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    endTimestamp = System.currentTimeMillis();</span><br><span class="line">                    this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, false);</span><br><span class="line">                    log.warn(String.format(&quot;sendKernelImpl exception, throw exception, InvokeID: %s, RT: %sms, Broker: %s&quot;, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                    log.warn(msg.toString());</span><br><span class="line"></span><br><span class="line">                    log.warn(&quot;sendKernelImpl exception&quot;, e);</span><br><span class="line">                    log.warn(msg.toString());</span><br><span class="line">                    throw e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //返回发送结果</span><br><span class="line">        if (sendResult != null) &#123;</span><br><span class="line">            return sendResult;</span><br><span class="line">        &#125;</span><br><span class="line">        //根据不同情况，抛出不同的异常</span><br><span class="line">        String info = String.format(&quot;Send [%d] times, still failed, cost [%d]ms, Topic: %s, BrokersSent: %s&quot;,</span><br><span class="line">            times,</span><br><span class="line">            System.currentTimeMillis() - beginTimestampFirst,</span><br><span class="line">            msg.getTopic(),</span><br><span class="line">            Arrays.toString(brokersSent));</span><br><span class="line"></span><br><span class="line">        info += FAQUrl.suggestTodo(FAQUrl.SEND_MSG_FAILED);</span><br><span class="line"></span><br><span class="line">        MQClientException mqClientException = new MQClientException(info, exception);</span><br><span class="line">        if (exception instanceof MQBrokerException) &#123;</span><br><span class="line">            mqClientException.setResponseCode(((MQBrokerException) exception).getResponseCode());</span><br><span class="line">        &#125; else if (exception instanceof RemotingConnectException) &#123;</span><br><span class="line">            mqClientException.setResponseCode(ClientErrorCode.CONNECT_BROKER_EXCEPTION);</span><br><span class="line">        &#125; else if (exception instanceof RemotingTimeoutException) &#123;</span><br><span class="line">            mqClientException.setResponseCode(ClientErrorCode.ACCESS_BROKER_TIMEOUT);</span><br><span class="line">        &#125; else if (exception instanceof MQClientException) &#123;</span><br><span class="line">            mqClientException.setResponseCode(ClientErrorCode.BROKER_NOT_EXIST_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        throw mqClientException;</span><br><span class="line">    &#125;</span><br><span class="line">    //Namesrv找不到异常</span><br><span class="line">    List&lt;String&gt; nsList = this.getmQClientFactory().getMQClientAPIImpl().getNameServerAddressList();</span><br><span class="line">    if (null == nsList || nsList.isEmpty()) &#123;</span><br><span class="line">        throw new MQClientException(</span><br><span class="line">            &quot;No name server address, please set it.&quot; + FAQUrl.suggestTodo(FAQUrl.NAME_SERVER_ADDR_NOT_EXIST_URL), null).setResponseCode(ClientErrorCode.NO_NAME_SERVER_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line">    //消息路由找不到异常</span><br><span class="line">    throw new MQClientException(&quot;No route info of this topic, &quot; + msg.getTopic() + FAQUrl.suggestTodo(FAQUrl.NO_TOPIC_ROUTE_INFO),</span><br><span class="line">        null).setResponseCode(ClientErrorCode.NOT_FOUND_TOPIC_EXCEPTION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultMQProducerImpl的tryToFindTopicPublishInfo方法"><a href="#4、DefaultMQProducerImpl的tryToFindTopicPublishInfo方法" class="headerlink" title="4、DefaultMQProducerImpl的tryToFindTopicPublishInfo方法"></a>4、DefaultMQProducerImpl的tryToFindTopicPublishInfo方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private TopicPublishInfo tryToFindTopicPublishInfo(final String topic) &#123;</span><br><span class="line">    //缓存中获取Topic发布信息</span><br><span class="line">    TopicPublishInfo topicPublishInfo = this.topicPublishInfoTable.get(topic);</span><br><span class="line">    //从Namesrv获取</span><br><span class="line">    if (null == topicPublishInfo || !topicPublishInfo.ok()) &#123;</span><br><span class="line">        this.topicPublishInfoTable.putIfAbsent(topic, new TopicPublishInfo());</span><br><span class="line">        this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);</span><br><span class="line">        topicPublishInfo = this.topicPublishInfoTable.get(topic);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取的Topic发布信息时候可用，则返回</span><br><span class="line">    if (topicPublishInfo.isHaveTopicRouterInfo() || topicPublishInfo.ok()) &#123;</span><br><span class="line">        return topicPublishInfo;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //使用&#123;@link DefaultMQProducer#createTopicKey&#125; 对应的Topic发布信息。</span><br><span class="line">        //用于Topic发布信息不存在&amp;&amp;Broker支持自动创建Topic</span><br><span class="line">        this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true, this.defaultMQProducer);</span><br><span class="line">        topicPublishInfo = this.topicPublishInfoTable.get(topic);</span><br><span class="line">        return topicPublishInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（二、3）DefaultMQProducerImpl的selectOneMessageQueue方法"><a href="#5、接（二、3）DefaultMQProducerImpl的selectOneMessageQueue方法" class="headerlink" title="5、接（二、3）DefaultMQProducerImpl的selectOneMessageQueue方法"></a>5、接（二、3）DefaultMQProducerImpl的selectOneMessageQueue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final String lastBrokerName) &#123;</span><br><span class="line">    return this.mqFaultStrategy.selectOneMessageQueue(tpInfo, lastBrokerName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、MQFaultStrategy的selectOneMessageQueue方法"><a href="#6、MQFaultStrategy的selectOneMessageQueue方法" class="headerlink" title="6、MQFaultStrategy的selectOneMessageQueue方法"></a>6、MQFaultStrategy的selectOneMessageQueue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final String lastBrokerName) &#123;</span><br><span class="line">    //判断是否开启了容错策略,默认关闭</span><br><span class="line">    if (this.sendLatencyFaultEnable) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取一个可用的并且brokerName=lastBrokerName的消息队列</span><br><span class="line">            int index = tpInfo.getSendWhichQueue().getAndIncrement();</span><br><span class="line">            for (int i = 0; i &lt; tpInfo.getMessageQueueList().size(); i++) &#123;</span><br><span class="line">                int pos = Math.abs(index++) % tpInfo.getMessageQueueList().size();</span><br><span class="line">                if (pos &lt; 0)</span><br><span class="line">                    pos = 0;</span><br><span class="line">                MessageQueue mq = tpInfo.getMessageQueueList().get(pos);</span><br><span class="line">                if (latencyFaultTolerance.isAvailable(mq.getBrokerName())) &#123;</span><br><span class="line">                    if (null == lastBrokerName || mq.getBrokerName().equals(lastBrokerName))</span><br><span class="line">                        return mq;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //选择一个相对好的broker，不考虑可用性的消息队列</span><br><span class="line">            final String notBestBroker = latencyFaultTolerance.pickOneAtLeast();</span><br><span class="line">            int writeQueueNums = tpInfo.getQueueIdByBroker(notBestBroker);</span><br><span class="line">            if (writeQueueNums &gt; 0) &#123;</span><br><span class="line">                final MessageQueue mq = tpInfo.selectOneMessageQueue();</span><br><span class="line">                if (notBestBroker != null) &#123;</span><br><span class="line">                    mq.setBrokerName(notBestBroker);</span><br><span class="line">                    mq.setQueueId(tpInfo.getSendWhichQueue().getAndIncrement() % writeQueueNums);</span><br><span class="line">                &#125;</span><br><span class="line">                return mq;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                latencyFaultTolerance.remove(notBestBroker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;Error occurred when selecting message queue&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        //随机选择一个消息队列</span><br><span class="line">        return tpInfo.selectOneMessageQueue();</span><br><span class="line">    &#125;</span><br><span class="line">    //获得lastBrokerName对应的一个消息队列，不考虑该队列的可用性</span><br><span class="line">    return tpInfo.selectOneMessageQueue(lastBrokerName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（二、3）DefaultMQProducerImpl的sendKernelImpl方法"><a href="#7、接（二、3）DefaultMQProducerImpl的sendKernelImpl方法" class="headerlink" title="7、接（二、3）DefaultMQProducerImpl的sendKernelImpl方法"></a>7、接（二、3）DefaultMQProducerImpl的sendKernelImpl方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">private SendResult sendKernelImpl(final Message msg,</span><br><span class="line">    final MessageQueue mq,</span><br><span class="line">    final CommunicationMode communicationMode,</span><br><span class="line">    final SendCallback sendCallback,</span><br><span class="line">    final TopicPublishInfo topicPublishInfo,</span><br><span class="line">    final long timeout) throws MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    //获取 broker地址</span><br><span class="line">    String brokerAddr = this.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());</span><br><span class="line">    if (null == brokerAddr) &#123;</span><br><span class="line">        tryToFindTopicPublishInfo(mq.getTopic());</span><br><span class="line">        brokerAddr = this.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SendMessageContext context = null;</span><br><span class="line">    if (brokerAddr != null) &#123;</span><br><span class="line">        //是否使用broker vip通道。broker会开启两个端口对外服务。</span><br><span class="line">        brokerAddr = MixAll.brokerVIPChannel(this.defaultMQProducer.isSendMessageWithVIPChannel(), brokerAddr);</span><br><span class="line"></span><br><span class="line">        byte[] prevBody = msg.getBody();</span><br><span class="line">        try &#123;</span><br><span class="line">            //for MessageBatch,ID has been set in the generating process</span><br><span class="line">            //设置唯一编号</span><br><span class="line">            if (!(msg instanceof MessageBatch)) &#123;</span><br><span class="line">                MessageClientIDSetter.setUniqID(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            //消息压缩</span><br><span class="line">            int sysFlag = 0;</span><br><span class="line">            if (this.tryToCompressMessage(msg)) &#123;</span><br><span class="line">                sysFlag |= MessageSysFlag.COMPRESSED_FLAG;</span><br><span class="line">            &#125;</span><br><span class="line">            //事务</span><br><span class="line">            final String tranMsg = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class="line">            if (tranMsg != null &amp;&amp; Boolean.parseBoolean(tranMsg)) &#123;</span><br><span class="line">                sysFlag |= MessageSysFlag.TRANSACTION_PREPARED_TYPE;</span><br><span class="line">            &#125;</span><br><span class="line">            //hook：发送消息校验</span><br><span class="line">            if (hasCheckForbiddenHook()) &#123;</span><br><span class="line">                CheckForbiddenContext checkForbiddenContext = new CheckForbiddenContext();</span><br><span class="line">                checkForbiddenContext.setNameSrvAddr(this.defaultMQProducer.getNamesrvAddr());</span><br><span class="line">                checkForbiddenContext.setGroup(this.defaultMQProducer.getProducerGroup());</span><br><span class="line">                checkForbiddenContext.setCommunicationMode(communicationMode);</span><br><span class="line">                checkForbiddenContext.setBrokerAddr(brokerAddr);</span><br><span class="line">                checkForbiddenContext.setMessage(msg);</span><br><span class="line">                checkForbiddenContext.setMq(mq);</span><br><span class="line">                checkForbiddenContext.setUnitMode(this.isUnitMode());</span><br><span class="line">                this.executeCheckForbiddenHook(checkForbiddenContext);</span><br><span class="line">            &#125;</span><br><span class="line">            //hook：发送消息前逻辑</span><br><span class="line">            if (this.hasSendMessageHook()) &#123;</span><br><span class="line">                context = new SendMessageContext();</span><br><span class="line">                context.setProducer(this);</span><br><span class="line">                context.setProducerGroup(this.defaultMQProducer.getProducerGroup());</span><br><span class="line">                context.setCommunicationMode(communicationMode);</span><br><span class="line">                context.setBornHost(this.defaultMQProducer.getClientIP());</span><br><span class="line">                context.setBrokerAddr(brokerAddr);</span><br><span class="line">                context.setMessage(msg);</span><br><span class="line">                context.setMq(mq);</span><br><span class="line">                String isTrans = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class="line">                if (isTrans != null &amp;&amp; isTrans.equals(&quot;true&quot;)) &#123;</span><br><span class="line">                    context.setMsgType(MessageType.Trans_Msg_Half);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (msg.getProperty(&quot;__STARTDELIVERTIME&quot;) != null || msg.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL) != null) &#123;</span><br><span class="line">                    context.setMsgType(MessageType.Delay_Msg);</span><br><span class="line">                &#125;</span><br><span class="line">                this.executeSendMessageHookBefore(context);</span><br><span class="line">            &#125;</span><br><span class="line">            //构建发送消息请求</span><br><span class="line">            SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();</span><br><span class="line">            requestHeader.setProducerGroup(this.defaultMQProducer.getProducerGroup());</span><br><span class="line">            requestHeader.setTopic(msg.getTopic());</span><br><span class="line">            requestHeader.setDefaultTopic(this.defaultMQProducer.getCreateTopicKey());</span><br><span class="line">            requestHeader.setDefaultTopicQueueNums(this.defaultMQProducer.getDefaultTopicQueueNums());</span><br><span class="line">            requestHeader.setQueueId(mq.getQueueId());</span><br><span class="line">            requestHeader.setSysFlag(sysFlag);</span><br><span class="line">            requestHeader.setBornTimestamp(System.currentTimeMillis());</span><br><span class="line">            requestHeader.setFlag(msg.getFlag());</span><br><span class="line">            requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));</span><br><span class="line">            requestHeader.setReconsumeTimes(0);</span><br><span class="line">            requestHeader.setUnitMode(this.isUnitMode());</span><br><span class="line">            requestHeader.setBatch(msg instanceof MessageBatch);</span><br><span class="line">            if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                String reconsumeTimes = MessageAccessor.getReconsumeTime(msg);</span><br><span class="line">                if (reconsumeTimes != null) &#123;</span><br><span class="line">                    requestHeader.setReconsumeTimes(Integer.valueOf(reconsumeTimes));</span><br><span class="line">                    MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_RECONSUME_TIME);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String maxReconsumeTimes = MessageAccessor.getMaxReconsumeTimes(msg);</span><br><span class="line">                if (maxReconsumeTimes != null) &#123;</span><br><span class="line">                    requestHeader.setMaxReconsumeTimes(Integer.valueOf(maxReconsumeTimes));</span><br><span class="line">                    MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_MAX_RECONSUME_TIMES);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //发送消息</span><br><span class="line">            SendResult sendResult = null;</span><br><span class="line">            switch (communicationMode) &#123;</span><br><span class="line">                case ASYNC:</span><br><span class="line">                    sendResult = this.mQClientFactory.getMQClientAPIImpl().sendMessage(</span><br><span class="line">                        brokerAddr,</span><br><span class="line">                        mq.getBrokerName(),</span><br><span class="line">                        msg,</span><br><span class="line">                        requestHeader,</span><br><span class="line">                        timeout,</span><br><span class="line">                        communicationMode,</span><br><span class="line">                        sendCallback,</span><br><span class="line">                        topicPublishInfo,</span><br><span class="line">                        this.mQClientFactory,</span><br><span class="line">                        this.defaultMQProducer.getRetryTimesWhenSendAsyncFailed(),</span><br><span class="line">                        context,</span><br><span class="line">                        this);</span><br><span class="line">                    break;</span><br><span class="line">                case ONEWAY:</span><br><span class="line">                case SYNC:</span><br><span class="line">                    sendResult = this.mQClientFactory.getMQClientAPIImpl().sendMessage(</span><br><span class="line">                        brokerAddr,</span><br><span class="line">                        mq.getBrokerName(),</span><br><span class="line">                        msg,</span><br><span class="line">                        requestHeader,</span><br><span class="line">                        timeout,</span><br><span class="line">                        communicationMode,</span><br><span class="line">                        context,</span><br><span class="line">                        this);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    assert false;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            //hook：发送消息后逻辑</span><br><span class="line">            if (this.hasSendMessageHook()) &#123;</span><br><span class="line">                context.setSendResult(sendResult);</span><br><span class="line">                this.executeSendMessageHookAfter(context);</span><br><span class="line">            &#125;</span><br><span class="line">            //返回发送结果</span><br><span class="line">            return sendResult;</span><br><span class="line">        &#125; catch (RemotingException e) &#123;</span><br><span class="line">            if (this.hasSendMessageHook()) &#123;</span><br><span class="line">                context.setException(e);</span><br><span class="line">                this.executeSendMessageHookAfter(context);</span><br><span class="line">            &#125;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; catch (MQBrokerException e) &#123;</span><br><span class="line">            if (this.hasSendMessageHook()) &#123;</span><br><span class="line">                context.setException(e);</span><br><span class="line">                this.executeSendMessageHookAfter(context);</span><br><span class="line">            &#125;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            if (this.hasSendMessageHook()) &#123;</span><br><span class="line">                context.setException(e);</span><br><span class="line">                this.executeSendMessageHookAfter(context);</span><br><span class="line">            &#125;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            msg.setBody(prevBody);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //broker为空抛出异常</span><br><span class="line">    throw new MQClientException(&quot;The broker[&quot; + mq.getBrokerName() + &quot;] not exist&quot;, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="rocketmq" scheme="http://yoursite.com/categories/rocketmq/"/>
    
    
  </entry>
  
  <entry>
    <title>rocketmq源码Namesrv注册中心</title>
    <link href="http://yoursite.com/2018/09/08/rocketmq%E6%BA%90%E7%A0%81/rocketmq%E6%BA%90%E7%A0%81Namesrv%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://yoursite.com/2018/09/08/rocketmq源码/rocketmq源码Namesrv注册中心/</id>
    <published>2018-09-08T09:15:07.376Z</published>
    <updated>2018-09-08T08:51:07.473Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Namesrv启动过程"><a href="#一、Namesrv启动过程" class="headerlink" title="一、Namesrv启动过程"></a>一、Namesrv启动过程</h3><h4 id="1、NamesrvStartup的main方法"><a href="#1、NamesrvStartup的main方法" class="headerlink" title="1、NamesrvStartup的main方法"></a>1、NamesrvStartup的main方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    main0(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">public static NamesrvController main0(String[] args) &#123;</span><br><span class="line">    System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));</span><br><span class="line">    try &#123;</span><br><span class="line">        //PackageConflictDetect.detectFastjson();</span><br><span class="line"></span><br><span class="line">        Options options = ServerUtil.buildCommandlineOptions(new Options());</span><br><span class="line">        commandLine = ServerUtil.parseCmdLine(&quot;mqnamesrv&quot;, args, buildCommandlineOptions(options), new PosixParser());</span><br><span class="line">        if (null == commandLine) &#123;</span><br><span class="line">            System.exit(-1);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //初始化配置文件</span><br><span class="line">        final NamesrvConfig namesrvConfig = new NamesrvConfig();</span><br><span class="line">        //初始化nettyServerConfig配置项</span><br><span class="line">        final NettyServerConfig nettyServerConfig = new NettyServerConfig();</span><br><span class="line">        //设置netty监听端口为9876</span><br><span class="line">        nettyServerConfig.setListenPort(9876);</span><br><span class="line">        if (commandLine.hasOption(&apos;c&apos;)) &#123;</span><br><span class="line">            String file = commandLine.getOptionValue(&apos;c&apos;);</span><br><span class="line">            if (file != null) &#123;</span><br><span class="line">                InputStream in = new BufferedInputStream(new FileInputStream(file));</span><br><span class="line">                properties = new Properties();</span><br><span class="line">                properties.load(in);</span><br><span class="line">                MixAll.properties2Object(properties, namesrvConfig);</span><br><span class="line">                MixAll.properties2Object(properties, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">                namesrvConfig.setConfigStorePath(file);</span><br><span class="line"></span><br><span class="line">                System.out.printf(&quot;load config properties file OK, &quot; + file + &quot;%n&quot;);</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (commandLine.hasOption(&apos;p&apos;)) &#123;</span><br><span class="line">            MixAll.printObjectProperties(null, namesrvConfig);</span><br><span class="line">            MixAll.printObjectProperties(null, nettyServerConfig);</span><br><span class="line">            System.exit(0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), namesrvConfig);</span><br><span class="line"></span><br><span class="line">        if (null == namesrvConfig.getRocketmqHome()) &#123;</span><br><span class="line">            System.out.printf(&quot;Please set the %s variable in your environment to match the location of the RocketMQ installation%n&quot;, MixAll.ROCKETMQ_HOME_ENV);</span><br><span class="line">            System.exit(-2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">        JoranConfigurator configurator = new JoranConfigurator();</span><br><span class="line">        configurator.setContext(lc);</span><br><span class="line">        lc.reset();</span><br><span class="line">        configurator.doConfigure(namesrvConfig.getRocketmqHome() + &quot;/conf/logback_namesrv.xml&quot;);</span><br><span class="line">        final Logger log = LoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);</span><br><span class="line"></span><br><span class="line">        MixAll.printObjectProperties(log, namesrvConfig);</span><br><span class="line">        MixAll.printObjectProperties(log, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">        //初始化服务控制对象</span><br><span class="line">        final NamesrvController controller = new NamesrvController(namesrvConfig, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">        // remember all configs to prevent discard</span><br><span class="line">        controller.getConfiguration().registerConfig(properties);</span><br><span class="line">        //初始化controller</span><br><span class="line">        boolean initResult = controller.initialize();</span><br><span class="line">        if (!initResult) &#123;</span><br><span class="line">            controller.shutdown();</span><br><span class="line">            System.exit(-3);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置一个jvm退出勾子函数，jvm退出时，调用controller.shutdown()，清理controller相关资源</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(new ShutdownHookThread(log, new Callable&lt;Void&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Void call() throws Exception &#123;</span><br><span class="line">                controller.shutdown();</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        //启动controller</span><br><span class="line">        controller.start();</span><br><span class="line"></span><br><span class="line">        String tip = &quot;The Name Server boot success. serializeType=&quot; + RemotingCommand.getSerializeTypeConfigInThisServer();</span><br><span class="line">        log.info(tip);</span><br><span class="line">        System.out.printf(tip + &quot;%n&quot;);</span><br><span class="line"></span><br><span class="line">        return controller;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化NamesrvController"><a href="#2、实例化NamesrvController" class="headerlink" title="2、实例化NamesrvController"></a>2、实例化NamesrvController</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public NamesrvController(NamesrvConfig namesrvConfig, NettyServerConfig nettyServerConfig) &#123;</span><br><span class="line">    //namesrv相关配置</span><br><span class="line">    this.namesrvConfig = namesrvConfig;</span><br><span class="line">    //netty相关配置</span><br><span class="line">    this.nettyServerConfig = nettyServerConfig;</span><br><span class="line">    //KV配置管理</span><br><span class="line">    this.kvConfigManager = new KVConfigManager(this);</span><br><span class="line">    //路由信息、topic信息管理</span><br><span class="line">    this.routeInfoManager = new RouteInfoManager();</span><br><span class="line">    //broker管理服务</span><br><span class="line">    this.brokerHousekeepingService = new BrokerHousekeepingService(this);</span><br><span class="line">    this.configuration = new Configuration(</span><br><span class="line">        log,</span><br><span class="line">        this.namesrvConfig, this.nettyServerConfig</span><br><span class="line">    );</span><br><span class="line">    this.configuration.setStorePathFromConfig(this.namesrvConfig, &quot;configStorePath&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（一、1）NamesrvController的initialize方法"><a href="#3、接（一、1）NamesrvController的initialize方法" class="headerlink" title="3、接（一、1）NamesrvController的initialize方法"></a>3、接（一、1）NamesrvController的initialize方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public boolean initialize() &#123;</span><br><span class="line">    //加载kvConfig.json至KVConfigManager的configTable</span><br><span class="line">    this.kvConfigManager.load();</span><br><span class="line">    //初始化Netty服务器，用于与其他模块通信</span><br><span class="line">    this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.brokerHousekeepingService);</span><br><span class="line">    //初始化线程池（根据getServerWorkerThreads值，启动相应数量线程）</span><br><span class="line">    this.remotingExecutor =</span><br><span class="line">        Executors.newFixedThreadPool(nettyServerConfig.getServerWorkerThreads(), new ThreadFactoryImpl(&quot;RemotingExecutorThread_&quot;));</span><br><span class="line">    //注册处理器DefaultRequestProcessor</span><br><span class="line">    this.registerProcessor();</span><br><span class="line">    //增加定时任务（延时5秒，每间隔10s钟，定时扫描一次）</span><br><span class="line">    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            //定时扫描notActive的broker（则清除过期broker与namesrv之间的socketChanel通道）</span><br><span class="line">            NamesrvController.this.routeInfoManager.scanNotActiveBroker();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 5, 10, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            //定时将configTable相关信息记录到日志文件中</span><br><span class="line">            NamesrvController.this.kvConfigManager.printAllPeriodically();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1, 10, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、实例化NettyRemotingServer"><a href="#4、实例化NettyRemotingServer" class="headerlink" title="4、实例化NettyRemotingServer"></a>4、实例化NettyRemotingServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">public NettyRemotingServer(final NettyServerConfig nettyServerConfig,</span><br><span class="line">    final ChannelEventListener channelEventListener) &#123;</span><br><span class="line">    super(nettyServerConfig.getServerOnewaySemaphoreValue(), nettyServerConfig.getServerAsyncSemaphoreValue());</span><br><span class="line">    //创建netty服务器实例</span><br><span class="line">    this.serverBootstrap = new ServerBootstrap();</span><br><span class="line">    this.nettyServerConfig = nettyServerConfig;</span><br><span class="line">    //该监听器为BrokerHousekeepingService</span><br><span class="line">    this.channelEventListener = channelEventListener;</span><br><span class="line">    //线程数</span><br><span class="line">    int publicThreadNums = nettyServerConfig.getServerCallbackExecutorThreads();</span><br><span class="line">    if (publicThreadNums &lt;= 0) &#123;</span><br><span class="line">        publicThreadNums = 4;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建线程池</span><br><span class="line">    this.publicExecutor = Executors.newFixedThreadPool(publicThreadNums, new ThreadFactory() &#123;</span><br><span class="line">        private AtomicInteger threadIndex = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Thread newThread(Runnable r) &#123;</span><br><span class="line">            return new Thread(r, &quot;NettyServerPublicExecutor_&quot; + this.threadIndex.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //工作线程池</span><br><span class="line">    this.eventLoopGroupBoss = new NioEventLoopGroup(1, new ThreadFactory() &#123;</span><br><span class="line">        private AtomicInteger threadIndex = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Thread newThread(Runnable r) &#123;</span><br><span class="line">            return new Thread(r, String.format(&quot;NettyBoss_%d&quot;, this.threadIndex.incrementAndGet()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //工作线程池</span><br><span class="line">    if (useEpoll()) &#123;</span><br><span class="line">        this.eventLoopGroupSelector = new EpollEventLoopGroup(nettyServerConfig.getServerSelectorThreads(), new ThreadFactory() &#123;</span><br><span class="line">            private AtomicInteger threadIndex = new AtomicInteger(0);</span><br><span class="line">            private int threadTotal = nettyServerConfig.getServerSelectorThreads();</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Thread newThread(Runnable r) &#123;</span><br><span class="line">                return new Thread(r, String.format(&quot;NettyServerEPOLLSelector_%d_%d&quot;, threadTotal, this.threadIndex.incrementAndGet()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.eventLoopGroupSelector = new NioEventLoopGroup(nettyServerConfig.getServerSelectorThreads(), new ThreadFactory() &#123;</span><br><span class="line">            private AtomicInteger threadIndex = new AtomicInteger(0);</span><br><span class="line">            private int threadTotal = nettyServerConfig.getServerSelectorThreads();</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Thread newThread(Runnable r) &#123;</span><br><span class="line">                return new Thread(r, String.format(&quot;NettyServerNIOSelector_%d_%d&quot;, threadTotal, this.threadIndex.incrementAndGet()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TlsMode tlsMode = TlsSystemConfig.tlsMode;</span><br><span class="line">    log.info(&quot;Server is running in TLS &#123;&#125; mode&quot;, tlsMode.getName());</span><br><span class="line"></span><br><span class="line">    if (tlsMode != TlsMode.DISABLED) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            sslContext = TlsHelper.buildSslContext(false);</span><br><span class="line">            log.info(&quot;SSLContext created for server&quot;);</span><br><span class="line">        &#125; catch (CertificateException e) &#123;</span><br><span class="line">            log.error(&quot;Failed to create SSLContext for server&quot;, e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;Failed to create SSLContext for server&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、1）NamesrvController的start方法"><a href="#5、接（一、1）NamesrvController的start方法" class="headerlink" title="5、接（一、1）NamesrvController的start方法"></a>5、接（一、1）NamesrvController的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void start() throws Exception &#123;</span><br><span class="line">    //启动netty服务器</span><br><span class="line">    this.remotingServer.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、NettyRemotingServer的start方法"><a href="#6、NettyRemotingServer的start方法" class="headerlink" title="6、NettyRemotingServer的start方法"></a>6、NettyRemotingServer的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void start() &#123;</span><br><span class="line">    //工作线程池</span><br><span class="line">    this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(</span><br><span class="line">        nettyServerConfig.getServerWorkerThreads(),</span><br><span class="line">        new ThreadFactory() &#123;</span><br><span class="line"></span><br><span class="line">            private AtomicInteger threadIndex = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Thread newThread(Runnable r) &#123;</span><br><span class="line">                return new Thread(r, &quot;NettyServerCodecThread_&quot; + this.threadIndex.incrementAndGet());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    ServerBootstrap childHandler =</span><br><span class="line">        this.serverBootstrap.group(this.eventLoopGroupBoss, this.eventLoopGroupSelector)</span><br><span class="line">            .channel(useEpoll() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)</span><br><span class="line">            //最大等待连接数</span><br><span class="line">            .option(ChannelOption.SO_BACKLOG, 1024)</span><br><span class="line">            //端口释放后立即就可以被再次使用</span><br><span class="line">            .option(ChannelOption.SO_REUSEADDR, true)</span><br><span class="line">            .option(ChannelOption.SO_KEEPALIVE, false)</span><br><span class="line">            //关闭Nagle算法</span><br><span class="line">            .childOption(ChannelOption.TCP_NODELAY, true)</span><br><span class="line">            //发送缓冲区大小</span><br><span class="line">            .childOption(ChannelOption.SO_SNDBUF, nettyServerConfig.getServerSocketSndBufSize())</span><br><span class="line">            //接收缓冲区大小</span><br><span class="line">            .childOption(ChannelOption.SO_RCVBUF, nettyServerConfig.getServerSocketRcvBufSize())</span><br><span class="line">            //监听地址</span><br><span class="line">            .localAddress(new InetSocketAddress(this.nettyServerConfig.getListenPort()))</span><br><span class="line">            //接入连接的处理器</span><br><span class="line">            .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                    ch.pipeline()</span><br><span class="line">                        .addLast(defaultEventExecutorGroup, HANDSHAKE_HANDLER_NAME,</span><br><span class="line">                            new HandshakeHandler(TlsSystemConfig.tlsMode))</span><br><span class="line">                        .addLast(defaultEventExecutorGroup,</span><br><span class="line">                            //编码器</span><br><span class="line">                            new NettyEncoder(),</span><br><span class="line">                            //解码器</span><br><span class="line">                            new NettyDecoder(),</span><br><span class="line">                            //心跳检测，检查120s未进行读写，则发送IdleStateEvent事件</span><br><span class="line">                            new IdleStateHandler(0, 0, nettyServerConfig.getServerChannelMaxIdleTimeSeconds()),</span><br><span class="line">                            //事件处理器</span><br><span class="line">                            new NettyConnectManageHandler(),</span><br><span class="line">                            //客户端请求处理器</span><br><span class="line">                            new NettyServerHandler()</span><br><span class="line">                        );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    //使用堆外内存</span><br><span class="line">    if (nettyServerConfig.isServerPooledByteBufAllocatorEnable()) &#123;</span><br><span class="line">        childHandler.childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //服务端绑定端口</span><br><span class="line">        ChannelFuture sync = this.serverBootstrap.bind().sync();</span><br><span class="line">        InetSocketAddress addr = (InetSocketAddress) sync.channel().localAddress();</span><br><span class="line">        this.port = addr.getPort();</span><br><span class="line">    &#125; catch (InterruptedException e1) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;this.serverBootstrap.bind().sync() InterruptedException&quot;, e1);</span><br><span class="line">    &#125;</span><br><span class="line">    //启动nettyEventExecutor</span><br><span class="line">    if (this.channelEventListener != null) &#123;</span><br><span class="line">        this.nettyEventExecutor.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //每隔1秒扫描下异步调用超时情况</span><br><span class="line">    this.timer.scheduleAtFixedRate(new TimerTask() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                NettyRemotingServer.this.scanResponseTable();</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                log.error(&quot;scanResponseTable exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000 * 3, 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、处理客户端请求"><a href="#二、处理客户端请求" class="headerlink" title="二、处理客户端请求"></a>二、处理客户端请求</h3><h4 id="1、NettyServerHandler的channelRead0方法"><a href="#1、NettyServerHandler的channelRead0方法" class="headerlink" title="1、NettyServerHandler的channelRead0方法"></a>1、NettyServerHandler的channelRead0方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception &#123;</span><br><span class="line">    //处理客户端请求</span><br><span class="line">    processMessageReceived(ctx, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、NettyRemotingAbstract的processMessageReceived方法"><a href="#2、NettyRemotingAbstract的processMessageReceived方法" class="headerlink" title="2、NettyRemotingAbstract的processMessageReceived方法"></a>2、NettyRemotingAbstract的processMessageReceived方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void processMessageReceived(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception &#123;</span><br><span class="line">    final RemotingCommand cmd = msg;</span><br><span class="line">    if (cmd != null) &#123;</span><br><span class="line">        switch (cmd.getType()) &#123;</span><br><span class="line">            case REQUEST_COMMAND:</span><br><span class="line">                //处理客户端请求</span><br><span class="line">                processRequestCommand(ctx, cmd);</span><br><span class="line">                break;</span><br><span class="line">            case RESPONSE_COMMAND:</span><br><span class="line">                processResponseCommand(ctx, cmd);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、NettyRemotingAbstract的processRequestCommand方法"><a href="#3、NettyRemotingAbstract的processRequestCommand方法" class="headerlink" title="3、NettyRemotingAbstract的processRequestCommand方法"></a>3、NettyRemotingAbstract的processRequestCommand方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">public void processRequestCommand(final ChannelHandlerContext ctx, final RemotingCommand cmd) &#123;</span><br><span class="line">    //获取匹配处理器，默认DefaultRequestProcessor</span><br><span class="line">    final Pair&lt;NettyRequestProcessor, ExecutorService&gt; matched = this.processorTable.get(cmd.getCode());</span><br><span class="line">    final Pair&lt;NettyRequestProcessor, ExecutorService&gt; pair = null == matched ? this.defaultRequestProcessor : matched;</span><br><span class="line">    final int opaque = cmd.getOpaque();</span><br><span class="line"></span><br><span class="line">    if (pair != null) &#123;</span><br><span class="line">        //创建线程</span><br><span class="line">        Runnable run = new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    RPCHook rpcHook = NettyRemotingAbstract.this.getRPCHook();</span><br><span class="line">                    if (rpcHook != null) &#123;</span><br><span class="line">                        rpcHook.doBeforeRequest(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //获取处理器DefaultRequestProcessor处理请求</span><br><span class="line">                    final RemotingCommand response = pair.getObject1().processRequest(ctx, cmd);</span><br><span class="line">                    if (rpcHook != null) &#123;</span><br><span class="line">                        rpcHook.doAfterResponse(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //需要返回值</span><br><span class="line">                    if (!cmd.isOnewayRPC()) &#123;</span><br><span class="line">                        if (response != null) &#123;</span><br><span class="line">                            response.setOpaque(opaque);</span><br><span class="line">                            response.markResponseType();</span><br><span class="line">                            try &#123;</span><br><span class="line">                                ctx.writeAndFlush(response);</span><br><span class="line">                            &#125; catch (Throwable e) &#123;</span><br><span class="line">                                log.error(&quot;process request over, but response failed&quot;, e);</span><br><span class="line">                                log.error(cmd.toString());</span><br><span class="line">                                log.error(response.toString());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;process request exception&quot;, e);</span><br><span class="line">                    log.error(cmd.toString());</span><br><span class="line"></span><br><span class="line">                    if (!cmd.isOnewayRPC()) &#123;</span><br><span class="line">                        final RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR,</span><br><span class="line">                            RemotingHelper.exceptionSimpleDesc(e));</span><br><span class="line">                        response.setOpaque(opaque);</span><br><span class="line">                        ctx.writeAndFlush(response);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //是否拒绝请求</span><br><span class="line">        if (pair.getObject1().rejectRequest()) &#123;</span><br><span class="line">            final RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,</span><br><span class="line">                &quot;[REJECTREQUEST]system busy, start flow control for a while&quot;);</span><br><span class="line">            response.setOpaque(opaque);</span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //向线程池提交任务</span><br><span class="line">            final RequestTask requestTask = new RequestTask(run, ctx.channel(), cmd);</span><br><span class="line">            pair.getObject2().submit(requestTask);</span><br><span class="line">        &#125; catch (RejectedExecutionException e) &#123;</span><br><span class="line">            if ((System.currentTimeMillis() % 10000) == 0) &#123;</span><br><span class="line">                log.warn(RemotingHelper.parseChannelRemoteAddr(ctx.channel())</span><br><span class="line">                    + &quot;, too many requests and system thread pool busy, RejectedExecutionException &quot;</span><br><span class="line">                    + pair.getObject2().toString()</span><br><span class="line">                    + &quot; request code: &quot; + cmd.getCode());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!cmd.isOnewayRPC()) &#123;</span><br><span class="line">                final RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,</span><br><span class="line">                    &quot;[OVERLOAD]system busy, start flow control for a while&quot;);</span><br><span class="line">                response.setOpaque(opaque);</span><br><span class="line">                ctx.writeAndFlush(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        String error = &quot; request type &quot; + cmd.getCode() + &quot; not supported&quot;;</span><br><span class="line">        //找不到处理器</span><br><span class="line">        final RemotingCommand response =</span><br><span class="line">            RemotingCommand.createResponseCommand(RemotingSysResponseCode.REQUEST_CODE_NOT_SUPPORTED, error);</span><br><span class="line">        response.setOpaque(opaque);</span><br><span class="line">        ctx.writeAndFlush(response);</span><br><span class="line">        log.error(RemotingHelper.parseChannelRemoteAddr(ctx.channel()) + error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultRequestProcessor的processRequest方法"><a href="#4、DefaultRequestProcessor的processRequest方法" class="headerlink" title="4、DefaultRequestProcessor的processRequest方法"></a>4、DefaultRequestProcessor的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public RemotingCommand processRequest(ChannelHandlerContext ctx,</span><br><span class="line">    RemotingCommand request) throws RemotingCommandException &#123;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;receive request, &#123;&#125; &#123;&#125; &#123;&#125;&quot;,</span><br><span class="line">            request.getCode(),</span><br><span class="line">            RemotingHelper.parseChannelRemoteAddr(ctx.channel()),</span><br><span class="line">            request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch (request.getCode()) &#123;</span><br><span class="line">        case RequestCode.PUT_KV_CONFIG:</span><br><span class="line">            return this.putKVConfig(ctx, request);</span><br><span class="line">        case RequestCode.GET_KV_CONFIG:</span><br><span class="line">            return this.getKVConfig(ctx, request);</span><br><span class="line">        case RequestCode.DELETE_KV_CONFIG:</span><br><span class="line">            return this.deleteKVConfig(ctx, request);</span><br><span class="line">        //注册borker信息</span><br><span class="line">        case RequestCode.REGISTER_BROKER:</span><br><span class="line">            Version brokerVersion = MQVersion.value2Version(request.getVersion());</span><br><span class="line">            if (brokerVersion.ordinal() &gt;= MQVersion.Version.V3_0_11.ordinal()) &#123;</span><br><span class="line">                return this.registerBrokerWithFilterServer(ctx, request);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return this.registerBroker(ctx, request);</span><br><span class="line">            &#125;</span><br><span class="line">        //注销broker</span><br><span class="line">        case RequestCode.UNREGISTER_BROKER:</span><br><span class="line">            return this.unregisterBroker(ctx, request);</span><br><span class="line">        //根据topic获取路由信息，在producer发送消息和consumer在pull消息的时候的时候会从nameServer中获取</span><br><span class="line">        case RequestCode.GET_ROUTEINTO_BY_TOPIC:</span><br><span class="line">            return this.getRouteInfoByTopic(ctx, request);</span><br><span class="line">        case RequestCode.GET_BROKER_CLUSTER_INFO:</span><br><span class="line">            return this.getBrokerClusterInfo(ctx, request);</span><br><span class="line">        case RequestCode.WIPE_WRITE_PERM_OF_BROKER:</span><br><span class="line">            return this.wipeWritePermOfBroker(ctx, request);</span><br><span class="line">        case RequestCode.GET_ALL_TOPIC_LIST_FROM_NAMESERVER:</span><br><span class="line">            return getAllTopicListFromNameserver(ctx, request);</span><br><span class="line">        case RequestCode.DELETE_TOPIC_IN_NAMESRV:</span><br><span class="line">            return deleteTopicInNamesrv(ctx, request);</span><br><span class="line">        case RequestCode.GET_KVLIST_BY_NAMESPACE:</span><br><span class="line">            return this.getKVListByNamespace(ctx, request);</span><br><span class="line">        case RequestCode.GET_TOPICS_BY_CLUSTER:</span><br><span class="line">            return this.getTopicsByCluster(ctx, request);</span><br><span class="line">        case RequestCode.GET_SYSTEM_TOPIC_LIST_FROM_NS:</span><br><span class="line">            return this.getSystemTopicListFromNs(ctx, request);</span><br><span class="line">        case RequestCode.GET_UNIT_TOPIC_LIST:</span><br><span class="line">            return this.getUnitTopicList(ctx, request);</span><br><span class="line">        case RequestCode.GET_HAS_UNIT_SUB_TOPIC_LIST:</span><br><span class="line">            return this.getHasUnitSubTopicList(ctx, request);</span><br><span class="line">        case RequestCode.GET_HAS_UNIT_SUB_UNUNIT_TOPIC_LIST:</span><br><span class="line">            return this.getHasUnitSubUnUnitTopicList(ctx, request);</span><br><span class="line">        case RequestCode.UPDATE_NAMESRV_CONFIG:</span><br><span class="line">            return this.updateConfig(ctx, request);</span><br><span class="line">        case RequestCode.GET_NAMESRV_CONFIG:</span><br><span class="line">            return this.getConfig(ctx, request);</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DefaultRequestProcessor的registerBroker方法"><a href="#5、DefaultRequestProcessor的registerBroker方法" class="headerlink" title="5、DefaultRequestProcessor的registerBroker方法"></a>5、DefaultRequestProcessor的registerBroker方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public RemotingCommand registerBroker(ChannelHandlerContext ctx,</span><br><span class="line">    RemotingCommand request) throws RemotingCommandException &#123;</span><br><span class="line">    //创建返回</span><br><span class="line">    final RemotingCommand response = RemotingCommand.createResponseCommand(RegisterBrokerResponseHeader.class);</span><br><span class="line">    //创建返回头</span><br><span class="line">    final RegisterBrokerResponseHeader responseHeader = (RegisterBrokerResponseHeader) response.readCustomHeader();</span><br><span class="line">    //解析请求头</span><br><span class="line">    final RegisterBrokerRequestHeader requestHeader =</span><br><span class="line">        (RegisterBrokerRequestHeader) request.decodeCommandCustomHeader(RegisterBrokerRequestHeader.class);</span><br><span class="line">    TopicConfigSerializeWrapper topicConfigWrapper;</span><br><span class="line">    //解析请求体</span><br><span class="line">    if (request.getBody() != null) &#123;</span><br><span class="line">        topicConfigWrapper = TopicConfigSerializeWrapper.decode(request.getBody(), TopicConfigSerializeWrapper.class);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        topicConfigWrapper = new TopicConfigSerializeWrapper();</span><br><span class="line">        topicConfigWrapper.getDataVersion().setCounter(new AtomicLong(0));</span><br><span class="line">        topicConfigWrapper.getDataVersion().setTimestamp(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //向RouteInfoManager中注册Broker</span><br><span class="line">    RegisterBrokerResult result = this.namesrvController.getRouteInfoManager().registerBroker(</span><br><span class="line">        requestHeader.getClusterName(),</span><br><span class="line">        requestHeader.getBrokerAddr(),</span><br><span class="line">        requestHeader.getBrokerName(),</span><br><span class="line">        requestHeader.getBrokerId(),</span><br><span class="line">        requestHeader.getHaServerAddr(),</span><br><span class="line">        topicConfigWrapper,</span><br><span class="line">        null,</span><br><span class="line">        ctx.channel()</span><br><span class="line">    );</span><br><span class="line">    //设置haServerAddr、masterAddr信息</span><br><span class="line">    responseHeader.setHaServerAddr(result.getHaServerAddr());</span><br><span class="line">    responseHeader.setMasterAddr(result.getMasterAddr());</span><br><span class="line"></span><br><span class="line">    byte[] jsonValue = this.namesrvController.getKvConfigManager().getKVListByNamespace(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);</span><br><span class="line">    response.setBody(jsonValue);</span><br><span class="line">    response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">    response.setRemark(null);</span><br><span class="line">    return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DefaultRequestProcessor的registerBroker方法"><a href="#6、DefaultRequestProcessor的registerBroker方法" class="headerlink" title="6、DefaultRequestProcessor的registerBroker方法"></a>6、DefaultRequestProcessor的registerBroker方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">public RegisterBrokerResult registerBroker(</span><br><span class="line">    final String clusterName,</span><br><span class="line">    final String brokerAddr,</span><br><span class="line">    final String brokerName,</span><br><span class="line">    final long brokerId,</span><br><span class="line">    final String haServerAddr,</span><br><span class="line">    final TopicConfigSerializeWrapper topicConfigWrapper,</span><br><span class="line">    final List&lt;String&gt; filterServerList,</span><br><span class="line">    final Channel channel) &#123;</span><br><span class="line">    RegisterBrokerResult result = new RegisterBrokerResult();</span><br><span class="line">    try &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.lock.writeLock().lockInterruptibly();</span><br><span class="line">            //更新集群信息（根据集群名字，获取当前集群下面的所有brokerName）</span><br><span class="line">            Set&lt;String&gt; brokerNames = this.clusterAddrTable.get(clusterName);</span><br><span class="line">            if (null == brokerNames) &#123;</span><br><span class="line">                brokerNames = new HashSet&lt;String&gt;();</span><br><span class="line">                this.clusterAddrTable.put(clusterName, brokerNames);</span><br><span class="line">            &#125;</span><br><span class="line">            brokerNames.add(brokerName);</span><br><span class="line"></span><br><span class="line">            boolean registerFirst = false;</span><br><span class="line">            //更新主备信息（在brokerAddrTable中获取所有的brokerDAte）</span><br><span class="line">            BrokerData brokerData = this.brokerAddrTable.get(brokerName);</span><br><span class="line">            if (null == brokerData) &#123;</span><br><span class="line">                registerFirst = true;</span><br><span class="line">                brokerData = new BrokerData(clusterName, brokerName, new HashMap&lt;Long, String&gt;());</span><br><span class="line">                this.brokerAddrTable.put(brokerName, brokerData);</span><br><span class="line">            &#125;</span><br><span class="line">            //通过BrokerId区分主备</span><br><span class="line">            String oldAddr = brokerData.getBrokerAddrs().put(brokerId, brokerAddr);</span><br><span class="line">            registerFirst = registerFirst || (null == oldAddr);</span><br><span class="line">            //topic的配置不为空，且该Broker是主用（即 brokerId=0）</span><br><span class="line">            if (null != topicConfigWrapper &amp;&amp; MixAll.MASTER_ID == brokerId) &#123;</span><br><span class="line">                //如果Topic配置信息发生变更或者该broker为第一次注册</span><br><span class="line">                if (this.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())</span><br><span class="line">                    || registerFirst) &#123;</span><br><span class="line">                    // 获取所有topic信息</span><br><span class="line">                    ConcurrentMap&lt;String, TopicConfig&gt; tcTable = topicConfigWrapper.getTopicConfigTable();</span><br><span class="line">                    if (tcTable != null) &#123;</span><br><span class="line">                        //遍历所有Topic</span><br><span class="line">                        for (Map.Entry&lt;String, TopicConfig&gt; entry : tcTable.entrySet()) &#123;</span><br><span class="line">                            //根据brokername将topicconfig（read、write queue数量等）新增或者更新到topicQueueTable中</span><br><span class="line">                            this.createAndUpdateQueueData(brokerName, entry.getValue());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //更新最后变更时间（将brokerLiveTable中保存的对应的broker的更新时间戳，设置为当前时间）</span><br><span class="line">            BrokerLiveInfo prevBrokerLiveInfo = this.brokerLiveTable.put(brokerAddr,</span><br><span class="line">                new BrokerLiveInfo(</span><br><span class="line">                    System.currentTimeMillis(),</span><br><span class="line">                    topicConfigWrapper.getDataVersion(),</span><br><span class="line">                    channel,</span><br><span class="line">                    haServerAddr));</span><br><span class="line">            if (null == prevBrokerLiveInfo) &#123;</span><br><span class="line">                log.info(&quot;new broker registered, &#123;&#125; HAServer: &#123;&#125;&quot;, brokerAddr, haServerAddr);</span><br><span class="line">            &#125;</span><br><span class="line">            //更新Filter Server列表</span><br><span class="line">            if (filterServerList != null) &#123;</span><br><span class="line">                if (filterServerList.isEmpty()) &#123;</span><br><span class="line">                    this.filterServerTable.remove(brokerAddr);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.filterServerTable.put(brokerAddr, filterServerList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果当前broker为slave节点，则将haServerAddr、masterAddr等信息设置到result返回值中</span><br><span class="line">            if (MixAll.MASTER_ID != brokerId) &#123;</span><br><span class="line">                String masterAddr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);</span><br><span class="line">                if (masterAddr != null) &#123;</span><br><span class="line">                    BrokerLiveInfo brokerLiveInfo = this.brokerLiveTable.get(masterAddr);</span><br><span class="line">                    if (brokerLiveInfo != null) &#123;</span><br><span class="line">                        result.setHaServerAddr(brokerLiveInfo.getHaServerAddr());</span><br><span class="line">                        result.setMasterAddr(masterAddr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            this.lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;registerBroker Exception&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（二、4）DefaultRequestProcessor的getRouteInfoByTopic方法"><a href="#7、接（二、4）DefaultRequestProcessor的getRouteInfoByTopic方法" class="headerlink" title="7、接（二、4）DefaultRequestProcessor的getRouteInfoByTopic方法"></a>7、接（二、4）DefaultRequestProcessor的getRouteInfoByTopic方法</h4><p>获取topic路由信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public RemotingCommand getRouteInfoByTopic(ChannelHandlerContext ctx,</span><br><span class="line">    RemotingCommand request) throws RemotingCommandException &#123;</span><br><span class="line">    final RemotingCommand response = RemotingCommand.createResponseCommand(null);</span><br><span class="line">    final GetRouteInfoRequestHeader requestHeader =</span><br><span class="line">        (GetRouteInfoRequestHeader) request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);</span><br><span class="line">    //获取topic路由信息</span><br><span class="line">    TopicRouteData topicRouteData = this.namesrvController.getRouteInfoManager().pickupTopicRouteData(requestHeader.getTopic());</span><br><span class="line">    </span><br><span class="line">    if (topicRouteData != null) &#123;</span><br><span class="line">        //设置orderTopicConf</span><br><span class="line">        if (this.namesrvController.getNamesrvConfig().isOrderMessageEnable()) &#123;</span><br><span class="line">            String orderTopicConf =</span><br><span class="line">                this.namesrvController.getKvConfigManager().getKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG,</span><br><span class="line">                    requestHeader.getTopic());</span><br><span class="line">            topicRouteData.setOrderTopicConf(orderTopicConf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        byte[] content = topicRouteData.encode();</span><br><span class="line">        response.setBody(content);</span><br><span class="line">        response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">        response.setRemark(null);</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //不存在topic路由信息</span><br><span class="line">    response.setCode(ResponseCode.TOPIC_NOT_EXIST);</span><br><span class="line">    response.setRemark(&quot;No topic route info in name server for the topic: &quot; + requestHeader.getTopic()</span><br><span class="line">        + FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL));</span><br><span class="line">    return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、RouteInfoManager的pickupTopicRouteData方法"><a href="#8、RouteInfoManager的pickupTopicRouteData方法" class="headerlink" title="8、RouteInfoManager的pickupTopicRouteData方法"></a>8、RouteInfoManager的pickupTopicRouteData方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public TopicRouteData pickupTopicRouteData(final String topic) &#123;</span><br><span class="line">    TopicRouteData topicRouteData = new TopicRouteData();</span><br><span class="line">    boolean foundQueueData = false;</span><br><span class="line">    boolean foundBrokerData = false;</span><br><span class="line">    Set&lt;String&gt; brokerNameSet = new HashSet&lt;String&gt;();</span><br><span class="line">    List&lt;BrokerData&gt; brokerDataList = new LinkedList&lt;BrokerData&gt;();</span><br><span class="line">    topicRouteData.setBrokerDatas(brokerDataList);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, List&lt;String&gt;&gt; filterServerMap = new HashMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">    topicRouteData.setFilterServerTable(filterServerMap);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.lock.readLock().lockInterruptibly();</span><br><span class="line">            //获取topic路由信息集合</span><br><span class="line">            List&lt;QueueData&gt; queueDataList = this.topicQueueTable.get(topic);</span><br><span class="line">            if (queueDataList != null) &#123;</span><br><span class="line">                topicRouteData.setQueueDatas(queueDataList);</span><br><span class="line">                foundQueueData = true;</span><br><span class="line"></span><br><span class="line">                Iterator&lt;QueueData&gt; it = queueDataList.iterator();</span><br><span class="line">                while (it.hasNext()) &#123;</span><br><span class="line">                    QueueData qd = it.next();</span><br><span class="line">                    brokerNameSet.add(qd.getBrokerName());</span><br><span class="line">                &#125;</span><br><span class="line">                //遍历topic所在的brokerName，设置brokerData及filterServer</span><br><span class="line">                for (String brokerName : brokerNameSet) &#123;</span><br><span class="line">                    BrokerData brokerData = this.brokerAddrTable.get(brokerName);</span><br><span class="line">                    if (null != brokerData) &#123;</span><br><span class="line">                        BrokerData brokerDataClone = new BrokerData(brokerData.getCluster(), brokerData.getBrokerName(), (HashMap&lt;Long, String&gt;) brokerData</span><br><span class="line">                            .getBrokerAddrs().clone());</span><br><span class="line">                        brokerDataList.add(brokerDataClone);</span><br><span class="line">                        foundBrokerData = true;</span><br><span class="line">                        for (final String brokerAddr : brokerDataClone.getBrokerAddrs().values()) &#123;</span><br><span class="line">                            List&lt;String&gt; filterServerList = this.filterServerTable.get(brokerAddr);</span><br><span class="line">                            filterServerMap.put(brokerAddr, filterServerList);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            this.lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;pickupTopicRouteData Exception&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;pickupTopicRouteData &#123;&#125; &#123;&#125;&quot;, topic, topicRouteData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (foundBrokerData &amp;&amp; foundQueueData) &#123;</span><br><span class="line">        return topicRouteData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Namesrv启动过程&quot;&gt;&lt;a href=&quot;#一、Namesrv启动过程&quot; class=&quot;headerlink&quot; title=&quot;一、Namesrv启动过程&quot;&gt;&lt;/a&gt;一、Namesrv启动过程&lt;/h3&gt;&lt;h4 id=&quot;1、NamesrvStartup的main
      
    
    </summary>
    
      <category term="rocketmq" scheme="http://yoursite.com/categories/rocketmq/"/>
    
    
  </entry>
  
  <entry>
    <title>rocketmq源码Consumer消费者</title>
    <link href="http://yoursite.com/2018/09/08/rocketmq%E6%BA%90%E7%A0%81/rocketmq%E6%BA%90%E7%A0%81Consumer%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <id>http://yoursite.com/2018/09/08/rocketmq源码/rocketmq源码Consumer消费者/</id>
    <published>2018-09-08T09:15:07.370Z</published>
    <updated>2018-09-08T08:49:26.391Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class PushConsumer &#123;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 当前例子是PushConsumer用法，使用方式给用户感觉是消息从RocketMQ服务器推到了应用客户端。&lt;br&gt;</span><br><span class="line">     * 但是实际PushConsumer内部是使用长轮询Pull方式从Broker拉消息，然后再回调用户Listener方法&lt;br&gt;</span><br><span class="line">     * @throws MQClientException </span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) throws InterruptedException, MQClientException &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例&lt;br&gt;</span><br><span class="line">         * 注意：ConsumerGroupName需要由应用来保证唯一</span><br><span class="line">         */</span><br><span class="line">        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(&quot;testmerchantLeagueConsumerGroup&quot;);</span><br><span class="line">        consumer.setNamesrvAddr(&quot;ip:port&quot;);</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 订阅指定topic下tags分别等于TagA或TagB</span><br><span class="line">         */</span><br><span class="line">        consumer.subscribe(&quot;broker-a&quot;, &quot;TagB || TagA&quot;);</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">        /**</span><br><span class="line">         * 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费&lt;br&gt;</span><br><span class="line">         * 如果非第一次启动，那么按照上次消费的位置继续消费</span><br><span class="line">         */</span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"> </span><br><span class="line">        consumer.registerMessageListener(new MessageListenerConcurrently() &#123;</span><br><span class="line"> </span><br><span class="line">            /**</span><br><span class="line">             * 默认msgs里只有一条消息，可以通过设置consumeMessageBatchMaxSize参数来批量接收消息</span><br><span class="line">             */</span><br><span class="line">            @Override</span><br><span class="line">            public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; msgs,</span><br><span class="line">                    ConsumeConcurrentlyContext context) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot; Receive New Messages: &quot; + msgs);</span><br><span class="line">                MessageExt msg = msgs.get(0);</span><br><span class="line">                if (msg.getTopic().equals(&quot;broker-a&quot;)) &#123;</span><br><span class="line">                    // 执行TopicTest1的消费逻辑</span><br><span class="line">                    if (msg.getTags() != null &amp;&amp; msg.getTags().equals(&quot;TagA&quot;)) &#123;</span><br><span class="line">                        // 执行TagA的消费</span><br><span class="line">                        String message = new String(msg.getBody());</span><br><span class="line">                        System.out.println(message);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (msg.getTags() != null &amp;&amp; msg.getTags().equals(&quot;TagB&quot;)) &#123;</span><br><span class="line">                        // 执行TagB的消费</span><br><span class="line">                        String message = new String(msg.getBody());</span><br><span class="line">                        System.out.println(message);</span><br><span class="line">                    &#125;</span><br><span class="line">                  </span><br><span class="line">                &#125;</span><br><span class="line">                //消费者向mq服务器返回消费成功的消息</span><br><span class="line">                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        /**</span><br><span class="line">         * Consumer对象在使用之前必须要调用start初始化，初始化一次即可&lt;br&gt;</span><br><span class="line">         */</span><br><span class="line">        consumer.start();</span><br><span class="line"> </span><br><span class="line">        System.out.println(&quot;Consumer Started.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、Consumer启动过程"><a href="#一、Consumer启动过程" class="headerlink" title="一、Consumer启动过程"></a>一、Consumer启动过程</h3><h4 id="1、实例化DefaultMQPushConsumer"><a href="#1、实例化DefaultMQPushConsumer" class="headerlink" title="1、实例化DefaultMQPushConsumer"></a>1、实例化DefaultMQPushConsumer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public DefaultMQPushConsumer(final String consumerGroup) &#123;</span><br><span class="line">    this(consumerGroup, null, new AllocateMessageQueueAveragely());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public DefaultMQPushConsumer(final String consumerGroup, RPCHook rpcHook, AllocateMessageQueueStrategy allocateMessageQueueStrategy) &#123;</span><br><span class="line">    this.consumerGroup = consumerGroup;</span><br><span class="line">    this.allocateMessageQueueStrategy = allocateMessageQueueStrategy;</span><br><span class="line">    defaultMQPushConsumerImpl = new DefaultMQPushConsumerImpl(this, rpcHook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultMQPushConsumer的subscribe方法"><a href="#2、DefaultMQPushConsumer的subscribe方法" class="headerlink" title="2、DefaultMQPushConsumer的subscribe方法"></a>2、DefaultMQPushConsumer的subscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void subscribe(String topic, String subExpression) throws MQClientException &#123;</span><br><span class="line">    this.defaultMQPushConsumerImpl.subscribe(topic, subExpression);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultMQPushConsumerImpl的subscribe方法"><a href="#3、DefaultMQPushConsumerImpl的subscribe方法" class="headerlink" title="3、DefaultMQPushConsumerImpl的subscribe方法"></a>3、DefaultMQPushConsumerImpl的subscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void subscribe(String topic, String subExpression) throws MQClientException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建订阅数据</span><br><span class="line">        SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(this.defaultMQPushConsumer.getConsumerGroup(),</span><br><span class="line">            topic, subExpression);</span><br><span class="line">        //设置订阅数据</span><br><span class="line">        this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);</span><br><span class="line">        //通过心跳同步Consumer信息到Broker</span><br><span class="line">        if (this.mQClientFactory != null) &#123;</span><br><span class="line">            this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new MQClientException(&quot;subscription exception&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultMQPushConsumer的registerMessageListener方法"><a href="#4、DefaultMQPushConsumer的registerMessageListener方法" class="headerlink" title="4、DefaultMQPushConsumer的registerMessageListener方法"></a>4、DefaultMQPushConsumer的registerMessageListener方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerMessageListener(MessageListenerConcurrently messageListener) &#123;</span><br><span class="line">    this.messageListener = messageListener;</span><br><span class="line">    this.defaultMQPushConsumerImpl.registerMessageListener(messageListener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DefaultMQPushConsumerImpl的registerMessageListener方法"><a href="#5、DefaultMQPushConsumerImpl的registerMessageListener方法" class="headerlink" title="5、DefaultMQPushConsumerImpl的registerMessageListener方法"></a>5、DefaultMQPushConsumerImpl的registerMessageListener方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerMessageListener(MessageListenerConcurrently messageListener) &#123;</span><br><span class="line">    this.messageListener = messageListener;</span><br><span class="line">    this.defaultMQPushConsumerImpl.registerMessageListener(messageListener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DefaultMQPushConsumer的start方法"><a href="#6、DefaultMQPushConsumer的start方法" class="headerlink" title="6、DefaultMQPushConsumer的start方法"></a>6、DefaultMQPushConsumer的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void start() throws MQClientException &#123;</span><br><span class="line">    this.defaultMQPushConsumerImpl.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、DefaultMQPushConsumerImpl的start方法"><a href="#7、DefaultMQPushConsumerImpl的start方法" class="headerlink" title="7、DefaultMQPushConsumerImpl的start方法"></a>7、DefaultMQPushConsumerImpl的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void start() throws MQClientException &#123;</span><br><span class="line">    switch (this.serviceState) &#123;</span><br><span class="line">        case CREATE_JUST:</span><br><span class="line">            log.info(&quot;the consumer [&#123;&#125;] start beginning. messageModel=&#123;&#125;, isUnitMode=&#123;&#125;&quot;, this.defaultMQPushConsumer.getConsumerGroup(),</span><br><span class="line">                this.defaultMQPushConsumer.getMessageModel(), this.defaultMQPushConsumer.isUnitMode());</span><br><span class="line">            //切换Consumer状态</span><br><span class="line">            this.serviceState = ServiceState.START_FAILED;</span><br><span class="line">            //检查消费者组名是否正确配置</span><br><span class="line">            this.checkConfig();</span><br><span class="line">            //处理订阅信息subscriptionData</span><br><span class="line">            this.copySubscription();</span><br><span class="line">            //jvm进程id作为Consumer的intancename名</span><br><span class="line">            if (this.defaultMQPushConsumer.getMessageModel() == MessageModel.CLUSTERING) &#123;</span><br><span class="line">                this.defaultMQPushConsumer.changeInstanceNameToPID();</span><br><span class="line">            &#125;</span><br><span class="line">            //初始化mQClientFactory为MQClientInstance，并将该实例加入factoryTable</span><br><span class="line">            this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQPushConsumer, this.rpcHook);</span><br><span class="line">            //负载均衡相关</span><br><span class="line">            this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">            this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());</span><br><span class="line">            this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy());</span><br><span class="line">            this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);</span><br><span class="line"></span><br><span class="line">            this.pullAPIWrapper = new PullAPIWrapper(</span><br><span class="line">                mQClientFactory,</span><br><span class="line">                this.defaultMQPushConsumer.getConsumerGroup(), isUnitMode());</span><br><span class="line">            this.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList);</span><br><span class="line">            //加载存储的消费进度</span><br><span class="line">            if (this.defaultMQPushConsumer.getOffsetStore() != null) &#123;</span><br><span class="line">                this.offsetStore = this.defaultMQPushConsumer.getOffsetStore();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                switch (this.defaultMQPushConsumer.getMessageModel()) &#123;</span><br><span class="line">                    case BROADCASTING:</span><br><span class="line">                        //广播模式</span><br><span class="line">                        this.offsetStore = new LocalFileOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">                        break;</span><br><span class="line">                    case CLUSTERING:</span><br><span class="line">                        //集群模式</span><br><span class="line">                        this.offsetStore = new RemoteBrokerOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">                this.defaultMQPushConsumer.setOffsetStore(this.offsetStore);</span><br><span class="line">            &#125;</span><br><span class="line">            this.offsetStore.load();</span><br><span class="line">            //创建并启动消息消费器</span><br><span class="line">            if (this.getMessageListenerInner() instanceof MessageListenerOrderly) &#123;</span><br><span class="line">                this.consumeOrderly = true;</span><br><span class="line">                this.consumeMessageService = new ConsumeMessageOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner());</span><br><span class="line">            &#125; else if (this.getMessageListenerInner() instanceof MessageListenerConcurrently) &#123;</span><br><span class="line">                this.consumeOrderly = false;</span><br><span class="line">                this.consumeMessageService = new ConsumeMessageConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner());</span><br><span class="line">            &#125;</span><br><span class="line">            this.consumeMessageService.start();</span><br><span class="line">            //消费者加入到MQClientInstance.consumerTable</span><br><span class="line">            boolean registerOK = mQClientFactory.registerConsumer(this.defaultMQPushConsumer.getConsumerGroup(), this);</span><br><span class="line">            if (!registerOK) &#123;</span><br><span class="line">                this.serviceState = ServiceState.CREATE_JUST;</span><br><span class="line">                this.consumeMessageService.shutdown();</span><br><span class="line">                throw new MQClientException(&quot;The consumer group[&quot; + this.defaultMQPushConsumer.getConsumerGroup()</span><br><span class="line">                    + &quot;] has been created before, specify another name please.&quot; + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),</span><br><span class="line">                    null);</span><br><span class="line">            &#125;</span><br><span class="line">            //启动消费者</span><br><span class="line">            mQClientFactory.start();</span><br><span class="line">            log.info(&quot;the consumer [&#123;&#125;] start OK.&quot;, this.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">            this.serviceState = ServiceState.RUNNING;</span><br><span class="line">            break;</span><br><span class="line">        case RUNNING:</span><br><span class="line">        case START_FAILED:</span><br><span class="line">        case SHUTDOWN_ALREADY:</span><br><span class="line">            throw new MQClientException(&quot;The PushConsumer service state not OK, maybe started once, &quot;</span><br><span class="line">                + this.serviceState</span><br><span class="line">                + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),</span><br><span class="line">                null);</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    //更新订阅</span><br><span class="line">    this.updateTopicSubscribeInfoWhenSubscriptionChanged();</span><br><span class="line">    //检测broker状态</span><br><span class="line">    this.mQClientFactory.checkClientInBroker();</span><br><span class="line">    //发送心跳</span><br><span class="line">    this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();</span><br><span class="line">    //重新负载</span><br><span class="line">    this.mQClientFactory.rebalanceImmediately();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、MQClientInstance的start方法"><a href="#8、MQClientInstance的start方法" class="headerlink" title="8、MQClientInstance的start方法"></a>8、MQClientInstance的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public void start() throws MQClientException &#123;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        switch (this.serviceState) &#123;</span><br><span class="line">            case CREATE_JUST:</span><br><span class="line">                this.serviceState = ServiceState.START_FAILED;</span><br><span class="line">                // If not specified,looking address from name server</span><br><span class="line">                //获取注册中心地址</span><br><span class="line">                if (null == this.clientConfig.getNamesrvAddr()) &#123;</span><br><span class="line">                    this.mQClientAPIImpl.fetchNameServerAddr();</span><br><span class="line">                &#125;</span><br><span class="line">                // Start request-response channel</span><br><span class="line">                //启动client与注册中心的通讯,ClientRemotingProcessor处理请求</span><br><span class="line">                this.mQClientAPIImpl.start();</span><br><span class="line">                // Start various schedule tasks</span><br><span class="line">                //启动调度服务</span><br><span class="line">                this.startScheduledTask();</span><br><span class="line">                // Start pull service</span><br><span class="line">                //启动拉服务</span><br><span class="line">                this.pullMessageService.start();</span><br><span class="line">                // Start rebalance service</span><br><span class="line">                //启动负载均衡</span><br><span class="line">                this.rebalanceService.start();</span><br><span class="line">                // Start push service</span><br><span class="line">                //启动推服务</span><br><span class="line">                this.defaultMQProducer.getDefaultMQProducerImpl().start(false);</span><br><span class="line">                log.info(&quot;the client factory [&#123;&#125;] start OK&quot;, this.clientId);</span><br><span class="line">                this.serviceState = ServiceState.RUNNING;</span><br><span class="line">                break;</span><br><span class="line">            case RUNNING:</span><br><span class="line">                break;</span><br><span class="line">            case SHUTDOWN_ALREADY:</span><br><span class="line">                break;</span><br><span class="line">            case START_FAILED:</span><br><span class="line">                throw new MQClientException(&quot;The Factory object[&quot; + this.getClientId() + &quot;] has been created before, and failed.&quot;, null);</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、负载均衡"><a href="#二、负载均衡" class="headerlink" title="二、负载均衡"></a>二、负载均衡</h3><h4 id="1、RebalanceService的run方法"><a href="#1、RebalanceService的run方法" class="headerlink" title="1、RebalanceService的run方法"></a>1、RebalanceService的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    log.info(this.getServiceName() + &quot; service started&quot;);</span><br><span class="line"></span><br><span class="line">    while (!this.isStopped()) &#123;</span><br><span class="line">        //间隔20秒重新负载均衡</span><br><span class="line">        this.waitForRunning(waitInterval);</span><br><span class="line">        //负载均衡</span><br><span class="line">        this.mqClientFactory.doRebalance();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(this.getServiceName() + &quot; service end&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、MQClientInstance的doRebalance方法"><a href="#2、MQClientInstance的doRebalance方法" class="headerlink" title="2、MQClientInstance的doRebalance方法"></a>2、MQClientInstance的doRebalance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void doRebalance() &#123;</span><br><span class="line">    for (Map.Entry&lt;String, MQConsumerInner&gt; entry : this.consumerTable.entrySet()) &#123;</span><br><span class="line">        MQConsumerInner impl = entry.getValue();</span><br><span class="line">        if (impl != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //负载均衡</span><br><span class="line">                impl.doRebalance();</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                log.error(&quot;doRebalance exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultMQPushConsumerImpl的doRebalance方法"><a href="#3、DefaultMQPushConsumerImpl的doRebalance方法" class="headerlink" title="3、DefaultMQPushConsumerImpl的doRebalance方法"></a>3、DefaultMQPushConsumerImpl的doRebalance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void doRebalance() &#123;</span><br><span class="line">    if (!this.pause) &#123;</span><br><span class="line">        //负载均衡</span><br><span class="line">        this.rebalanceImpl.doRebalance(this.isConsumeOrderly());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、RebalanceImpl的doRebalance方法"><a href="#4、RebalanceImpl的doRebalance方法" class="headerlink" title="4、RebalanceImpl的doRebalance方法"></a>4、RebalanceImpl的doRebalance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void doRebalance(final boolean isOrder) &#123;</span><br><span class="line">    //copySubscription中初始化了SubscriptionInner</span><br><span class="line">    Map&lt;String, SubscriptionData&gt; subTable = this.getSubscriptionInner();</span><br><span class="line">    if (subTable != null) &#123;</span><br><span class="line">        for (final Map.Entry&lt;String, SubscriptionData&gt; entry : subTable.entrySet()) &#123;</span><br><span class="line">            final String topic = entry.getKey();</span><br><span class="line">            try &#123;</span><br><span class="line">                //根据topic进行负载均衡</span><br><span class="line">                this.rebalanceByTopic(topic, isOrder);</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                    log.warn(&quot;rebalanceByTopic Exception&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //移除未订阅的topic对应的消息队列</span><br><span class="line">    this.truncateMessageQueueNotMyTopic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、RebalanceImpl的rebalanceByTopic方法"><a href="#5、RebalanceImpl的rebalanceByTopic方法" class="headerlink" title="5、RebalanceImpl的rebalanceByTopic方法"></a>5、RebalanceImpl的rebalanceByTopic方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">private void rebalanceByTopic(final String topic, final boolean isOrder) &#123;</span><br><span class="line">    switch (messageModel) &#123;</span><br><span class="line">        case BROADCASTING: &#123;</span><br><span class="line">            //广播模式</span><br><span class="line">            Set&lt;MessageQueue&gt; mqSet = this.topicSubscribeInfoTable.get(topic);</span><br><span class="line">            if (mqSet != null) &#123;</span><br><span class="line">                boolean changed = this.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);</span><br><span class="line">                if (changed) &#123;</span><br><span class="line">                    this.messageQueueChanged(topic, mqSet, mqSet);</span><br><span class="line">                    log.info(&quot;messageQueueChanged &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;,</span><br><span class="line">                        consumerGroup,</span><br><span class="line">                        topic,</span><br><span class="line">                        mqSet,</span><br><span class="line">                        mqSet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.warn(&quot;doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist.&quot;, consumerGroup, topic);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        case CLUSTERING: &#123;</span><br><span class="line">            //集群模式</span><br><span class="line">            //从topicSubscribeInfoTable列表中获取与该topic相关的所有消息队列</span><br><span class="line">            Set&lt;MessageQueue&gt; mqSet = this.topicSubscribeInfoTable.get(topic);</span><br><span class="line">            //从broker端获取消费该消费组的所有客户端clientId</span><br><span class="line">            List&lt;String&gt; cidAll = this.mQClientFactory.findConsumerIdList(topic, consumerGroup);</span><br><span class="line">            if (null == mqSet) &#123;</span><br><span class="line">                if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                    log.warn(&quot;doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist.&quot;, consumerGroup, topic);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (null == cidAll) &#123;</span><br><span class="line">                log.warn(&quot;doRebalance, &#123;&#125; &#123;&#125;, get consumer id list failed&quot;, consumerGroup, topic);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (mqSet != null &amp;&amp; cidAll != null) &#123;</span><br><span class="line">                List&lt;MessageQueue&gt; mqAll = new ArrayList&lt;MessageQueue&gt;();</span><br><span class="line">                mqAll.addAll(mqSet);</span><br><span class="line"></span><br><span class="line">                Collections.sort(mqAll);</span><br><span class="line">                Collections.sort(cidAll);</span><br><span class="line">                //创建DefaultMQPushConsumer对象时默认设置为AllocateMessageQueueAveragely</span><br><span class="line">                AllocateMessageQueueStrategy strategy = this.allocateMessageQueueStrategy;</span><br><span class="line"></span><br><span class="line">                List&lt;MessageQueue&gt; allocateResult = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //为当前client分配消费队列</span><br><span class="line">                    allocateResult = strategy.allocate(</span><br><span class="line">                        this.consumerGroup,</span><br><span class="line">                        this.mQClientFactory.getClientId(),</span><br><span class="line">                        mqAll,</span><br><span class="line">                        cidAll);</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;AllocateMessageQueueStrategy.allocate Exception. allocateMessageQueueStrategyName=&#123;&#125;&quot;, strategy.getName(),</span><br><span class="line">                        e);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //将分配得到的allocateResult中的队列放入allocateResultSet 集合</span><br><span class="line">                Set&lt;MessageQueue&gt; allocateResultSet = new HashSet&lt;MessageQueue&gt;();</span><br><span class="line">                if (allocateResult != null) &#123;</span><br><span class="line">                    allocateResultSet.addAll(allocateResult);</span><br><span class="line">                &#125;</span><br><span class="line">                //更新updateProcessQueue</span><br><span class="line">                boolean changed = this.updateProcessQueueTableInRebalance(topic, allocateResultSet, isOrder);</span><br><span class="line">                if (changed) &#123;</span><br><span class="line">                    log.info(</span><br><span class="line">                        &quot;rebalanced result changed. allocateMessageQueueStrategyName=&#123;&#125;, group=&#123;&#125;, topic=&#123;&#125;, clientId=&#123;&#125;, mqAllSize=&#123;&#125;, cidAllSize=&#123;&#125;, rebalanceResultSize=&#123;&#125;, rebalanceResultSet=&#123;&#125;&quot;,</span><br><span class="line">                        strategy.getName(), consumerGroup, topic, this.mQClientFactory.getClientId(), mqSet.size(), cidAll.size(),</span><br><span class="line">                        allocateResultSet.size(), allocateResultSet);</span><br><span class="line">                    this.messageQueueChanged(topic, mqSet, allocateResultSet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、RebalanceImpl的updateProcessQueueTableInRebalance方法"><a href="#6、RebalanceImpl的updateProcessQueueTableInRebalance方法" class="headerlink" title="6、RebalanceImpl的updateProcessQueueTableInRebalance方法"></a>6、RebalanceImpl的updateProcessQueueTableInRebalance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">private boolean updateProcessQueueTableInRebalance(final String topic, final Set&lt;MessageQueue&gt; mqSet,</span><br><span class="line">    final boolean isOrder) &#123;</span><br><span class="line">    boolean changed = false;</span><br><span class="line"></span><br><span class="line">    //去掉topic对应的无用MessageQueue（不包含在mqSet或者pullExpired）</span><br><span class="line">    Iterator&lt;Entry&lt;MessageQueue, ProcessQueue&gt;&gt; it = this.processQueueTable.entrySet().iterator();</span><br><span class="line">    while (it.hasNext()) &#123;</span><br><span class="line">        Entry&lt;MessageQueue, ProcessQueue&gt; next = it.next();</span><br><span class="line">        MessageQueue mq = next.getKey();</span><br><span class="line">        ProcessQueue pq = next.getValue();</span><br><span class="line"></span><br><span class="line">        if (mq.getTopic().equals(topic)) &#123;</span><br><span class="line">            if (!mqSet.contains(mq)) &#123;</span><br><span class="line">                pq.setDropped(true);</span><br><span class="line">                if (this.removeUnnecessaryMessageQueue(mq, pq)) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    changed = true;</span><br><span class="line">                    log.info(&quot;doRebalance, &#123;&#125;, remove unnecessary mq, &#123;&#125;&quot;, consumerGroup, mq);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (pq.isPullExpired()) &#123;</span><br><span class="line">                switch (this.consumeType()) &#123;</span><br><span class="line">                    case CONSUME_ACTIVELY:</span><br><span class="line">                        break;</span><br><span class="line">                    case CONSUME_PASSIVELY:</span><br><span class="line">                        pq.setDropped(true);</span><br><span class="line">                        if (this.removeUnnecessaryMessageQueue(mq, pq)) &#123;</span><br><span class="line">                            it.remove();</span><br><span class="line">                            changed = true;</span><br><span class="line">                            log.error(&quot;[BUG]doRebalance, &#123;&#125;, remove unnecessary mq, &#123;&#125;, because pull is pause, so try to fixed it&quot;,</span><br><span class="line">                                consumerGroup, mq);</span><br><span class="line">                        &#125;</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //为新队列创建pullRequest</span><br><span class="line">    List&lt;PullRequest&gt; pullRequestList = new ArrayList&lt;PullRequest&gt;();</span><br><span class="line">    for (MessageQueue mq : mqSet) &#123;</span><br><span class="line">        if (!this.processQueueTable.containsKey(mq)) &#123;</span><br><span class="line">            if (isOrder &amp;&amp; !this.lock(mq)) &#123;</span><br><span class="line">                log.warn(&quot;doRebalance, &#123;&#125;, add a new mq failed, &#123;&#125;, because lock failed&quot;, consumerGroup, mq);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            //去除脏数据</span><br><span class="line">            this.removeDirtyOffset(mq);</span><br><span class="line">            ProcessQueue pq = new ProcessQueue();</span><br><span class="line">            long nextOffset = this.computePullFromWhere(mq);</span><br><span class="line">            if (nextOffset &gt;= 0) &#123;</span><br><span class="line">                ProcessQueue pre = this.processQueueTable.putIfAbsent(mq, pq);</span><br><span class="line">                if (pre != null) &#123;</span><br><span class="line">                    log.info(&quot;doRebalance, &#123;&#125;, mq already exists, &#123;&#125;&quot;, consumerGroup, mq);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    log.info(&quot;doRebalance, &#123;&#125;, add a new mq, &#123;&#125;&quot;, consumerGroup, mq);</span><br><span class="line">                    //创建pull请求</span><br><span class="line">                    PullRequest pullRequest = new PullRequest();</span><br><span class="line">                    pullRequest.setConsumerGroup(consumerGroup);</span><br><span class="line">                    pullRequest.setNextOffset(nextOffset);</span><br><span class="line">                    pullRequest.setMessageQueue(mq);</span><br><span class="line">                    pullRequest.setProcessQueue(pq);</span><br><span class="line">                    pullRequestList.add(pullRequest);</span><br><span class="line">                    changed = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.warn(&quot;doRebalance, &#123;&#125;, add new mq failed, &#123;&#125;&quot;, consumerGroup, mq);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //pullRequest请求加入PullMessageService.pullRequestQueue队列</span><br><span class="line">    this.dispatchPullRequest(pullRequestList);</span><br><span class="line"></span><br><span class="line">    return changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、消费消息"><a href="#三、消费消息" class="headerlink" title="三、消费消息"></a>三、消费消息</h3><h4 id="1、PullMessageService的run方法"><a href="#1、PullMessageService的run方法" class="headerlink" title="1、PullMessageService的run方法"></a>1、PullMessageService的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    log.info(this.getServiceName() + &quot; service started&quot;);</span><br><span class="line"></span><br><span class="line">    while (!this.isStopped()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            PullRequest pullRequest = this.pullRequestQueue.take();</span><br><span class="line">            if (pullRequest != null) &#123;</span><br><span class="line">                //获取消息</span><br><span class="line">                this.pullMessage(pullRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;Pull Message Service Run Method exception&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(this.getServiceName() + &quot; service end&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、PullMessageService的pullMessage方法"><a href="#2、PullMessageService的pullMessage方法" class="headerlink" title="2、PullMessageService的pullMessage方法"></a>2、PullMessageService的pullMessage方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void pullMessage(final PullRequest pullRequest) &#123;</span><br><span class="line">    //获取该组消费者</span><br><span class="line">    final MQConsumerInner consumer = this.mQClientFactory.selectConsumer(pullRequest.getConsumerGroup());</span><br><span class="line">    if (consumer != null) &#123;</span><br><span class="line">        DefaultMQPushConsumerImpl impl = (DefaultMQPushConsumerImpl) consumer;</span><br><span class="line">        //获取消息</span><br><span class="line">        impl.pullMessage(pullRequest);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.warn(&quot;No matched consumer for the PullRequest &#123;&#125;, drop it&quot;, pullRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultMQPushConsumerImpl的pullMessage方法"><a href="#3、DefaultMQPushConsumerImpl的pullMessage方法" class="headerlink" title="3、DefaultMQPushConsumerImpl的pullMessage方法"></a>3、DefaultMQPushConsumerImpl的pullMessage方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line">public void pullMessage(final PullRequest pullRequest) &#123;</span><br><span class="line">    //获取处理队列</span><br><span class="line">    final ProcessQueue processQueue = pullRequest.getProcessQueue();</span><br><span class="line">    if (processQueue.isDropped()) &#123;</span><br><span class="line">        log.info(&quot;the pull request[&#123;&#125;] is dropped.&quot;, pullRequest.toString());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置队列最后拉取消息时间</span><br><span class="line">    pullRequest.getProcessQueue().setLastPullTimestamp(System.currentTimeMillis());</span><br><span class="line">    //判断consumer状态是否运行中。如果不是，则延迟拉取消息</span><br><span class="line">    try &#123;</span><br><span class="line">        this.makeSureStateOK();</span><br><span class="line">    &#125; catch (MQClientException e) &#123;</span><br><span class="line">        log.warn(&quot;pullMessage exception, consumer state not ok&quot;, e);</span><br><span class="line">        this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断是否暂停中</span><br><span class="line">    if (this.isPause()) &#123;</span><br><span class="line">        log.warn(&quot;consumer was paused, execute pull request later. instanceName=&#123;&#125;, group=&#123;&#125;&quot;, this.defaultMQPushConsumer.getInstanceName(), this.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">        this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long cachedMessageCount = processQueue.getMsgCount().get();</span><br><span class="line">    long cachedMessageSizeInMiB = processQueue.getMsgSize().get() / (1024 * 1024);</span><br><span class="line">    //默认最大持有消息数量为1000</span><br><span class="line">    if (cachedMessageCount &gt; this.defaultMQPushConsumer.getPullThresholdForQueue()) &#123;</span><br><span class="line">        this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);</span><br><span class="line">        if ((queueFlowControlTimes++ % 1000) == 0) &#123;</span><br><span class="line">            log.warn(</span><br><span class="line">                &quot;the cached message count exceeds the threshold &#123;&#125;, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, count=&#123;&#125;, size=&#123;&#125; MiB, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;&quot;,</span><br><span class="line">                this.defaultMQPushConsumer.getPullThresholdForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //默认最大持有消息大小为100m</span><br><span class="line">    if (cachedMessageSizeInMiB &gt; this.defaultMQPushConsumer.getPullThresholdSizeForQueue()) &#123;</span><br><span class="line">        this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);</span><br><span class="line">        if ((queueFlowControlTimes++ % 1000) == 0) &#123;</span><br><span class="line">            log.warn(</span><br><span class="line">                &quot;the cached message size exceeds the threshold &#123;&#125; MiB, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, count=&#123;&#125;, size=&#123;&#125; MiB, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;&quot;,</span><br><span class="line">                this.defaultMQPushConsumer.getPullThresholdSizeForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!this.consumeOrderly) &#123;</span><br><span class="line">        //判断消息跨度是否过大，默认2000</span><br><span class="line">        if (processQueue.getMaxSpan() &gt; this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) &#123;</span><br><span class="line">            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);</span><br><span class="line">            if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) &#123;</span><br><span class="line">                log.warn(</span><br><span class="line">                    &quot;the queue&apos;s messages, span too long, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, maxSpan=&#123;&#125;, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;&quot;,</span><br><span class="line">                    processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), processQueue.getMaxSpan(),</span><br><span class="line">                    pullRequest, queueMaxSpanFlowControlTimes);</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //顺序消费,锁住队列</span><br><span class="line">        if (processQueue.isLocked()) &#123;</span><br><span class="line">            if (!pullRequest.isLockedFirst()) &#123;</span><br><span class="line">                final long offset = this.rebalanceImpl.computePullFromWhere(pullRequest.getMessageQueue());</span><br><span class="line">                boolean brokerBusy = offset &lt; pullRequest.getNextOffset();</span><br><span class="line">                log.info(&quot;the first time to pull message, so fix offset from broker. pullRequest: &#123;&#125; NewOffset: &#123;&#125; brokerBusy: &#123;&#125;&quot;,</span><br><span class="line">                    pullRequest, offset, brokerBusy);</span><br><span class="line">                if (brokerBusy) &#123;</span><br><span class="line">                    log.info(&quot;[NOTIFYME]the first time to pull message, but pull request offset larger than broker consume offset. pullRequest: &#123;&#125; NewOffset: &#123;&#125;&quot;,</span><br><span class="line">                        pullRequest, offset);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                pullRequest.setLockedFirst(true);</span><br><span class="line">                pullRequest.setNextOffset(offset);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">            log.info(&quot;pull message later because not locked in broker, &#123;&#125;&quot;, pullRequest);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取Topic对应的订阅信息。若不存在，则延迟拉取消息</span><br><span class="line">    final SubscriptionData subscriptionData = this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());</span><br><span class="line">    if (null == subscriptionData) &#123;</span><br><span class="line">        this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">        log.warn(&quot;find the consumer&apos;s subscription failed, &#123;&#125;&quot;, pullRequest);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final long beginTimestamp = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    PullCallback pullCallback = new PullCallback() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onSuccess(PullResult pullResult) &#123;</span><br><span class="line">            if (pullResult != null) &#123;</span><br><span class="line">                //处理拉取结果</span><br><span class="line">                pullResult = DefaultMQPushConsumerImpl.this.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(), pullResult,</span><br><span class="line">                    subscriptionData);</span><br><span class="line"></span><br><span class="line">                switch (pullResult.getPullStatus()) &#123;</span><br><span class="line">                    case FOUND:</span><br><span class="line">                        //设置下次拉取消息队列位置</span><br><span class="line">                        long prevRequestOffset = pullRequest.getNextOffset();</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line">                        //统计拉取消息时间</span><br><span class="line">                        long pullRT = System.currentTimeMillis() - beginTimestamp;</span><br><span class="line">                        DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),</span><br><span class="line">                            pullRequest.getMessageQueue().getTopic(), pullRT);</span><br><span class="line"></span><br><span class="line">                        long firstMsgOffset = Long.MAX_VALUE;</span><br><span class="line">                        if (pullResult.getMsgFoundList() == null || pullResult.getMsgFoundList().isEmpty()) &#123;</span><br><span class="line">                            DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            firstMsgOffset = pullResult.getMsgFoundList().get(0).getQueueOffset();</span><br><span class="line">                            //统计</span><br><span class="line">                            DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),</span><br><span class="line">                                pullRequest.getMessageQueue().getTopic(), pullResult.getMsgFoundList().size());</span><br><span class="line">                            //提交拉取到的消息到消息处理队列</span><br><span class="line">                            boolean dispathToConsume = processQueue.putMessage(pullResult.getMsgFoundList());</span><br><span class="line">                            //提交消费请求</span><br><span class="line">                            DefaultMQPushConsumerImpl.this.consumeMessageService.submitConsumeRequest(</span><br><span class="line">                                pullResult.getMsgFoundList(),</span><br><span class="line">                                processQueue,</span><br><span class="line">                                pullRequest.getMessageQueue(),</span><br><span class="line">                                dispathToConsume);</span><br><span class="line">                            //提交下次拉取消息请求</span><br><span class="line">                            if (DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval() &gt; 0) &#123;</span><br><span class="line">                                DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest,</span><br><span class="line">                                    DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval());</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        //下次拉取消息队列位置小于上次拉取消息队列位置或第一条消息的消息队列位置小于上次拉取消息队列位置，则判定为BUG，输出log</span><br><span class="line">                        if (pullResult.getNextBeginOffset() &lt; prevRequestOffset</span><br><span class="line">                            || firstMsgOffset &lt; prevRequestOffset) &#123;</span><br><span class="line">                            log.warn(</span><br><span class="line">                                &quot;[BUG] pull message result maybe data wrong, nextBeginOffset: &#123;&#125; firstMsgOffset: &#123;&#125; prevRequestOffset: &#123;&#125;&quot;,</span><br><span class="line">                                pullResult.getNextBeginOffset(),</span><br><span class="line">                                firstMsgOffset,</span><br><span class="line">                                prevRequestOffset);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        break;</span><br><span class="line">                    case NO_NEW_MSG:</span><br><span class="line">                        //设置下次拉取消息队列位置</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line">                        //持久化消费进度</span><br><span class="line">                        DefaultMQPushConsumerImpl.this.correctTagsOffset(pullRequest);</span><br><span class="line">                        //立即提交拉取消息请求</span><br><span class="line">                        DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);</span><br><span class="line">                        break;</span><br><span class="line">                    case NO_MATCHED_MSG:</span><br><span class="line">                        //设置下次拉取消息队列位置</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line">                        //持久化消费进度</span><br><span class="line">                        DefaultMQPushConsumerImpl.this.correctTagsOffset(pullRequest);</span><br><span class="line">                        //提交立即拉取消息请求</span><br><span class="line">                        DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);</span><br><span class="line">                        break;</span><br><span class="line">                    case OFFSET_ILLEGAL:</span><br><span class="line">                        log.warn(&quot;the pull request offset illegal, &#123;&#125; &#123;&#125;&quot;,</span><br><span class="line">                            pullRequest.toString(), pullResult.toString());</span><br><span class="line">                        //设置下次拉取消息队列位置</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line">                        //设置消息处理队列为dropped</span><br><span class="line">                        pullRequest.getProcessQueue().setDropped(true);</span><br><span class="line">                        //提交延迟任务，进行消费处理队列移除。不立即移除的原因：可能有地方正在使用，避免受到影响。</span><br><span class="line">                        DefaultMQPushConsumerImpl.this.executeTaskLater(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                            @Override</span><br><span class="line">                            public void run() &#123;</span><br><span class="line">                                try &#123;</span><br><span class="line">                                    //更新消费进度，同步消费进度到Broker</span><br><span class="line">                                    DefaultMQPushConsumerImpl.this.offsetStore.updateOffset(pullRequest.getMessageQueue(),</span><br><span class="line">                                        pullRequest.getNextOffset(), false);</span><br><span class="line"></span><br><span class="line">                                    DefaultMQPushConsumerImpl.this.offsetStore.persist(pullRequest.getMessageQueue());</span><br><span class="line">                                    //移除消费处理队列</span><br><span class="line">                                    DefaultMQPushConsumerImpl.this.rebalanceImpl.removeProcessQueue(pullRequest.getMessageQueue());</span><br><span class="line"></span><br><span class="line">                                    log.warn(&quot;fix the pull request offset, &#123;&#125;&quot;, pullRequest);</span><br><span class="line">                                &#125; catch (Throwable e) &#123;</span><br><span class="line">                                    log.error(&quot;executeTaskLater Exception&quot;, e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, 10000);</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onException(Throwable e) &#123;</span><br><span class="line">            if (!pullRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                log.warn(&quot;execute the pull request exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            //提交延迟拉取消息请求</span><br><span class="line">            DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    //集群消息模型下，计算提交的消费进度</span><br><span class="line">    boolean commitOffsetEnable = false;</span><br><span class="line">    long commitOffsetValue = 0L;</span><br><span class="line">    if (MessageModel.CLUSTERING == this.defaultMQPushConsumer.getMessageModel()) &#123;</span><br><span class="line">        commitOffsetValue = this.offsetStore.readOffset(pullRequest.getMessageQueue(), ReadOffsetType.READ_FROM_MEMORY);</span><br><span class="line">        if (commitOffsetValue &gt; 0) &#123;</span><br><span class="line">            commitOffsetEnable = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //计算请求的订阅表达式和是否进行filtersrv过滤消息</span><br><span class="line">    String subExpression = null;</span><br><span class="line">    boolean classFilter = false;</span><br><span class="line">    SubscriptionData sd = this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());</span><br><span class="line">    if (sd != null) &#123;</span><br><span class="line">        if (this.defaultMQPushConsumer.isPostSubscriptionWhenPull() &amp;&amp; !sd.isClassFilterMode()) &#123;</span><br><span class="line">            subExpression = sd.getSubString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        classFilter = sd.isClassFilterMode();</span><br><span class="line">    &#125;</span><br><span class="line">    //拉取消息系统标识</span><br><span class="line">    int sysFlag = PullSysFlag.buildSysFlag(</span><br><span class="line">        commitOffsetEnable, // commitOffset</span><br><span class="line">        true, // suspend</span><br><span class="line">        subExpression != null, // subscription</span><br><span class="line">        classFilter // class filter</span><br><span class="line">    );</span><br><span class="line">    //执行拉取。如果拉取请求发生异常时，提交延迟拉取消息请求</span><br><span class="line">    try &#123;</span><br><span class="line">        this.pullAPIWrapper.pullKernelImpl(</span><br><span class="line">            pullRequest.getMessageQueue(),</span><br><span class="line">            subExpression,</span><br><span class="line">            subscriptionData.getExpressionType(),</span><br><span class="line">            subscriptionData.getSubVersion(),</span><br><span class="line">            pullRequest.getNextOffset(),</span><br><span class="line">            this.defaultMQPushConsumer.getPullBatchSize(),</span><br><span class="line">            sysFlag,</span><br><span class="line">            commitOffsetValue,</span><br><span class="line">            BROKER_SUSPEND_MAX_TIME_MILLIS,</span><br><span class="line">            CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND,</span><br><span class="line">            CommunicationMode.ASYNC,</span><br><span class="line">            pullCallback</span><br><span class="line">        );</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;pullKernelImpl exception&quot;, e);</span><br><span class="line">        this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、PullAPIWrapper的pullKernelImpl方法"><a href="#4、PullAPIWrapper的pullKernelImpl方法" class="headerlink" title="4、PullAPIWrapper的pullKernelImpl方法"></a>4、PullAPIWrapper的pullKernelImpl方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public PullResult pullKernelImpl(</span><br><span class="line">    final MessageQueue mq,</span><br><span class="line">    final String subExpression,</span><br><span class="line">    final String expressionType,</span><br><span class="line">    final long subVersion,</span><br><span class="line">    final long offset,</span><br><span class="line">    final int maxNums,</span><br><span class="line">    final int sysFlag,</span><br><span class="line">    final long commitOffset,</span><br><span class="line">    final long brokerSuspendMaxTimeMillis,</span><br><span class="line">    final long timeoutMillis,</span><br><span class="line">    final CommunicationMode communicationMode,</span><br><span class="line">    final PullCallback pullCallback</span><br><span class="line">) throws MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    //获取Broker信息</span><br><span class="line">    FindBrokerResult findBrokerResult =</span><br><span class="line">        this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),</span><br><span class="line">            this.recalculatePullFromWhichNode(mq), false);</span><br><span class="line">    if (null == findBrokerResult) &#123;</span><br><span class="line">        this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());</span><br><span class="line">        findBrokerResult =</span><br><span class="line">            this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),</span><br><span class="line">                this.recalculatePullFromWhichNode(mq), false);</span><br><span class="line">    &#125;</span><br><span class="line">    //请求拉取消息</span><br><span class="line">    if (findBrokerResult != null) &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            // check version</span><br><span class="line">            if (!ExpressionType.isTagType(expressionType)</span><br><span class="line">                &amp;&amp; findBrokerResult.getBrokerVersion() &lt; MQVersion.Version.V4_1_0_SNAPSHOT.ordinal()) &#123;</span><br><span class="line">                throw new MQClientException(&quot;The broker[&quot; + mq.getBrokerName() + &quot;, &quot;</span><br><span class="line">                    + findBrokerResult.getBrokerVersion() + &quot;] does not upgrade to support for filter message by &quot; + expressionType, null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int sysFlagInner = sysFlag;</span><br><span class="line"></span><br><span class="line">        if (findBrokerResult.isSlave()) &#123;</span><br><span class="line">            sysFlagInner = PullSysFlag.clearCommitOffsetFlag(sysFlagInner);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();</span><br><span class="line">        requestHeader.setConsumerGroup(this.consumerGroup);</span><br><span class="line">        requestHeader.setTopic(mq.getTopic());</span><br><span class="line">        requestHeader.setQueueId(mq.getQueueId());</span><br><span class="line">        requestHeader.setQueueOffset(offset);</span><br><span class="line">        requestHeader.setMaxMsgNums(maxNums);</span><br><span class="line">        requestHeader.setSysFlag(sysFlagInner);</span><br><span class="line">        requestHeader.setCommitOffset(commitOffset);</span><br><span class="line">        requestHeader.setSuspendTimeoutMillis(brokerSuspendMaxTimeMillis);</span><br><span class="line">        requestHeader.setSubscription(subExpression);</span><br><span class="line">        requestHeader.setSubVersion(subVersion);</span><br><span class="line">        requestHeader.setExpressionType(expressionType);</span><br><span class="line"></span><br><span class="line">        String brokerAddr = findBrokerResult.getBrokerAddr();</span><br><span class="line">        if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) &#123;</span><br><span class="line">            brokerAddr = computPullFromWhichFilterServer(mq.getTopic(), brokerAddr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage(</span><br><span class="line">            brokerAddr,</span><br><span class="line">            requestHeader,</span><br><span class="line">            timeoutMillis,</span><br><span class="line">            communicationMode,</span><br><span class="line">            pullCallback);</span><br><span class="line"></span><br><span class="line">        return pullResult;</span><br><span class="line">    &#125;</span><br><span class="line">    //Broker信息不存在，则抛出异常</span><br><span class="line">    throw new MQClientException(&quot;The broker[&quot; + mq.getBrokerName() + &quot;] not exist&quot;, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（三、3）PullAPIWrapper的processPullResult方法"><a href="#5、接（三、3）PullAPIWrapper的processPullResult方法" class="headerlink" title="5、接（三、3）PullAPIWrapper的processPullResult方法"></a>5、接（三、3）PullAPIWrapper的processPullResult方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public PullResult processPullResult(final MessageQueue mq, final PullResult pullResult,</span><br><span class="line">    final SubscriptionData subscriptionData) &#123;</span><br><span class="line">    PullResultExt pullResultExt = (PullResultExt) pullResult;</span><br><span class="line">    //更新消息队列拉取消息Broker编号的映射</span><br><span class="line">    this.updatePullFromWhichNode(mq, pullResultExt.getSuggestWhichBrokerId());</span><br><span class="line">    //解析消息，并根据订阅信息消息tagCode匹配合适消息</span><br><span class="line">    if (PullStatus.FOUND == pullResult.getPullStatus()) &#123;</span><br><span class="line">        //解析消息</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.wrap(pullResultExt.getMessageBinary());</span><br><span class="line">        List&lt;MessageExt&gt; msgList = MessageDecoder.decodes(byteBuffer);</span><br><span class="line">        //根据订阅信息消息tagCode匹配合适消息</span><br><span class="line">        List&lt;MessageExt&gt; msgListFilterAgain = msgList;</span><br><span class="line">        if (!subscriptionData.getTagsSet().isEmpty() &amp;&amp; !subscriptionData.isClassFilterMode()) &#123;</span><br><span class="line">            msgListFilterAgain = new ArrayList&lt;MessageExt&gt;(msgList.size());</span><br><span class="line">            for (MessageExt msg : msgList) &#123;</span><br><span class="line">                if (msg.getTags() != null) &#123;</span><br><span class="line">                    if (subscriptionData.getTagsSet().contains(msg.getTags())) &#123;</span><br><span class="line">                        msgListFilterAgain.add(msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (this.hasHook()) &#123;</span><br><span class="line">            FilterMessageContext filterMessageContext = new FilterMessageContext();</span><br><span class="line">            filterMessageContext.setUnitMode(unitMode);</span><br><span class="line">            filterMessageContext.setMsgList(msgListFilterAgain);</span><br><span class="line">            this.executeHook(filterMessageContext);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置消息队列当前最小/最大位置到消息拓展字段</span><br><span class="line">        for (MessageExt msg : msgListFilterAgain) &#123;</span><br><span class="line">            MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MIN_OFFSET,</span><br><span class="line">                Long.toString(pullResult.getMinOffset()));</span><br><span class="line">            MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MAX_OFFSET,</span><br><span class="line">                Long.toString(pullResult.getMaxOffset()));</span><br><span class="line">        &#125;</span><br><span class="line">        //设置消息列表</span><br><span class="line">        pullResultExt.setMsgFoundList(msgListFilterAgain);</span><br><span class="line">    &#125;</span><br><span class="line">    //清空消息二进制数组</span><br><span class="line">    pullResultExt.setMessageBinary(null);</span><br><span class="line"></span><br><span class="line">    return pullResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（三、3）ProcessQueue的putMessage方法"><a href="#6、接（三、3）ProcessQueue的putMessage方法" class="headerlink" title="6、接（三、3）ProcessQueue的putMessage方法"></a>6、接（三、3）ProcessQueue的putMessage方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    public boolean putMessage(final List&lt;MessageExt&gt; msgs) &#123;</span><br><span class="line">    boolean dispatchToConsume = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        this.lockTreeMap.writeLock().lockInterruptibly();</span><br><span class="line">        try &#123;</span><br><span class="line">            //添加消息</span><br><span class="line">            int validMsgCnt = 0;</span><br><span class="line">            for (MessageExt msg : msgs) &#123;</span><br><span class="line">                MessageExt old = msgTreeMap.put(msg.getQueueOffset(), msg);</span><br><span class="line">                if (null == old) &#123;</span><br><span class="line">                    validMsgCnt++;</span><br><span class="line">                    this.queueOffsetMax = msg.getQueueOffset();</span><br><span class="line">                    msgSize.addAndGet(msg.getBody().length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msgCount.addAndGet(validMsgCnt);</span><br><span class="line">            //是否正在消费</span><br><span class="line">            if (!msgTreeMap.isEmpty() &amp;&amp; !this.consuming) &#123;</span><br><span class="line">                dispatchToConsume = true;</span><br><span class="line">                this.consuming = true;</span><br><span class="line">            &#125;</span><br><span class="line">            // broker累计消息数量</span><br><span class="line">            if (!msgs.isEmpty()) &#123;</span><br><span class="line">                MessageExt messageExt = msgs.get(msgs.size() - 1);</span><br><span class="line">                String property = messageExt.getProperty(MessageConst.PROPERTY_MAX_OFFSET);</span><br><span class="line">                if (property != null) &#123;</span><br><span class="line">                    long accTotal = Long.parseLong(property) - messageExt.getQueueOffset();</span><br><span class="line">                    if (accTotal &gt; 0) &#123;</span><br><span class="line">                        this.msgAccCnt = accTotal;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            this.lockTreeMap.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        log.error(&quot;putMessage exception&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return dispatchToConsume;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、3）ConsumeMessageConcurrentlyService的submitConsumeRequest方法"><a href="#7、接（三、3）ConsumeMessageConcurrentlyService的submitConsumeRequest方法" class="headerlink" title="7、接（三、3）ConsumeMessageConcurrentlyService的submitConsumeRequest方法"></a>7、接（三、3）ConsumeMessageConcurrentlyService的submitConsumeRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void submitConsumeRequest(</span><br><span class="line">    final List&lt;MessageExt&gt; msgs,</span><br><span class="line">    final ProcessQueue processQueue,</span><br><span class="line">    final MessageQueue messageQueue,</span><br><span class="line">    final boolean dispatchToConsume) &#123;</span><br><span class="line">    final int consumeBatchSize = this.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();</span><br><span class="line">    //提交消息小于批量消息数，直接提交消费请求</span><br><span class="line">    if (msgs.size() &lt;= consumeBatchSize) &#123;</span><br><span class="line">        ConsumeRequest consumeRequest = new ConsumeRequest(msgs, processQueue, messageQueue);</span><br><span class="line">        try &#123;</span><br><span class="line">            this.consumeExecutor.submit(consumeRequest);</span><br><span class="line">        &#125; catch (RejectedExecutionException e) &#123;</span><br><span class="line">            this.submitConsumeRequestLater(consumeRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    //提交消息大于批量消息数，进行分拆成多个消费请求</span><br><span class="line">        for (int total = 0; total &lt; msgs.size(); ) &#123;</span><br><span class="line">            //计算当前拆分请求包含的消息</span><br><span class="line">            List&lt;MessageExt&gt; msgThis = new ArrayList&lt;MessageExt&gt;(consumeBatchSize);</span><br><span class="line">            for (int i = 0; i &lt; consumeBatchSize; i++, total++) &#123;</span><br><span class="line">                if (total &lt; msgs.size()) &#123;</span><br><span class="line">                    msgThis.add(msgs.get(total));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //提交拆分消费请求</span><br><span class="line">            ConsumeRequest consumeRequest = new ConsumeRequest(msgThis, processQueue, messageQueue);</span><br><span class="line">            try &#123;</span><br><span class="line">                this.consumeExecutor.submit(consumeRequest);</span><br><span class="line">            &#125; catch (RejectedExecutionException e) &#123;</span><br><span class="line">                //如果被拒绝，则将当前拆分消息+剩余消息提交延迟消费请求。</span><br><span class="line">                for (; total &lt; msgs.size(); total++) &#123;</span><br><span class="line">                    msgThis.add(msgs.get(total));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                this.submitConsumeRequestLater(consumeRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、ConsumeRequest的run方法"><a href="#8、ConsumeRequest的run方法" class="headerlink" title="8、ConsumeRequest的run方法"></a>8、ConsumeRequest的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    //废弃队列不进行消费</span><br><span class="line">    if (this.processQueue.isDropped()) &#123;</span><br><span class="line">        log.info(&quot;the message queue not be able to consume, because it&apos;s dropped. group=&#123;&#125; &#123;&#125;&quot;, ConsumeMessageConcurrentlyService.this.consumerGroup, this.messageQueue);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //监听器</span><br><span class="line">    MessageListenerConcurrently listener = ConsumeMessageConcurrentlyService.this.messageListener;</span><br><span class="line">    //消费Context</span><br><span class="line">    ConsumeConcurrentlyContext context = new ConsumeConcurrentlyContext(messageQueue);</span><br><span class="line">    //消费结果状态</span><br><span class="line">    ConsumeConcurrentlyStatus status = null;</span><br><span class="line"></span><br><span class="line">    ConsumeMessageContext consumeMessageContext = null;</span><br><span class="line">    if (ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">        consumeMessageContext = new ConsumeMessageContext();</span><br><span class="line">        consumeMessageContext.setConsumerGroup(defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">        consumeMessageContext.setProps(new HashMap&lt;String, String&gt;());</span><br><span class="line">        consumeMessageContext.setMq(messageQueue);</span><br><span class="line">        consumeMessageContext.setMsgList(msgs);</span><br><span class="line">        consumeMessageContext.setSuccess(false);</span><br><span class="line">        ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.executeHookBefore(consumeMessageContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long beginTimestamp = System.currentTimeMillis();</span><br><span class="line">    boolean hasException = false;</span><br><span class="line">    ConsumeReturnType returnType = ConsumeReturnType.SUCCESS;</span><br><span class="line">    try &#123;</span><br><span class="line">        //当消息为重试消息，设置Topic为原始Topic</span><br><span class="line">        ConsumeMessageConcurrentlyService.this.resetRetryTopic(msgs);</span><br><span class="line">        //设置开始消费时间</span><br><span class="line">        if (msgs != null &amp;&amp; !msgs.isEmpty()) &#123;</span><br><span class="line">            for (MessageExt msg : msgs) &#123;</span><br><span class="line">                MessageAccessor.setConsumeStartTimeStamp(msg, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //进行消费</span><br><span class="line">        status = listener.consumeMessage(Collections.unmodifiableList(msgs), context);</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        log.warn(&quot;consumeMessage exception: &#123;&#125; Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;&quot;,</span><br><span class="line">            RemotingHelper.exceptionSimpleDesc(e),</span><br><span class="line">            ConsumeMessageConcurrentlyService.this.consumerGroup,</span><br><span class="line">            msgs,</span><br><span class="line">            messageQueue);</span><br><span class="line">        hasException = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long consumeRT = System.currentTimeMillis() - beginTimestamp;</span><br><span class="line">    //解析消费返回结果类型</span><br><span class="line">    if (null == status) &#123;</span><br><span class="line">        if (hasException) &#123;</span><br><span class="line">            returnType = ConsumeReturnType.EXCEPTION;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            returnType = ConsumeReturnType.RETURNNULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (consumeRT &gt;= defaultMQPushConsumer.getConsumeTimeout() * 60 * 1000) &#123;</span><br><span class="line">        returnType = ConsumeReturnType.TIME_OUT;</span><br><span class="line">    &#125; else if (ConsumeConcurrentlyStatus.RECONSUME_LATER == status) &#123;</span><br><span class="line">        returnType = ConsumeReturnType.FAILED;</span><br><span class="line">    &#125; else if (ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status) &#123;</span><br><span class="line">        returnType = ConsumeReturnType.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">        consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());</span><br><span class="line">    &#125;</span><br><span class="line">    //消费结果状态为空时，则设置为稍后重新消费</span><br><span class="line">    if (null == status) &#123;</span><br><span class="line">        log.warn(&quot;consumeMessage return null, Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;&quot;,</span><br><span class="line">            ConsumeMessageConcurrentlyService.this.consumerGroup,</span><br><span class="line">            msgs,</span><br><span class="line">            messageQueue);</span><br><span class="line">        status = ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">        consumeMessageContext.setStatus(status.toString());</span><br><span class="line">        consumeMessageContext.setSuccess(ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status);</span><br><span class="line">        ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.executeHookAfter(consumeMessageContext);</span><br><span class="line">    &#125;</span><br><span class="line">    //统计</span><br><span class="line">    ConsumeMessageConcurrentlyService.this.getConsumerStatsManager()</span><br><span class="line">        .incConsumeRT(ConsumeMessageConcurrentlyService.this.consumerGroup, messageQueue.getTopic(), consumeRT);</span><br><span class="line">    //处理消费结果</span><br><span class="line">    if (!processQueue.isDropped()) &#123;</span><br><span class="line">        ConsumeMessageConcurrentlyService.this.processConsumeResult(status, context, this);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.warn(&quot;processQueue is dropped without process consume result. messageQueue=&#123;&#125;, msgs=&#123;&#125;&quot;, messageQueue, msgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ConsumeMessageConcurrentlyService的processConsumeResult方法"><a href="#9、ConsumeMessageConcurrentlyService的processConsumeResult方法" class="headerlink" title="9、ConsumeMessageConcurrentlyService的processConsumeResult方法"></a>9、ConsumeMessageConcurrentlyService的processConsumeResult方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public void processConsumeResult(</span><br><span class="line">    final ConsumeConcurrentlyStatus status,</span><br><span class="line">    final ConsumeConcurrentlyContext context,</span><br><span class="line">    final ConsumeRequest consumeRequest</span><br><span class="line">) &#123;</span><br><span class="line">    int ackIndex = context.getAckIndex();</span><br><span class="line">    //消息为空，直接返回</span><br><span class="line">    if (consumeRequest.getMsgs().isEmpty())</span><br><span class="line">        return;</span><br><span class="line">    //计算从consumeRequest.msgs[0]到consumeRequest.msgs[ackIndex]的消息消费成功数量   </span><br><span class="line">    switch (status) &#123;</span><br><span class="line">        case CONSUME_SUCCESS:</span><br><span class="line">            if (ackIndex &gt;= consumeRequest.getMsgs().size()) &#123;</span><br><span class="line">                ackIndex = consumeRequest.getMsgs().size() - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            //统计成功/失败数量</span><br><span class="line">            int ok = ackIndex + 1;</span><br><span class="line">            int failed = consumeRequest.getMsgs().size() - ok;</span><br><span class="line">            this.getConsumerStatsManager().incConsumeOKTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), ok);</span><br><span class="line">            this.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), failed);</span><br><span class="line">            break;</span><br><span class="line">        case RECONSUME_LATER:</span><br><span class="line">            ackIndex = -1;</span><br><span class="line">            //统计成功/失败数量</span><br><span class="line">            this.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(),</span><br><span class="line">                consumeRequest.getMsgs().size());</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    //处理消费失败的消息</span><br><span class="line">    switch (this.defaultMQPushConsumer.getMessageModel()) &#123;</span><br><span class="line">        case BROADCASTING:</span><br><span class="line">            //广播模式，无论是否消费失败，不发回消息到Broker，只打印Log</span><br><span class="line">            for (int i = ackIndex + 1; i &lt; consumeRequest.getMsgs().size(); i++) &#123;</span><br><span class="line">                MessageExt msg = consumeRequest.getMsgs().get(i);</span><br><span class="line">                log.warn(&quot;BROADCASTING, the message consume failed, drop it, &#123;&#125;&quot;, msg.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case CLUSTERING:</span><br><span class="line">            //发回消息失败到Broker</span><br><span class="line">            List&lt;MessageExt&gt; msgBackFailed = new ArrayList&lt;MessageExt&gt;(consumeRequest.getMsgs().size());</span><br><span class="line">            for (int i = ackIndex + 1; i &lt; consumeRequest.getMsgs().size(); i++) &#123;</span><br><span class="line">                MessageExt msg = consumeRequest.getMsgs().get(i);</span><br><span class="line">                boolean result = this.sendMessageBack(msg, context);</span><br><span class="line">                if (!result) &#123;</span><br><span class="line">                    msg.setReconsumeTimes(msg.getReconsumeTimes() + 1);</span><br><span class="line">                    msgBackFailed.add(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //发回Broker失败的消息，直接提交延迟重新消费</span><br><span class="line">            if (!msgBackFailed.isEmpty()) &#123;</span><br><span class="line">                consumeRequest.getMsgs().removeAll(msgBackFailed);</span><br><span class="line"></span><br><span class="line">                this.submitConsumeRequestLater(msgBackFailed, consumeRequest.getProcessQueue(), consumeRequest.getMessageQueue());</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    //移除消费成功消息，并更新最新消费进度</span><br><span class="line">    long offset = consumeRequest.getProcessQueue().removeMessage(consumeRequest.getMsgs());</span><br><span class="line">    if (offset &gt;= 0 &amp;&amp; !consumeRequest.getProcessQueue().isDropped()) &#123;</span><br><span class="line">        this.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(), offset, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="rocketmq" scheme="http://yoursite.com/categories/rocketmq/"/>
    
    
  </entry>
  
  <entry>
    <title>rocketmq源码Broker</title>
    <link href="http://yoursite.com/2018/09/08/rocketmq%E6%BA%90%E7%A0%81/rocketmq%E6%BA%90%E7%A0%81Broker/"/>
    <id>http://yoursite.com/2018/09/08/rocketmq源码/rocketmq源码Broker/</id>
    <published>2018-09-08T09:15:07.362Z</published>
    <updated>2018-09-08T09:14:11.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Broker启动过程"><a href="#一、Broker启动过程" class="headerlink" title="一、Broker启动过程"></a>一、Broker启动过程</h3><h4 id="1、BrokerStartup的main方法"><a href="#1、BrokerStartup的main方法" class="headerlink" title="1、BrokerStartup的main方法"></a>1、BrokerStartup的main方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    //创建BrokerController并启动</span><br><span class="line">    start(createBrokerController(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、BrokerStartup的createBrokerController方法"><a href="#2、BrokerStartup的createBrokerController方法" class="headerlink" title="2、BrokerStartup的createBrokerController方法"></a>2、BrokerStartup的createBrokerController方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">public static BrokerController createBrokerController(String[] args) &#123;</span><br><span class="line">    System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));</span><br><span class="line"></span><br><span class="line">    if (null == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_SNDBUF_SIZE)) &#123;</span><br><span class="line">        NettySystemConfig.socketSndbufSize = 131072;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (null == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_RCVBUF_SIZE)) &#123;</span><br><span class="line">        NettySystemConfig.socketRcvbufSize = 131072;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //PackageConflictDetect.detectFastjson();</span><br><span class="line">        Options options = ServerUtil.buildCommandlineOptions(new Options());</span><br><span class="line">        commandLine = ServerUtil.parseCmdLine(&quot;mqbroker&quot;, args, buildCommandlineOptions(options),</span><br><span class="line">            new PosixParser());</span><br><span class="line">        if (null == commandLine) &#123;</span><br><span class="line">            System.exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final BrokerConfig brokerConfig = new BrokerConfig();</span><br><span class="line">        final NettyServerConfig nettyServerConfig = new NettyServerConfig();</span><br><span class="line">        final NettyClientConfig nettyClientConfig = new NettyClientConfig();</span><br><span class="line"></span><br><span class="line">        nettyClientConfig.setUseTLS(Boolean.parseBoolean(System.getProperty(TLS_ENABLE,</span><br><span class="line">            String.valueOf(TlsSystemConfig.tlsMode == TlsMode.ENFORCING))));</span><br><span class="line">        //设置监听端口为10911</span><br><span class="line">        nettyServerConfig.setListenPort(10911);</span><br><span class="line">        final MessageStoreConfig messageStoreConfig = new MessageStoreConfig();</span><br><span class="line"></span><br><span class="line">        if (BrokerRole.SLAVE == messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">            int ratio = messageStoreConfig.getAccessMessageInMemoryMaxRatio() - 10;</span><br><span class="line">            messageStoreConfig.setAccessMessageInMemoryMaxRatio(ratio);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断是否有-c参数，如果有-c参数，后面一般带的是Broker启动脚本文件，那么就可以解析Broker启动配置文件</span><br><span class="line">        if (commandLine.hasOption(&apos;c&apos;)) &#123;</span><br><span class="line">            String file = commandLine.getOptionValue(&apos;c&apos;);</span><br><span class="line">            if (file != null) &#123;</span><br><span class="line">                configFile = file;</span><br><span class="line">                InputStream in = new BufferedInputStream(new FileInputStream(file));</span><br><span class="line">                properties = new Properties();</span><br><span class="line">                properties.load(in);</span><br><span class="line"></span><br><span class="line">                properties2SystemEnv(properties);</span><br><span class="line">                MixAll.properties2Object(properties, brokerConfig);</span><br><span class="line">                MixAll.properties2Object(properties, nettyServerConfig);</span><br><span class="line">                MixAll.properties2Object(properties, nettyClientConfig);</span><br><span class="line">                MixAll.properties2Object(properties, messageStoreConfig);</span><br><span class="line"></span><br><span class="line">                BrokerPathConfigHelper.setBrokerConfigPath(file);</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), brokerConfig);</span><br><span class="line"></span><br><span class="line">        if (null == brokerConfig.getRocketmqHome()) &#123;</span><br><span class="line">            System.out.printf(&quot;Please set the &quot; + MixAll.ROCKETMQ_HOME_ENV</span><br><span class="line">                + &quot; variable in your environment to match the location of the RocketMQ installation&quot;);</span><br><span class="line">            System.exit(-2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String namesrvAddr = brokerConfig.getNamesrvAddr();</span><br><span class="line">        if (null != namesrvAddr) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                String[] addrArray = namesrvAddr.split(&quot;;&quot;);</span><br><span class="line">                for (String addr : addrArray) &#123;</span><br><span class="line">                    RemotingUtil.string2SocketAddress(addr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                System.out.printf(</span><br><span class="line">                    &quot;The Name Server Address[%s] illegal, please set it as follows, \&quot;127.0.0.1:9876;192.168.0.1:9876\&quot;%n&quot;,</span><br><span class="line">                    namesrvAddr);</span><br><span class="line">                System.exit(-3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch (messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">            case ASYNC_MASTER:</span><br><span class="line">            case SYNC_MASTER:</span><br><span class="line">                brokerConfig.setBrokerId(MixAll.MASTER_ID);</span><br><span class="line">                break;</span><br><span class="line">            case SLAVE:</span><br><span class="line">                if (brokerConfig.getBrokerId() &lt;= 0) &#123;</span><br><span class="line">                    System.out.printf(&quot;Slave&apos;s brokerId must be &gt; 0&quot;);</span><br><span class="line">                    System.exit(-3);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        //设置服务端口为10912</span><br><span class="line">        messageStoreConfig.setHaListenPort(nettyServerConfig.getListenPort() + 1);</span><br><span class="line">        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">        JoranConfigurator configurator = new JoranConfigurator();</span><br><span class="line">        configurator.setContext(lc);</span><br><span class="line">        lc.reset();</span><br><span class="line">        configurator.doConfigure(brokerConfig.getRocketmqHome() + &quot;/conf/logback_broker.xml&quot;);</span><br><span class="line"></span><br><span class="line">        if (commandLine.hasOption(&apos;p&apos;)) &#123;</span><br><span class="line">            Logger console = LoggerFactory.getLogger(LoggerName.BROKER_CONSOLE_NAME);</span><br><span class="line">            MixAll.printObjectProperties(console, brokerConfig);</span><br><span class="line">            MixAll.printObjectProperties(console, nettyServerConfig);</span><br><span class="line">            MixAll.printObjectProperties(console, nettyClientConfig);</span><br><span class="line">            MixAll.printObjectProperties(console, messageStoreConfig);</span><br><span class="line">            System.exit(0);</span><br><span class="line">        &#125; else if (commandLine.hasOption(&apos;m&apos;)) &#123;</span><br><span class="line">            Logger console = LoggerFactory.getLogger(LoggerName.BROKER_CONSOLE_NAME);</span><br><span class="line">            MixAll.printObjectProperties(console, brokerConfig, true);</span><br><span class="line">            MixAll.printObjectProperties(console, nettyServerConfig, true);</span><br><span class="line">            MixAll.printObjectProperties(console, nettyClientConfig, true);</span><br><span class="line">            MixAll.printObjectProperties(console, messageStoreConfig, true);</span><br><span class="line">            System.exit(0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);</span><br><span class="line">        MixAll.printObjectProperties(log, brokerConfig);</span><br><span class="line">        MixAll.printObjectProperties(log, nettyServerConfig);</span><br><span class="line">        MixAll.printObjectProperties(log, nettyClientConfig);</span><br><span class="line">        MixAll.printObjectProperties(log, messageStoreConfig);</span><br><span class="line">        //创建BrokerController</span><br><span class="line">        final BrokerController controller = new BrokerController(</span><br><span class="line">            brokerConfig,</span><br><span class="line">            nettyServerConfig,</span><br><span class="line">            nettyClientConfig,</span><br><span class="line">            messageStoreConfig);</span><br><span class="line">        // remember all configs to prevent discard</span><br><span class="line">        controller.getConfiguration().registerConfig(properties);</span><br><span class="line">        //初始化controller</span><br><span class="line">        boolean initResult = controller.initialize();</span><br><span class="line">        if (!initResult) &#123;</span><br><span class="line">            controller.shutdown();</span><br><span class="line">            System.exit(-3);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置进程退出钩子</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() &#123;</span><br><span class="line">            private volatile boolean hasShutdown = false;</span><br><span class="line">            private AtomicInteger shutdownTimes = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                synchronized (this) &#123;</span><br><span class="line">                    log.info(&quot;Shutdown hook was invoked, &#123;&#125;&quot;, this.shutdownTimes.incrementAndGet());</span><br><span class="line">                    if (!this.hasShutdown) &#123;</span><br><span class="line">                        this.hasShutdown = true;</span><br><span class="line">                        long beginTime = System.currentTimeMillis();</span><br><span class="line">                        controller.shutdown();</span><br><span class="line">                        long consumingTimeTotal = System.currentTimeMillis() - beginTime;</span><br><span class="line">                        log.info(&quot;Shutdown hook over, consuming total time(ms): &#123;&#125;&quot;, consumingTimeTotal);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;ShutdownHook&quot;));</span><br><span class="line"></span><br><span class="line">        return controller;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、实例化BrokerController"><a href="#3、实例化BrokerController" class="headerlink" title="3、实例化BrokerController"></a>3、实例化BrokerController</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public BrokerController(</span><br><span class="line">            final BrokerConfig brokerConfig,</span><br><span class="line">            final NettyServerConfig nettyServerConfig,</span><br><span class="line">            final NettyClientConfig nettyClientConfig,</span><br><span class="line">            final MessageStoreConfig messageStoreConfig</span><br><span class="line">        ) &#123;</span><br><span class="line">    //broker服务器配置</span><br><span class="line">    this.brokerConfig = brokerConfig;</span><br><span class="line">    //通信层配置</span><br><span class="line">    this.nettyServerConfig = nettyServerConfig;</span><br><span class="line">    this.nettyClientConfig = nettyClientConfig;</span><br><span class="line">    //消息存储器配置</span><br><span class="line">    this.messageStoreConfig = messageStoreConfig;</span><br><span class="line">    //消费进度管理器</span><br><span class="line">    this.consumerOffsetManager = new ConsumerOffsetManager(this);</span><br><span class="line">    //topic配置管理器</span><br><span class="line">    this.topicConfigManager = new TopicConfigManager(this);</span><br><span class="line">    this.pullMessageProcessor = new PullMessageProcessor(this);</span><br><span class="line">    this.pullRequestHoldService = new PullRequestHoldService(this);</span><br><span class="line">    this.messageArrivingListener = new NotifyMessageArrivingListener(this.pullRequestHoldService);</span><br><span class="line">    //订阅组内成员发生变化，立刻通知所有成员</span><br><span class="line">    this.consumerIdsChangeListener = new DefaultConsumerIdsChangeListener(this);</span><br><span class="line">    //Consumer连接、订阅关系管理</span><br><span class="line">    this.consumerManager = new ConsumerManager(this.consumerIdsChangeListener);</span><br><span class="line">    this.consumerFilterManager = new ConsumerFilterManager(this);</span><br><span class="line">    //Producer连接管理</span><br><span class="line">    this.producerManager = new ProducerManager();</span><br><span class="line">    this.clientHousekeepingService = new ClientHousekeepingService(this);</span><br><span class="line">     </span><br><span class="line">    this.broker2Client = new Broker2Client(this);</span><br><span class="line">    //订阅组配置管理</span><br><span class="line">    this.subscriptionGroupManager = new SubscriptionGroupManager(this);</span><br><span class="line">    //Broker的netty客户端,与注册中心通信</span><br><span class="line">    this.brokerOuterAPI = new BrokerOuterAPI(nettyClientConfig);</span><br><span class="line">    //FilterServer管理</span><br><span class="line">    this.filterServerManager = new FilterServerManager(this);</span><br><span class="line">    //Slave定期从Master同步信息</span><br><span class="line">    this.slaveSynchronize = new SlaveSynchronize(this);</span><br><span class="line">    //对消息写入进行流控</span><br><span class="line">    this.sendThreadPoolQueue = new LinkedBlockingQueue&lt;Runnable&gt;(this.brokerConfig.getSendThreadPoolQueueCapacity());</span><br><span class="line">    //对消息读取进行流控</span><br><span class="line">    this.pullThreadPoolQueue = new LinkedBlockingQueue&lt;Runnable&gt;(this.brokerConfig.getPullThreadPoolQueueCapacity());</span><br><span class="line">    this.queryThreadPoolQueue = new LinkedBlockingQueue&lt;Runnable&gt;(this.brokerConfig.getQueryThreadPoolQueueCapacity());</span><br><span class="line">    this.clientManagerThreadPoolQueue = new LinkedBlockingQueue&lt;Runnable&gt;(this.brokerConfig.getClientManagerThreadPoolQueueCapacity());</span><br><span class="line">    this.consumerManagerThreadPoolQueue = new LinkedBlockingQueue&lt;Runnable&gt;(this.brokerConfig.getConsumerManagerThreadPoolQueueCapacity());</span><br><span class="line"></span><br><span class="line">    this.brokerStatsManager = new BrokerStatsManager(this.brokerConfig.getBrokerClusterName());</span><br><span class="line">    this.setStoreHost(new InetSocketAddress(this.getBrokerConfig().getBrokerIP1(), this.getNettyServerConfig().getListenPort()));</span><br><span class="line"></span><br><span class="line">    this.brokerFastFailure = new BrokerFastFailure(this);</span><br><span class="line">    this.configuration = new Configuration(</span><br><span class="line">        log,</span><br><span class="line">        BrokerPathConfigHelper.getBrokerConfigPath(),</span><br><span class="line">        this.brokerConfig, this.nettyServerConfig, this.nettyClientConfig, this.messageStoreConfig</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接-一、2-BrokerController的initialize方法"><a href="#4、接-一、2-BrokerController的initialize方法" class="headerlink" title="4、接(一、2)BrokerController的initialize方法"></a>4、接(一、2)BrokerController的initialize方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">public boolean initialize() throws CloneNotSupportedException &#123;</span><br><span class="line">    //加载Topic配置，默认在根目录/store/config/topics.json中</span><br><span class="line">    boolean result = this.topicConfigManager.load();</span><br><span class="line">    //加载Consumer Offset</span><br><span class="line">    result = result &amp;&amp; this.consumerOffsetManager.load();</span><br><span class="line">    //加载Consumer subscription</span><br><span class="line">    result = result &amp;&amp; this.subscriptionGroupManager.load();</span><br><span class="line">    //加载Consumer Filter</span><br><span class="line">    result = result &amp;&amp; this.consumerFilterManager.load();</span><br><span class="line"></span><br><span class="line">    if (result) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //初始化消息存储器</span><br><span class="line">            this.messageStore =</span><br><span class="line">                new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener,</span><br><span class="line">                    this.brokerConfig);</span><br><span class="line">            this.brokerStats = new BrokerStats((DefaultMessageStore) this.messageStore);</span><br><span class="line">            //load plugin</span><br><span class="line">            MessageStorePluginContext context = new MessageStorePluginContext(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig);</span><br><span class="line">            this.messageStore = MessageStoreFactory.build(context, this.messageStore);</span><br><span class="line">            this.messageStore.getDispatcherList().addFirst(new CommitLogDispatcherCalcBitMap(this.brokerConfig, this.consumerFilterManager));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            result = false;</span><br><span class="line">            log.error(&quot;Failed to initialize&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //加载本地消息数据</span><br><span class="line">    result = result &amp;&amp; this.messageStore.load();</span><br><span class="line"></span><br><span class="line">    if (result) &#123;</span><br><span class="line">        //初始化netty服务器</span><br><span class="line">        this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.clientHousekeepingService);</span><br><span class="line">        //初始化vip通道 fastRemotingServer 10909端口</span><br><span class="line">        NettyServerConfig fastConfig = (NettyServerConfig) this.nettyServerConfig.clone();</span><br><span class="line">        fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);</span><br><span class="line">        this.fastRemotingServer = new NettyRemotingServer(fastConfig, this.clientHousekeepingService);</span><br><span class="line">        //初始化线程池</span><br><span class="line">        this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(</span><br><span class="line">            this.brokerConfig.getSendMessageThreadPoolNums(),</span><br><span class="line">            this.brokerConfig.getSendMessageThreadPoolNums(),</span><br><span class="line">            1000 * 60,</span><br><span class="line">            TimeUnit.MILLISECONDS,</span><br><span class="line">            this.sendThreadPoolQueue,</span><br><span class="line">            new ThreadFactoryImpl(&quot;SendMessageThread_&quot;));</span><br><span class="line"></span><br><span class="line">        this.pullMessageExecutor = new BrokerFixedThreadPoolExecutor(</span><br><span class="line">            this.brokerConfig.getPullMessageThreadPoolNums(),</span><br><span class="line">            this.brokerConfig.getPullMessageThreadPoolNums(),</span><br><span class="line">            1000 * 60,</span><br><span class="line">            TimeUnit.MILLISECONDS,</span><br><span class="line">            this.pullThreadPoolQueue,</span><br><span class="line">            new ThreadFactoryImpl(&quot;PullMessageThread_&quot;));</span><br><span class="line"></span><br><span class="line">        this.queryMessageExecutor = new BrokerFixedThreadPoolExecutor(</span><br><span class="line">            this.brokerConfig.getQueryMessageThreadPoolNums(),</span><br><span class="line">            this.brokerConfig.getQueryMessageThreadPoolNums(),</span><br><span class="line">            1000 * 60,</span><br><span class="line">            TimeUnit.MILLISECONDS,</span><br><span class="line">            this.queryThreadPoolQueue,</span><br><span class="line">            new ThreadFactoryImpl(&quot;QueryMessageThread_&quot;));</span><br><span class="line"></span><br><span class="line">        this.adminBrokerExecutor =</span><br><span class="line">            Executors.newFixedThreadPool(this.brokerConfig.getAdminBrokerThreadPoolNums(), new ThreadFactoryImpl(</span><br><span class="line">                &quot;AdminBrokerThread_&quot;));</span><br><span class="line"></span><br><span class="line">        this.clientManageExecutor = new ThreadPoolExecutor(</span><br><span class="line">            this.brokerConfig.getClientManageThreadPoolNums(),</span><br><span class="line">            this.brokerConfig.getClientManageThreadPoolNums(),</span><br><span class="line">            1000 * 60,</span><br><span class="line">            TimeUnit.MILLISECONDS,</span><br><span class="line">            this.clientManagerThreadPoolQueue,</span><br><span class="line">            new ThreadFactoryImpl(&quot;ClientManageThread_&quot;));</span><br><span class="line"></span><br><span class="line">        this.consumerManageExecutor =</span><br><span class="line">            Executors.newFixedThreadPool(this.brokerConfig.getConsumerManageThreadPoolNums(), new ThreadFactoryImpl(</span><br><span class="line">                &quot;ConsumerManageThread_&quot;));</span><br><span class="line">        //注册处理器</span><br><span class="line">        this.registerProcessor();</span><br><span class="line">        //每天凌晨00:00:00统计消息量</span><br><span class="line">        final long initialDelay = UtilAll.computNextMorningTimeMillis() - System.currentTimeMillis();</span><br><span class="line">        final long period = 1000 * 60 * 60 * 24;</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    BrokerController.this.getBrokerStats().record();</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;schedule record error.&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, initialDelay, period, TimeUnit.MILLISECONDS);</span><br><span class="line">        //定时持久化消费进度</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    BrokerController.this.consumerOffsetManager.persist();</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;schedule persist consumerOffset error.&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1000 * 10, this.brokerConfig.getFlushConsumerOffsetInterval(), TimeUnit.MILLISECONDS);</span><br><span class="line">        //持久化comsumer fileter</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    BrokerController.this.consumerFilterManager.persist();</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;schedule persist consumer filter error.&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1000 * 10, 1000 * 10, TimeUnit.MILLISECONDS);</span><br><span class="line">        //定时清理消费太慢的消费者，以保护Broker</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    BrokerController.this.protectBroker();</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;protectBroker error.&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 3, 3, TimeUnit.MINUTES);</span><br><span class="line">        //打印发送消费线程运行状态</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    BrokerController.this.printWaterMark();</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;printWaterMark error.&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 10, 1, TimeUnit.SECONDS);</span><br><span class="line">        //打印分发消息比接收消息延迟多少</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    log.info(&quot;dispatch behind commit log &#123;&#125; bytes&quot;, BrokerController.this.getMessageStore().dispatchBehindBytes());</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;schedule dispatchBehindBytes error.&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);</span><br><span class="line">        //定时获取Namesrv地址</span><br><span class="line">        if (this.brokerConfig.getNamesrvAddr() != null) &#123;</span><br><span class="line">            this.brokerOuterAPI.updateNameServerAddressList(this.brokerConfig.getNamesrvAddr());</span><br><span class="line">            log.info(&quot;Set user specified name server address: &#123;&#125;&quot;, this.brokerConfig.getNamesrvAddr());</span><br><span class="line">        &#125; else if (this.brokerConfig.isFetchNamesrvAddrByAddressServer()) &#123;</span><br><span class="line">            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        BrokerController.this.brokerOuterAPI.fetchNameServerAddr();</span><br><span class="line">                    &#125; catch (Throwable e) &#123;</span><br><span class="line">                        log.error(&quot;ScheduledTask fetchNameServerAddr exception&quot;, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果当前broker是slave，那么定时从master同步消息；如果是master，那么定时打印slave和master差别。</span><br><span class="line">        if (BrokerRole.SLAVE == this.messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">            if (this.messageStoreConfig.getHaMasterAddress() != null &amp;&amp; this.messageStoreConfig.getHaMasterAddress().length() &gt;= 6) &#123;</span><br><span class="line">                this.messageStore.updateHaMasterAddress(this.messageStoreConfig.getHaMasterAddress());</span><br><span class="line">                this.updateMasterHAServerAddrPeriodically = false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.updateMasterHAServerAddrPeriodically = true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //从Master同步信息</span><br><span class="line">                        BrokerController.this.slaveSynchronize.syncAll();</span><br><span class="line">                    &#125; catch (Throwable e) &#123;</span><br><span class="line">                        log.error(&quot;ScheduledTask syncAll slave exception&quot;, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        BrokerController.this.printMasterAndSlaveDiff();</span><br><span class="line">                    &#125; catch (Throwable e) &#123;</span><br><span class="line">                        log.error(&quot;schedule printMasterAndSlaveDiff error.&quot;, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>topics.json示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;dataVersion&quot;:&#123;</span><br><span class="line">        &quot;counter&quot;:2,</span><br><span class="line">        &quot;timestatmp&quot;:1393729865073</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;topicConfigTable&quot;:&#123;</span><br><span class="line">        &quot;TopicTest&quot;:&#123;</span><br><span class="line">            &quot;perm&quot;:6, // 100 读权限 , 10 写权限 6 是 110 读写权限</span><br><span class="line">            &quot;readQueueNums&quot;:8,</span><br><span class="line">            &quot;topicFilterType&quot;:&quot;SINGLE_TAG&quot;,</span><br><span class="line">            &quot;topicName&quot;:&quot;TopicTest&quot;,</span><br><span class="line">            &quot;writeQueueNums&quot;:8</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、DefaultMessageStore的load方法"><a href="#5、DefaultMessageStore的load方法" class="headerlink" title="5、DefaultMessageStore的load方法"></a>5、DefaultMessageStore的load方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public boolean load() &#123;</span><br><span class="line">    boolean result = true;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //是否存在零时文件，$HOME/store/abort</span><br><span class="line">        boolean lastExitOK = !this.isTempFileExist();</span><br><span class="line">        log.info(&quot;last shutdown &#123;&#125;&quot;, lastExitOK ? &quot;normally&quot; : &quot;abnormally&quot;);</span><br><span class="line"></span><br><span class="line">        //加载延时消息，$HOME/store/config/delayOffset.json</span><br><span class="line">        if (null != scheduleMessageService) &#123;</span><br><span class="line">            result = result &amp;&amp; this.scheduleMessageService.load();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // load Commit Log</span><br><span class="line">        //加载物理消息， $HOME\store\commitlog\$&#123;fileName&#125;.每个文件的大小默认为1G</span><br><span class="line">        //文件名长度为20位，左边补0，剩余为起始偏移量，比如 00000000000000000000 代表了第一个文件，起始偏移量为 0， </span><br><span class="line">        //文件大小为 1G=1073741824； 当这个文件满了，第二个文件名字为 00000000001073741824</span><br><span class="line">        result = result &amp;&amp; this.commitLog.load();</span><br><span class="line"></span><br><span class="line">        // load Consume Queue</span><br><span class="line">        //加载逻辑队列,对应每个topic和queueid下面的所有文件,$HOME/store/consumequeue/&#123;topic&#125;/&#123;queueId&#125;/&#123;fileName&#125;</span><br><span class="line">        //每条数据的结构：消息起始物理偏移量(physical offset, long 8字节)+消息大小(int,4字节)+tagsCode(long 8字节)(和storeTimestamp相关) </span><br><span class="line">        //每个 cosumequeue 文件的名称 fileName，名字长度为 20 位，左边补零，剩余为起始偏量</span><br><span class="line">        result = result &amp;&amp; this.loadConsumeQueue();</span><br><span class="line"></span><br><span class="line">        if (result) &#123;</span><br><span class="line">            //加载时间戳，$HOME/store/checkpoint</span><br><span class="line">            //数据结构：physicMsgTimestamp(8)+logicsMsgTimestamp(8)+ indexMsgTimestamp(8)</span><br><span class="line">            //进行消息写入commitlog、物理偏移量/消息大小写入 consumequeue、创建 Index 索引这三个操作之后</span><br><span class="line">            //都要分别更新 physicMsgTimestamp、logicsMsgTimestamp、indexMsgTimestamp 字段</span><br><span class="line">            this.storeCheckpoint =</span><br><span class="line">                new StoreCheckpoint(StorePathConfigHelper.getStoreCheckpoint(this.messageStoreConfig.getStorePathRootDir()));</span><br><span class="line">            //加载索引，$HOME \store\index\$&#123;fileName&#125;</span><br><span class="line">            this.indexService.load(lastExitOK);</span><br><span class="line">            //恢复数据</span><br><span class="line">            this.recover(lastExitOK);</span><br><span class="line"></span><br><span class="line">            log.info(&quot;load over, and the max phy offset = &#123;&#125;&quot;, this.getMaxPhyOffset());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;load exception&quot;, e);</span><br><span class="line">        result = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!result) &#123;</span><br><span class="line">        this.allocateMappedFileService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DefaultMessageStore的recover方法"><a href="#6、DefaultMessageStore的recover方法" class="headerlink" title="6、DefaultMessageStore的recover方法"></a>6、DefaultMessageStore的recover方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void recover(final boolean lastExitOK) &#123;</span><br><span class="line">    //恢复cosumequeue</span><br><span class="line">    this.recoverConsumeQueue();</span><br><span class="line"></span><br><span class="line">    if (lastExitOK) &#123;</span><br><span class="line">        //正常恢复CommitLog内存数据</span><br><span class="line">        this.commitLog.recoverNormally();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //异常恢复CommitLog内存数据,从最后的文件开始往前寻找与checkpoint文件的记录相匹配的一个文件,开始恢复</span><br><span class="line">        this.commitLog.recoverAbnormally();</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">    this.recoverTopicQueueTable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、DefaultMessageStore的recoverConsumeQueue方法"><a href="#7、DefaultMessageStore的recoverConsumeQueue方法" class="headerlink" title="7、DefaultMessageStore的recoverConsumeQueue方法"></a>7、DefaultMessageStore的recoverConsumeQueue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void recoverConsumeQueue() &#123;</span><br><span class="line">    for (ConcurrentMap&lt;Integer, ConsumeQueue&gt; maps : this.consumeQueueTable.values()) &#123;</span><br><span class="line">        for (ConsumeQueue logic : maps.values()) &#123;</span><br><span class="line">            logic.recover();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、ConsumeQueue的recover方法"><a href="#8、ConsumeQueue的recover方法" class="headerlink" title="8、ConsumeQueue的recover方法"></a>8、ConsumeQueue的recover方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public void recover() &#123;</span><br><span class="line">    //获取该消息队列的所有内存映射文件</span><br><span class="line">    final List&lt;MappedFile&gt; mappedFiles = this.mappedFileQueue.getMappedFiles();</span><br><span class="line">    if (!mappedFiles.isEmpty()) &#123;</span><br><span class="line">        //从倒数第3个文件开始</span><br><span class="line">        int index = mappedFiles.size() - 3;</span><br><span class="line">        if (index &lt; 0)</span><br><span class="line">            index = 0;</span><br><span class="line">        //consumequeue 逻辑大小</span><br><span class="line">        int mappedFileSizeLogics = this.mappedFileSize;</span><br><span class="line">        //对应的内存映射文件</span><br><span class="line">        MappedFile mappedFile = mappedFiles.get(index);</span><br><span class="line">        //内存映射文件对应的ByteBuffer</span><br><span class="line">        ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();</span><br><span class="line">        //处理的offset,默认从consumequeue中存放的第一个条目开始</span><br><span class="line">        long processOffset = mappedFile.getFileFromOffset();</span><br><span class="line">        long mappedFileOffset = 0;</span><br><span class="line">        long maxExtAddr = 1;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            //循环验证consumeque包含条目的有效性（如果offset大于0并且size大于0，则表示是一个有效的条目）</span><br><span class="line">            for (int i = 0; i &lt; mappedFileSizeLogics; i += CQ_STORE_UNIT_SIZE) &#123;</span><br><span class="line">                //commitlog中的物理偏移量</span><br><span class="line">                long offset = byteBuffer.getLong();</span><br><span class="line">                //该条消息的消息总长度</span><br><span class="line">                int size = byteBuffer.getInt();</span><br><span class="line">                //tag hashcode</span><br><span class="line">                long tagsCode = byteBuffer.getLong();</span><br><span class="line"></span><br><span class="line">                //如果offset大于0并且size大于0，则表示是一个有效的条目，设置consumequeue中有效的mappedFileOffset </span><br><span class="line">                //继续下一个条目的验证，如果发现不正常的条目，则跳出循环。</span><br><span class="line">                if (offset &gt;= 0 &amp;&amp; size &gt; 0) &#123;</span><br><span class="line">                    mappedFileOffset = i + CQ_STORE_UNIT_SIZE;</span><br><span class="line">                    this.maxPhysicOffset = offset;</span><br><span class="line">                    if (isExtAddr(tagsCode)) &#123;</span><br><span class="line">                        maxExtAddr = tagsCode;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    log.info(&quot;recover current consume queue file over,  &quot; + mappedFile.getFileName() + &quot; &quot;</span><br><span class="line">                        + offset + &quot; &quot; + size + &quot; &quot; + tagsCode);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果该consumeque文件中所有条目全部有效，则继续验证下一个文件</span><br><span class="line">            if (mappedFileOffset == mappedFileSizeLogics) &#123;</span><br><span class="line">                index++;</span><br><span class="line">                if (index &gt;= mappedFiles.size()) &#123;</span><br><span class="line"></span><br><span class="line">                    log.info(&quot;recover last consume queue file over, last mapped file &quot;</span><br><span class="line">                        + mappedFile.getFileName());</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    mappedFile = mappedFiles.get(index);</span><br><span class="line">                    byteBuffer = mappedFile.sliceByteBuffer();</span><br><span class="line">                    processOffset = mappedFile.getFileFromOffset();</span><br><span class="line">                    mappedFileOffset = 0;</span><br><span class="line">                    log.info(&quot;recover next consume queue file, &quot; + mappedFile.getFileName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.info(&quot;recover current consume queue queue over &quot; + mappedFile.getFileName() + &quot; &quot;</span><br><span class="line">                    + (processOffset + mappedFileOffset));</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //processOffset 代表了当前consuemque有效的偏移量</span><br><span class="line">        processOffset += mappedFileOffset;</span><br><span class="line">        //设置setFlushedWhere，setCommittedWhere为当前有效的偏移量</span><br><span class="line">        this.mappedFileQueue.setFlushedWhere(processOffset);</span><br><span class="line">        this.mappedFileQueue.setCommittedWhere(processOffset);</span><br><span class="line">        //截断无效的consumeque文件</span><br><span class="line">        this.mappedFileQueue.truncateDirtyFiles(processOffset);</span><br><span class="line"></span><br><span class="line">        if (isExtReadEnable()) &#123;</span><br><span class="line">            this.consumeQueueExt.recover();</span><br><span class="line">            log.info(&quot;Truncate consume queue extend file by max &#123;&#125;&quot;, maxExtAddr);</span><br><span class="line">            this.consumeQueueExt.truncateByMaxAddress(maxExtAddr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、6）CommitLog的recoverNormally方法"><a href="#9、接（一、6）CommitLog的recoverNormally方法" class="headerlink" title="9、接（一、6）CommitLog的recoverNormally方法"></a>9、接（一、6）CommitLog的recoverNormally方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public void recoverNormally() &#123;</span><br><span class="line">    boolean checkCRCOnRecover = this.defaultMessageStore.getMessageStoreConfig().isCheckCRCOnRecover();</span><br><span class="line">    //获取该CommitLog的所有内存映射文件</span><br><span class="line">    final List&lt;MappedFile&gt; mappedFiles = this.mappedFileQueue.getMappedFiles();</span><br><span class="line">    if (!mappedFiles.isEmpty()) &#123;</span><br><span class="line">        // Began to recover from the last third file</span><br><span class="line">        //从倒数第3个文件开始</span><br><span class="line">        int index = mappedFiles.size() - 3;</span><br><span class="line">        if (index &lt; 0)</span><br><span class="line">            index = 0;</span><br><span class="line">        //对应的内存映射文件</span><br><span class="line">        MappedFile mappedFile = mappedFiles.get(index);</span><br><span class="line">        //内存映射文件对应的ByteBuffer</span><br><span class="line">        ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();</span><br><span class="line">        //处理的offset，从第一个消息开始</span><br><span class="line">        long processOffset = mappedFile.getFileFromOffset();</span><br><span class="line">        long mappedFileOffset = 0;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            //检查消息并返回消息大小</span><br><span class="line">            //检查到第 5 至 8 字节 MAGICCODE 字段等于 BlankMagicCode （ cbd43194）则返回 msgSize=0的 DispatchRequest 对象；</span><br><span class="line">            //若校验未通过或者读取到的信息为空则返回msgSize=-1 的 DispatchRequest 对象；</span><br><span class="line">            DispatchRequest dispatchRequest = this.checkMessageAndReturnSize(byteBuffer, checkCRCOnRecover);</span><br><span class="line">            //消息大小</span><br><span class="line">            int size = dispatchRequest.getMsgSize();</span><br><span class="line">            // Normal data</span><br><span class="line">            // 对于 msgSize 大于零，则读取的偏移量 mapedFileOffset 累加 msgSize；</span><br><span class="line">            if (dispatchRequest.isSuccess() &amp;&amp; size &gt; 0) &#123;</span><br><span class="line">                mappedFileOffset += size;</span><br><span class="line">            &#125;</span><br><span class="line">            // Come the end of the file, switch to the next file Since the</span><br><span class="line">            // return 0 representatives met last hole,</span><br><span class="line">            // this can not be included in truncate offset</span><br><span class="line">            //若等于零，则表示读取到了文件的最后一块信息，则继续读取下一个 MapedFile对象的文件</span><br><span class="line">            else if (dispatchRequest.isSuccess() &amp;&amp; size == 0) &#123;</span><br><span class="line">                index++;</span><br><span class="line">                if (index &gt;= mappedFiles.size()) &#123;</span><br><span class="line">                    // Current branch can not happen</span><br><span class="line">                    log.info(&quot;recover last 3 physics file over, last mapped file &quot; + mappedFile.getFileName());</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    mappedFile = mappedFiles.get(index);</span><br><span class="line">                    byteBuffer = mappedFile.sliceByteBuffer();</span><br><span class="line">                    processOffset = mappedFile.getFileFromOffset();</span><br><span class="line">                    mappedFileOffset = 0;</span><br><span class="line">                    log.info(&quot;recover next physics file, &quot; + mappedFile.getFileName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // Intermediate file read error</span><br><span class="line">            else if (!dispatchRequest.isSuccess()) &#123;</span><br><span class="line">                log.info(&quot;recover physics file end, &quot; + mappedFile.getFileName());</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //计算有效信息的最后位置 processOffset</span><br><span class="line">        processOffset += mappedFileOffset;</span><br><span class="line">        //更新数据</span><br><span class="line">        this.mappedFileQueue.setFlushedWhere(processOffset);</span><br><span class="line">        this.mappedFileQueue.setCommittedWhere(processOffset);</span><br><span class="line">        //截断无效数据</span><br><span class="line">        this.mappedFileQueue.truncateDirtyFiles(processOffset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、BrokerController的registerProcessor方法"><a href="#10、BrokerController的registerProcessor方法" class="headerlink" title="10、BrokerController的registerProcessor方法"></a>10、BrokerController的registerProcessor方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public void registerProcessor() &#123;</span><br><span class="line">    /**</span><br><span class="line">     * SendMessageProcessor</span><br><span class="line">     */</span><br><span class="line">    SendMessageProcessor sendProcessor = new SendMessageProcessor(this);</span><br><span class="line">    sendProcessor.registerSendMessageHook(sendMessageHookList);</span><br><span class="line">    sendProcessor.registerConsumeMessageHook(consumeMessageHookList);</span><br><span class="line">    //注册SendMessageProcessor处理器，处理Producer发送消息</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    //注册SendMessageProcessor处理器，处理Consumer消费失败的消息发回broker</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    //注册SendMessageProcessor处理器，处理Producer发送消息</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    //注册SendMessageProcessor处理器，处理Consumer消费失败的消息发回broker</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK, sendProcessor, this.sendMessageExecutor);</span><br><span class="line">    /**</span><br><span class="line">     * PullMessageProcessor</span><br><span class="line">     */</span><br><span class="line">    //注册PullMessageProcessor处理器，处理Consumer拉取消息</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.PULL_MESSAGE, this.pullMessageProcessor, this.pullMessageExecutor);</span><br><span class="line">    this.pullMessageProcessor.registerConsumeMessageHook(consumeMessageHookList);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * QueryMessageProcessor</span><br><span class="line">     */</span><br><span class="line">    NettyRequestProcessor queryProcessor = new QueryMessageProcessor(this);</span><br><span class="line">    //注册QueryMessageProcessor处理器，处理Consumer查询消息</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.QUERY_MESSAGE, queryProcessor, this.queryMessageExecutor);</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.VIEW_MESSAGE_BY_ID, queryProcessor, this.queryMessageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.QUERY_MESSAGE, queryProcessor, this.queryMessageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.VIEW_MESSAGE_BY_ID, queryProcessor, this.queryMessageExecutor);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ClientManageProcessor</span><br><span class="line">     */</span><br><span class="line">    ClientManageProcessor clientProcessor = new ClientManageProcessor(this);</span><br><span class="line">    //注册ClientManageProcessor处理器，处理心跳、注销客户端等请求</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.HEART_BEAT, clientProcessor, this.clientManageExecutor);</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientProcessor, this.clientManageExecutor);</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.CHECK_CLIENT_CONFIG, clientProcessor, this.clientManageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.HEART_BEAT, clientProcessor, this.clientManageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientProcessor, this.clientManageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.CHECK_CLIENT_CONFIG, clientProcessor, this.clientManageExecutor);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ConsumerManageProcessor</span><br><span class="line">     */</span><br><span class="line">    ConsumerManageProcessor consumerManageProcessor = new ConsumerManageProcessor(this);</span><br><span class="line">    //注册ConsumerManageProcessor处理器，处理消费端信息等请求</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, consumerManageProcessor, this.consumerManageExecutor);</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.QUERY_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, consumerManageProcessor, this.consumerManageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.QUERY_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * EndTransactionProcessor</span><br><span class="line">     */</span><br><span class="line">    //注册EndTransactionProcessor处理器</span><br><span class="line">    this.remotingServer.registerProcessor(RequestCode.END_TRANSACTION, new EndTransactionProcessor(this), this.sendMessageExecutor);</span><br><span class="line">    this.fastRemotingServer.registerProcessor(RequestCode.END_TRANSACTION, new EndTransactionProcessor(this), this.sendMessageExecutor);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Default</span><br><span class="line">     */</span><br><span class="line">    AdminBrokerProcessor adminProcessor = new AdminBrokerProcessor(this);</span><br><span class="line">    this.remotingServer.registerDefaultProcessor(adminProcessor, this.adminBrokerExecutor);</span><br><span class="line">    this.fastRemotingServer.registerDefaultProcessor(adminProcessor, this.adminBrokerExecutor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（一、1）BrokerStartup的start方法"><a href="#11、接（一、1）BrokerStartup的start方法" class="headerlink" title="11、接（一、1）BrokerStartup的start方法"></a>11、接（一、1）BrokerStartup的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static BrokerController start(BrokerController controller) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line">        controller.start();</span><br><span class="line"></span><br><span class="line">        String tip = &quot;The broker[&quot; + controller.getBrokerConfig().getBrokerName() + &quot;, &quot;</span><br><span class="line">            + controller.getBrokerAddr() + &quot;] boot success. serializeType=&quot; + RemotingCommand.getSerializeTypeConfigInThisServer();</span><br><span class="line"></span><br><span class="line">        if (null != controller.getBrokerConfig().getNamesrvAddr()) &#123;</span><br><span class="line">            tip += &quot; and name server is &quot; + controller.getBrokerConfig().getNamesrvAddr();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(tip);</span><br><span class="line">        return controller;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、BrokerController的start方法"><a href="#12、BrokerController的start方法" class="headerlink" title="12、BrokerController的start方法"></a>12、BrokerController的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public void start() throws Exception &#123;</span><br><span class="line">    //启动消息存储器</span><br><span class="line">    if (this.messageStore != null) &#123;</span><br><span class="line">        this.messageStore.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //启动netty服务器</span><br><span class="line">    if (this.remotingServer != null) &#123;</span><br><span class="line">        this.remotingServer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //启动netty服务器</span><br><span class="line">    if (this.fastRemotingServer != null) &#123;</span><br><span class="line">        this.fastRemotingServer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //启动netty客户端，与注册中心通信</span><br><span class="line">    if (this.brokerOuterAPI != null) &#123;</span><br><span class="line">        this.brokerOuterAPI.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //长轮询</span><br><span class="line">    if (this.pullRequestHoldService != null) &#123;</span><br><span class="line">        this.pullRequestHoldService.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //线程定时清除不活动的连接</span><br><span class="line">    if (this.clientHousekeepingService != null) &#123;</span><br><span class="line">        this.clientHousekeepingService.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //FilterServer管理</span><br><span class="line">    if (this.filterServerManager != null) &#123;</span><br><span class="line">        this.filterServerManager.start();</span><br><span class="line">    &#125;</span><br><span class="line">    //定时向注册中心注册Broker</span><br><span class="line">    this.registerBrokerAll(true, false);</span><br><span class="line">    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                BrokerController.this.registerBrokerAll(true, false);</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                log.error(&quot;registerBrokerAll Exception&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000 * 10, 1000 * 30, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    if (this.brokerStatsManager != null) &#123;</span><br><span class="line">        this.brokerStatsManager.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.brokerFastFailure != null) &#123;</span><br><span class="line">        this.brokerFastFailure.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、DefaultMessageStore的start方法"><a href="#13、DefaultMessageStore的start方法" class="headerlink" title="13、DefaultMessageStore的start方法"></a>13、DefaultMessageStore的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public void start() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    lock = lockFile.getChannel().tryLock(0, 1, false);</span><br><span class="line">    if (lock == null || lock.isShared() || !lock.isValid()) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;Lock failed,MQ already started&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lockFile.getChannel().write(ByteBuffer.wrap(&quot;lock&quot;.getBytes()));</span><br><span class="line">    lockFile.getChannel().force(true);</span><br><span class="line">    //该线程将消息刷盘，依次循环consumeQueueTable，将每个consumeQueue中的mapedFileQueue commit</span><br><span class="line">    this.flushConsumeQueueService.start();</span><br><span class="line">    //启动消息刷盘任务</span><br><span class="line">    this.commitLog.start();</span><br><span class="line">    //该线程定期统计当前的数据储存状况</span><br><span class="line">    this.storeStatsService.start();</span><br><span class="line">    //发送的消息设置了延时多久消费，那么这个任务会将延时到期的任务正式写到mq中</span><br><span class="line">    if (this.scheduleMessageService != null &amp;&amp; SLAVE != messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">        this.scheduleMessageService.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //当Slave模式时，会启动这个模块，首先设置reputFormOffset为初始值0；不断遍历commitLog，得到其SelectMapedBufferResult，</span><br><span class="line">    //然后对每一个Message创建DispatchRequest，创建对应的ConsumeQueue和IndexFile，</span><br><span class="line">    //相关的类如下：CommitLogDispatcherBuildConsumeQueue，CommitLogDispatcherBuildIndex，CommitLogDispatcherCalcBitMap</span><br><span class="line">    if (this.getMessageStoreConfig().isDuplicationEnable()) &#123;</span><br><span class="line">        this.reputMessageService.setReputFromOffset(this.commitLog.getConfirmOffset());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.reputMessageService.setReputFromOffset(this.commitLog.getMaxOffset());</span><br><span class="line">    &#125;</span><br><span class="line">    this.reputMessageService.start();</span><br><span class="line">    //该线程定时处理和slave之间的信息备份</span><br><span class="line">    this.haService.start();</span><br><span class="line"></span><br><span class="line">    this.createTempFile();</span><br><span class="line">    this.addScheduleTask();</span><br><span class="line">    this.shutdown = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、接收消息"><a href="#二、接收消息" class="headerlink" title="二、接收消息"></a>二、接收消息</h3><h4 id="1、SendMessageProcessor的processRequest方法"><a href="#1、SendMessageProcessor的processRequest方法" class="headerlink" title="1、SendMessageProcessor的processRequest方法"></a>1、SendMessageProcessor的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public RemotingCommand processRequest(ChannelHandlerContext ctx,</span><br><span class="line">    RemotingCommand request) throws RemotingCommandException &#123;</span><br><span class="line">    SendMessageContext mqtraceContext;</span><br><span class="line">    switch (request.getCode()) &#123;</span><br><span class="line">        case RequestCode.CONSUMER_SEND_MSG_BACK:</span><br><span class="line">            //处理消费端，消费失败发回的消息</span><br><span class="line">            return this.consumerSendMsgBack(ctx, request);</span><br><span class="line">        default:</span><br><span class="line">            //解析请求</span><br><span class="line">            SendMessageRequestHeader requestHeader = parseRequestHeader(request);</span><br><span class="line">            if (requestHeader == null) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            //发送请求Context,在 hook 场景下使用</span><br><span class="line">            mqtraceContext = buildMsgContext(ctx, requestHeader);</span><br><span class="line">            //hook：处理发送消息前逻辑</span><br><span class="line">            this.executeSendMessageHookBefore(ctx, request, mqtraceContext);</span><br><span class="line"></span><br><span class="line">            RemotingCommand response;</span><br><span class="line">            //处理发送消息逻辑</span><br><span class="line">            if (requestHeader.isBatch()) &#123;</span><br><span class="line">                response = this.sendBatchMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                response = this.sendMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class="line">            &#125;</span><br><span class="line">            //hook：处理发送消息后逻辑</span><br><span class="line">            this.executeSendMessageHookAfter(response, mqtraceContext);</span><br><span class="line">            return response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、SendMessageProcessor的sendMessage方法"><a href="#2、SendMessageProcessor的sendMessage方法" class="headerlink" title="2、SendMessageProcessor的sendMessage方法"></a>2、SendMessageProcessor的sendMessage方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">private RemotingCommand sendMessage(final ChannelHandlerContext ctx,</span><br><span class="line">    final RemotingCommand request,</span><br><span class="line">    final SendMessageContext sendMessageContext,</span><br><span class="line">    final SendMessageRequestHeader requestHeader) throws RemotingCommandException &#123;</span><br><span class="line">    //初始化响应</span><br><span class="line">    final RemotingCommand response = RemotingCommand.createResponseCommand(SendMessageResponseHeader.class);</span><br><span class="line">    final SendMessageResponseHeader responseHeader = (SendMessageResponseHeader) response.readCustomHeader();</span><br><span class="line"></span><br><span class="line">    response.setOpaque(request.getOpaque());</span><br><span class="line"></span><br><span class="line">    response.addExtField(MessageConst.PROPERTY_MSG_REGION, this.brokerController.getBrokerConfig().getRegionId());</span><br><span class="line">    response.addExtField(MessageConst.PROPERTY_TRACE_SWITCH, String.valueOf(this.brokerController.getBrokerConfig().isTraceOn()));</span><br><span class="line"></span><br><span class="line">    log.debug(&quot;receive SendMessage request command, &#123;&#125;&quot;, request);</span><br><span class="line">    //如果未开始接收消息，抛出系统异常</span><br><span class="line">    final long startTimstamp = this.brokerController.getBrokerConfig().getStartAcceptSendRequestTimeStamp();</span><br><span class="line">    if (this.brokerController.getMessageStore().now() &lt; startTimstamp) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(String.format(&quot;broker unable to service, until %s&quot;, UtilAll.timeMillisToHumanString2(startTimstamp)));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.setCode(-1);</span><br><span class="line">    //消息配置(Topic配置）校验</span><br><span class="line">    super.msgCheck(ctx, requestHeader, response);</span><br><span class="line">    if (response.getCode() != -1) &#123;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final byte[] body = request.getBody();</span><br><span class="line">    //如果队列小于0，从可用队列随机选择</span><br><span class="line">    int queueIdInt = requestHeader.getQueueId();</span><br><span class="line">    TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());</span><br><span class="line"></span><br><span class="line">    if (queueIdInt &lt; 0) &#123;</span><br><span class="line">        queueIdInt = Math.abs(this.random.nextInt() % 99999999) % topicConfig.getWriteQueueNums();</span><br><span class="line">    &#125;</span><br><span class="line">    //创建MessageExtBrokerInner</span><br><span class="line">    MessageExtBrokerInner msgInner = new MessageExtBrokerInner();</span><br><span class="line">    msgInner.setTopic(requestHeader.getTopic());</span><br><span class="line">    msgInner.setQueueId(queueIdInt);</span><br><span class="line"></span><br><span class="line">    if (!handleRetryAndDLQ(requestHeader, response, request, msgInner, topicConfig)) &#123;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    msgInner.setBody(body);</span><br><span class="line">    msgInner.setFlag(requestHeader.getFlag());</span><br><span class="line">    MessageAccessor.setProperties(msgInner, MessageDecoder.string2messageProperties(requestHeader.getProperties()));</span><br><span class="line">    msgInner.setPropertiesString(requestHeader.getProperties());</span><br><span class="line">    msgInner.setBornTimestamp(requestHeader.getBornTimestamp());</span><br><span class="line">    msgInner.setBornHost(ctx.channel().remoteAddress());</span><br><span class="line">    msgInner.setStoreHost(this.getStoreHost());</span><br><span class="line">    msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader.getReconsumeTimes());</span><br><span class="line">    //校验是否不允许发送事务消息</span><br><span class="line">    if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) &#123;</span><br><span class="line">        String traFlag = msgInner.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class="line">        if (traFlag != null) &#123;</span><br><span class="line">            response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">            response.setRemark(</span><br><span class="line">                &quot;the broker[&quot; + this.brokerController.getBrokerConfig().getBrokerIP1() + &quot;] sending transaction message is forbidden&quot;);</span><br><span class="line">            return response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加消息</span><br><span class="line">    PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessage(msgInner);</span><br><span class="line">    //处理返回</span><br><span class="line">    return handlePutMessageResult(putMessageResult, response, request, msgInner, responseHeader, sendMessageContext, ctx, queueIdInt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultMessageStore的putMessage方法"><a href="#3、DefaultMessageStore的putMessage方法" class="headerlink" title="3、DefaultMessageStore的putMessage方法"></a>3、DefaultMessageStore的putMessage方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public PutMessageResult putMessages(MessageExtBatch messageExtBatch) &#123;</span><br><span class="line">    if (this.shutdown) &#123;</span><br><span class="line">        log.warn(&quot;DefaultMessageStore has shutdown, so putMessages is forbidden&quot;);</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.SERVICE_NOT_AVAILABLE, null);</span><br><span class="line">    &#125;</span><br><span class="line">    //从节点不允许写入</span><br><span class="line">    if (BrokerRole.SLAVE == this.messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">        long value = this.printTimes.getAndIncrement();</span><br><span class="line">        if ((value % 50000) == 0) &#123;</span><br><span class="line">            log.warn(&quot;DefaultMessageStore is in slave mode, so putMessages is forbidden &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.SERVICE_NOT_AVAILABLE, null);</span><br><span class="line">    &#125;</span><br><span class="line">    //store是否允许写入</span><br><span class="line">    if (!this.runningFlags.isWriteable()) &#123;</span><br><span class="line">        long value = this.printTimes.getAndIncrement();</span><br><span class="line">        if ((value % 50000) == 0) &#123;</span><br><span class="line">            log.warn(&quot;DefaultMessageStore is not writable, so putMessages is forbidden &quot; + this.runningFlags.getFlagBits());</span><br><span class="line">        &#125;</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.SERVICE_NOT_AVAILABLE, null);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.printTimes.set(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //消息过长</span><br><span class="line">    if (messageExtBatch.getTopic().length() &gt; Byte.MAX_VALUE) &#123;</span><br><span class="line">        log.warn(&quot;PutMessages topic length too long &quot; + messageExtBatch.getTopic().length());</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);</span><br><span class="line">    &#125;</span><br><span class="line">    //消息附加属性过长</span><br><span class="line">    if (messageExtBatch.getBody().length &gt; messageStoreConfig.getMaxMessageSize()) &#123;</span><br><span class="line">        log.warn(&quot;PutMessages body length too long &quot; + messageExtBatch.getBody().length);</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.isOSPageCacheBusy()) &#123;</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long beginTime = this.getSystemClock().now();</span><br><span class="line">    //添加消息到commitLog</span><br><span class="line">    PutMessageResult result = this.commitLog.putMessages(messageExtBatch);</span><br><span class="line"></span><br><span class="line">    long eclipseTime = this.getSystemClock().now() - beginTime;</span><br><span class="line">    if (eclipseTime &gt; 500) &#123;</span><br><span class="line">        log.warn(&quot;not in lock eclipse time(ms)=&#123;&#125;, bodyLength=&#123;&#125;&quot;, eclipseTime, messageExtBatch.getBody().length);</span><br><span class="line">    &#125;</span><br><span class="line">    this.storeStatsService.setPutMessageEntireTimeMax(eclipseTime);</span><br><span class="line"></span><br><span class="line">    if (null == result || !result.isOk()) &#123;</span><br><span class="line">        this.storeStatsService.getPutMessageFailedTimes().incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、CommitLog的putMessage方法"><a href="#4、CommitLog的putMessage方法" class="headerlink" title="4、CommitLog的putMessage方法"></a>4、CommitLog的putMessage方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) &#123;</span><br><span class="line">    messageExtBatch.setStoreTimestamp(System.currentTimeMillis());</span><br><span class="line">    AppendMessageResult result;</span><br><span class="line"></span><br><span class="line">    StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();</span><br><span class="line">    //获取消息类型（事务消息，非事务消息，Commit消息）</span><br><span class="line">    final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());</span><br><span class="line"></span><br><span class="line">    if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) &#123;</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);</span><br><span class="line">    &#125;</span><br><span class="line">    if (messageExtBatch.getDelayTimeLevel() &gt; 0) &#123;</span><br><span class="line">        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long eclipseTimeInLock = 0;</span><br><span class="line">    //获取写入映射文件</span><br><span class="line">    MappedFile unlockMappedFile = null;</span><br><span class="line">    MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile();</span><br><span class="line"></span><br><span class="line">    //fine-grained lock instead of the coarse-grained</span><br><span class="line">    MessageExtBatchEncoder batchEncoder = batchEncoderThreadLocal.get();</span><br><span class="line"></span><br><span class="line">    messageExtBatch.setEncodedBuff(batchEncoder.encode(messageExtBatch));</span><br><span class="line">    //获取写入锁</span><br><span class="line">    putMessageLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        long beginLockTimestamp = this.defaultMessageStore.getSystemClock().now();</span><br><span class="line">        this.beginTimeInLock = beginLockTimestamp;</span><br><span class="line"></span><br><span class="line">        // Here settings are stored timestamp, in order to ensure an orderly</span><br><span class="line">        // global</span><br><span class="line">        messageExtBatch.setStoreTimestamp(beginLockTimestamp);</span><br><span class="line">        //当不存在映射文件时，进行创建</span><br><span class="line">        if (null == mappedFile || mappedFile.isFull()) &#123;</span><br><span class="line">            mappedFile = this.mappedFileQueue.getLastMappedFile(0); // Mark: NewFile may be cause noise</span><br><span class="line">        &#125;</span><br><span class="line">        if (null == mappedFile) &#123;</span><br><span class="line">            log.error(&quot;Create mapped file1 error, topic: &#123;&#125; clientAddr: &#123;&#125;&quot;, messageExtBatch.getTopic(), messageExtBatch.getBornHostString());</span><br><span class="line">            beginTimeInLock = 0;</span><br><span class="line">            return new PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, null);</span><br><span class="line">        &#125;</span><br><span class="line">        //存储消息</span><br><span class="line">        result = mappedFile.appendMessages(messageExtBatch, this.appendMessageCallback);</span><br><span class="line">        switch (result.getStatus()) &#123;</span><br><span class="line">            case PUT_OK:</span><br><span class="line">                break;</span><br><span class="line">            case END_OF_FILE:</span><br><span class="line">                unlockMappedFile = mappedFile;</span><br><span class="line">                // Create a new file, re-write the message</span><br><span class="line">                //当文件尾时，获取新的映射文件</span><br><span class="line">                mappedFile = this.mappedFileQueue.getLastMappedFile(0);</span><br><span class="line">                if (null == mappedFile) &#123;</span><br><span class="line">                    // XXX: warn and notify me</span><br><span class="line">                    log.error(&quot;Create mapped file2 error, topic: &#123;&#125; clientAddr: &#123;&#125;&quot;, messageExtBatch.getTopic(), messageExtBatch.getBornHostString());</span><br><span class="line">                    beginTimeInLock = 0;</span><br><span class="line">                    return new PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, result);</span><br><span class="line">                &#125;</span><br><span class="line">                //存储消息</span><br><span class="line">                result = mappedFile.appendMessages(messageExtBatch, this.appendMessageCallback);</span><br><span class="line">                break;</span><br><span class="line">            case MESSAGE_SIZE_EXCEEDED:</span><br><span class="line">            case PROPERTIES_SIZE_EXCEEDED:</span><br><span class="line">                beginTimeInLock = 0;</span><br><span class="line">                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, result);</span><br><span class="line">            case UNKNOWN_ERROR:</span><br><span class="line">                beginTimeInLock = 0;</span><br><span class="line">                return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result);</span><br><span class="line">            default:</span><br><span class="line">                beginTimeInLock = 0;</span><br><span class="line">                return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        eclipseTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginLockTimestamp;</span><br><span class="line">        beginTimeInLock = 0;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">         //释放写入锁</span><br><span class="line">        putMessageLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (eclipseTimeInLock &gt; 500) &#123;</span><br><span class="line">        log.warn(&quot;[NOTIFYME]putMessages in lock cost time(ms)=&#123;&#125;, bodyLength=&#123;&#125; AppendMessageResult=&#123;&#125;&quot;, eclipseTimeInLock, messageExtBatch.getBody().length, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (null != unlockMappedFile &amp;&amp; this.defaultMessageStore.getMessageStoreConfig().isWarmMapedFileEnable()) &#123;</span><br><span class="line">        this.defaultMessageStore.unlockMappedFile(unlockMappedFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PutMessageResult putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, result);</span><br><span class="line"></span><br><span class="line">    // Statistics</span><br><span class="line">    storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).addAndGet(result.getMsgNum());</span><br><span class="line">    storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).addAndGet(result.getWroteBytes());</span><br><span class="line">    //根据刷盘策略刷盘</span><br><span class="line">    handleDiskFlush(result, putMessageResult, messageExtBatch);</span><br><span class="line">    //若该Broker为同步双写主用(SYNC_MASTER)，同步到从节点</span><br><span class="line">    handleHA(result, putMessageResult, messageExtBatch);</span><br><span class="line"></span><br><span class="line">    return putMessageResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、CommitLog的handleDiskFlush方法"><a href="#5、CommitLog的handleDiskFlush方法" class="headerlink" title="5、CommitLog的handleDiskFlush方法"></a>5、CommitLog的handleDiskFlush方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public void handleDiskFlush(AppendMessageResult result, PutMessageResult putMessageResult, MessageExt messageExt) &#123;</span><br><span class="line">    // Synchronization flush</span><br><span class="line">    //同步刷盘</span><br><span class="line">    if (FlushDiskType.SYNC_FLUSH == this.defaultMessageStore.getMessageStoreConfig().getFlushDiskType()) &#123;</span><br><span class="line">        //获取刷盘服务</span><br><span class="line">        final GroupCommitService service = (GroupCommitService) this.flushCommitLogService;</span><br><span class="line">        //消息属性WAIT为true,等待服务器将消息存储完毕再返回</span><br><span class="line">        if (messageExt.isWaitStoreMsgOK()) &#123;</span><br><span class="line">            //创建刷盘请求，offset为写CommitLog之后的offset</span><br><span class="line">            GroupCommitRequest request = new GroupCommitRequest(result.getWroteOffset() + result.getWroteBytes());</span><br><span class="line">            //加入GroupCommitService.requestsWrite集合</span><br><span class="line">            service.putRequest(request);</span><br><span class="line">            //等待同步刷盘</span><br><span class="line">            boolean flushOK = request.waitForFlush(this.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout());</span><br><span class="line">            if (!flushOK) &#123;</span><br><span class="line">                log.error(&quot;do groupcommit, wait for flush failed, topic: &quot; + messageExt.getTopic() + &quot; tags: &quot; + messageExt.getTags()</span><br><span class="line">                    + &quot; client address: &quot; + messageExt.getBornHostString());</span><br><span class="line">                putMessageResult.setPutMessageStatus(PutMessageStatus.FLUSH_DISK_TIMEOUT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            service.wakeup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Asynchronous flush</span><br><span class="line">    else &#123;</span><br><span class="line">        //异步刷盘，唤醒刷盘线程</span><br><span class="line">        if (!this.defaultMessageStore.getMessageStoreConfig().isTransientStorePoolEnable()) &#123;</span><br><span class="line">            flushCommitLogService.wakeup();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            commitLogService.wakeup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、CommitLog的handleHA方法"><a href="#6、CommitLog的handleHA方法" class="headerlink" title="6、CommitLog的handleHA方法"></a>6、CommitLog的handleHA方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public void handleHA(AppendMessageResult result, PutMessageResult putMessageResult, MessageExt messageExt) &#123;</span><br><span class="line">    //同步master</span><br><span class="line">    if (BrokerRole.SYNC_MASTER == this.defaultMessageStore.getMessageStoreConfig().getBrokerRole()) &#123;</span><br><span class="line">        //主从同步服务</span><br><span class="line">        HAService service = this.defaultMessageStore.getHaService();</span><br><span class="line">        if (messageExt.isWaitStoreMsgOK()) &#123;</span><br><span class="line">            // Determine whether to wait</span><br><span class="line">            if (service.isSlaveOK(result.getWroteOffset() + result.getWroteBytes())) &#123;</span><br><span class="line">                //创建同步请求</span><br><span class="line">                GroupCommitRequest request = new GroupCommitRequest(result.getWroteOffset() + result.getWroteBytes());</span><br><span class="line">                //加入GroupTransferService.requestsWrite中</span><br><span class="line">                service.putRequest(request);</span><br><span class="line">                //唤醒线程</span><br><span class="line">                service.getWaitNotifyObject().wakeupAll();</span><br><span class="line">                //等待主从同步</span><br><span class="line">                boolean flushOK =</span><br><span class="line">                    request.waitForFlush(this.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout());</span><br><span class="line">                if (!flushOK) &#123;</span><br><span class="line">                    log.error(&quot;do sync transfer other node, wait return, but failed, topic: &quot; + messageExt.getTopic() + &quot; tags: &quot;</span><br><span class="line">                        + messageExt.getTags() + &quot; client address: &quot; + messageExt.getBornHostNameString());</span><br><span class="line">                    putMessageResult.setPutMessageStatus(PutMessageStatus.FLUSH_SLAVE_TIMEOUT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // Slave problem</span><br><span class="line">            else &#123;</span><br><span class="line">                // Tell the producer, slave not available</span><br><span class="line">                putMessageResult.setPutMessageStatus(PutMessageStatus.SLAVE_NOT_AVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、拉取消息"><a href="#三、拉取消息" class="headerlink" title="三、拉取消息"></a>三、拉取消息</h3><h4 id="1、PullMessageProcessor的processRequest方法"><a href="#1、PullMessageProcessor的processRequest方法" class="headerlink" title="1、PullMessageProcessor的processRequest方法"></a>1、PullMessageProcessor的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public RemotingCommand processRequest(final ChannelHandlerContext ctx,</span><br><span class="line">    RemotingCommand request) throws RemotingCommandException &#123;</span><br><span class="line">    return this.processRequest(ctx.channel(), request, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br></pre></td><td class="code"><pre><span class="line">private RemotingCommand processRequest(final Channel channel, RemotingCommand request, boolean brokerAllowSuspend)</span><br><span class="line">    throws RemotingCommandException &#123;</span><br><span class="line">    RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);</span><br><span class="line">    final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();</span><br><span class="line">    final PullMessageRequestHeader requestHeader =</span><br><span class="line">        (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);</span><br><span class="line"></span><br><span class="line">    response.setOpaque(request.getOpaque());</span><br><span class="line"></span><br><span class="line">    log.debug(&quot;receive PullMessage request command, &#123;&#125;&quot;, request);</span><br><span class="line">    //校验broker是否可读</span><br><span class="line">    if (!PermName.isReadable(this.brokerController.getBrokerConfig().getBrokerPermission())) &#123;</span><br><span class="line">        response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">        response.setRemark(String.format(&quot;the broker[%s] pulling message is forbidden&quot;, this.brokerController.getBrokerConfig().getBrokerIP1()));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //校验consumer分组配置是否存在</span><br><span class="line">    SubscriptionGroupConfig subscriptionGroupConfig =</span><br><span class="line">        this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());</span><br><span class="line">    if (null == subscriptionGroupConfig) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);</span><br><span class="line">        response.setRemark(String.format(&quot;subscription group [%s] does not exist, %s&quot;, requestHeader.getConsumerGroup(), FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //校验consumer分组配置是否可消费</span><br><span class="line">    if (!subscriptionGroupConfig.isConsumeEnable()) &#123;</span><br><span class="line">        response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">        response.setRemark(&quot;subscription group no permission, &quot; + requestHeader.getConsumerGroup());</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final boolean hasSuspendFlag = PullSysFlag.hasSuspendFlag(requestHeader.getSysFlag());</span><br><span class="line">    final boolean hasCommitOffsetFlag = PullSysFlag.hasCommitOffsetFlag(requestHeader.getSysFlag());</span><br><span class="line">    final boolean hasSubscriptionFlag = PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());</span><br><span class="line"></span><br><span class="line">    final long suspendTimeoutMillisLong = hasSuspendFlag ? requestHeader.getSuspendTimeoutMillis() : 0;</span><br><span class="line">    //校验topic配置存在</span><br><span class="line">    TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());</span><br><span class="line">    if (null == topicConfig) &#123;</span><br><span class="line">        log.error(&quot;the topic &#123;&#125; not exist, consumer: &#123;&#125;&quot;, requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(channel));</span><br><span class="line">        response.setCode(ResponseCode.TOPIC_NOT_EXIST);</span><br><span class="line">        response.setRemark(String.format(&quot;topic[%s] not exist, apply first please! %s&quot;, requestHeader.getTopic(), FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL)));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //校验topic配置权限可读</span><br><span class="line">    if (!PermName.isReadable(topicConfig.getPerm())) &#123;</span><br><span class="line">        response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">        response.setRemark(&quot;the topic[&quot; + requestHeader.getTopic() + &quot;] pulling message is forbidden&quot;);</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //校验读取队列在topic配置队列范围内</span><br><span class="line">    if (requestHeader.getQueueId() &lt; 0 || requestHeader.getQueueId() &gt;= topicConfig.getReadQueueNums()) &#123;</span><br><span class="line">        String errorInfo = String.format(&quot;queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]&quot;,</span><br><span class="line">            requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());</span><br><span class="line">        log.warn(errorInfo);</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(errorInfo);</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //校验订阅关系</span><br><span class="line">    SubscriptionData subscriptionData = null;</span><br><span class="line">    ConsumerFilterData consumerFilterData = null;</span><br><span class="line">    if (hasSubscriptionFlag) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            subscriptionData = FilterAPI.build(</span><br><span class="line">                requestHeader.getTopic(), requestHeader.getSubscription(), requestHeader.getExpressionType()</span><br><span class="line">            );</span><br><span class="line">            if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) &#123;</span><br><span class="line">                consumerFilterData = ConsumerFilterManager.build(</span><br><span class="line">                    requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getSubscription(),</span><br><span class="line">                    requestHeader.getExpressionType(), requestHeader.getSubVersion()</span><br><span class="line">                );</span><br><span class="line">                assert consumerFilterData != null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(&quot;Parse the consumer&apos;s subscription[&#123;&#125;] failed, group: &#123;&#125;&quot;, requestHeader.getSubscription(),</span><br><span class="line">                requestHeader.getConsumerGroup());</span><br><span class="line">            response.setCode(ResponseCode.SUBSCRIPTION_PARSE_FAILED);</span><br><span class="line">            response.setRemark(&quot;parse the consumer&apos;s subscription failed&quot;);</span><br><span class="line">            return response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //校验消费分组信息是否存在</span><br><span class="line">        ConsumerGroupInfo consumerGroupInfo =</span><br><span class="line">            this.brokerController.getConsumerManager().getConsumerGroupInfo(requestHeader.getConsumerGroup());</span><br><span class="line">        if (null == consumerGroupInfo) &#123;</span><br><span class="line">            log.warn(&quot;the consumer&apos;s group info not exist, group: &#123;&#125;&quot;, requestHeader.getConsumerGroup());</span><br><span class="line">            response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);</span><br><span class="line">            response.setRemark(&quot;the consumer&apos;s group info not exist&quot; + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));</span><br><span class="line">            return response;</span><br><span class="line">        &#125;</span><br><span class="line">        //校验消费分组信息消息模型是否匹配</span><br><span class="line">        if (!subscriptionGroupConfig.isConsumeBroadcastEnable()</span><br><span class="line">            &amp;&amp; consumerGroupInfo.getMessageModel() == MessageModel.BROADCASTING) &#123;</span><br><span class="line">            response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">            response.setRemark(&quot;the consumer group[&quot; + requestHeader.getConsumerGroup() + &quot;] can not consume by broadcast way&quot;);</span><br><span class="line">            return response;</span><br><span class="line">        &#125;</span><br><span class="line">        //校验订阅信息是否存在</span><br><span class="line">        subscriptionData = consumerGroupInfo.findSubscriptionData(requestHeader.getTopic());</span><br><span class="line">        if (null == subscriptionData) &#123;</span><br><span class="line">            log.warn(&quot;the consumer&apos;s subscription not exist, group: &#123;&#125;, topic:&#123;&#125;&quot;, requestHeader.getConsumerGroup(), requestHeader.getTopic());</span><br><span class="line">            response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);</span><br><span class="line">            response.setRemark(&quot;the consumer&apos;s subscription not exist&quot; + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));</span><br><span class="line">            return response;</span><br><span class="line">        &#125;</span><br><span class="line">        //校验订阅信息版本是否合法</span><br><span class="line">        if (subscriptionData.getSubVersion() &lt; requestHeader.getSubVersion()) &#123;</span><br><span class="line">            log.warn(&quot;The broker&apos;s subscription is not latest, group: &#123;&#125; &#123;&#125;&quot;, requestHeader.getConsumerGroup(),</span><br><span class="line">                subscriptionData.getSubString());</span><br><span class="line">            response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);</span><br><span class="line">            response.setRemark(&quot;the consumer&apos;s subscription not latest&quot;);</span><br><span class="line">            return response;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) &#123;</span><br><span class="line">            consumerFilterData = this.brokerController.getConsumerFilterManager().get(requestHeader.getTopic(),</span><br><span class="line">                requestHeader.getConsumerGroup());</span><br><span class="line">            if (consumerFilterData == null) &#123;</span><br><span class="line">                response.setCode(ResponseCode.FILTER_DATA_NOT_EXIST);</span><br><span class="line">                response.setRemark(&quot;The broker&apos;s consumer filter data is not exist!Your expression may be wrong!&quot;);</span><br><span class="line">                return response;</span><br><span class="line">            &#125;</span><br><span class="line">            if (consumerFilterData.getClientVersion() &lt; requestHeader.getSubVersion()) &#123;</span><br><span class="line">                log.warn(&quot;The broker&apos;s consumer filter data is not latest, group: &#123;&#125;, topic: &#123;&#125;, serverV: &#123;&#125;, clientV: &#123;&#125;&quot;,</span><br><span class="line">                    requestHeader.getConsumerGroup(), requestHeader.getTopic(), consumerFilterData.getClientVersion(), requestHeader.getSubVersion());</span><br><span class="line">                response.setCode(ResponseCode.FILTER_DATA_NOT_LATEST);</span><br><span class="line">                response.setRemark(&quot;the consumer&apos;s consumer filter data not latest&quot;);</span><br><span class="line">                return response;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!ExpressionType.isTagType(subscriptionData.getExpressionType())</span><br><span class="line">        &amp;&amp; !this.brokerController.getBrokerConfig().isEnablePropertyFilter()) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(&quot;The broker does not support consumer to filter message by &quot; + subscriptionData.getExpressionType());</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MessageFilter messageFilter;</span><br><span class="line">    if (this.brokerController.getBrokerConfig().isFilterSupportRetry()) &#123;</span><br><span class="line">        messageFilter = new ExpressionForRetryMessageFilter(subscriptionData, consumerFilterData,</span><br><span class="line">            this.brokerController.getConsumerFilterManager());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        messageFilter = new ExpressionMessageFilter(subscriptionData, consumerFilterData,</span><br><span class="line">            this.brokerController.getConsumerFilterManager());</span><br><span class="line">    &#125;</span><br><span class="line">    //获取消息</span><br><span class="line">    final GetMessageResult getMessageResult =</span><br><span class="line">        this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(), requestHeader.getTopic(),</span><br><span class="line">            requestHeader.getQueueId(), requestHeader.getQueueOffset(), requestHeader.getMaxMsgNums(), messageFilter);</span><br><span class="line">    if (getMessageResult != null) &#123;</span><br><span class="line">        response.setRemark(getMessageResult.getStatus().name());</span><br><span class="line">        responseHeader.setNextBeginOffset(getMessageResult.getNextBeginOffset());</span><br><span class="line">        responseHeader.setMinOffset(getMessageResult.getMinOffset());</span><br><span class="line">        responseHeader.setMaxOffset(getMessageResult.getMaxOffset());</span><br><span class="line">        //获取建议读取放的brokerId</span><br><span class="line">        if (getMessageResult.isSuggestPullingFromSlave()) &#123;</span><br><span class="line">            responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch (this.brokerController.getMessageStoreConfig().getBrokerRole()) &#123;</span><br><span class="line">            case ASYNC_MASTER:</span><br><span class="line">            case SYNC_MASTER:</span><br><span class="line">                break;</span><br><span class="line">            case SLAVE:</span><br><span class="line">                //从节点不允许读取，通知consumer读取主节点</span><br><span class="line">                if (!this.brokerController.getBrokerConfig().isSlaveReadEnable()) &#123;</span><br><span class="line">                    response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</span><br><span class="line">                    responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (this.brokerController.getBrokerConfig().isSlaveReadEnable()) &#123;</span><br><span class="line">            // consume too slow ,redirect to another machine</span><br><span class="line">            if (getMessageResult.isSuggestPullingFromSlave()) &#123;</span><br><span class="line">                responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());</span><br><span class="line">            &#125;</span><br><span class="line">            // consume ok</span><br><span class="line">            else &#123;</span><br><span class="line">                responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch (getMessageResult.getStatus()) &#123;</span><br><span class="line">            case FOUND:</span><br><span class="line">                response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">                break;</span><br><span class="line">            case MESSAGE_WAS_REMOVING:</span><br><span class="line">                response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</span><br><span class="line">                break;</span><br><span class="line">            case NO_MATCHED_LOGIC_QUEUE:</span><br><span class="line">            case NO_MESSAGE_IN_QUEUE:</span><br><span class="line">                if (0 != requestHeader.getQueueOffset()) &#123;</span><br><span class="line">                    response.setCode(ResponseCode.PULL_OFFSET_MOVED);</span><br><span class="line"></span><br><span class="line">                    // XXX: warn and notify me</span><br><span class="line">                    log.info(&quot;the broker store no queue data, fix the request offset &#123;&#125; to &#123;&#125;, Topic: &#123;&#125; QueueId: &#123;&#125; Consumer Group: &#123;&#125;&quot;,</span><br><span class="line">                        requestHeader.getQueueOffset(),</span><br><span class="line">                        getMessageResult.getNextBeginOffset(),</span><br><span class="line">                        requestHeader.getTopic(),</span><br><span class="line">                        requestHeader.getQueueId(),</span><br><span class="line">                        requestHeader.getConsumerGroup()</span><br><span class="line">                    );</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    response.setCode(ResponseCode.PULL_NOT_FOUND);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case NO_MATCHED_MESSAGE:</span><br><span class="line">                response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</span><br><span class="line">                break;</span><br><span class="line">            case OFFSET_FOUND_NULL:</span><br><span class="line">                response.setCode(ResponseCode.PULL_NOT_FOUND);</span><br><span class="line">                break;</span><br><span class="line">            case OFFSET_OVERFLOW_BADLY:</span><br><span class="line">                response.setCode(ResponseCode.PULL_OFFSET_MOVED);</span><br><span class="line">                // XXX: warn and notify me</span><br><span class="line">                log.info(&quot;the request offset: &#123;&#125; over flow badly, broker max offset: &#123;&#125;, consumer: &#123;&#125;&quot;,</span><br><span class="line">                    requestHeader.getQueueOffset(), getMessageResult.getMaxOffset(), channel.remoteAddress());</span><br><span class="line">                break;</span><br><span class="line">            case OFFSET_OVERFLOW_ONE:</span><br><span class="line">                response.setCode(ResponseCode.PULL_NOT_FOUND);</span><br><span class="line">                break;</span><br><span class="line">            case OFFSET_TOO_SMALL:</span><br><span class="line">                response.setCode(ResponseCode.PULL_OFFSET_MOVED);</span><br><span class="line">                log.info(&quot;the request offset too small. group=&#123;&#125;, topic=&#123;&#125;, requestOffset=&#123;&#125;, brokerMinOffset=&#123;&#125;, clientIp=&#123;&#125;&quot;,</span><br><span class="line">                    requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueOffset(),</span><br><span class="line">                    getMessageResult.getMinOffset(), channel.remoteAddress());</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                assert false;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        //hook：before</span><br><span class="line">        if (this.hasConsumeMessageHook()) &#123;</span><br><span class="line">            ConsumeMessageContext context = new ConsumeMessageContext();</span><br><span class="line">            context.setConsumerGroup(requestHeader.getConsumerGroup());</span><br><span class="line">            context.setTopic(requestHeader.getTopic());</span><br><span class="line">            context.setQueueId(requestHeader.getQueueId());</span><br><span class="line"></span><br><span class="line">            String owner = request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);</span><br><span class="line"></span><br><span class="line">            switch (response.getCode()) &#123;</span><br><span class="line">                case ResponseCode.SUCCESS:</span><br><span class="line">                    int commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();</span><br><span class="line">                    int incValue = getMessageResult.getMsgCount4Commercial() * commercialBaseCount;</span><br><span class="line"></span><br><span class="line">                    context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_SUCCESS);</span><br><span class="line">                    context.setCommercialRcvTimes(incValue);</span><br><span class="line">                    context.setCommercialRcvSize(getMessageResult.getBufferTotalSize());</span><br><span class="line">                    context.setCommercialOwner(owner);</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line">                case ResponseCode.PULL_NOT_FOUND:</span><br><span class="line">                    if (!brokerAllowSuspend) &#123;</span><br><span class="line"></span><br><span class="line">                        context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);</span><br><span class="line">                        context.setCommercialRcvTimes(1);</span><br><span class="line">                        context.setCommercialOwner(owner);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                case ResponseCode.PULL_RETRY_IMMEDIATELY:</span><br><span class="line">                case ResponseCode.PULL_OFFSET_MOVED:</span><br><span class="line">                    context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);</span><br><span class="line">                    context.setCommercialRcvTimes(1);</span><br><span class="line">                    context.setCommercialOwner(owner);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    assert false;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.executeConsumeMessageHookBefore(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch (response.getCode()) &#123;</span><br><span class="line">            case ResponseCode.SUCCESS:</span><br><span class="line"></span><br><span class="line">                this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(), requestHeader.getTopic(),</span><br><span class="line">                    getMessageResult.getMessageCount());</span><br><span class="line"></span><br><span class="line">                this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),</span><br><span class="line">                    getMessageResult.getBufferTotalSize());</span><br><span class="line"></span><br><span class="line">                this.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());</span><br><span class="line">                // 读取消息</span><br><span class="line">                if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) &#123;</span><br><span class="line">                    final long beginTimeMills = this.brokerController.getMessageStore().now();</span><br><span class="line">                    final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());</span><br><span class="line">                    this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),</span><br><span class="line">                        requestHeader.getTopic(), requestHeader.getQueueId(),</span><br><span class="line">                        (int) (this.brokerController.getMessageStore().now() - beginTimeMills));</span><br><span class="line">                    response.setBody(r);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        FileRegion fileRegion =</span><br><span class="line">                            new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()), getMessageResult);</span><br><span class="line">                        channel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                                getMessageResult.release();</span><br><span class="line">                                if (!future.isSuccess()) &#123;</span><br><span class="line">                                    log.error(&quot;transfer many message by pagecache failed, &#123;&#125;&quot;, channel.remoteAddress(), future.cause());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; catch (Throwable e) &#123;</span><br><span class="line">                        log.error(&quot;transfer many message by pagecache exception&quot;, e);</span><br><span class="line">                        getMessageResult.release();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    response = null;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case ResponseCode.PULL_NOT_FOUND:</span><br><span class="line">                //消息未查询到&amp;&amp;broker允许挂起请求&amp;&amp;请求允许挂起</span><br><span class="line">                if (brokerAllowSuspend &amp;&amp; hasSuspendFlag) &#123;</span><br><span class="line">                    long pollingTimeMills = suspendTimeoutMillisLong;</span><br><span class="line">                    //长轮询或短轮循</span><br><span class="line">                    if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) &#123;</span><br><span class="line">                        pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String topic = requestHeader.getTopic();</span><br><span class="line">                    long offset = requestHeader.getQueueOffset();</span><br><span class="line">                    int queueId = requestHeader.getQueueId();</span><br><span class="line">                    //创建PullRequest,然后提交给PullRequestHoldService线程调度，触发消息拉取</span><br><span class="line">                    PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,</span><br><span class="line">                        this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);</span><br><span class="line">                    this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);</span><br><span class="line">                    response = null;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            case ResponseCode.PULL_RETRY_IMMEDIATELY:</span><br><span class="line">                break;</span><br><span class="line">            case ResponseCode.PULL_OFFSET_MOVED:</span><br><span class="line">                if (this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE</span><br><span class="line">                    || this.brokerController.getMessageStoreConfig().isOffsetCheckInSlave()) &#123;</span><br><span class="line">                    MessageQueue mq = new MessageQueue();</span><br><span class="line">                    mq.setTopic(requestHeader.getTopic());</span><br><span class="line">                    mq.setQueueId(requestHeader.getQueueId());</span><br><span class="line">                    mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());</span><br><span class="line"></span><br><span class="line">                    OffsetMovedEvent event = new OffsetMovedEvent();</span><br><span class="line">                    event.setConsumerGroup(requestHeader.getConsumerGroup());</span><br><span class="line">                    event.setMessageQueue(mq);</span><br><span class="line">                    event.setOffsetRequest(requestHeader.getQueueOffset());</span><br><span class="line">                    event.setOffsetNew(getMessageResult.getNextBeginOffset());</span><br><span class="line">                    this.generateOffsetMovedEvent(event);</span><br><span class="line">                    log.warn(</span><br><span class="line">                        &quot;PULL_OFFSET_MOVED:correction offset. topic=&#123;&#125;, groupId=&#123;&#125;, requestOffset=&#123;&#125;, newOffset=&#123;&#125;, suggestBrokerId=&#123;&#125;&quot;,</span><br><span class="line">                        requestHeader.getTopic(), requestHeader.getConsumerGroup(), event.getOffsetRequest(), event.getOffsetNew(),</span><br><span class="line">                        responseHeader.getSuggestWhichBrokerId());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());</span><br><span class="line">                    response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</span><br><span class="line">                    log.warn(&quot;PULL_OFFSET_MOVED:none correction. topic=&#123;&#125;, groupId=&#123;&#125;, requestOffset=&#123;&#125;, suggestBrokerId=&#123;&#125;&quot;,</span><br><span class="line">                        requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getQueueOffset(),</span><br><span class="line">                        responseHeader.getSuggestWhichBrokerId());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                assert false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(&quot;store getMessage return null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //请求要求持久化进度&amp;&amp;broker非主，进行持久化进度。</span><br><span class="line">    boolean storeOffsetEnable = brokerAllowSuspend;</span><br><span class="line">    storeOffsetEnable = storeOffsetEnable &amp;&amp; hasCommitOffsetFlag;</span><br><span class="line">    storeOffsetEnable = storeOffsetEnable</span><br><span class="line">        &amp;&amp; this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE;</span><br><span class="line">    if (storeOffsetEnable) &#123;</span><br><span class="line">        this.brokerController.getConsumerOffsetManager().commitOffset(RemotingHelper.parseChannelRemoteAddr(channel),</span><br><span class="line">            requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId(), requestHeader.getCommitOffset());</span><br><span class="line">    &#125;</span><br><span class="line">    return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultMessageStore的getMessage方法"><a href="#2、DefaultMessageStore的getMessage方法" class="headerlink" title="2、DefaultMessageStore的getMessage方法"></a>2、DefaultMessageStore的getMessage方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">public GetMessageResult getMessage(final String group, final String topic, final int queueId, final long offset,</span><br><span class="line">    final int maxMsgNums,</span><br><span class="line">    final MessageFilter messageFilter) &#123;</span><br><span class="line">    //是否关闭</span><br><span class="line">    if (this.shutdown) &#123;</span><br><span class="line">        log.warn(&quot;message store has shutdown, so getMessage is forbidden&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //是否可读</span><br><span class="line">    if (!this.runningFlags.isReadable()) &#123;</span><br><span class="line">        log.warn(&quot;message store is not readable, so getMessage is forbidden &quot; + this.runningFlags.getFlagBits());</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long beginTime = this.getSystemClock().now();</span><br><span class="line"></span><br><span class="line">    GetMessageStatus status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;</span><br><span class="line">    //设置拉取偏移量，从PullRequest中获取，初始从消费进度中获取</span><br><span class="line">    long nextBeginOffset = offset;</span><br><span class="line">    long minOffset = 0;</span><br><span class="line">    long maxOffset = 0;</span><br><span class="line"></span><br><span class="line">    GetMessageResult getResult = new GetMessageResult();</span><br><span class="line">    //获取commitlog文件中的最大偏移量</span><br><span class="line">    final long maxOffsetPy = this.commitLog.getMaxOffset();</span><br><span class="line">    //根据topic,queueId获取消息队列</span><br><span class="line">    ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId);</span><br><span class="line">    if (consumeQueue != null) &#123;</span><br><span class="line">        //获取该消息队列中最小偏移量(minOffset)，最大偏移量(maxOffset)</span><br><span class="line">        minOffset = consumeQueue.getMinOffsetInQueue();</span><br><span class="line">        maxOffset = consumeQueue.getMaxOffsetInQueue();</span><br><span class="line">        //需要拉取消息的偏移量与队列最小，最大偏移量进行对比</span><br><span class="line">        if (maxOffset == 0) &#123;</span><br><span class="line">            //消费队列无消息</span><br><span class="line">            status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;</span><br><span class="line">            //下一个获取队列offset修正</span><br><span class="line">            nextBeginOffset = nextOffsetCorrection(offset, 0);</span><br><span class="line">        &#125; else if (offset &lt; minOffset) &#123;</span><br><span class="line">            //要拉取的偏移量小于队列最小的偏移量</span><br><span class="line">            status = GetMessageStatus.OFFSET_TOO_SMALL;</span><br><span class="line">            nextBeginOffset = nextOffsetCorrection(offset, minOffset);</span><br><span class="line">        &#125; else if (offset == maxOffset) &#123;</span><br><span class="line">            //查询offset超过消费队列一个位置</span><br><span class="line">            status = GetMessageStatus.OFFSET_OVERFLOW_ONE;</span><br><span class="line">            nextBeginOffset = nextOffsetCorrection(offset, offset);</span><br><span class="line">        &#125; else if (offset &gt; maxOffset) &#123;</span><br><span class="line">            //查询offset超过消费队列太多(大于一个位置)</span><br><span class="line">            status = GetMessageStatus.OFFSET_OVERFLOW_BADLY;</span><br><span class="line">            if (0 == minOffset) &#123;</span><br><span class="line">                nextBeginOffset = nextOffsetCorrection(offset, minOffset);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                nextBeginOffset = nextOffsetCorrection(offset, maxOffset);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //offset大于minOffset并小于maxOffset,正常情况</span><br><span class="line">            //从consuequeue中从当前offset到当前consueque中最大可读消息内存</span><br><span class="line">            SelectMappedBufferResult bufferConsumeQueue = consumeQueue.getIndexBuffer(offset);</span><br><span class="line">            if (bufferConsumeQueue != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    status = GetMessageStatus.NO_MATCHED_MESSAGE;</span><br><span class="line">                    //commitLog下一个文件(MappedFile)对应的开始offset。</span><br><span class="line">                    long nextPhyFileStartOffset = Long.MIN_VALUE;</span><br><span class="line">                    //消息物理位置拉取到的最大offset</span><br><span class="line">                    long maxPhyOffsetPulling = 0;</span><br><span class="line"></span><br><span class="line">                    int i = 0;</span><br><span class="line">                    //最大过滤消息字节数</span><br><span class="line">                    final int maxFilterMessageCount = Math.max(16000, maxMsgNums * ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class="line">                    final boolean diskFallRecorded = this.messageStoreConfig.isDiskFallRecorded();</span><br><span class="line">                    ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();</span><br><span class="line">                    //循环获取消息位置信息</span><br><span class="line">                    for (; i &lt; bufferConsumeQueue.getSize() &amp;&amp; i &lt; maxFilterMessageCount; i += ConsumeQueue.CQ_STORE_UNIT_SIZE) &#123;</span><br><span class="line">                        //消息物理位置offset</span><br><span class="line">                        long offsetPy = bufferConsumeQueue.getByteBuffer().getLong();</span><br><span class="line">                        //消息长度</span><br><span class="line">                        int sizePy = bufferConsumeQueue.getByteBuffer().getInt();</span><br><span class="line">                        //消息tag hashcode</span><br><span class="line">                        long tagsCode = bufferConsumeQueue.getByteBuffer().getLong();</span><br><span class="line">                        //当前拉取的物理偏移量</span><br><span class="line">                        maxPhyOffsetPulling = offsetPy;</span><br><span class="line">                        //拉取到的消息偏移量小于下一个要拉取的物理偏移量，直接跳过该条消息</span><br><span class="line">                        if (nextPhyFileStartOffset != Long.MIN_VALUE) &#123;</span><br><span class="line">                            if (offsetPy &lt; nextPhyFileStartOffset)</span><br><span class="line">                                continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                        //检查该offsetPy，拉取的偏移量是否在磁盘上</span><br><span class="line">                        boolean isInDisk = checkInDiskByCommitOffset(offsetPy, maxOffsetPy);</span><br><span class="line">                        //判断获取消息是否已经拉满</span><br><span class="line">                        if (this.isTheBatchFull(sizePy, maxMsgNums, getResult.getBufferTotalSize(), getResult.getMessageCount(),</span><br><span class="line">                            isInDisk)) &#123;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        boolean extRet = false, isTagsCodeLegal = true;</span><br><span class="line">                        if (consumeQueue.isExtAddr(tagsCode)) &#123;</span><br><span class="line">                            extRet = consumeQueue.getExt(tagsCode, cqExtUnit);</span><br><span class="line">                            if (extRet) &#123;</span><br><span class="line">                                tagsCode = cqExtUnit.getTagsCode();</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                // can&apos;t find ext content.Client will filter messages by tag also.</span><br><span class="line">                                log.error(&quot;[BUG] can&apos;t find consume queue extend file content!addr=&#123;&#125;, offsetPy=&#123;&#125;, sizePy=&#123;&#125;, topic=&#123;&#125;, group=&#123;&#125;&quot;,</span><br><span class="line">                                    tagsCode, offsetPy, sizePy, topic, group);</span><br><span class="line">                                isTagsCodeLegal = false;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        //执行消息过滤，如果符合过滤条件。则直接进行下一条的拉取</span><br><span class="line">                        //如果不符合过滤条件，则进入继续执行，并如果最终符合条件，则将该消息添加到拉取结果中</span><br><span class="line">                        if (messageFilter != null</span><br><span class="line">                            &amp;&amp; !messageFilter.isMatchedByConsumeQueue(isTagsCodeLegal ? tagsCode : null, extRet ? cqExtUnit : null)) &#123;</span><br><span class="line">                            //从commitLog无法读取到消息，说明该消息对应的文件（MappedFile）已经删除，计算下一个MappedFile的起始位置</span><br><span class="line">                            if (getResult.getBufferTotalSize() == 0) &#123;</span><br><span class="line">                                status = GetMessageStatus.NO_MATCHED_MESSAGE;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                        //从commitlog文件中读取消息，根据偏移量与消息大小</span><br><span class="line">                        SelectMappedBufferResult selectResult = this.commitLog.getMessage(offsetPy, sizePy);</span><br><span class="line">                        //如果该偏移量没有找到正确的消息，则说明已经到文件末尾了</span><br><span class="line">                        if (null == selectResult) &#123;</span><br><span class="line">                            if (getResult.getBufferTotalSize() == 0) &#123;</span><br><span class="line">                                status = GetMessageStatus.MESSAGE_WAS_REMOVING;</span><br><span class="line">                            &#125;</span><br><span class="line">                            //下一次切换到下一个commitlog文件读取</span><br><span class="line">                            nextPhyFileStartOffset = this.commitLog.rollNextFile(offsetPy);</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                        //从commitlog（全量消息）再次过滤</span><br><span class="line">                        if (messageFilter != null</span><br><span class="line">                            &amp;&amp; !messageFilter.isMatchedByCommitLog(selectResult.getByteBuffer().slice(), null)) &#123;</span><br><span class="line">                            if (getResult.getBufferTotalSize() == 0) &#123;</span><br><span class="line">                                status = GetMessageStatus.NO_MATCHED_MESSAGE;</span><br><span class="line">                            &#125;</span><br><span class="line">                            // release...</span><br><span class="line">                            selectResult.release();</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        this.storeStatsService.getGetMessageTransferedMsgCount().incrementAndGet();</span><br><span class="line">                        //将消息加入到拉取结果中</span><br><span class="line">                        getResult.addMessage(selectResult);</span><br><span class="line">                        status = GetMessageStatus.FOUND;</span><br><span class="line">                        nextPhyFileStartOffset = Long.MIN_VALUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //是否记录磁盘活动图，默认为false</span><br><span class="line">                    if (diskFallRecorded) &#123;</span><br><span class="line">                        long fallBehind = maxOffsetPy - maxPhyOffsetPulling;</span><br><span class="line">                        brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //计算下次拉取消息的消息队列编号</span><br><span class="line">                    nextBeginOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class="line">                    //当前commitlog中的偏移量 - 当前最大拉取消息偏移量,则允许消息在内存中存在大小时，建议下一次拉取任务，从从节点拉取</span><br><span class="line">                    long diff = maxOffsetPy - maxPhyOffsetPulling;</span><br><span class="line">                    long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE</span><br><span class="line">                        * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));</span><br><span class="line">                    getResult.setSuggestPullingFromSlave(diff &gt; memory);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line"></span><br><span class="line">                    bufferConsumeQueue.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                status = GetMessageStatus.OFFSET_FOUND_NULL;</span><br><span class="line">                nextBeginOffset = nextOffsetCorrection(offset, consumeQueue.rollNextFile(offset));</span><br><span class="line">                log.warn(&quot;consumer request topic: &quot; + topic + &quot;offset: &quot; + offset + &quot; minOffset: &quot; + minOffset + &quot; maxOffset: &quot;</span><br><span class="line">                    + maxOffset + &quot;, but access logic queue failed.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;</span><br><span class="line">        nextBeginOffset = nextOffsetCorrection(offset, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    //统计</span><br><span class="line">    if (GetMessageStatus.FOUND == status) &#123;</span><br><span class="line">        this.storeStatsService.getGetMessageTimesTotalFound().incrementAndGet();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.storeStatsService.getGetMessageTimesTotalMiss().incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">    long eclipseTime = this.getSystemClock().now() - beginTime;</span><br><span class="line">    this.storeStatsService.setGetMessageEntireTimeMax(eclipseTime);</span><br><span class="line">    //设置下一次拉取偏移量，然后返回拉取结果</span><br><span class="line">    getResult.setStatus(status);</span><br><span class="line">    getResult.setNextBeginOffset(nextBeginOffset);</span><br><span class="line">    getResult.setMaxOffset(maxOffset);</span><br><span class="line">    getResult.setMinOffset(minOffset);</span><br><span class="line">    return getResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、消息重试"><a href="#四、消息重试" class="headerlink" title="四、消息重试"></a>四、消息重试</h3><h4 id="1、SendMessageProcessor的consumerSendMsgBack方法"><a href="#1、SendMessageProcessor的consumerSendMsgBack方法" class="headerlink" title="1、SendMessageProcessor的consumerSendMsgBack方法"></a>1、SendMessageProcessor的consumerSendMsgBack方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">private RemotingCommand consumerSendMsgBack(final ChannelHandlerContext ctx, final RemotingCommand request)</span><br><span class="line">    throws RemotingCommandException &#123;</span><br><span class="line"></span><br><span class="line">    //初始化响应</span><br><span class="line">    final RemotingCommand response = RemotingCommand.createResponseCommand(null);</span><br><span class="line">    final ConsumerSendMsgBackRequestHeader requestHeader =</span><br><span class="line">        (ConsumerSendMsgBackRequestHeader) request.decodeCommandCustomHeader(ConsumerSendMsgBackRequestHeader.class);</span><br><span class="line">    /hook</span><br><span class="line">    if (this.hasConsumeMessageHook() &amp;&amp; !UtilAll.isBlank(requestHeader.getOriginMsgId())) &#123;</span><br><span class="line"></span><br><span class="line">        ConsumeMessageContext context = new ConsumeMessageContext();</span><br><span class="line">        context.setConsumerGroup(requestHeader.getGroup());</span><br><span class="line">        context.setTopic(requestHeader.getOriginTopic());</span><br><span class="line">        context.setCommercialRcvStats(BrokerStatsManager.StatsType.SEND_BACK);</span><br><span class="line">        context.setCommercialRcvTimes(1);</span><br><span class="line">        context.setCommercialOwner(request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER));</span><br><span class="line"></span><br><span class="line">        this.executeConsumeMessageHookAfter(context);</span><br><span class="line">    &#125;</span><br><span class="line">    //判断消费分组是否存在</span><br><span class="line">    SubscriptionGroupConfig subscriptionGroupConfig =</span><br><span class="line">        this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getGroup());</span><br><span class="line">    if (null == subscriptionGroupConfig) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);</span><br><span class="line">        response.setRemark(&quot;subscription group not exist, &quot; + requestHeader.getGroup() + &quot; &quot;</span><br><span class="line">            + FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //检查broker是否有写入权限</span><br><span class="line">    if (!PermName.isWriteable(this.brokerController.getBrokerConfig().getBrokerPermission())) &#123;</span><br><span class="line">        response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">        response.setRemark(&quot;the broker[&quot; + this.brokerController.getBrokerConfig().getBrokerIP1() + &quot;] sending message is forbidden&quot;);</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //检查重试队列数是否大于0</span><br><span class="line">    if (subscriptionGroupConfig.getRetryQueueNums() &lt;= 0) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">        response.setRemark(null);</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //计算retry Topic</span><br><span class="line">    String newTopic = MixAll.getRetryTopic(requestHeader.getGroup());</span><br><span class="line">    //计算队列编号</span><br><span class="line">    int queueIdInt = Math.abs(this.random.nextInt() % 99999999) % subscriptionGroupConfig.getRetryQueueNums();</span><br><span class="line">    //计算sysFlag</span><br><span class="line">    int topicSysFlag = 0;</span><br><span class="line">    if (requestHeader.isUnitMode()) &#123;</span><br><span class="line">        topicSysFlag = TopicSysFlag.buildSysFlag(false, true);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取topicConfig。如果获取不到，则进行创建</span><br><span class="line">    TopicConfig topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(</span><br><span class="line">        newTopic,</span><br><span class="line">        subscriptionGroupConfig.getRetryQueueNums(),</span><br><span class="line">        PermName.PERM_WRITE | PermName.PERM_READ, topicSysFlag);</span><br><span class="line">    if (null == topicConfig) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(&quot;topic[&quot; + newTopic + &quot;] not exist&quot;);</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!PermName.isWriteable(topicConfig.getPerm())) &#123;</span><br><span class="line">        response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">        response.setRemark(String.format(&quot;the topic[%s] sending message is forbidden&quot;, newTopic));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //查询消息。若不存在，返回异常错误。</span><br><span class="line">    MessageExt msgExt = this.brokerController.getMessageStore().lookMessageByOffset(requestHeader.getOffset());</span><br><span class="line">    if (null == msgExt) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(&quot;look message by offset failed, &quot; + requestHeader.getOffset());</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置retryTopic到拓展属性</span><br><span class="line">    final String retryTopic = msgExt.getProperty(MessageConst.PROPERTY_RETRY_TOPIC);</span><br><span class="line">    if (null == retryTopic) &#123;</span><br><span class="line">        MessageAccessor.putProperty(msgExt, MessageConst.PROPERTY_RETRY_TOPIC, msgExt.getTopic());</span><br><span class="line">    &#125;</span><br><span class="line">    //设置消息不等待存储完成</span><br><span class="line">    msgExt.setWaitStoreMsgOK(false);</span><br><span class="line">    //处理 delayLevel</span><br><span class="line">    int delayLevel = requestHeader.getDelayLevel();</span><br><span class="line">    int maxReconsumeTimes = subscriptionGroupConfig.getRetryMaxTimes();</span><br><span class="line">    if (request.getVersion() &gt;= MQVersion.Version.V3_4_9.ordinal()) &#123;</span><br><span class="line">        maxReconsumeTimes = requestHeader.getMaxReconsumeTimes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (msgExt.getReconsumeTimes() &gt;= maxReconsumeTimes</span><br><span class="line">        || delayLevel &lt; 0) &#123;</span><br><span class="line">        //如果超过最大消费次数，则topic修改成&quot;%DLQ%&quot; + 分组名，即加入 死信队列(Dead Letter Queue)</span><br><span class="line">        newTopic = MixAll.getDLQTopic(requestHeader.getGroup());</span><br><span class="line">        queueIdInt = Math.abs(this.random.nextInt() % 99999999) % DLQ_NUMS_PER_GROUP;</span><br><span class="line"></span><br><span class="line">        topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic,</span><br><span class="line">            DLQ_NUMS_PER_GROUP,</span><br><span class="line">            PermName.PERM_WRITE, 0</span><br><span class="line">        );</span><br><span class="line">        if (null == topicConfig) &#123;</span><br><span class="line">            response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">            response.setRemark(&quot;topic[&quot; + newTopic + &quot;] not exist&quot;);</span><br><span class="line">            return response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (0 == delayLevel) &#123;</span><br><span class="line">            delayLevel = 3 + msgExt.getReconsumeTimes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msgExt.setDelayTimeLevel(delayLevel);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建MessageExtBrokerInner</span><br><span class="line">    MessageExtBrokerInner msgInner = new MessageExtBrokerInner();</span><br><span class="line">    msgInner.setTopic(newTopic);</span><br><span class="line">    msgInner.setBody(msgExt.getBody());</span><br><span class="line">    msgInner.setFlag(msgExt.getFlag());</span><br><span class="line">    MessageAccessor.setProperties(msgInner, msgExt.getProperties());</span><br><span class="line">    msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));</span><br><span class="line">    msgInner.setTagsCode(MessageExtBrokerInner.tagsString2tagsCode(null, msgExt.getTags()));</span><br><span class="line"></span><br><span class="line">    msgInner.setQueueId(queueIdInt);</span><br><span class="line">    msgInner.setSysFlag(msgExt.getSysFlag());</span><br><span class="line">    msgInner.setBornTimestamp(msgExt.getBornTimestamp());</span><br><span class="line">    msgInner.setBornHost(msgExt.getBornHost());</span><br><span class="line">    msgInner.setStoreHost(this.getStoreHost());</span><br><span class="line">    msgInner.setReconsumeTimes(msgExt.getReconsumeTimes() + 1);</span><br><span class="line">    //设置原始消息编号到拓展字段</span><br><span class="line">    String originMsgId = MessageAccessor.getOriginMessageId(msgExt);</span><br><span class="line">    MessageAccessor.setOriginMessageId(msgInner, UtilAll.isBlank(originMsgId) ? msgExt.getMsgId() : originMsgId);</span><br><span class="line">    //添加消息</span><br><span class="line">    PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessage(msgInner);</span><br><span class="line">    if (putMessageResult != null) &#123;</span><br><span class="line">        switch (putMessageResult.getPutMessageStatus()) &#123;</span><br><span class="line">            case PUT_OK:</span><br><span class="line">                String backTopic = msgExt.getTopic();</span><br><span class="line">                String correctTopic = msgExt.getProperty(MessageConst.PROPERTY_RETRY_TOPIC);</span><br><span class="line">                if (correctTopic != null) &#123;</span><br><span class="line">                    backTopic = correctTopic;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                this.brokerController.getBrokerStatsManager().incSendBackNums(requestHeader.getGroup(), backTopic);</span><br><span class="line"></span><br><span class="line">                response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">                response.setRemark(null);</span><br><span class="line"></span><br><span class="line">                return response;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(putMessageResult.getPutMessageStatus().name());</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">    response.setRemark(&quot;putMessageResult is null&quot;);</span><br><span class="line">    return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、主从同步"><a href="#五、主从同步" class="headerlink" title="五、主从同步"></a>五、主从同步</h3><h4 id="1、HAService的start方法"><a href="#1、HAService的start方法" class="headerlink" title="1、HAService的start方法"></a>1、HAService的start方法</h4><p>Master部份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void start() throws Exception &#123;</span><br><span class="line">    //接收Slave的连接并构建HAConnection实例</span><br><span class="line">    this.acceptSocketService.beginAccept();</span><br><span class="line">    this.acceptSocketService.start();</span><br><span class="line">    //Master中，GroupTransferService会作为一个中间的服务，设置一个标志位，用来判断Slave是否已经同步完成 </span><br><span class="line">    this.groupTransferService.start();</span><br><span class="line">    //Slave客户端</span><br><span class="line">    this.haClient.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AcceptSocketService的start方法"><a href="#2、AcceptSocketService的start方法" class="headerlink" title="2、AcceptSocketService的start方法"></a>2、AcceptSocketService的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void beginAccept() throws Exception &#123;</span><br><span class="line">    //nio服务端</span><br><span class="line">    this.serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">    this.selector = RemotingUtil.openSelector();</span><br><span class="line">    this.serverSocketChannel.socket().setReuseAddress(true);</span><br><span class="line">    this.serverSocketChannel.socket().bind(this.socketAddressListen);</span><br><span class="line">    this.serverSocketChannel.configureBlocking(false);</span><br><span class="line">    //将Channel注册到Selector，等待OP_ACCEPT就绪</span><br><span class="line">    this.serverSocketChannel.register(this.selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AcceptSocketService的run方法"><a href="#3、AcceptSocketService的run方法" class="headerlink" title="3、AcceptSocketService的run方法"></a>3、AcceptSocketService的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    log.info(this.getServiceName() + &quot; service started&quot;);</span><br><span class="line"></span><br><span class="line">    while (!this.isStopped()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.selector.select(1000);</span><br><span class="line">            //获取已就绪通道的集合</span><br><span class="line">            Set&lt;SelectionKey&gt; selected = this.selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            if (selected != null) &#123;</span><br><span class="line">                for (SelectionKey k : selected) &#123;</span><br><span class="line">                    if ((k.readyOps() &amp; SelectionKey.OP_ACCEPT) != 0) &#123;</span><br><span class="line">                        //获取通道</span><br><span class="line">                        SocketChannel sc = ((ServerSocketChannel) k.channel()).accept();</span><br><span class="line"></span><br><span class="line">                        if (sc != null) &#123;</span><br><span class="line">                            HAService.log.info(&quot;HAService receive new connection, &quot;</span><br><span class="line">                                + sc.socket().getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">                            try &#123;</span><br><span class="line">                                //创建HAConnection，并加入HAService</span><br><span class="line">                                HAConnection conn = new HAConnection(HAService.this, sc);</span><br><span class="line">                                //启动readSocketService、writeSocketService</span><br><span class="line">                                conn.start();</span><br><span class="line">                                //连接添加到connectionList中</span><br><span class="line">                                HAService.this.addConnection(conn);</span><br><span class="line">                            &#125; catch (Exception e) &#123;</span><br><span class="line">                                log.error(&quot;new HAConnection exception&quot;, e);</span><br><span class="line">                                sc.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        log.warn(&quot;Unexpected ops in select &quot; + k.readyOps());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                selected.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(this.getServiceName() + &quot; service has exception.&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(this.getServiceName() + &quot; service end&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、ReadSocketService的run方法"><a href="#4、ReadSocketService的run方法" class="headerlink" title="4、ReadSocketService的run方法"></a>4、ReadSocketService的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    HAConnection.log.info(this.getServiceName() + &quot; service started&quot;);</span><br><span class="line"></span><br><span class="line">    while (!this.isStopped()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.selector.select(1000);</span><br><span class="line">            //处理读取到的数据</span><br><span class="line">            boolean ok = this.processReadEvent();</span><br><span class="line">            if (!ok) &#123;</span><br><span class="line">                HAConnection.log.error(&quot;processReadEvent error&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //检测心跳间隔时间</span><br><span class="line">            long interval = HAConnection.this.haService.getDefaultMessageStore().getSystemClock().now() - this.lastReadTimestamp;</span><br><span class="line">            //超时</span><br><span class="line">            if (interval &gt; HAConnection.this.haService.getDefaultMessageStore().getMessageStoreConfig().getHaHousekeepingInterval()) &#123;</span><br><span class="line">                log.warn(&quot;ha housekeeping, found this connection[&quot; + HAConnection.this.clientAddr + &quot;] expired, &quot; + interval);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            HAConnection.log.error(this.getServiceName() + &quot; service has exception.&quot;, e);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //关闭readSocketService</span><br><span class="line">    this.makeStop();</span><br><span class="line">    //关闭writeSocketService</span><br><span class="line">    writeSocketService.makeStop();</span><br><span class="line">    //移除本HAConnection</span><br><span class="line">    haService.removeConnection(HAConnection.this);</span><br><span class="line">    //HAConnection数量减一</span><br><span class="line">    HAConnection.this.haService.getConnectionCount().decrementAndGet();</span><br><span class="line">    //注销socketChannel</span><br><span class="line">    SelectionKey sk = this.socketChannel.keyFor(this.selector);</span><br><span class="line">    if (sk != null) &#123;</span><br><span class="line">        sk.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    //关闭通道</span><br><span class="line">    try &#123;</span><br><span class="line">        this.selector.close();</span><br><span class="line">        this.socketChannel.close();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        HAConnection.log.error(&quot;&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HAConnection.log.info(this.getServiceName() + &quot; service end&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ReadSocketService的processReadEvent方法"><a href="#5、ReadSocketService的processReadEvent方法" class="headerlink" title="5、ReadSocketService的processReadEvent方法"></a>5、ReadSocketService的processReadEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private boolean processReadEvent() &#123;</span><br><span class="line">    int readSizeZeroTimes = 0;</span><br><span class="line">    //缓冲区已处理完</span><br><span class="line">    if (!this.byteBufferRead.hasRemaining()) &#123;</span><br><span class="line">        this.byteBufferRead.flip();</span><br><span class="line">        this.processPostion = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    //有待处理数据</span><br><span class="line">    while (this.byteBufferRead.hasRemaining()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int readSize = this.socketChannel.read(this.byteBufferRead);</span><br><span class="line">            if (readSize &gt; 0) &#123;</span><br><span class="line">                readSizeZeroTimes = 0;</span><br><span class="line">                this.lastReadTimestamp = HAConnection.this.haService.getDefaultMessageStore().getSystemClock().now();</span><br><span class="line">                //接收Slave上传的offset</span><br><span class="line">                if ((this.byteBufferRead.position() - this.processPostion) &gt;= 8) &#123;</span><br><span class="line">                    int pos = this.byteBufferRead.position() - (this.byteBufferRead.position() % 8);</span><br><span class="line">                    long readOffset = this.byteBufferRead.getLong(pos - 8);</span><br><span class="line">                    this.processPostion = pos;</span><br><span class="line">                    //更新slaveAckOffset，每次Slave上传的Offset </span><br><span class="line">                    HAConnection.this.slaveAckOffset = readOffset;</span><br><span class="line">                    if (HAConnection.this.slaveRequestOffset &lt; 0) &#123;</span><br><span class="line">                        //更新slaveRequestOffset,第一次Slave上传的offset</span><br><span class="line">                        HAConnection.this.slaveRequestOffset = readOffset;</span><br><span class="line">                        log.info(&quot;slave[&quot; + HAConnection.this.clientAddr + &quot;] request offset &quot; + readOffset);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //通知GroupTransferService线程</span><br><span class="line">                    HAConnection.this.haService.notifyTransferSome(HAConnection.this.slaveAckOffset);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (readSize == 0) &#123;</span><br><span class="line">                if (++readSizeZeroTimes &gt;= 3) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.error(&quot;read socket[&quot; + HAConnection.this.clientAddr + &quot;] &lt; 0&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;processReadEvent exception&quot;, e);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、WriteSocketService的run方法"><a href="#6、WriteSocketService的run方法" class="headerlink" title="6、WriteSocketService的run方法"></a>6、WriteSocketService的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    HAConnection.log.info(this.getServiceName() + &quot; service started&quot;);</span><br><span class="line"></span><br><span class="line">    while (!this.isStopped()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.selector.select(1000);</span><br><span class="line">            //等待slave同步Offset</span><br><span class="line">            if (-1 == HAConnection.this.slaveRequestOffset) &#123;</span><br><span class="line">                Thread.sleep(10);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            //计算下次同步的偏移位置开始量</span><br><span class="line">            if (-1 == this.nextTransferFromWhere) &#123;</span><br><span class="line">                if (0 == HAConnection.this.slaveRequestOffset) &#123;</span><br><span class="line">                    long masterOffset = HAConnection.this.haService.getDefaultMessageStore().getCommitLog().getMaxOffset();</span><br><span class="line">                    masterOffset =</span><br><span class="line">                        masterOffset</span><br><span class="line">                            - (masterOffset % HAConnection.this.haService.getDefaultMessageStore().getMessageStoreConfig()</span><br><span class="line">                            .getMapedFileSizeCommitLog());</span><br><span class="line"></span><br><span class="line">                    if (masterOffset &lt; 0) &#123;</span><br><span class="line">                        masterOffset = 0;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    this.nextTransferFromWhere = masterOffset;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.nextTransferFromWhere = HAConnection.this.slaveRequestOffset;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                log.info(&quot;master transfer data from &quot; + this.nextTransferFromWhere + &quot; to slave[&quot; + HAConnection.this.clientAddr</span><br><span class="line">                    + &quot;], and slave request &quot; + HAConnection.this.slaveRequestOffset);</span><br><span class="line">            &#125;</span><br><span class="line">            //是否传输完成</span><br><span class="line">            if (this.lastWriteOver) &#123;</span><br><span class="line">                //同步间隔时间</span><br><span class="line">                long interval =</span><br><span class="line">                    HAConnection.this.haService.getDefaultMessageStore().getSystemClock().now() - this.lastWriteTimestamp;</span><br><span class="line">                //间隔大于五秒</span><br><span class="line">                if (interval &gt; HAConnection.this.haService.getDefaultMessageStore().getMessageStoreConfig()</span><br><span class="line">                    .getHaSendHeartbeatInterval()) &#123;</span><br><span class="line"></span><br><span class="line">                    // Build Header</span><br><span class="line">                    //构造header</span><br><span class="line">                    this.byteBufferHeader.position(0);</span><br><span class="line">                    this.byteBufferHeader.limit(headerSize);</span><br><span class="line">                    this.byteBufferHeader.putLong(this.nextTransferFromWhere);</span><br><span class="line">                    this.byteBufferHeader.putInt(0);</span><br><span class="line">                    this.byteBufferHeader.flip();</span><br><span class="line">                    //传输数据</span><br><span class="line">                    this.lastWriteOver = this.transferData();</span><br><span class="line">                    if (!this.lastWriteOver)</span><br><span class="line">                        continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.lastWriteOver = this.transferData();</span><br><span class="line">                if (!this.lastWriteOver)</span><br><span class="line">                    continue;</span><br><span class="line">            &#125;</span><br><span class="line">            //传入一个offset，从CommitLog去拉取消息，和消费者拉取消息类似</span><br><span class="line">            SelectMappedBufferResult selectResult =</span><br><span class="line">                HAConnection.this.haService.getDefaultMessageStore().getCommitLogData(this.nextTransferFromWhere);</span><br><span class="line">            if (selectResult != null) &#123;</span><br><span class="line">                int size = selectResult.getSize();</span><br><span class="line">                //每次只同步32K的数据</span><br><span class="line">                if (size &gt; HAConnection.this.haService.getDefaultMessageStore().getMessageStoreConfig().getHaTransferBatchSize()) &#123;</span><br><span class="line">                    size = HAConnection.this.haService.getDefaultMessageStore().getMessageStoreConfig().getHaTransferBatchSize();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                long thisOffset = this.nextTransferFromWhere;</span><br><span class="line">                this.nextTransferFromWhere += size;</span><br><span class="line">                //限制byteBuf最多只能操作32K的数据</span><br><span class="line">                selectResult.getByteBuffer().limit(size);</span><br><span class="line">                this.selectMappedBufferResult = selectResult;</span><br><span class="line"></span><br><span class="line">                // Build Header</span><br><span class="line">                //构造header</span><br><span class="line">                this.byteBufferHeader.position(0);</span><br><span class="line">                this.byteBufferHeader.limit(headerSize);</span><br><span class="line">                this.byteBufferHeader.putLong(thisOffset);</span><br><span class="line">                this.byteBufferHeader.putInt(size);</span><br><span class="line">                this.byteBufferHeader.flip();</span><br><span class="line">                //传输数据</span><br><span class="line">                this.lastWriteOver = this.transferData();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                HAConnection.this.haService.getWaitNotifyObject().allWaitForRunning(100);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            HAConnection.log.error(this.getServiceName() + &quot; service has exception.&quot;, e);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HAConnection.this.haService.getWaitNotifyObject().removeFromWaitingThreadTable();</span><br><span class="line"></span><br><span class="line">    if (this.selectMappedBufferResult != null) &#123;</span><br><span class="line">        this.selectMappedBufferResult.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.makeStop();</span><br><span class="line"></span><br><span class="line">    readSocketService.makeStop();</span><br><span class="line"></span><br><span class="line">    haService.removeConnection(HAConnection.this);</span><br><span class="line"></span><br><span class="line">    SelectionKey sk = this.socketChannel.keyFor(this.selector);</span><br><span class="line">    if (sk != null) &#123;</span><br><span class="line">        sk.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        this.selector.close();</span><br><span class="line">        this.socketChannel.close();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        HAConnection.log.error(&quot;&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HAConnection.log.info(this.getServiceName() + &quot; service end&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、GroupTransferService的run方法"><a href="#7、GroupTransferService的run方法" class="headerlink" title="7、GroupTransferService的run方法"></a>7、GroupTransferService的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">     log.info(this.getServiceName() + &quot; service started&quot;);</span><br><span class="line"></span><br><span class="line">     while (!this.isStopped()) &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">             //运行间隔</span><br><span class="line">             this.waitForRunning(10);</span><br><span class="line">             //标记同步完成</span><br><span class="line">             this.doWaitTransfer();</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">             log.warn(this.getServiceName() + &quot; service has exception. &quot;, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     log.info(this.getServiceName() + &quot; service end&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="8、GroupTransferService的doWaitTransfer方法"><a href="#8、GroupTransferService的doWaitTransfer方法" class="headerlink" title="8、GroupTransferService的doWaitTransfer方法"></a>8、GroupTransferService的doWaitTransfer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void doWaitTransfer() &#123;</span><br><span class="line">    synchronized (this.requestsRead) &#123;</span><br><span class="line">        if (!this.requestsRead.isEmpty()) &#123;</span><br><span class="line">            //等待同步完成的请求</span><br><span class="line">            for (CommitLog.GroupCommitRequest req : this.requestsRead) &#123;</span><br><span class="line">                boolean transferOK = HAService.this.push2SlaveMaxOffset.get() &gt;= req.getNextOffset();</span><br><span class="line">                //重试5次，每次条件不符合都等待Slave上传同步结果</span><br><span class="line">                for (int i = 0; !transferOK &amp;&amp; i &lt; 5; i++) &#123;</span><br><span class="line">                    this.notifyTransferObject.waitForRunning(1000);</span><br><span class="line">                    transferOK = HAService.this.push2SlaveMaxOffset.get() &gt;= req.getNextOffset();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (!transferOK) &#123;</span><br><span class="line">                    log.warn(&quot;transfer messsage to slave timeout, &quot; + req.getNextOffset());</span><br><span class="line">                &#125;</span><br><span class="line">                //标记同步完成</span><br><span class="line">                req.wakeupCustomer(transferOK);</span><br><span class="line">            &#125;</span><br><span class="line">            this.requestsRead.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、HAClient的run方法"><a href="#9、HAClient的run方法" class="headerlink" title="9、HAClient的run方法"></a>9、HAClient的run方法</h4><p>Slave部份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    log.info(this.getServiceName() + &quot; service started&quot;);</span><br><span class="line"></span><br><span class="line">    while (!this.isStopped()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //如果masterAddress不为空，会进行连接并返回SocketChannel，Master没有masterAddress所以这里直接跳过</span><br><span class="line">            if (this.connectMaster()) &#123;</span><br><span class="line">                //先汇报最大物理Offset，定时心跳方式汇报，默认5s进行同步</span><br><span class="line">                if (this.isTimeToReportOffset()) &#123;</span><br><span class="line">                    //将同步进度发送回Master</span><br><span class="line">                    boolean result = this.reportSlaveMaxOffset(this.currentReportedOffset);</span><br><span class="line">                    if (!result) &#123;</span><br><span class="line">                        this.closeMaster();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //等待应答</span><br><span class="line">                this.selector.select(1000);</span><br><span class="line">                //接收数据</span><br><span class="line">                boolean ok = this.processReadEvent();</span><br><span class="line">                if (!ok) &#123;</span><br><span class="line">                    this.closeMaster();</span><br><span class="line">                &#125;</span><br><span class="line">                //只要本地有更新，就汇报最大物理Offset</span><br><span class="line">                if (!reportSlaveMaxOffsetPlus()) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //检查Master的反向心跳</span><br><span class="line">                long interval =</span><br><span class="line">                    HAService.this.getDefaultMessageStore().getSystemClock().now()</span><br><span class="line">                        - this.lastWriteTimestamp;</span><br><span class="line">                if (interval &gt; HAService.this.getDefaultMessageStore().getMessageStoreConfig()</span><br><span class="line">                    .getHaHousekeepingInterval()) &#123;</span><br><span class="line">                    log.warn(&quot;HAClient, housekeeping, found this connection[&quot; + this.masterAddress</span><br><span class="line">                        + &quot;] expired, &quot; + interval);</span><br><span class="line">                    this.closeMaster();</span><br><span class="line">                    log.warn(&quot;HAClient, master not response some time, so close connection&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.waitForRunning(1000 * 5);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(this.getServiceName() + &quot; service has exception. &quot;, e);</span><br><span class="line">            this.waitForRunning(1000 * 5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(this.getServiceName() + &quot; service end&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、HAClient的processReadEvent方法"><a href="#10、HAClient的processReadEvent方法" class="headerlink" title="10、HAClient的processReadEvent方法"></a>10、HAClient的processReadEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private boolean processReadEvent() &#123;</span><br><span class="line">    int readSizeZeroTimes = 0;</span><br><span class="line">    while (this.byteBufferRead.hasRemaining()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //读取Master发送的消息</span><br><span class="line">            int readSize = this.socketChannel.read(this.byteBufferRead);</span><br><span class="line">            if (readSize &gt; 0) &#123;</span><br><span class="line">                lastWriteTimestamp = HAService.this.defaultMessageStore.getSystemClock().now();</span><br><span class="line">                readSizeZeroTimes = 0;</span><br><span class="line">                //对读取的数据进行处理</span><br><span class="line">                boolean result = this.dispatchReadRequest();</span><br><span class="line">                if (!result) &#123;</span><br><span class="line">                    log.error(&quot;HAClient, dispatchReadRequest error&quot;);</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (readSize == 0) &#123;</span><br><span class="line">                if (++readSizeZeroTimes &gt;= 3) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.info(&quot;HAClient, processReadEvent read socket &lt; 0&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.info(&quot;HAClient, processReadEvent read socket exception&quot;, e);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、HAClient的dispatchReadRequest方法"><a href="#11、HAClient的dispatchReadRequest方法" class="headerlink" title="11、HAClient的dispatchReadRequest方法"></a>11、HAClient的dispatchReadRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">private boolean dispatchReadRequest() &#123;</span><br><span class="line">    final int msgHeaderSize = 8 + 4; // phyoffset + size</span><br><span class="line">    int readSocketPos = this.byteBufferRead.position();</span><br><span class="line"></span><br><span class="line">    while (true) &#123;</span><br><span class="line">        //读取数据的位置与上次读取位置的差</span><br><span class="line">        int diff = this.byteBufferRead.position() - this.dispatchPostion;</span><br><span class="line">        //diff大于Head的大小</span><br><span class="line">        if (diff &gt;= msgHeaderSize) &#123;</span><br><span class="line">            long masterPhyOffset = this.byteBufferRead.getLong(this.dispatchPostion);</span><br><span class="line">            int bodySize = this.byteBufferRead.getInt(this.dispatchPostion + 8);</span><br><span class="line"></span><br><span class="line">            long slavePhyOffset = HAService.this.defaultMessageStore.getMaxPhyOffset();</span><br><span class="line">            //检验Master和Slave之间的Offset</span><br><span class="line">            if (slavePhyOffset != 0) &#123;</span><br><span class="line">                if (slavePhyOffset != masterPhyOffset) &#123;</span><br><span class="line">                    log.error(&quot;master pushed offset not equal the max phy offset in slave, SLAVE: &quot;</span><br><span class="line">                        + slavePhyOffset + &quot; MASTER: &quot; + masterPhyOffset);</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //diff大于msgHeaderSize+bodySize的值，拆包</span><br><span class="line">            if (diff &gt;= (msgHeaderSize + bodySize)) &#123;</span><br><span class="line">                byte[] bodyData = new byte[bodySize];</span><br><span class="line">                this.byteBufferRead.position(this.dispatchPostion + msgHeaderSize);</span><br><span class="line">                this.byteBufferRead.get(bodyData);</span><br><span class="line">                //将Master发送的消息写到CommitLog</span><br><span class="line">                HAService.this.defaultMessageStore.appendToCommitLog(masterPhyOffset, bodyData);</span><br><span class="line"></span><br><span class="line">                this.byteBufferRead.position(readSocketPos);</span><br><span class="line">                //更新读取位置</span><br><span class="line">                this.dispatchPostion += msgHeaderSize + bodySize;</span><br><span class="line">                //将同步进度发送回Master</span><br><span class="line">                if (!reportSlaveMaxOffsetPlus()) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!this.byteBufferRead.hasRemaining()) &#123;</span><br><span class="line">            this.reallocateByteBuffer();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Broker启动过程&quot;&gt;&lt;a href=&quot;#一、Broker启动过程&quot; class=&quot;headerlink&quot; title=&quot;一、Broker启动过程&quot;&gt;&lt;/a&gt;一、Broker启动过程&lt;/h3&gt;&lt;h4 id=&quot;1、BrokerStartup的main方法&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="rocketmq" scheme="http://yoursite.com/categories/rocketmq/"/>
    
    
  </entry>
  
  <entry>
    <title>dubbo源码配置文件解析</title>
    <link href="http://yoursite.com/2018/08/05/dubbo%E6%BA%90%E7%A0%81/dubbo%E6%BA%90%E7%A0%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/08/05/dubbo源码/dubbo源码配置文件解析/</id>
    <published>2018-08-05T07:49:30.618Z</published>
    <updated>2018-08-05T07:49:08.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>服务方配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">     xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</span><br><span class="line">     xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">         http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span><br><span class="line">         http://code.alibabatech.com/schema/dubbo </span><br><span class="line">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span><br><span class="line">    &lt;dubbo:application name=&quot;demo-provider&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 使用zookeeper注册中心，并使用curator客户端 --&gt;</span><br><span class="line">    &lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;10.211.55.5:2181&quot; client=&quot;curator&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 使用dubbo协议在20880端口暴露服务 --&gt;</span><br><span class="line">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 和本地bean一样实现服务 --&gt;</span><br><span class="line">    &lt;bean id=&quot;demoService&quot; class=&quot;com.alibaba.dubbo.demo.provider.DemoServiceImpl&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 声明需要暴露的服务接口 --&gt;</span><br><span class="line">    &lt;dubbo:service interface=&quot;com.alibaba.dubbo.demo.DemoService&quot; ref=&quot;demoService&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>消费方配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">     xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</span><br><span class="line">     xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">     http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span><br><span class="line">     http://code.alibabatech.com/schema/dubbo </span><br><span class="line">     http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span><br><span class="line">    &lt;dubbo:application name=&quot;demo-consumer&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 使用zookeeper注册中心，并使用curator客户端 --&gt;     </span><br><span class="line">    &lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;10.211.55.5:2181&quot; client=&quot;curator&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span><br><span class="line">    &lt;dubbo:reference id=&quot;demoService&quot; check=&quot;false&quot; interface=&quot;com.alibaba.dubbo.demo.DemoService&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、解析配置文件"><a href="#一、解析配置文件" class="headerlink" title="一、解析配置文件"></a>一、解析配置文件</h3><h4 id="1、DubboNamespaceHandler的init方法"><a href="#1、DubboNamespaceHandler的init方法" class="headerlink" title="1、DubboNamespaceHandler的init方法"></a>1、DubboNamespaceHandler的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void init() &#123;</span><br><span class="line">    registerBeanDefinitionParser(&quot;application&quot;, new DubboBeanDefinitionParser(ApplicationConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;module&quot;, new DubboBeanDefinitionParser(ModuleConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;registry&quot;, new DubboBeanDefinitionParser(RegistryConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;monitor&quot;, new DubboBeanDefinitionParser(MonitorConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;provider&quot;, new DubboBeanDefinitionParser(ProviderConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;consumer&quot;, new DubboBeanDefinitionParser(ConsumerConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;protocol&quot;, new DubboBeanDefinitionParser(ProtocolConfig.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;service&quot;, new DubboBeanDefinitionParser(ServiceBean.class, true));</span><br><span class="line">    registerBeanDefinitionParser(&quot;reference&quot;, new DubboBeanDefinitionParser(ReferenceBean.class, false));</span><br><span class="line">    registerBeanDefinitionParser(&quot;annotation&quot;, new DubboBeanDefinitionParser(AnnotationBean.class, true));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DubboBeanDefinitionParser的parse方法"><a href="#2、DubboBeanDefinitionParser的parse方法" class="headerlink" title="2、DubboBeanDefinitionParser的parse方法"></a>2、DubboBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private static BeanDefinition parse(Element element, ParserContext parserContext, Class&lt;?&gt; beanClass, boolean required) &#123;</span><br><span class="line">    //创建beanDefinition</span><br><span class="line">    RootBeanDefinition beanDefinition = new RootBeanDefinition();</span><br><span class="line">    //设置bean的class</span><br><span class="line">    beanDefinition.setBeanClass(beanClass);</span><br><span class="line">    //懒加载</span><br><span class="line">    beanDefinition.setLazyInit(false);</span><br><span class="line">    //获取id属性</span><br><span class="line">    String id = element.getAttribute(&quot;id&quot;);</span><br><span class="line">    //未获取到id属性</span><br><span class="line">    if ((id == null || id.length() == 0) &amp;&amp; required) &#123;</span><br><span class="line">        //获取name属性</span><br><span class="line">        String generatedBeanName = element.getAttribute(&quot;name&quot;);</span><br><span class="line">        //未获取到name属性</span><br><span class="line">        if (generatedBeanName == null || generatedBeanName.length() == 0) &#123;</span><br><span class="line">            //ProtocolConfig类的bean默认&quot;dubbo&quot;,其余用interface属性作为generatedBeanName</span><br><span class="line">            if (ProtocolConfig.class.equals(beanClass)) &#123;</span><br><span class="line">                generatedBeanName = &quot;dubbo&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                generatedBeanName = element.getAttribute(&quot;interface&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //任未获取到generatedBeanName，用全类名作为generatedBeanName</span><br><span class="line">        if (generatedBeanName == null || generatedBeanName.length() == 0) &#123;</span><br><span class="line">            generatedBeanName = beanClass.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        //id默认使用generatedBeanName</span><br><span class="line">        id = generatedBeanName; </span><br><span class="line">        int counter = 2;</span><br><span class="line">        //防止id重复</span><br><span class="line">        while(parserContext.getRegistry().containsBeanDefinition(id)) &#123;</span><br><span class="line">            id = generatedBeanName + (counter ++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (id != null &amp;&amp; id.length() &gt; 0) &#123;</span><br><span class="line">        if (parserContext.getRegistry().containsBeanDefinition(id))  &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;Duplicate spring bean id &quot; + id);</span><br><span class="line">        &#125;</span><br><span class="line">        //注册beanDefinition</span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(&quot;id&quot;, id);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析的为ProtocolConfig</span><br><span class="line">    if (ProtocolConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        //获取依赖ProtocolConfig的bean，将ProtocolConfig设置为该bean的属性</span><br><span class="line">        for (String name : parserContext.getRegistry().getBeanDefinitionNames()) &#123;</span><br><span class="line">            BeanDefinition definition = parserContext.getRegistry().getBeanDefinition(name);</span><br><span class="line">            PropertyValue property = definition.getPropertyValues().getPropertyValue(&quot;protocol&quot;);</span><br><span class="line">            if (property != null) &#123;</span><br><span class="line">                Object value = property.getValue();</span><br><span class="line">                if (value instanceof ProtocolConfig &amp;&amp; id.equals(((ProtocolConfig) value).getName())) &#123;</span><br><span class="line">                    definition.getPropertyValues().addPropertyValue(&quot;protocol&quot;, new RuntimeBeanReference(id));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    //解析的为ServiceBean</span><br><span class="line">    &#125; else if (ServiceBean.class.equals(beanClass)) &#123;</span><br><span class="line">        //获取class属性</span><br><span class="line">        String className = element.getAttribute(&quot;class&quot;);</span><br><span class="line">        //创建className的beanDefinition，并设置为ServiceBean的属性</span><br><span class="line">        if(className != null &amp;&amp; className.length() &gt; 0) &#123;</span><br><span class="line">            RootBeanDefinition classDefinition = new RootBeanDefinition();</span><br><span class="line">            classDefinition.setBeanClass(ReflectUtils.forName(className));</span><br><span class="line">            classDefinition.setLazyInit(false);</span><br><span class="line">            parseProperties(element.getChildNodes(), classDefinition);</span><br><span class="line">            beanDefinition.getPropertyValues().addPropertyValue(&quot;ref&quot;, new BeanDefinitionHolder(classDefinition, id + &quot;Impl&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    //解析的为ProviderConfig</span><br><span class="line">    &#125; else if (ProviderConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        //解析子属性</span><br><span class="line">        parseNested(element, parserContext, ServiceBean.class, true, &quot;service&quot;, &quot;provider&quot;, id, beanDefinition);</span><br><span class="line">    //解析的为ConsumerConfig</span><br><span class="line">    &#125; else if (ConsumerConfig.class.equals(beanClass)) &#123;</span><br><span class="line">        //解析子属性</span><br><span class="line">        parseNested(element, parserContext, ReferenceBean.class, false, &quot;reference&quot;, &quot;consumer&quot;, id, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; props = new HashSet&lt;String&gt;();</span><br><span class="line">    ManagedMap parameters = null;</span><br><span class="line">    //遍历setter方法，解析并设置属性值</span><br><span class="line">    for (Method setter : beanClass.getMethods()) &#123;</span><br><span class="line">        String name = setter.getName();</span><br><span class="line">        if (name.length() &gt; 3 &amp;&amp; name.startsWith(&quot;set&quot;)</span><br><span class="line">                &amp;&amp; Modifier.isPublic(setter.getModifiers())</span><br><span class="line">                &amp;&amp; setter.getParameterTypes().length == 1) &#123;</span><br><span class="line">            Class&lt;?&gt; type = setter.getParameterTypes()[0];</span><br><span class="line">            String property = StringUtils.camelToSplitName(name.substring(3, 4).toLowerCase() + name.substring(4), &quot;-&quot;);</span><br><span class="line">            props.add(property);</span><br><span class="line">            Method getter = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                getter = beanClass.getMethod(&quot;get&quot; + name.substring(3), new Class&lt;?&gt;[0]);</span><br><span class="line">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    getter = beanClass.getMethod(&quot;is&quot; + name.substring(3), new Class&lt;?&gt;[0]);</span><br><span class="line">                &#125; catch (NoSuchMethodException e2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (getter == null </span><br><span class="line">                    || ! Modifier.isPublic(getter.getModifiers())</span><br><span class="line">                    || ! type.equals(getter.getReturnType())) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (&quot;parameters&quot;.equals(property)) &#123;</span><br><span class="line">                parameters = parseParameters(element.getChildNodes(), beanDefinition);</span><br><span class="line">            &#125; else if (&quot;methods&quot;.equals(property)) &#123;</span><br><span class="line">                parseMethods(id, element.getChildNodes(), beanDefinition, parserContext);</span><br><span class="line">            &#125; else if (&quot;arguments&quot;.equals(property)) &#123;</span><br><span class="line">                parseArguments(id, element.getChildNodes(), beanDefinition, parserContext);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                String value = element.getAttribute(property);</span><br><span class="line">                if (value != null) &#123;</span><br><span class="line">                    value = value.trim();</span><br><span class="line">                    if (value.length() &gt; 0) &#123;</span><br><span class="line">                        if (&quot;registry&quot;.equals(property) &amp;&amp; RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(value)) &#123;</span><br><span class="line">                            RegistryConfig registryConfig = new RegistryConfig();</span><br><span class="line">                            registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);</span><br><span class="line">                            beanDefinition.getPropertyValues().addPropertyValue(property, registryConfig);</span><br><span class="line">                        &#125; else if (&quot;registry&quot;.equals(property) &amp;&amp; value.indexOf(&apos;,&apos;) != -1) &#123;</span><br><span class="line">                            parseMultiRef(&quot;registries&quot;, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; else if (&quot;provider&quot;.equals(property) &amp;&amp; value.indexOf(&apos;,&apos;) != -1) &#123;</span><br><span class="line">                            parseMultiRef(&quot;providers&quot;, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; else if (&quot;protocol&quot;.equals(property) &amp;&amp; value.indexOf(&apos;,&apos;) != -1) &#123;</span><br><span class="line">                            parseMultiRef(&quot;protocols&quot;, value, beanDefinition, parserContext);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            Object reference;</span><br><span class="line">                            if (isPrimitive(type)) &#123;</span><br><span class="line">                                if (&quot;async&quot;.equals(property) &amp;&amp; &quot;false&quot;.equals(value)</span><br><span class="line">                                        || &quot;timeout&quot;.equals(property) &amp;&amp; &quot;0&quot;.equals(value)</span><br><span class="line">                                        || &quot;delay&quot;.equals(property) &amp;&amp; &quot;0&quot;.equals(value)</span><br><span class="line">                                        || &quot;version&quot;.equals(property) &amp;&amp; &quot;0.0.0&quot;.equals(value)</span><br><span class="line">                                        || &quot;stat&quot;.equals(property) &amp;&amp; &quot;-1&quot;.equals(value)</span><br><span class="line">                                        || &quot;reliable&quot;.equals(property) &amp;&amp; &quot;false&quot;.equals(value)) &#123;</span><br><span class="line">                                    // 兼容旧版本xsd中的default值</span><br><span class="line">                                    value = null;</span><br><span class="line">                                &#125;</span><br><span class="line">                                reference = value;</span><br><span class="line">                            &#125; else if (&quot;protocol&quot;.equals(property) </span><br><span class="line">                                    &amp;&amp; ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(value)</span><br><span class="line">                                    &amp;&amp; (! parserContext.getRegistry().containsBeanDefinition(value)</span><br><span class="line">                                            || ! ProtocolConfig.class.getName().equals(parserContext.getRegistry().getBeanDefinition(value).getBeanClassName()))) &#123;</span><br><span class="line">                                if (&quot;dubbo:provider&quot;.equals(element.getTagName())) &#123;</span><br><span class="line">                                    logger.warn(&quot;Recommended replace &lt;dubbo:provider protocol=\&quot;&quot; + value + &quot;\&quot; ... /&gt; to &lt;dubbo:protocol name=\&quot;&quot; + value + &quot;\&quot; ... /&gt;&quot;);</span><br><span class="line">                                &#125;</span><br><span class="line">                                // 兼容旧版本配置</span><br><span class="line">                                ProtocolConfig protocol = new ProtocolConfig();</span><br><span class="line">                                protocol.setName(value);</span><br><span class="line">                                reference = protocol;</span><br><span class="line">                            &#125; else if (&quot;monitor&quot;.equals(property) </span><br><span class="line">                                    &amp;&amp; (! parserContext.getRegistry().containsBeanDefinition(value)</span><br><span class="line">                                            || ! MonitorConfig.class.getName().equals(parserContext.getRegistry().getBeanDefinition(value).getBeanClassName()))) &#123;</span><br><span class="line">                                // 兼容旧版本配置</span><br><span class="line">                                reference = convertMonitor(value);</span><br><span class="line">                            &#125; else if (&quot;onreturn&quot;.equals(property)) &#123;</span><br><span class="line">                                int index = value.lastIndexOf(&quot;.&quot;);</span><br><span class="line">                                String returnRef = value.substring(0, index);</span><br><span class="line">                                String returnMethod = value.substring(index + 1);</span><br><span class="line">                                reference = new RuntimeBeanReference(returnRef);</span><br><span class="line">                                beanDefinition.getPropertyValues().addPropertyValue(&quot;onreturnMethod&quot;, returnMethod);</span><br><span class="line">                            &#125; else if (&quot;onthrow&quot;.equals(property)) &#123;</span><br><span class="line">                                int index = value.lastIndexOf(&quot;.&quot;);</span><br><span class="line">                                String throwRef = value.substring(0, index);</span><br><span class="line">                                String throwMethod = value.substring(index + 1);</span><br><span class="line">                                reference = new RuntimeBeanReference(throwRef);</span><br><span class="line">                                beanDefinition.getPropertyValues().addPropertyValue(&quot;onthrowMethod&quot;, throwMethod);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                if (&quot;ref&quot;.equals(property) &amp;&amp; parserContext.getRegistry().containsBeanDefinition(value)) &#123;</span><br><span class="line">                                    BeanDefinition refBean = parserContext.getRegistry().getBeanDefinition(value);</span><br><span class="line">                                    if (! refBean.isSingleton()) &#123;</span><br><span class="line">                                        throw new IllegalStateException(&quot;The exported service ref &quot; + value + &quot; must be singleton! Please set the &quot; + value + &quot; bean scope to singleton, eg: &lt;bean id=\&quot;&quot; + value+ &quot;\&quot; scope=\&quot;singleton\&quot; ...&gt;&quot;);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                reference = new RuntimeBeanReference(value);</span><br><span class="line">                            &#125;</span><br><span class="line">                            beanDefinition.getPropertyValues().addPropertyValue(property, reference);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将element的attribute加入parameters</span><br><span class="line">    NamedNodeMap attributes = element.getAttributes();</span><br><span class="line">    int len = attributes.getLength();</span><br><span class="line">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        Node node = attributes.item(i);</span><br><span class="line">        String name = node.getLocalName();</span><br><span class="line">        if (! props.contains(name)) &#123;</span><br><span class="line">            if (parameters == null) &#123;</span><br><span class="line">                parameters = new ManagedMap();</span><br><span class="line">            &#125;</span><br><span class="line">            String value = node.getNodeValue();</span><br><span class="line">            parameters.put(name, new TypedStringValue(value, String.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (parameters != null) &#123;</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(&quot;parameters&quot;, parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文参考博客<a href="http://www.cnblogs.com/java-zhao/category/1090034.html" target="_blank" rel="noopener">http://www.cnblogs.com/java-zhao/category/1090034.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;服务方配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>dubbo源码服务调用</title>
    <link href="http://yoursite.com/2018/08/05/dubbo%E6%BA%90%E7%A0%81/dubbo%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/05/dubbo源码/dubbo源码服务调用/</id>
    <published>2018-08-05T07:49:30.616Z</published>
    <updated>2018-08-05T07:49:05.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建客户端"><a href="#一、创建客户端" class="headerlink" title="一、创建客户端"></a>一、创建客户端</h3><h4 id="1、ReferenceBean的afterPropertiesSet方法"><a href="#1、ReferenceBean的afterPropertiesSet方法" class="headerlink" title="1、ReferenceBean的afterPropertiesSet方法"></a>1、ReferenceBean的afterPropertiesSet方法</h4><p>ServiceBean实现了InitializingBean接口，创建bean时会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;&#125;)</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    //设置consumerConfig</span><br><span class="line">    if (getConsumer() == null) &#123;</span><br><span class="line">        Map&lt;String, ConsumerConfig&gt; consumerConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ConsumerConfig.class, false, false);</span><br><span class="line">        if (consumerConfigMap != null &amp;&amp; consumerConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ConsumerConfig consumerConfig = null;</span><br><span class="line">            for (ConsumerConfig config : consumerConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (consumerConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate consumer configs: &quot; + consumerConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    consumerConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (consumerConfig != null) &#123;</span><br><span class="line">                setConsumer(consumerConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置applicationConfig</span><br><span class="line">    if (getApplication() == null</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getApplication() == null)) &#123;</span><br><span class="line">        Map&lt;String, ApplicationConfig&gt; applicationConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ApplicationConfig.class, false, false);</span><br><span class="line">        if (applicationConfigMap != null &amp;&amp; applicationConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ApplicationConfig applicationConfig = null;</span><br><span class="line">            for (ApplicationConfig config : applicationConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (applicationConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate application configs: &quot; + applicationConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    applicationConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (applicationConfig != null) &#123;</span><br><span class="line">                setApplication(applicationConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置moduleConfig</span><br><span class="line">    if (getModule() == null</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getModule() == null)) &#123;</span><br><span class="line">        Map&lt;String, ModuleConfig&gt; moduleConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ModuleConfig.class, false, false);</span><br><span class="line">        if (moduleConfigMap != null &amp;&amp; moduleConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ModuleConfig moduleConfig = null;</span><br><span class="line">            for (ModuleConfig config : moduleConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (moduleConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate module configs: &quot; + moduleConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    moduleConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (moduleConfig != null) &#123;</span><br><span class="line">                setModule(moduleConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置registryConfigs</span><br><span class="line">    if ((getRegistries() == null || getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getRegistries() == null || getConsumer().getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getRegistries() == null || getApplication().getRegistries().size() == 0)) &#123;</span><br><span class="line">        Map&lt;String, RegistryConfig&gt; registryConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, RegistryConfig.class, false, false);</span><br><span class="line">        if (registryConfigMap != null &amp;&amp; registryConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            List&lt;RegistryConfig&gt; registryConfigs = new ArrayList&lt;RegistryConfig&gt;();</span><br><span class="line">            for (RegistryConfig config : registryConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    registryConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (registryConfigs != null &amp;&amp; registryConfigs.size() &gt; 0) &#123;</span><br><span class="line">                super.setRegistries(registryConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置monitorConfig</span><br><span class="line">    if (getMonitor() == null</span><br><span class="line">            &amp;&amp; (getConsumer() == null || getConsumer().getMonitor() == null)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getMonitor() == null)) &#123;</span><br><span class="line">        Map&lt;String, MonitorConfig&gt; monitorConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, MonitorConfig.class, false, false);</span><br><span class="line">        if (monitorConfigMap != null &amp;&amp; monitorConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            MonitorConfig monitorConfig = null;</span><br><span class="line">            for (MonitorConfig config : monitorConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (monitorConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate monitor configs: &quot; + monitorConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    monitorConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (monitorConfig != null) &#123;</span><br><span class="line">                setMonitor(monitorConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean b = isInit();</span><br><span class="line">    if (b == null &amp;&amp; getConsumer() != null) &#123;</span><br><span class="line">        b = getConsumer().isInit();</span><br><span class="line">    &#125;</span><br><span class="line">    if (b != null &amp;&amp; b.booleanValue()) &#123;</span><br><span class="line">        //获取服务</span><br><span class="line">        getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ReferenceBean的getObject方法"><a href="#2、ReferenceBean的getObject方法" class="headerlink" title="2、ReferenceBean的getObject方法"></a>2、ReferenceBean的getObject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Object getObject() throws Exception &#123;</span><br><span class="line">    //获取服务</span><br><span class="line">    return get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ReferenceBean的get方法"><a href="#3、ReferenceBean的get方法" class="headerlink" title="3、ReferenceBean的get方法"></a>3、ReferenceBean的get方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public synchronized T get() &#123;</span><br><span class="line">    if (destroyed)&#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Already destroyed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (ref == null) &#123;</span><br><span class="line">        //初始化</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    return ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、ReferenceBean的init方法"><a href="#4、ReferenceBean的init方法" class="headerlink" title="4、ReferenceBean的init方法"></a>4、ReferenceBean的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">private void init() &#123;</span><br><span class="line">    //已初始化</span><br><span class="line">    if (initialized) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    initialized = true;</span><br><span class="line">    if (interfaceName == null || interfaceName.length() == 0) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;&lt;dubbo:reference interface=\&quot;\&quot; /&gt; interface not allow null!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取消费者全局配置</span><br><span class="line">    checkDefault();</span><br><span class="line">    appendProperties(this);</span><br><span class="line">    if (getGeneric() == null &amp;&amp; getConsumer() != null) &#123;</span><br><span class="line">        setGeneric(getConsumer().getGeneric());</span><br><span class="line">    &#125;</span><br><span class="line">    if (ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">        interfaceClass = GenericService.class;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            interfaceClass = Class.forName(interfaceName, true, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">    &#125;</span><br><span class="line">    String resolve = System.getProperty(interfaceName);</span><br><span class="line">    String resolveFile = null;</span><br><span class="line">    if (resolve == null || resolve.length() == 0) &#123;</span><br><span class="line">        resolveFile = System.getProperty(&quot;dubbo.resolve.file&quot;);</span><br><span class="line">        if (resolveFile == null || resolveFile.length() == 0) &#123;</span><br><span class="line">            File userResolveFile = new File(new File(System.getProperty(&quot;user.home&quot;)), &quot;dubbo-resolve.properties&quot;);</span><br><span class="line">            if (userResolveFile.exists()) &#123;</span><br><span class="line">                resolveFile = userResolveFile.getAbsolutePath();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (resolveFile != null &amp;&amp; resolveFile.length() &gt; 0) &#123;</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            FileInputStream fis = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                fis = new FileInputStream(new File(resolveFile));</span><br><span class="line">                properties.load(fis);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;Unload &quot; + resolveFile + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if(null != fis) fis.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            resolve = properties.getProperty(interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (resolve != null &amp;&amp; resolve.length() &gt; 0) &#123;</span><br><span class="line">        url = resolve;</span><br><span class="line">        if (logger.isWarnEnabled()) &#123;</span><br><span class="line">            if (resolveFile != null &amp;&amp; resolveFile.length() &gt; 0) &#123;</span><br><span class="line">                logger.warn(&quot;Using default dubbo resolve file &quot; + resolveFile + &quot; replace &quot; + interfaceName + &quot;&quot; + resolve + &quot; to p2p invoke remote service.&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                logger.warn(&quot;Using -D&quot; + interfaceName + &quot;=&quot; + resolve + &quot; to p2p invoke remote service.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (consumer != null) &#123;</span><br><span class="line">        if (application == null) &#123;</span><br><span class="line">            application = consumer.getApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        if (module == null) &#123;</span><br><span class="line">            module = consumer.getModule();</span><br><span class="line">        &#125;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = consumer.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = consumer.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (module != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = module.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = module.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (application != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = application.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = application.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    checkApplication();</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line">    Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">    Map&lt;Object, Object&gt; attributes = new HashMap&lt;Object, Object&gt;();</span><br><span class="line">    map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);</span><br><span class="line">    map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());</span><br><span class="line">    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    if (ConfigUtils.getPid() &gt; 0) &#123;</span><br><span class="line">        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">    &#125;</span><br><span class="line">    if (! isGeneric()) &#123;</span><br><span class="line">        String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">        if (revision != null &amp;&amp; revision.length() &gt; 0) &#123;</span><br><span class="line">            map.put(&quot;revision&quot;, revision);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">        if(methods.length == 0) &#123;</span><br><span class="line">            logger.warn(&quot;NO method found in service interface &quot; + interfaceClass.getName());</span><br><span class="line">            map.put(&quot;methods&quot;, Constants.ANY_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            map.put(&quot;methods&quot;, StringUtils.join(new HashSet&lt;String&gt;(Arrays.asList(methods)), &quot;,&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(Constants.INTERFACE_KEY, interfaceName);</span><br><span class="line">    appendParameters(map, application);</span><br><span class="line">    appendParameters(map, module);</span><br><span class="line">    appendParameters(map, consumer, Constants.DEFAULT_KEY);</span><br><span class="line">    appendParameters(map, this);</span><br><span class="line">    String prifix = StringUtils.getServiceKey(map);</span><br><span class="line">    if (methods != null &amp;&amp; methods.size() &gt; 0) &#123;</span><br><span class="line">        for (MethodConfig method : methods) &#123;</span><br><span class="line">            appendParameters(map, method, method.getName());</span><br><span class="line">            String retryKey = method.getName() + &quot;.retry&quot;;</span><br><span class="line">            if (map.containsKey(retryKey)) &#123;</span><br><span class="line">                String retryValue = map.remove(retryKey);</span><br><span class="line">                if (&quot;false&quot;.equals(retryValue)) &#123;</span><br><span class="line">                    map.put(method.getName() + &quot;.retries&quot;, &quot;0&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            appendAttributes(attributes, method, prifix + &quot;.&quot; + method.getName());</span><br><span class="line">            checkAndConvertImplicitConfig(method, map, attributes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //attributes通过系统context进行存储.</span><br><span class="line">    StaticContext.getSystemContext().putAll(attributes);</span><br><span class="line">    //创建服务代理</span><br><span class="line">    ref = createProxy(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ReferenceConfig的createProxy方法"><a href="#5、ReferenceConfig的createProxy方法" class="headerlink" title="5、ReferenceConfig的createProxy方法"></a>5、ReferenceConfig的createProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot;, &quot;deprecation&quot; &#125;)</span><br><span class="line">private T createProxy(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    URL tmpUrl = new URL(&quot;temp&quot;, &quot;localhost&quot;, 0, map);</span><br><span class="line">    final boolean isJvmRefer;</span><br><span class="line">    if (isInjvm() == null) &#123;</span><br><span class="line">        if (url != null &amp;&amp; url.length() &gt; 0) &#123; //指定URL的情况下，不做本地引用</span><br><span class="line">            isJvmRefer = false;</span><br><span class="line">        &#125; else if (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) &#123;</span><br><span class="line">            //默认情况下如果本地有服务暴露，则引用本地服务.</span><br><span class="line">            isJvmRefer = true;  </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            isJvmRefer = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        isJvmRefer = isInjvm().booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line">    //本地服务</span><br><span class="line">    if (isJvmRefer) &#123;</span><br><span class="line">        URL url = new URL(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, 0, interfaceClass.getName()).addParameters(map);</span><br><span class="line">        //refprotocol为Protocol$Adaptive,经过ProtocolListenerWrapper.refer、ProtocolFilterWrapper.refer、InjvmProtocol.refer</span><br><span class="line">        //获取InjvmInvoker</span><br><span class="line">        invoker = refprotocol.refer(interfaceClass, url);</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Using injvm service &quot; + interfaceClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (url != null &amp;&amp; url.length() &gt; 0) &#123; // 用户指定URL，指定的URL可能是对点对直连地址，也可能是注册中心URL</span><br><span class="line">            String[] us = Constants.SEMICOLON_SPLIT_PATTERN.split(url);</span><br><span class="line">            if (us != null &amp;&amp; us.length &gt; 0) &#123;</span><br><span class="line">                for (String u : us) &#123;</span><br><span class="line">                    URL url = URL.valueOf(u);</span><br><span class="line">                    if (url.getPath() == null || url.getPath().length() == 0) &#123;</span><br><span class="line">                        url = url.setPath(interfaceName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                        urls.add(url.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        urls.add(ClusterUtils.mergeUrl(url, map));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123; // 通过注册中心配置拼装URL</span><br><span class="line">            List&lt;URL&gt; us = loadRegistries(false);</span><br><span class="line">            if (us != null &amp;&amp; us.size() &gt; 0) &#123;</span><br><span class="line">                for (URL u : us) &#123;</span><br><span class="line">                    URL monitorUrl = loadMonitor(u);</span><br><span class="line">                    if (monitorUrl != null) &#123;</span><br><span class="line">                        map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    urls.add(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (urls == null || urls.size() == 0) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;No such any registry to reference &quot; + interfaceName  + &quot; on the consumer &quot; + NetUtils.getLocalHost() + &quot; use dubbo version &quot; + Version.getVersion() + &quot;, please config &lt;dubbo:registry address=\&quot;...\&quot; /&gt; to your spring config.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (urls.size() == 1) &#123;</span><br><span class="line">            //将interfaceClass转化为Invoker</span><br><span class="line">            //refprotocol为Protocol$Adaptive,经过ProtocolListenerWrapper.refer、ProtocolFilterWrapper.refer、InjvmProtocol.refer</span><br><span class="line">            invoker = refprotocol.refer(interfaceClass, urls.get(0));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            List&lt;Invoker&lt;?&gt;&gt; invokers = new ArrayList&lt;Invoker&lt;?&gt;&gt;();</span><br><span class="line">            URL registryURL = null;</span><br><span class="line">            for (URL url : urls) &#123;</span><br><span class="line">                invokers.add(refprotocol.refer(interfaceClass, url));</span><br><span class="line">                if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                    registryURL = url; // 用了最后一个registry url</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (registryURL != null) &#123; // 有 注册中心协议的URL</span><br><span class="line">                // 对有注册中心的Cluster 只用 AvailableCluster</span><br><span class="line">                URL u = registryURL.addParameter(Constants.CLUSTER_KEY, AvailableCluster.NAME); </span><br><span class="line">                // cluster是Cluster$Adaptive,返回MockClusterInvoker</span><br><span class="line">                invoker = cluster.join(new StaticDirectory(u, invokers));</span><br><span class="line">            &#125;  else &#123; // 不是 注册中心的URL</span><br><span class="line">                invoker = cluster.join(new StaticDirectory(invokers));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Boolean c = check;</span><br><span class="line">    if (c == null &amp;&amp; consumer != null) &#123;</span><br><span class="line">        c = consumer.isCheck();</span><br><span class="line">    &#125;</span><br><span class="line">    if (c == null) &#123;</span><br><span class="line">        c = true; // default true</span><br><span class="line">    &#125;</span><br><span class="line">    if (c &amp;&amp; ! invoker.isAvailable()) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Failed to check the status of the service &quot; + interfaceName + &quot;. No provider available for the service &quot; + (group == null ? &quot;&quot; : group + &quot;/&quot;) + interfaceName + (version == null ? &quot;&quot; : &quot;:&quot; + version) + &quot; from the url &quot; + invoker.getUrl() + &quot; to the consumer &quot; + NetUtils.getLocalHost() + &quot; use dubbo version &quot; + Version.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Refer dubbo service &quot; + interfaceClass.getName() + &quot; from url &quot; + invoker.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">    // 创建服务代理</span><br><span class="line">    //proxyFactory为ProxyFactory$Adaptive最终执行JavassistProxyFactory的getProxy方法</span><br><span class="line">    return (T) proxyFactory.getProxy(invoker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、RegistryProtocol的refer方法"><a href="#6、RegistryProtocol的refer方法" class="headerlink" title="6、RegistryProtocol的refer方法"></a>6、RegistryProtocol的refer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public &lt;T&gt; Invoker&lt;T&gt; refer(Class&lt;T&gt; type, URL url) throws RpcException &#123;</span><br><span class="line">    //替换协议</span><br><span class="line">    url = url.setProtocol(url.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_REGISTRY)).removeParameter(Constants.REGISTRY_KEY);</span><br><span class="line">    //registryFactory为RegistryFactory$Adaptive，最终执行ZookeeperRegistryFactory的getRegistry获取ZookeeperRegistry</span><br><span class="line">    Registry registry = registryFactory.getRegistry(url);</span><br><span class="line">    if (RegistryService.class.equals(type)) &#123;</span><br><span class="line">        return proxyFactory.getInvoker((T) registry, type, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // group=&quot;a,b&quot; or group=&quot;*&quot;</span><br><span class="line">    Map&lt;String, String&gt; qs = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));</span><br><span class="line">    String group = qs.get(Constants.GROUP_KEY);</span><br><span class="line">    if (group != null &amp;&amp; group.length() &gt; 0 ) &#123;</span><br><span class="line">        if ( ( Constants.COMMA_SPLIT_PATTERN.split( group ) ).length &gt; 1</span><br><span class="line">                || &quot;*&quot;.equals( group ) ) &#123;</span><br><span class="line">            return doRefer( getMergeableCluster(), registry, type, url );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return doRefer(cluster, registry, type, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url：registry://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.0&amp;pid=25267</span><br><span class="line">     &amp;refer=application=demo-consumer&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span><br><span class="line">     &amp;pid=25267&amp;register.ip=10.10.10.10&amp;side=consumer&amp;timestamp=1510225913509&amp;registry=zookeeper&amp;timestamp=1510225984358</span><br><span class="line">type: interface com.alibaba.dubbo.demo.DemoService</span><br></pre></td></tr></table></figure></p><p>替换了协议的url示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zookeeper://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.0&amp;pid=25267</span><br><span class="line">&amp;refer=application=demo-consumer&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span><br><span class="line">&amp;pid=25267&amp;register.ip=10.10.10.10&amp;side=consumer&amp;timestamp=1510225913509&amp;timestamp=1510225984358</span><br></pre></td></tr></table></figure></p><h4 id="7、实例化ZookeeperRegistry"><a href="#7、实例化ZookeeperRegistry" class="headerlink" title="7、实例化ZookeeperRegistry"></a>7、实例化ZookeeperRegistry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) &#123;</span><br><span class="line">    super(url);</span><br><span class="line">    if (url.isAnyHost()) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;registry address == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);</span><br><span class="line">    if (! group.startsWith(Constants.PATH_SEPARATOR)) &#123;</span><br><span class="line">        group = Constants.PATH_SEPARATOR + group;</span><br><span class="line">    &#125;</span><br><span class="line">    //&quot;/dubbo&quot;</span><br><span class="line">    this.root = group;</span><br><span class="line">    //创建zk客户端，启动会话,返回CuratorZookeeperClient</span><br><span class="line">    zkClient = zookeeperTransporter.connect(url);</span><br><span class="line">    //监听重新连接成功事件，重新连接成功后，之前已经完成注册和订阅的url要重新进行注册和订阅</span><br><span class="line">    zkClient.addStateListener(new StateListener() &#123;</span><br><span class="line">        public void stateChanged(int state) &#123;</span><br><span class="line">            if (state == RECONNECTED) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    recover();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    logger.error(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、6）RegistryProtocol的doRefer方法"><a href="#8、接（一、6）RegistryProtocol的doRefer方法" class="headerlink" title="8、接（一、6）RegistryProtocol的doRefer方法"></a>8、接（一、6）RegistryProtocol的doRefer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private &lt;T&gt; Invoker&lt;T&gt; doRefer(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url) &#123;</span><br><span class="line">    //创建RegistryDirectory</span><br><span class="line">    RegistryDirectory&lt;T&gt; directory = new RegistryDirectory&lt;T&gt;(type, url);</span><br><span class="line">    directory.setRegistry(registry);</span><br><span class="line">    directory.setProtocol(protocol);</span><br><span class="line">    URL subscribeUrl = new URL(Constants.CONSUMER_PROTOCOL, NetUtils.getLocalHost(), 0, type.getName(), directory.getUrl().getParameters());</span><br><span class="line">    //向zk注册消费者</span><br><span class="line">    if (! Constants.ANY_VALUE.equals(url.getServiceInterface())</span><br><span class="line">            &amp;&amp; url.getParameter(Constants.REGISTER_KEY, true)) &#123;</span><br><span class="line">        registry.register(subscribeUrl.addParameters(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY,</span><br><span class="line">                Constants.CHECK_KEY, String.valueOf(false)));</span><br><span class="line">    &#125;</span><br><span class="line">    //订阅</span><br><span class="line">    directory.subscribe(subscribeUrl.addParameter(Constants.CATEGORY_KEY, </span><br><span class="line">            Constants.PROVIDERS_CATEGORY </span><br><span class="line">            + &quot;,&quot; + Constants.CONFIGURATORS_CATEGORY </span><br><span class="line">            + &quot;,&quot; + Constants.ROUTERS_CATEGORY));</span><br><span class="line">    return cluster.join(directory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、FailbackRegistry的register方法"><a href="#9、FailbackRegistry的register方法" class="headerlink" title="9、FailbackRegistry的register方法"></a>9、FailbackRegistry的register方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void register(URL url) &#123;</span><br><span class="line">    super.register(url);</span><br><span class="line">    failedRegistered.remove(url);</span><br><span class="line">    failedUnregistered.remove(url);</span><br><span class="line">    try &#123;</span><br><span class="line">        // 向服务器端发送注册请求</span><br><span class="line">        doRegister(url);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">        boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; ! Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class="line">        boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">        if (check || skipFailback) &#123;</span><br><span class="line">            if(skipFailback) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            throw new IllegalStateException(&quot;Failed to register &quot; + url + &quot; to registry &quot; + getUrl().getAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.error(&quot;Failed to register &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的注册请求记录到失败列表，定时重试</span><br><span class="line">        failedRegistered.add(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、ZookeeperRegistry的doRegister方法"><a href="#10、ZookeeperRegistry的doRegister方法" class="headerlink" title="10、ZookeeperRegistry的doRegister方法"></a>10、ZookeeperRegistry的doRegister方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void doRegister(URL url) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建节点</span><br><span class="line">        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to register &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url示例（解码后的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dubbo/com.alibaba.dubbo.demo.DemoService/consumers/consumer://10.10.10.10/com.alibaba.dubbo.demo.DemoService</span><br><span class="line">?application=demo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService</span><br><span class="line">&amp;methods=sayHello&amp;pid=25267&amp;side=consumer&amp;timestamp=1510225913509</span><br></pre></td></tr></table></figure></p><h4 id="11、接（一、8）RegistryDirectory的subscribe方法"><a href="#11、接（一、8）RegistryDirectory的subscribe方法" class="headerlink" title="11、接（一、8）RegistryDirectory的subscribe方法"></a>11、接（一、8）RegistryDirectory的subscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void subscribe(URL url) &#123;</span><br><span class="line">    setConsumerUrl(url);</span><br><span class="line">    //订阅</span><br><span class="line">    registry.subscribe(url, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、FailbackRegistry的subscribe方法"><a href="#12、FailbackRegistry的subscribe方法" class="headerlink" title="12、FailbackRegistry的subscribe方法"></a>12、FailbackRegistry的subscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void subscribe(URL url, NotifyListener listener) &#123;</span><br><span class="line">    super.subscribe(url, listener);</span><br><span class="line">    removeFailedSubscribed(url, listener);</span><br><span class="line">    try &#123;</span><br><span class="line">        // 向服务器端发送订阅请求</span><br><span class="line">        doSubscribe(url, listener);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        List&lt;URL&gt; urls = getCacheUrls(url);</span><br><span class="line">        if (urls != null &amp;&amp; urls.size() &gt; 0) &#123;</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">            logger.error(&quot;Failed to subscribe &quot; + url + &quot;, Using cached list: &quot; + urls + &quot; from cache file: &quot; + getUrl().getParameter(Constants.FILE_KEY, System.getProperty(&quot;user.home&quot;) + &quot;/dubbo-registry-&quot; + url.getHost() + &quot;.cache&quot;) + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                    &amp;&amp; url.getParameter(Constants.CHECK_KEY, true);</span><br><span class="line">            boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">            if (check || skipFailback) &#123;</span><br><span class="line">                if(skipFailback) &#123;</span><br><span class="line">                    t = t.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">                throw new IllegalStateException(&quot;Failed to subscribe &quot; + url + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                logger.error(&quot;Failed to subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的订阅请求记录到失败列表，定时重试</span><br><span class="line">        addFailedSubscribed(url, listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、ZookeeperRegistry的doSubscribe方法"><a href="#13、ZookeeperRegistry的doSubscribe方法" class="headerlink" title="13、ZookeeperRegistry的doSubscribe方法"></a>13、ZookeeperRegistry的doSubscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">protected void doSubscribe(final URL url, final NotifyListener listener) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">            String root = toRootPath();</span><br><span class="line">            ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">            if (listeners == null) &#123;</span><br><span class="line">                zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                listeners = zkListeners.get(url);</span><br><span class="line">            &#125;</span><br><span class="line">            ChildListener zkListener = listeners.get(listener);</span><br><span class="line">            if (zkListener == null) &#123;</span><br><span class="line">                listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                    public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                        for (String child : currentChilds) &#123;</span><br><span class="line">                            child = URL.decode(child);</span><br><span class="line">                            if (! anyServices.contains(child)) &#123;</span><br><span class="line">                                anyServices.add(child);</span><br><span class="line">                                subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child, </span><br><span class="line">                                        Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                zkListener = listeners.get(listener);</span><br><span class="line">            &#125;</span><br><span class="line">            zkClient.create(root, false);</span><br><span class="line">            List&lt;String&gt; services = zkClient.addChildListener(root, zkListener);</span><br><span class="line">            if (services != null &amp;&amp; services.size() &gt; 0) &#123;</span><br><span class="line">                for (String service : services) &#123;</span><br><span class="line">                    service = URL.decode(service);</span><br><span class="line">                    anyServices.add(service);</span><br><span class="line">                    subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service, </span><br><span class="line">                            Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;();</span><br><span class="line">            //path分别为</span><br><span class="line">            //   /dubbo/com.alibaba.dubbo.demo.DemoService/providers</span><br><span class="line">            //   /dubbo/com.alibaba.dubbo.demo.DemoService/configurators</span><br><span class="line">            //   /dubbo/com.alibaba.dubbo.demo.DemoService/routers</span><br><span class="line">            for (String path : toCategoriesPath(url)) &#123;</span><br><span class="line">                ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">                if (listeners == null) &#123;</span><br><span class="line">                    zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                    listeners = zkListeners.get(url);</span><br><span class="line">                &#125;</span><br><span class="line">                ChildListener zkListener = listeners.get(listener);</span><br><span class="line">                if (zkListener == null) &#123;</span><br><span class="line">                    listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                        //监听子节点列表的变化</span><br><span class="line">                        public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                            ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    zkListener = listeners.get(listener);</span><br><span class="line">                &#125;</span><br><span class="line">                //创建path持久化节点</span><br><span class="line">                zkClient.create(path, false);</span><br><span class="line">                //创建path子节点监听器</span><br><span class="line">                List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);</span><br><span class="line">                if (children != null) &#123;</span><br><span class="line">                    urls.addAll(toUrlsWithEmpty(url, path, children));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to subscribe &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、FailbackRegistry的notify方法"><a href="#14、FailbackRegistry的notify方法" class="headerlink" title="14、FailbackRegistry的notify方法"></a>14、FailbackRegistry的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //执行父类的notify</span><br><span class="line">        doNotify(url, listener, urls);</span><br><span class="line">    &#125; catch (Exception t) &#123;</span><br><span class="line">        // 将失败的通知请求记录到失败列表，定时重试</span><br><span class="line">        Map&lt;NotifyListener, List&lt;URL&gt;&gt; listeners = failedNotified.get(url);</span><br><span class="line">        if (listeners == null) &#123;</span><br><span class="line">            failedNotified.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, List&lt;URL&gt;&gt;());</span><br><span class="line">            listeners = failedNotified.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.put(listener, urls);</span><br><span class="line">        logger.error(&quot;Failed to notify for subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AbstractRegistry的notify方法"><a href="#15、AbstractRegistry的notify方法" class="headerlink" title="15、AbstractRegistry的notify方法"></a>15、AbstractRegistry的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if ((urls == null || urls.size() == 0) </span><br><span class="line">            &amp;&amp; ! Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">        logger.warn(&quot;Ignore empty notify urls for subscribe url &quot; + url);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Notify urls for subscribe url &quot; + url + &quot;, urls: &quot; + urls);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; result = new HashMap&lt;String, List&lt;URL&gt;&gt;();</span><br><span class="line">    //遍历List&lt;URL&gt; urls，将urls按照category进行分类</span><br><span class="line">    for (URL u : urls) &#123;</span><br><span class="line">        if (UrlUtils.isMatch(url, u)) &#123;</span><br><span class="line">            String category = u.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">            List&lt;URL&gt; categoryList = result.get(category);</span><br><span class="line">            if (categoryList == null) &#123;</span><br><span class="line">                categoryList = new ArrayList&lt;URL&gt;();</span><br><span class="line">                result.put(category, categoryList);</span><br><span class="line">            &#125;</span><br><span class="line">            categoryList.add(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (result.size() == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; categoryNotified = notified.get(url);</span><br><span class="line">    if (categoryNotified == null) &#123;</span><br><span class="line">        notified.putIfAbsent(url, new ConcurrentHashMap&lt;String, List&lt;URL&gt;&gt;());</span><br><span class="line">        categoryNotified = notified.get(url);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Map.Entry&lt;String, List&lt;URL&gt;&gt; entry : result.entrySet()) &#123;</span><br><span class="line">        String category = entry.getKey();</span><br><span class="line">        List&lt;URL&gt; categoryList = entry.getValue();</span><br><span class="line">        categoryNotified.put(category, categoryList);</span><br><span class="line">        saveProperties(url);</span><br><span class="line">        //执行RegistryDirectory的notify方法</span><br><span class="line">        listener.notify(categoryList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分类后的url，Map&lt;String, List<url>&gt; result示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    configurators=[</span><br><span class="line">        empty://10.10.10.10/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=configurators&amp;check=false</span><br><span class="line">        &amp;dubbo=2.0.0&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=25267&amp;side=consumer&amp;timestamp=1510225913509</span><br><span class="line">    ], </span><br><span class="line"></span><br><span class="line">    routers=[</span><br><span class="line">        empty://10.10.10.10/com.alibaba.dubbo.demo.DemoService?application=demo-consumer&amp;category=routers&amp;check=false&amp;dubbo=2.0.0</span><br><span class="line">        &amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=25267&amp;side=consumer&amp;timestamp=1510225913509</span><br><span class="line">    ], </span><br><span class="line"></span><br><span class="line">    providers=[</span><br><span class="line">        dubbo://10.211.55.5:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.7&amp;generic=false</span><br><span class="line">        &amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=318&amp;revision=2.5.7&amp;side=provider&amp;timestamp=1510225244315, </span><br><span class="line"></span><br><span class="line">        dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false</span><br><span class="line">        &amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=25215&amp;side=provider&amp;timestamp=1510225334486</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></url></p><h4 id="16、RegistryDirectory的notify方法"><a href="#16、RegistryDirectory的notify方法" class="headerlink" title="16、RegistryDirectory的notify方法"></a>16、RegistryDirectory的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void notify(List&lt;URL&gt; urls) &#123;</span><br><span class="line">    List&lt;URL&gt; invokerUrls = new ArrayList&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; routerUrls = new ArrayList&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; configuratorUrls = new ArrayList&lt;URL&gt;();</span><br><span class="line">    for (URL url : urls) &#123;</span><br><span class="line">        String protocol = url.getProtocol();</span><br><span class="line">        String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">        if (Constants.ROUTERS_CATEGORY.equals(category) </span><br><span class="line">                || Constants.ROUTE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            routerUrls.add(url);</span><br><span class="line">        &#125; else if (Constants.CONFIGURATORS_CATEGORY.equals(category) </span><br><span class="line">                || Constants.OVERRIDE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            configuratorUrls.add(url);</span><br><span class="line">        &#125; else if (Constants.PROVIDERS_CATEGORY.equals(category)) &#123;</span><br><span class="line">            invokerUrls.add(url);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.warn(&quot;Unsupported category &quot; + category + &quot; in notified url: &quot; + url + &quot; from registry &quot; + getUrl().getAddress() + &quot; to consumer &quot; + NetUtils.getLocalHost());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // configurators </span><br><span class="line">    if (configuratorUrls != null &amp;&amp; configuratorUrls.size() &gt;0 )&#123;</span><br><span class="line">        this.configurators = toConfigurators(configuratorUrls);</span><br><span class="line">    &#125;</span><br><span class="line">    // routers</span><br><span class="line">    if (routerUrls != null &amp;&amp; routerUrls.size() &gt;0 )&#123;</span><br><span class="line">        List&lt;Router&gt; routers = toRouters(routerUrls);</span><br><span class="line">        if(routers != null)&#123; // null - do nothing</span><br><span class="line">            setRouters(routers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Configurator&gt; localConfigurators = this.configurators; // local reference</span><br><span class="line">    // 合并override参数</span><br><span class="line">    this.overrideDirectoryUrl = directoryUrl;</span><br><span class="line">    if (localConfigurators != null &amp;&amp; localConfigurators.size() &gt; 0) &#123;</span><br><span class="line">        for (Configurator configurator : localConfigurators) &#123;</span><br><span class="line">            this.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // providers</span><br><span class="line">    refreshInvoker(invokerUrls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、RegistryDirectory的refreshInvoker方法"><a href="#17、RegistryDirectory的refreshInvoker方法" class="headerlink" title="17、RegistryDirectory的refreshInvoker方法"></a>17、RegistryDirectory的refreshInvoker方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private void refreshInvoker(List&lt;URL&gt; invokerUrls)&#123;</span><br><span class="line">    if (invokerUrls != null &amp;&amp; invokerUrls.size() == 1 &amp;&amp; invokerUrls.get(0) != null</span><br><span class="line">            &amp;&amp; Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) &#123;</span><br><span class="line">        this.forbidden = true; // 禁止访问</span><br><span class="line">        this.methodInvokerMap = null; // 置空列表</span><br><span class="line">        destroyAllInvokers(); // 关闭所有Invoker</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.forbidden = false; // 允许访问</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; oldUrlInvokerMap = this.urlInvokerMap; // local reference</span><br><span class="line">        if (invokerUrls.size() == 0 &amp;&amp; this.cachedInvokerUrls != null)&#123;</span><br><span class="line">            invokerUrls.addAll(this.cachedInvokerUrls);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.cachedInvokerUrls = new HashSet&lt;URL&gt;();</span><br><span class="line">            this.cachedInvokerUrls.addAll(invokerUrls);//缓存invokerUrls列表，便于交叉对比</span><br><span class="line">        &#125;</span><br><span class="line">        if (invokerUrls.size() ==0 )&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = toInvokers(invokerUrls) ;// 将URL列表转成Invoker列表</span><br><span class="line">        Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap); // 换方法名映射Invoker列表</span><br><span class="line">        // state change</span><br><span class="line">        //如果计算错误，则不进行处理.</span><br><span class="line">        if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0 )&#123;</span><br><span class="line">            logger.error(new IllegalStateException(&quot;urls to invokers error .invokerUrls.size :&quot;+invokerUrls.size() + &quot;, invoker.size :0. urls :&quot;+invokerUrls.toString()));</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        this.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap;</span><br><span class="line">        this.urlInvokerMap = newUrlInvokerMap;</span><br><span class="line">        try&#123;</span><br><span class="line">            destroyUnusedInvokers(oldUrlInvokerMap,newUrlInvokerMap); // 关闭未使用的Invoker</span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line">            logger.warn(&quot;destroyUnusedInvokers error. &quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、RegistryDirectory的toInvokers方法"><a href="#18、RegistryDirectory的toInvokers方法" class="headerlink" title="18、RegistryDirectory的toInvokers方法"></a>18、RegistryDirectory的toInvokers方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String, Invoker&lt;T&gt;&gt; toInvokers(List&lt;URL&gt; urls) &#123;</span><br><span class="line">    Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = new HashMap&lt;String, Invoker&lt;T&gt;&gt;();</span><br><span class="line">    if(urls == null || urls.size() == 0)&#123;</span><br><span class="line">        return newUrlInvokerMap;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; keys = new HashSet&lt;String&gt;();</span><br><span class="line">    String queryProtocols = this.queryMap.get(Constants.PROTOCOL_KEY);</span><br><span class="line">    for (URL providerUrl : urls) &#123;</span><br><span class="line">        //如果reference端配置了protocol，则只选择匹配的protocol</span><br><span class="line">        if (queryProtocols != null &amp;&amp; queryProtocols.length() &gt;0) &#123;</span><br><span class="line">            boolean accept = false;</span><br><span class="line">            String[] acceptProtocols = queryProtocols.split(&quot;,&quot;);</span><br><span class="line">            for (String acceptProtocol : acceptProtocols) &#123;</span><br><span class="line">                if (providerUrl.getProtocol().equals(acceptProtocol)) &#123;</span><br><span class="line">                    accept = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!accept) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (! ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) &#123;</span><br><span class="line">            logger.error(new IllegalStateException(&quot;Unsupported protocol &quot; + providerUrl.getProtocol() + &quot; in notified url: &quot; + providerUrl + &quot; from registry &quot; + getUrl().getAddress() + &quot; to consumer &quot; + NetUtils.getLocalHost() </span><br><span class="line">                    + &quot;, supported protocol: &quot;+ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        URL url = mergeUrl(providerUrl);</span><br><span class="line">        </span><br><span class="line">        String key = url.toFullString(); // URL参数是排序的</span><br><span class="line">        if (keys.contains(key)) &#123; // 重复URL</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        keys.add(key);</span><br><span class="line">        // 缓存key为没有合并消费端参数的URL，不管消费端如何合并参数，如果服务端URL发生变化，则重新refer</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; localUrlInvokerMap = this.urlInvokerMap; // local reference</span><br><span class="line">        Invoker&lt;T&gt; invoker = localUrlInvokerMap == null ? null : localUrlInvokerMap.get(key);</span><br><span class="line">        if (invoker == null) &#123; // 缓存中没有，重新refer</span><br><span class="line">            try &#123;</span><br><span class="line">                boolean enabled = true;</span><br><span class="line">                if (url.hasParameter(Constants.DISABLED_KEY)) &#123;</span><br><span class="line">                    enabled = ! url.getParameter(Constants.DISABLED_KEY, false);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    enabled = url.getParameter(Constants.ENABLED_KEY, true);</span><br><span class="line">                &#125;</span><br><span class="line">                if (enabled) &#123;</span><br><span class="line">                    //protocol是Protocol$Adaptive实例，依次执行listener、filter、DubboProtocol，返回DubboInvoker</span><br><span class="line">                    invoker = new InvokerDelegete&lt;T&gt;(protocol.refer(serviceType, url), url, providerUrl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.error(&quot;Failed to refer invoker for interface:&quot;+serviceType+&quot;,url:(&quot;+url+&quot;)&quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            if (invoker != null) &#123; // 将新的引用放入缓存</span><br><span class="line">                newUrlInvokerMap.put(key, invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            newUrlInvokerMap.put(key, invoker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    keys.clear();</span><br><span class="line">    return newUrlInvokerMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、DubboProtocol的refer方法"><a href="#19、DubboProtocol的refer方法" class="headerlink" title="19、DubboProtocol的refer方法"></a>19、DubboProtocol的refer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    public &lt;T&gt; Invoker&lt;T&gt; refer(Class&lt;T&gt; serviceType, URL url) throws RpcException &#123;</span><br><span class="line"></span><br><span class="line">    // modified by lishen</span><br><span class="line">    optimizeSerialization(url);</span><br><span class="line"></span><br><span class="line">    // create rpc invoker.</span><br><span class="line">    //创建DubboInvoker，getClients创建netty客户端</span><br><span class="line">    DubboInvoker&lt;T&gt; invoker = new DubboInvoker&lt;T&gt;(serviceType, url, getClients(url), invokers);</span><br><span class="line">    invokers.add(invoker);</span><br><span class="line">    return invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、DubboProtocol的getClients方法"><a href="#20、DubboProtocol的getClients方法" class="headerlink" title="20、DubboProtocol的getClients方法"></a>20、DubboProtocol的getClients方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private ExchangeClient[] getClients(URL url)&#123;</span><br><span class="line">    //是否共享连接</span><br><span class="line">    boolean service_share_connect = false;</span><br><span class="line">    int connections = url.getParameter(Constants.CONNECTIONS_KEY, 0);</span><br><span class="line">    //如果connections不配置，则共享连接，否则每服务每连接</span><br><span class="line">    if (connections == 0)&#123;</span><br><span class="line">        service_share_connect = true;</span><br><span class="line">        connections = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ExchangeClient[] clients = new ExchangeClient[connections];</span><br><span class="line">    for (int i = 0; i &lt; clients.length; i++) &#123;</span><br><span class="line">        if (service_share_connect)&#123;</span><br><span class="line">            //获取共享连接</span><br><span class="line">            clients[i] = getSharedClient(url);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //创建新连接</span><br><span class="line">            clients[i] = initClient(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return clients;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、DubboProtocol的getSharedClient方法"><a href="#21、DubboProtocol的getSharedClient方法" class="headerlink" title="21、DubboProtocol的getSharedClient方法"></a>21、DubboProtocol的getSharedClient方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private ExchangeClient getSharedClient(URL url)&#123;</span><br><span class="line">    String key = url.getAddress();</span><br><span class="line">    ReferenceCountExchangeClient client = referenceClientMap.get(key);</span><br><span class="line">    //使用已有连接</span><br><span class="line">    if ( client != null )&#123;</span><br><span class="line">        if ( !client.isClosed())&#123;</span><br><span class="line">            client.incrementAndGetCount();</span><br><span class="line">            return client;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">//          logger.warn(new IllegalStateException(&quot;client is closed,but stay in clientmap .client :&quot;+ client));</span><br><span class="line">            referenceClientMap.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建新连接</span><br><span class="line">    ExchangeClient exchagneclient = initClient(url);</span><br><span class="line">    </span><br><span class="line">    client = new ReferenceCountExchangeClient(exchagneclient, ghostClientMap);</span><br><span class="line">    referenceClientMap.put(key, client);</span><br><span class="line">    ghostClientMap.remove(key);</span><br><span class="line">    return client; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、DubboProtocol的initClient方法"><a href="#22、DubboProtocol的initClient方法" class="headerlink" title="22、DubboProtocol的initClient方法"></a>22、DubboProtocol的initClient方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private ExchangeClient initClient(URL url) &#123;</span><br><span class="line">    </span><br><span class="line">    // client type setting.</span><br><span class="line">    String str = url.getParameter(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_CLIENT));</span><br><span class="line"></span><br><span class="line">    String version = url.getParameter(Constants.DUBBO_VERSION_KEY);</span><br><span class="line">    boolean compatible = (version != null &amp;&amp; version.startsWith(&quot;1.0.&quot;));</span><br><span class="line">    url = url.addParameter(Constants.CODEC_KEY, Version.isCompatibleVersion() &amp;&amp; compatible ? COMPATIBLE_CODEC_NAME : DubboCodec.NAME);</span><br><span class="line">    //默认开启heartbeat</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class="line">    </span><br><span class="line">    // BIO存在严重性能问题，暂时不允许使用</span><br><span class="line">    if (str != null &amp;&amp; str.length() &gt; 0 &amp;&amp; ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) &#123;</span><br><span class="line">        throw new RpcException(&quot;Unsupported client type: &quot; + str + &quot;,&quot; +</span><br><span class="line">                &quot; supported client type is &quot; + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(), &quot; &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ExchangeClient client ;</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置连接应该是lazy的 </span><br><span class="line">        if (url.getParameter(Constants.LAZY_CONNECT_KEY, false))&#123;</span><br><span class="line">            client = new LazyConnectExchangeClient(url ,requestHandler);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //建立连接</span><br><span class="line">            client = Exchangers.connect(url ,requestHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Fail to create remoting client for service(&quot; + url</span><br><span class="line">                + &quot;): &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    return client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、Exchangers的connect方法"><a href="#23、Exchangers的connect方法" class="headerlink" title="23、Exchangers的connect方法"></a>23、Exchangers的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;handler == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, &quot;exchange&quot;);</span><br><span class="line">    //获取HeaderExchanger，执行connect方法</span><br><span class="line">    return getExchanger(url).connect(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、HeaderExchanger的connect方法"><a href="#24、HeaderExchanger的connect方法" class="headerlink" title="24、HeaderExchanger的connect方法"></a>24、HeaderExchanger的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    return new HeaderExchangeClient(Transporters.connect(url, new DecodeHandler(new HeaderExchangeHandler(handler))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、NettyTransporter的connect方法"><a href="#25、NettyTransporter的connect方法" class="headerlink" title="25、NettyTransporter的connect方法"></a>25、NettyTransporter的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Client connect(URL url, ChannelHandler listener) throws RemotingException &#123;</span><br><span class="line">    return new NettyClient(url, listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="26、实例化NettyClient"><a href="#26、实例化NettyClient" class="headerlink" title="26、实例化NettyClient"></a>26、实例化NettyClient</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NettyClient(final URL url, final ChannelHandler handler) throws RemotingException&#123;</span><br><span class="line">    super(url, wrapChannelHandler(url, handler));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public AbstractClient(URL url, ChannelHandler handler) throws RemotingException &#123;</span><br><span class="line">    super(url, handler);</span><br><span class="line">    </span><br><span class="line">    send_reconnect = url.getParameter(Constants.SEND_RECONNECT_KEY, false);</span><br><span class="line">    </span><br><span class="line">    shutdown_timeout = url.getParameter(Constants.SHUTDOWN_TIMEOUT_KEY, Constants.DEFAULT_SHUTDOWN_TIMEOUT);</span><br><span class="line">    </span><br><span class="line">    //默认重连间隔2s，1800表示1小时warning一次.</span><br><span class="line">    reconnect_warning_period = url.getParameter(&quot;reconnect.waring.period&quot;, 1800);</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        //创建客户端</span><br><span class="line">        doOpen();</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        close();</span><br><span class="line">        throw new RemotingException(url.toInetSocketAddress(), null, </span><br><span class="line">                                    &quot;Failed to start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress() </span><br><span class="line">                                    + &quot; connect to the server &quot; + getRemoteAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        // connect.</span><br><span class="line">        //建立连接</span><br><span class="line">        connect();</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress() + &quot; connect to the server &quot; + getRemoteAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RemotingException t) &#123;</span><br><span class="line">        if (url.getParameter(Constants.CHECK_KEY, true)) &#123;</span><br><span class="line">            close();</span><br><span class="line">            throw t;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.warn(&quot;Failed to start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress()</span><br><span class="line">                         + &quot; connect to the server &quot; + getRemoteAddress() + &quot; (check == false, ignore and retry later!), cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t)&#123;</span><br><span class="line">        close();</span><br><span class="line">        throw new RemotingException(url.toInetSocketAddress(), null, </span><br><span class="line">                &quot;Failed to start &quot; + getClass().getSimpleName() + &quot; &quot; + NetUtils.getLocalAddress() </span><br><span class="line">                + &quot; connect to the server &quot; + getRemoteAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    executor = (ExecutorService) ExtensionLoader.getExtensionLoader(DataStore.class)</span><br><span class="line">        .getDefaultExtension().get(Constants.CONSUMER_SIDE, Integer.toString(url.getPort()));</span><br><span class="line">    ExtensionLoader.getExtensionLoader(DataStore.class)</span><br><span class="line">        .getDefaultExtension().remove(Constants.CONSUMER_SIDE, Integer.toString(url.getPort()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="27、NettyClient的doOpen方法"><a href="#27、NettyClient的doOpen方法" class="headerlink" title="27、NettyClient的doOpen方法"></a>27、NettyClient的doOpen方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doOpen() throws Throwable &#123;</span><br><span class="line">    NettyHelper.setNettyLoggerFactory();</span><br><span class="line">    bootstrap = new ClientBootstrap(channelFactory);</span><br><span class="line">    // config</span><br><span class="line">    // @see org.jboss.netty.channel.socket.SocketChannelConfig</span><br><span class="line">    bootstrap.setOption(&quot;keepAlive&quot;, true);</span><br><span class="line">    bootstrap.setOption(&quot;tcpNoDelay&quot;, true);</span><br><span class="line">    bootstrap.setOption(&quot;connectTimeoutMillis&quot;, getTimeout());</span><br><span class="line">    final NettyHandler nettyHandler = new NettyHandler(getUrl(), this);</span><br><span class="line">    bootstrap.setPipelineFactory(new ChannelPipelineFactory() &#123;</span><br><span class="line">        public ChannelPipeline getPipeline() &#123;</span><br><span class="line">            NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyClient.this);</span><br><span class="line">            ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line">            pipeline.addLast(&quot;decoder&quot;, adapter.getDecoder());</span><br><span class="line">            pipeline.addLast(&quot;encoder&quot;, adapter.getEncoder());</span><br><span class="line">            pipeline.addLast(&quot;handler&quot;, nettyHandler);</span><br><span class="line">            return pipeline;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="28、接（一、26）AbstractClient的connect方法"><a href="#28、接（一、26）AbstractClient的connect方法" class="headerlink" title="28、接（一、26）AbstractClient的connect方法"></a>28、接（一、26）AbstractClient的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected void connect() throws RemotingException &#123;</span><br><span class="line">    connectLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        if (isConnected()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        initConnectStatusCheckCommand();</span><br><span class="line">        //建立连接</span><br><span class="line">        doConnect();</span><br><span class="line">        if (! isConnected()) &#123;</span><br><span class="line">            throw new RemotingException(this, &quot;Failed connect to server &quot; + getRemoteAddress() + &quot; from &quot; + getClass().getSimpleName() + &quot; &quot;</span><br><span class="line">                                        + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                        + &quot;, cause: Connect wait timeout: &quot; + getTimeout() + &quot;ms.&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (logger.isInfoEnabled())&#123;</span><br><span class="line">                logger.info(&quot;Successed connect to server &quot; + getRemoteAddress() + &quot; from &quot; + getClass().getSimpleName() + &quot; &quot;</span><br><span class="line">                                        + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                        + &quot;, channel is &quot; + this.getChannel());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reconnect_count.set(0);</span><br><span class="line">        reconnect_error_log_flag.set(false);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RemotingException(this, &quot;Failed connect to server &quot; + getRemoteAddress() + &quot; from &quot; + getClass().getSimpleName() + &quot; &quot;</span><br><span class="line">                                    + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                    + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        connectLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="29、NettyClient的doConnect方法"><a href="#29、NettyClient的doConnect方法" class="headerlink" title="29、NettyClient的doConnect方法"></a>29、NettyClient的doConnect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">protected void doConnect() throws Throwable &#123;</span><br><span class="line">    long start = System.currentTimeMillis();</span><br><span class="line">    //建立连接</span><br><span class="line">    ChannelFuture future = bootstrap.connect(getConnectAddress());</span><br><span class="line">    try&#123;</span><br><span class="line">        boolean ret = future.awaitUninterruptibly(getConnectTimeout(), TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        if (ret &amp;&amp; future.isSuccess()) &#123;</span><br><span class="line">            Channel newChannel = future.getChannel();</span><br><span class="line">            newChannel.setInterestOps(Channel.OP_READ_WRITE);</span><br><span class="line">            try &#123;</span><br><span class="line">                // 关闭旧的连接</span><br><span class="line">                Channel oldChannel = NettyClient.this.channel; // copy reference</span><br><span class="line">                if (oldChannel != null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                            logger.info(&quot;Close old netty channel &quot; + oldChannel + &quot; on create new netty channel &quot; + newChannel);</span><br><span class="line">                        &#125;</span><br><span class="line">                        oldChannel.close();</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        NettyChannel.removeChannelIfDisconnected(oldChannel);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (NettyClient.this.isClosed()) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                            logger.info(&quot;Close new netty channel &quot; + newChannel + &quot;, because the client closed.&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        newChannel.close();</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        NettyClient.this.channel = null;</span><br><span class="line">                        NettyChannel.removeChannelIfDisconnected(newChannel);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    NettyClient.this.channel = newChannel;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (future.getCause() != null) &#123;</span><br><span class="line">            throw new RemotingException(this, &quot;client(url: &quot; + getUrl() + &quot;) failed to connect to server &quot;</span><br><span class="line">                    + getRemoteAddress() + &quot;, error message is:&quot; + future.getCause().getMessage(), future.getCause());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RemotingException(this, &quot;client(url: &quot; + getUrl() + &quot;) failed to connect to server &quot;</span><br><span class="line">                    + getRemoteAddress() + &quot; client-side timeout &quot;</span><br><span class="line">                    + getConnectTimeout() + &quot;ms (elapsed: &quot; + (System.currentTimeMillis() - start) + &quot;ms) from netty client &quot;</span><br><span class="line">                    + NetUtils.getLocalHost() + &quot; using dubbo version &quot; + Version.getVersion());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">        if (! isConnected()) &#123;</span><br><span class="line">            future.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="30、接（一、24）实例化HeaderExchangeClient"><a href="#30、接（一、24）实例化HeaderExchangeClient" class="headerlink" title="30、接（一、24）实例化HeaderExchangeClient"></a>30、接（一、24）实例化HeaderExchangeClient</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public HeaderExchangeClient(Client client)&#123;</span><br><span class="line">    if (client == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;client == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.client = client;</span><br><span class="line">    this.channel = new HeaderExchangeChannel(client);</span><br><span class="line">    String dubbo = client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY);</span><br><span class="line">    this.heartbeat = client.getUrl().getParameter( Constants.HEARTBEAT_KEY, dubbo != null &amp;&amp; dubbo.startsWith(&quot;1.0.&quot;) ? Constants.DEFAULT_HEARTBEAT : 0 );</span><br><span class="line">    this.heartbeatTimeout = client.getUrl().getParameter( Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3 );</span><br><span class="line">    if ( heartbeatTimeout &lt; heartbeat * 2 ) &#123;</span><br><span class="line">        throw new IllegalStateException( &quot;heartbeatTimeout &lt; heartbeatInterval * 2&quot; );</span><br><span class="line">    &#125;</span><br><span class="line">    //启动心跳</span><br><span class="line">    startHeatbeatTimer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="31、HeaderExchangeClient的startHeatbeatTimer方法"><a href="#31、HeaderExchangeClient的startHeatbeatTimer方法" class="headerlink" title="31、HeaderExchangeClient的startHeatbeatTimer方法"></a>31、HeaderExchangeClient的startHeatbeatTimer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void startHeatbeatTimer() &#123;</span><br><span class="line">    stopHeartbeatTimer();</span><br><span class="line">    if ( heartbeat &gt; 0 ) &#123;</span><br><span class="line">        heatbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class="line">                //定时心跳，超时则重连</span><br><span class="line">                new HeartBeatTask( new HeartBeatTask.ChannelProvider() &#123;</span><br><span class="line">                    public Collection&lt;Channel&gt; getChannels() &#123;</span><br><span class="line">                        return Collections.&lt;Channel&gt;singletonList( HeaderExchangeClient.this );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, heartbeat, heartbeatTimeout),</span><br><span class="line">                heartbeat, heartbeat, TimeUnit.MILLISECONDS );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32、接（一、5）JavassistProxyFactory的getProxy方法"><a href="#32、接（一、5）JavassistProxyFactory的getProxy方法" class="headerlink" title="32、接（一、5）JavassistProxyFactory的getProxy方法"></a>32、接（一、5）JavassistProxyFactory的getProxy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public &lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line">    return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、服务调用"><a href="#二、服务调用" class="headerlink" title="二、服务调用"></a>二、服务调用</h3><h4 id="1、InvokerInvocationHandler的invoke方法"><a href="#1、InvokerInvocationHandler的invoke方法" class="headerlink" title="1、InvokerInvocationHandler的invoke方法"></a>1、InvokerInvocationHandler的invoke方法</h4><p>代理对象的拦截器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">    if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        return method.invoke(invoker, args);</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;toString&quot;.equals(methodName) &amp;&amp; parameterTypes.length == 0) &#123;</span><br><span class="line">        return invoker.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;hashCode&quot;.equals(methodName) &amp;&amp; parameterTypes.length == 0) &#123;</span><br><span class="line">        return invoker.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;equals&quot;.equals(methodName) &amp;&amp; parameterTypes.length == 1) &#123;</span><br><span class="line">        return invoker.equals(args[0]);</span><br><span class="line">    &#125;</span><br><span class="line">    //发起调用</span><br><span class="line">    return invoker.invoke(new RpcInvocation(method, args)).recreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、MockClusterInvoker的invoke方法"><a href="#2、MockClusterInvoker的invoke方法" class="headerlink" title="2、MockClusterInvoker的invoke方法"></a>2、MockClusterInvoker的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    Result result = null;</span><br><span class="line">    //根据配置的mock参数来做服务降级</span><br><span class="line">    String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim(); </span><br><span class="line">    //没有配置mock参数或者mock=false，则进行远程调用</span><br><span class="line">    if (value.length() == 0 || value.equalsIgnoreCase(&quot;false&quot;))&#123;</span><br><span class="line">        //no mock</span><br><span class="line">        result = this.invoker.invoke(invocation);</span><br><span class="line">    //配置了mock=force:return null，则直接返回null</span><br><span class="line">    &#125; else if (value.startsWith(&quot;force&quot;)) &#123;</span><br><span class="line">        if (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;force-mock: &quot; + invocation.getMethodName() + &quot; force-mock enabled , url : &quot; +  directory.getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        //force:direct mock</span><br><span class="line">        result = doMockInvoke(invocation, null);</span><br><span class="line">    //配置了mock=fail:return null，先进行远程调用，失败了在进行mock调用</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //fail-mock</span><br><span class="line">        try &#123;</span><br><span class="line">            result = this.invoker.invoke(invocation);</span><br><span class="line">        &#125;catch (RpcException e) &#123;</span><br><span class="line">            if (e.isBiz()) &#123;</span><br><span class="line">                throw e;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.info(&quot;fail-mock: &quot; + invocation.getMethodName() + &quot; fail-mock enabled , url : &quot; +  directory.getUrl(), e);</span><br><span class="line">                &#125;</span><br><span class="line">                result = doMockInvoke(invocation, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractClusterInvoker的invoke方法"><a href="#3、AbstractClusterInvoker的invoke方法" class="headerlink" title="3、AbstractClusterInvoker的invoke方法"></a>3、AbstractClusterInvoker的invoke方法</h4><p>FailoverClusterInvoker的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(final Invocation invocation) throws RpcException &#123;</span><br><span class="line"></span><br><span class="line">    checkWheatherDestoried();</span><br><span class="line"></span><br><span class="line">    LoadBalance loadbalance;</span><br><span class="line">    //获取invoker的集合，每个invoker对应一个服务</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = list(invocation);</span><br><span class="line">    if (invokers != null &amp;&amp; invokers.size() &gt; 0) &#123;</span><br><span class="line">        //获取负载均衡器,默认是RandomLoadBalance</span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl()</span><br><span class="line">                .getMethodParameter(invocation.getMethodName(),Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE);</span><br><span class="line">    &#125;</span><br><span class="line">    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line">    //发送请求</span><br><span class="line">    return doInvoke(invocation, invokers, loadbalance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、FailoverClusterInvoker的doInvoke方法"><a href="#4、FailoverClusterInvoker的doInvoke方法" class="headerlink" title="4、FailoverClusterInvoker的doInvoke方法"></a>4、FailoverClusterInvoker的doInvoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">public Result doInvoke(Invocation invocation, final List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance) throws RpcException &#123;</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; copyinvokers = invokers;</span><br><span class="line">    checkInvokers(copyinvokers, invocation);</span><br><span class="line">    //默认是2+1次</span><br><span class="line">    int len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + 1;</span><br><span class="line">    if (len &lt;= 0) &#123;</span><br><span class="line">        len = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // retry loop.</span><br><span class="line">    RpcException le = null; // last exception.</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invoked = new ArrayList&lt;Invoker&lt;T&gt;&gt;(copyinvokers.size()); // invoked invokers.</span><br><span class="line">    Set&lt;String&gt; providers = new HashSet&lt;String&gt;(len);</span><br><span class="line">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        //重试时，进行重新选择，避免重试时invoker列表已发生变化.</span><br><span class="line">        //注意：如果列表发生了变化，那么invoked判断会失效，因为invoker示例已经改变</span><br><span class="line">        if (i &gt; 0) &#123;</span><br><span class="line">            checkWheatherDestoried();</span><br><span class="line">            copyinvokers = list(invocation);</span><br><span class="line">            //重新检查一下</span><br><span class="line">            checkInvokers(copyinvokers, invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        //使用负载均衡器获取一个invoker</span><br><span class="line">        Invoker&lt;T&gt; invoker = select(loadbalance, invocation, copyinvokers, invoked);</span><br><span class="line">        invoked.add(invoker);</span><br><span class="line">        RpcContext.getContext().setInvokers((List)invoked);</span><br><span class="line">        try &#123;</span><br><span class="line">            //发送请求</span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            if (le != null &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(&quot;Although retry the method &quot; + invocation.getMethodName()</span><br><span class="line">                        + &quot; in the service &quot; + getInterface().getName()</span><br><span class="line">                        + &quot; was successful by the provider &quot; + invoker.getUrl().getAddress()</span><br><span class="line">                        + &quot;, but there have been failed providers &quot; + providers </span><br><span class="line">                        + &quot; (&quot; + providers.size() + &quot;/&quot; + copyinvokers.size()</span><br><span class="line">                        + &quot;) from the registry &quot; + directory.getUrl().getAddress()</span><br><span class="line">                        + &quot; on the consumer &quot; + NetUtils.getLocalHost()</span><br><span class="line">                        + &quot; using the dubbo version &quot; + Version.getVersion() + &quot;. Last error is: &quot;</span><br><span class="line">                        + le.getMessage(), le);</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125; catch (RpcException e) &#123;</span><br><span class="line">            if (e.isBiz()) &#123; // biz exception.</span><br><span class="line">                throw e;</span><br><span class="line">            &#125;</span><br><span class="line">            le = e;</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            le = new RpcException(e.getMessage(), e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            providers.add(invoker.getUrl().getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new RpcException(le != null ? le.getCode() : 0, &quot;Failed to invoke the method &quot;</span><br><span class="line">            + invocation.getMethodName() + &quot; in the service &quot; + getInterface().getName() </span><br><span class="line">            + &quot;. Tried &quot; + len + &quot; times of the providers &quot; + providers </span><br><span class="line">            + &quot; (&quot; + providers.size() + &quot;/&quot; + copyinvokers.size() </span><br><span class="line">            + &quot;) from the registry &quot; + directory.getUrl().getAddress()</span><br><span class="line">            + &quot; on the consumer &quot; + NetUtils.getLocalHost() + &quot; using the dubbo version &quot;</span><br><span class="line">            + Version.getVersion() + &quot;. Last error is: &quot;</span><br><span class="line">            + (le != null ? le.getMessage() : &quot;&quot;), le != null &amp;&amp; le.getCause() != null ? le.getCause() : le);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AbstractClusterInvoker的select方法"><a href="#5、AbstractClusterInvoker的select方法" class="headerlink" title="5、AbstractClusterInvoker的select方法"></a>5、AbstractClusterInvoker的select方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">protected Invoker&lt;T&gt; select(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected) throws RpcException &#123;</span><br><span class="line">    if (invokers == null || invokers.size() == 0)</span><br><span class="line">        return null;</span><br><span class="line">    String methodName = invocation == null ? &quot;&quot; : invocation.getMethodName();</span><br><span class="line">    </span><br><span class="line">    boolean sticky = invokers.get(0).getUrl().getMethodParameter(methodName,Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY) ;</span><br><span class="line">    &#123;</span><br><span class="line">        //ignore overloaded method</span><br><span class="line">        if ( stickyInvoker != null &amp;&amp; !invokers.contains(stickyInvoker) )&#123;</span><br><span class="line">            stickyInvoker = null;</span><br><span class="line">        &#125;</span><br><span class="line">        //ignore cucurrent problem</span><br><span class="line">        if (sticky &amp;&amp; stickyInvoker != null &amp;&amp; (selected == null || !selected.contains(stickyInvoker)))&#123;</span><br><span class="line">            if (availablecheck &amp;&amp; stickyInvoker.isAvailable())&#123;</span><br><span class="line">                return stickyInvoker;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //使用负载均衡器获取一个invoker</span><br><span class="line">    Invoker&lt;T&gt; invoker = doselect(loadbalance, invocation, invokers, selected);</span><br><span class="line">    </span><br><span class="line">    if (sticky)&#123;</span><br><span class="line">        stickyInvoker = invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    return invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractClusterInvoker的select方法"><a href="#6、AbstractClusterInvoker的select方法" class="headerlink" title="6、AbstractClusterInvoker的select方法"></a>6、AbstractClusterInvoker的select方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private Invoker&lt;T&gt; doselect(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected) throws RpcException &#123;</span><br><span class="line">    if (invokers == null || invokers.size() == 0)</span><br><span class="line">        return null;</span><br><span class="line">    if (invokers.size() == 1)</span><br><span class="line">        return invokers.get(0);</span><br><span class="line">    // 如果只有两个invoker，退化成轮循</span><br><span class="line">    if (invokers.size() == 2 &amp;&amp; selected != null &amp;&amp; selected.size() &gt; 0) &#123;</span><br><span class="line">        return selected.get(0) == invokers.get(0) ? invokers.get(1) : invokers.get(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用负载均衡器获取一个invoker</span><br><span class="line">    Invoker&lt;T&gt; invoker = loadbalance.select(invokers, getUrl(), invocation);</span><br><span class="line">    </span><br><span class="line">    //如果 selected中包含（优先判断） 或者 不可用&amp;&amp;availablecheck=true 则重试.</span><br><span class="line">    if( (selected != null &amp;&amp; selected.contains(invoker))</span><br><span class="line">            ||(!invoker.isAvailable() &amp;&amp; getUrl()!=null &amp;&amp; availablecheck))&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            //重选</span><br><span class="line">            Invoker&lt;T&gt; rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);</span><br><span class="line">            if(rinvoker != null)&#123;</span><br><span class="line">                invoker =  rinvoker;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //看下第一次选的位置，如果不是最后，选+1位置.</span><br><span class="line">                int index = invokers.indexOf(invoker);</span><br><span class="line">                try&#123;</span><br><span class="line">                    //最后在避免碰撞</span><br><span class="line">                    invoker = index &lt;invokers.size()-1?invokers.get(index+1) :invoker;</span><br><span class="line">                &#125;catch (Exception e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage()+&quot; may because invokers list dynamic change, ignore.&quot;,e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Throwable t)&#123;</span><br><span class="line">            logger.error(&quot;clustor relselect fail reason is :&quot;+t.getMessage() +&quot; if can not slove ,you can set cluster.availablecheck=false in url&quot;,t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（二、4）InvokerWrapper的invoke方法"><a href="#7、接（二、4）InvokerWrapper的invoke方法" class="headerlink" title="7、接（二、4）InvokerWrapper的invoke方法"></a>7、接（二、4）InvokerWrapper的invoke方法</h4><p>RegistryDirectory$InvokerDelegete的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    //最终调用DubboInvoker的invoke方法</span><br><span class="line">    return invoker.invoke(invocation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、AbstractInvoker的invoke方法"><a href="#8、AbstractInvoker的invoke方法" class="headerlink" title="8、AbstractInvoker的invoke方法"></a>8、AbstractInvoker的invoke方法</h4><p>DubboInvoker的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation inv) throws RpcException &#123;</span><br><span class="line">    if(destroyed) &#123;</span><br><span class="line">        throw new RpcException(&quot;Rpc invoker for service &quot; + this + &quot; on consumer &quot; + NetUtils.getLocalHost() </span><br><span class="line">                                        + &quot; use dubbo version &quot; + Version.getVersion()</span><br><span class="line">                                        + &quot; is DESTROYED, can not be invoked any more!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    RpcInvocation invocation = (RpcInvocation) inv;</span><br><span class="line">    invocation.setInvoker(this);</span><br><span class="line">    if (attachment != null &amp;&amp; attachment.size() &gt; 0) &#123;</span><br><span class="line">        invocation.addAttachmentsIfAbsent(attachment);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, String&gt; context = RpcContext.getContext().getAttachments();</span><br><span class="line">    if (context != null) &#123;</span><br><span class="line">        invocation.addAttachmentsIfAbsent(context);</span><br><span class="line">    &#125;</span><br><span class="line">    if (getUrl().getMethodParameter(invocation.getMethodName(), Constants.ASYNC_KEY, false))&#123;</span><br><span class="line">        invocation.setAttachment(Constants.ASYNC_KEY, Boolean.TRUE.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        //发起请求</span><br><span class="line">        return doInvoke(invocation);</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123; // biz exception</span><br><span class="line">        Throwable te = e.getTargetException();</span><br><span class="line">        if (te == null) &#123;</span><br><span class="line">            return new RpcResult(e);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (te instanceof RpcException) &#123;</span><br><span class="line">                ((RpcException) te).setCode(RpcException.BIZ_EXCEPTION);</span><br><span class="line">            &#125;</span><br><span class="line">            return new RpcResult(te);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RpcException e) &#123;</span><br><span class="line">        if (e.isBiz()) &#123;</span><br><span class="line">            return new RpcResult(e);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        return new RpcResult(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="9、DubboInvoker的doInvoke方法"><a href="#9、DubboInvoker的doInvoke方法" class="headerlink" title="9、DubboInvoker的doInvoke方法"></a>9、DubboInvoker的doInvoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Result doInvoke(final Invocation invocation) throws Throwable &#123;</span><br><span class="line">    RpcInvocation inv = (RpcInvocation) invocation;</span><br><span class="line">    final String methodName = RpcUtils.getMethodName(invocation);</span><br><span class="line">    inv.setAttachment(Constants.PATH_KEY, getUrl().getPath());</span><br><span class="line">    inv.setAttachment(Constants.VERSION_KEY, version);</span><br><span class="line">    </span><br><span class="line">    ExchangeClient currentClient;</span><br><span class="line">    if (clients.length == 1) &#123;</span><br><span class="line">        //单一长连接。默认</span><br><span class="line">        currentClient = clients[0];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        currentClient = clients[index.getAndIncrement() % clients.length];</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //是否异步</span><br><span class="line">        boolean isAsync = RpcUtils.isAsync(getUrl(), invocation);</span><br><span class="line">        //是否没有返回值</span><br><span class="line">        boolean isOneway = RpcUtils.isOneway(getUrl(), invocation);</span><br><span class="line">        int timeout = getUrl().getMethodParameter(methodName, Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT);</span><br><span class="line">        if (isOneway) &#123;</span><br><span class="line">            boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false);</span><br><span class="line">            currentClient.send(inv, isSent);</span><br><span class="line">            RpcContext.getContext().setFuture(null);</span><br><span class="line">            return new RpcResult();</span><br><span class="line">        &#125; else if (isAsync) &#123;</span><br><span class="line">            ResponseFuture future = currentClient.request(inv, timeout) ;</span><br><span class="line">            RpcContext.getContext().setFuture(new FutureAdapter&lt;Object&gt;(future));</span><br><span class="line">            return new RpcResult();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            RpcContext.getContext().setFuture(null);</span><br><span class="line">            //发起请求</span><br><span class="line">            return (Result) currentClient.request(inv, timeout).get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (TimeoutException e) &#123;</span><br><span class="line">        throw new RpcException(RpcException.TIMEOUT_EXCEPTION, &quot;Invoke remote method timeout. method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(RpcException.NETWORK_EXCEPTION, &quot;Failed to invoke remote method: &quot; + invocation.getMethodName() + &quot;, provider: &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、HeaderExchangeClient的request方法"><a href="#10、HeaderExchangeClient的request方法" class="headerlink" title="10、HeaderExchangeClient的request方法"></a>10、HeaderExchangeClient的request方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ResponseFuture request(Object request) throws RemotingException &#123;</span><br><span class="line">    return channel.request(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、HeaderExchangeChannel的request方法"><a href="#11、HeaderExchangeChannel的request方法" class="headerlink" title="11、HeaderExchangeChannel的request方法"></a>11、HeaderExchangeChannel的request方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public ResponseFuture request(Object request, int timeout) throws RemotingException &#123;</span><br><span class="line">    if (closed) &#123;</span><br><span class="line">        throw new RemotingException(this.getLocalAddress(), null, &quot;Failed to send request &quot; + request + &quot;, cause: The channel &quot; + this + &quot; is closed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // create request.</span><br><span class="line">    Request req = new Request();</span><br><span class="line">    req.setVersion(&quot;2.0.0&quot;);</span><br><span class="line">    req.setTwoWay(true);</span><br><span class="line">    req.setData(request);</span><br><span class="line">    DefaultFuture future = new DefaultFuture(channel, req, timeout);</span><br><span class="line">    try&#123;</span><br><span class="line">        //发送请求，channel为NettyClient</span><br><span class="line">        channel.send(req);</span><br><span class="line">    &#125;catch (RemotingException e) &#123;</span><br><span class="line">        future.cancel();</span><br><span class="line">        throw e;</span><br><span class="line">    &#125;</span><br><span class="line">    return future;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（二、2）MockClusterInvoker的doMockInvoke方法"><a href="#12、接（二、2）MockClusterInvoker的doMockInvoke方法" class="headerlink" title="12、接（二、2）MockClusterInvoker的doMockInvoke方法"></a>12、接（二、2）MockClusterInvoker的doMockInvoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">    private Result doMockInvoke(Invocation invocation,RpcException e)&#123;</span><br><span class="line">        Result result = null;</span><br><span class="line">        Invoker&lt;T&gt; minvoker ;</span><br><span class="line">        //获取mock类型的Invoker</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; mockInvokers = selectMockInvoker(invocation);</span><br><span class="line">        if (mockInvokers == null || mockInvokers.size() == 0)&#123;</span><br><span class="line">            //没有配置mock类型的Invoker，则创建一个MockInvoker</span><br><span class="line">            minvoker = (Invoker&lt;T&gt;) new MockInvoker(directory.getUrl());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            minvoker = mockInvokers.get(0);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            //执行MockInvoker的invoke(Invocation invocation)方法</span><br><span class="line">            result = minvoker.invoke(invocation);</span><br><span class="line">        &#125; catch (RpcException me) &#123;</span><br><span class="line">            if (me.isBiz()) &#123;</span><br><span class="line">                result = new RpcResult(me.getCause());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //非业务异常</span><br><span class="line">                throw new RpcException(me.getCode(), getMockExceptionMessage(e, me), me.getCause());</span><br><span class="line">            &#125;</span><br><span class="line">//          </span><br><span class="line">        &#125; catch (Throwable me) &#123;</span><br><span class="line">            throw new RpcException(getMockExceptionMessage(e, me), me.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="13、MockInvoker的invoke方法"><a href="#13、MockInvoker的invoke方法" class="headerlink" title="13、MockInvoker的invoke方法"></a>13、MockInvoker的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(Invocation invocation) throws RpcException &#123;</span><br><span class="line">    //获取mock配置</span><br><span class="line">    String mock = getUrl().getParameter(invocation.getMethodName()+&quot;.&quot;+Constants.MOCK_KEY);</span><br><span class="line">    if (invocation instanceof RpcInvocation) &#123;</span><br><span class="line">        ((RpcInvocation) invocation).setInvoker(this);</span><br><span class="line">    &#125;</span><br><span class="line">    if (StringUtils.isBlank(mock))&#123;</span><br><span class="line">        mock = getUrl().getParameter(Constants.MOCK_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (StringUtils.isBlank(mock))&#123;</span><br><span class="line">        throw new RpcException(new IllegalAccessException(&quot;mock can not be null. url :&quot; + url));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析mock</span><br><span class="line">    //mock=fail:throw -&gt; throw</span><br><span class="line">    //mock=fail:return -&gt; return</span><br><span class="line">    //mock=xx.Service -&gt; xx.ServiceMock</span><br><span class="line">    mock = normallizeMock(URL.decode(mock));</span><br><span class="line">    if (Constants.RETURN_PREFIX.trim().equalsIgnoreCase(mock.trim()))&#123;</span><br><span class="line">        RpcResult result = new RpcResult();</span><br><span class="line">        result.setValue(null);</span><br><span class="line">        return result;</span><br><span class="line">    &#125; else if (mock.startsWith(Constants.RETURN_PREFIX)) &#123;</span><br><span class="line">        mock = mock.substring(Constants.RETURN_PREFIX.length()).trim();</span><br><span class="line">        mock = mock.replace(&apos;`&apos;, &apos;&quot;&apos;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Type[] returnTypes = RpcUtils.getReturnTypes(invocation);</span><br><span class="line">            Object value = parseMockValue(mock, returnTypes);</span><br><span class="line">            return new RpcResult(value);</span><br><span class="line">        &#125; catch (Exception ew) &#123;</span><br><span class="line">            throw new RpcException(&quot;mock return invoke error. method :&quot; + invocation.getMethodName() + &quot;, mock:&quot; + mock + &quot;, url: &quot;+ url , ew);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (mock.startsWith(Constants.THROW_PREFIX)) &#123;</span><br><span class="line">        mock = mock.substring(Constants.THROW_PREFIX.length()).trim();</span><br><span class="line">        mock = mock.replace(&apos;`&apos;, &apos;&quot;&apos;);</span><br><span class="line">        if (StringUtils.isBlank(mock))&#123;</span><br><span class="line">            throw new RpcException(&quot; mocked exception for Service degradation. &quot;);</span><br><span class="line">        &#125; else &#123; //用户自定义类</span><br><span class="line">            Throwable t = getThrowable(mock);</span><br><span class="line">            throw new RpcException(RpcException.BIZ_EXCEPTION, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123; //impl mock</span><br><span class="line">         try &#123;</span><br><span class="line">             //获取包装mock的invoker</span><br><span class="line">             Invoker&lt;T&gt; invoker = getInvoker(mock);</span><br><span class="line">             return invoker.invoke(invocation);</span><br><span class="line">         &#125; catch (Throwable t) &#123;</span><br><span class="line">             throw new RpcException(&quot;Failed to create mock implemention class &quot; + mock , t);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、创建客户端&quot;&gt;&lt;a href=&quot;#一、创建客户端&quot; class=&quot;headerlink&quot; title=&quot;一、创建客户端&quot;&gt;&lt;/a&gt;一、创建客户端&lt;/h3&gt;&lt;h4 id=&quot;1、ReferenceBean的afterPropertiesSet方法&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>dubbo源码服务暴露</title>
    <link href="http://yoursite.com/2018/08/05/dubbo%E6%BA%90%E7%A0%81/dubbo%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/"/>
    <id>http://yoursite.com/2018/08/05/dubbo源码/dubbo源码服务暴露/</id>
    <published>2018-08-05T07:49:30.614Z</published>
    <updated>2018-08-05T07:49:10.616Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建ServiceBean"><a href="#一、创建ServiceBean" class="headerlink" title="一、创建ServiceBean"></a>一、创建ServiceBean</h3><h4 id="1、ServiceBean的setApplicationContext方法"><a href="#1、ServiceBean的setApplicationContext方法" class="headerlink" title="1、ServiceBean的setApplicationContext方法"></a>1、ServiceBean的setApplicationContext方法</h4><p>ServiceBean实现了ApplicationContextAware接口，创建bean时会执行setApplicationContext方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class="line">    //设置spring容器</span><br><span class="line">    this.applicationContext = applicationContext;</span><br><span class="line">    SpringExtensionFactory.addApplicationContext(applicationContext);</span><br><span class="line">    if (applicationContext != null) &#123;</span><br><span class="line">        SPRING_CONTEXT = applicationContext;</span><br><span class="line">        try &#123;</span><br><span class="line">            //将ServiceBean作为监听器设置到applicationContext中</span><br><span class="line">            Method method = applicationContext.getClass().getMethod(&quot;addApplicationListener&quot;, new Class&lt;?&gt;[]&#123;ApplicationListener.class&#125;); // 兼容Spring2.0.1</span><br><span class="line">            method.invoke(applicationContext, new Object[] &#123;this&#125;);</span><br><span class="line">            supportedApplicationListener = true;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            if (applicationContext instanceof AbstractApplicationContext) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Method method = AbstractApplicationContext.class.getDeclaredMethod(&quot;addListener&quot;, new Class&lt;?&gt;[]&#123;ApplicationListener.class&#125;); // 兼容Spring2.0.1</span><br><span class="line">                    if (! method.isAccessible()) &#123;</span><br><span class="line">                        method.setAccessible(true);</span><br><span class="line">                    &#125;</span><br><span class="line">                    method.invoke(applicationContext, new Object[] &#123;this&#125;);</span><br><span class="line">                    supportedApplicationListener = true;</span><br><span class="line">                &#125; catch (Throwable t2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ServiceBean的afterPropertiesSet方法"><a href="#2、ServiceBean的afterPropertiesSet方法" class="headerlink" title="2、ServiceBean的afterPropertiesSet方法"></a>2、ServiceBean的afterPropertiesSet方法</h4><p>ServiceBean实现了InitializingBean接口，创建bean时会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;deprecation&quot; &#125;)</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    //provider为null，即未配置&lt;dubbo:provider&gt;</span><br><span class="line">    if (getProvider() == null) &#123;</span><br><span class="line">        //获取applicationContext中的ProviderConfig的bean</span><br><span class="line">        Map&lt;String, ProviderConfig&gt; providerConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProviderConfig.class, false, false);</span><br><span class="line">        //存在providerConfig</span><br><span class="line">        if (providerConfigMap != null &amp;&amp; providerConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            //获取applicationContext中的ProtocolConfig的bean</span><br><span class="line">            Map&lt;String, ProtocolConfig&gt; protocolConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProtocolConfig.class, false, false);</span><br><span class="line">            //不存在protocolConfig</span><br><span class="line">            if ((protocolConfigMap == null || protocolConfigMap.size() == 0)</span><br><span class="line">                    &amp;&amp; providerConfigMap.size() &gt; 1) &#123; // 兼容旧版本</span><br><span class="line">                List&lt;ProviderConfig&gt; providerConfigs = new ArrayList&lt;ProviderConfig&gt;();</span><br><span class="line">                for (ProviderConfig config : providerConfigMap.values()) &#123;</span><br><span class="line">                    if (config.isDefault() != null &amp;&amp; config.isDefault().booleanValue()) &#123;</span><br><span class="line">                        providerConfigs.add(config);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (providerConfigs.size() &gt; 0) &#123;</span><br><span class="line">                    //将providerConfigs转换为ProtocolConfig设置为protocols</span><br><span class="line">                    setProviders(providerConfigs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ProviderConfig providerConfig = null;</span><br><span class="line">                for (ProviderConfig config : providerConfigMap.values()) &#123;</span><br><span class="line">                    if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                        if (providerConfig != null) &#123;</span><br><span class="line">                            throw new IllegalStateException(&quot;Duplicate provider configs: &quot; + providerConfig + &quot; and &quot; + config);</span><br><span class="line">                        &#125;</span><br><span class="line">                        providerConfig = config;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (providerConfig != null) &#123;</span><br><span class="line">                    //设置providerConfig</span><br><span class="line">                    setProvider(providerConfig);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //application为null，即未配置&lt;dubbo:application&gt;</span><br><span class="line">    if (getApplication() == null</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getApplication() == null)) &#123;</span><br><span class="line">        //获取applicationContext中的ApplicationConfig的bean</span><br><span class="line">        Map&lt;String, ApplicationConfig&gt; applicationConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ApplicationConfig.class, false, false);</span><br><span class="line">        if (applicationConfigMap != null &amp;&amp; applicationConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ApplicationConfig applicationConfig = null;</span><br><span class="line">            for (ApplicationConfig config : applicationConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (applicationConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate application configs: &quot; + applicationConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    applicationConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (applicationConfig != null) &#123;</span><br><span class="line">                //设置applicationConfig</span><br><span class="line">                setApplication(applicationConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //module为null，即未配置&lt;dubbo:module&gt;</span><br><span class="line">    if (getModule() == null</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getModule() == null)) &#123;</span><br><span class="line">        //获取applicationContext中的ModuleConfig的bean</span><br><span class="line">        Map&lt;String, ModuleConfig&gt; moduleConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ModuleConfig.class, false, false);</span><br><span class="line">        if (moduleConfigMap != null &amp;&amp; moduleConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            ModuleConfig moduleConfig = null;</span><br><span class="line">            for (ModuleConfig config : moduleConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (moduleConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate module configs: &quot; + moduleConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    moduleConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (moduleConfig != null) &#123;</span><br><span class="line">                //设置moduleConfig</span><br><span class="line">                setModule(moduleConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //registries为null，即未配置&lt;dubbo:registry&gt;</span><br><span class="line">    if ((getRegistries() == null || getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getRegistries() == null || getProvider().getRegistries().size() == 0)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getRegistries() == null || getApplication().getRegistries().size() == 0)) &#123;</span><br><span class="line">        //获取applicationContext中的RegistryConfig的bean</span><br><span class="line">        Map&lt;String, RegistryConfig&gt; registryConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, RegistryConfig.class, false, false);</span><br><span class="line">        if (registryConfigMap != null &amp;&amp; registryConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            List&lt;RegistryConfig&gt; registryConfigs = new ArrayList&lt;RegistryConfig&gt;();</span><br><span class="line">            for (RegistryConfig config : registryConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    registryConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (registryConfigs != null &amp;&amp; registryConfigs.size() &gt; 0) &#123;</span><br><span class="line">                //设置registryConfigs</span><br><span class="line">                super.setRegistries(registryConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //monitor为null，即未配置&lt;dubbo:monitor&gt;</span><br><span class="line">    if (getMonitor() == null</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getMonitor() == null)</span><br><span class="line">            &amp;&amp; (getApplication() == null || getApplication().getMonitor() == null)) &#123;</span><br><span class="line">        Map&lt;String, MonitorConfig&gt; monitorConfigMap = applicationContext == null ? null : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, MonitorConfig.class, false, false);</span><br><span class="line">        if (monitorConfigMap != null &amp;&amp; monitorConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            MonitorConfig monitorConfig = null;</span><br><span class="line">            for (MonitorConfig config : monitorConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    if (monitorConfig != null) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Duplicate monitor configs: &quot; + monitorConfig + &quot; and &quot; + config);</span><br><span class="line">                    &#125;</span><br><span class="line">                    monitorConfig = config;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (monitorConfig != null) &#123;</span><br><span class="line">                //设置monitorConfig</span><br><span class="line">                setMonitor(monitorConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //protocols为null，即未配置&lt;dubbo:protocol&gt;</span><br><span class="line">    if ((getProtocols() == null || getProtocols().size() == 0)</span><br><span class="line">            &amp;&amp; (getProvider() == null || getProvider().getProtocols() == null || getProvider().getProtocols().size() == 0)) &#123;</span><br><span class="line">        Map&lt;String, ProtocolConfig&gt; protocolConfigMap = applicationContext == null ? null  : BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProtocolConfig.class, false, false);</span><br><span class="line">        if (protocolConfigMap != null &amp;&amp; protocolConfigMap.size() &gt; 0) &#123;</span><br><span class="line">            List&lt;ProtocolConfig&gt; protocolConfigs = new ArrayList&lt;ProtocolConfig&gt;();</span><br><span class="line">            for (ProtocolConfig config : protocolConfigMap.values()) &#123;</span><br><span class="line">                if (config.isDefault() == null || config.isDefault().booleanValue()) &#123;</span><br><span class="line">                    protocolConfigs.add(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (protocolConfigs != null &amp;&amp; protocolConfigs.size() &gt; 0) &#123;</span><br><span class="line">                //设置protocolConfigs</span><br><span class="line">                super.setProtocols(protocolConfigs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置服务名称即beanName（interface属性）</span><br><span class="line">    if (getPath() == null || getPath().length() == 0) &#123;</span><br><span class="line">        if (beanName != null &amp;&amp; beanName.length() &gt; 0 </span><br><span class="line">                &amp;&amp; getInterface() != null &amp;&amp; getInterface().length() &gt; 0</span><br><span class="line">                &amp;&amp; beanName.startsWith(getInterface())) &#123;</span><br><span class="line">            setPath(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //不延迟立即暴露服务，延迟会在容器refreshed完成后暴露服务</span><br><span class="line">    if (! isDelay()) &#123;</span><br><span class="line">        export();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析以后的ServiceBean的属性如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">id = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">applicationContext = ClassPathXmlApplicationContext实例</span><br><span class="line">beanName = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">interfaceName = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">ref = DemoServiceImpl实例</span><br><span class="line">path = com.alibaba.dubbo.demo.DemoService</span><br><span class="line">  </span><br><span class="line">application:</span><br><span class="line">    -- id = demo-provider</span><br><span class="line">    -- name = demo-provider</span><br><span class="line"> </span><br><span class="line">registries = [</span><br><span class="line">    RegistryConfig:</span><br><span class="line">        -- id = com.alibaba.dubbo.config.RegistryConfig</span><br><span class="line">        -- protocol = zookeeper</span><br><span class="line">        - address = 10.211.55.5:2181</span><br><span class="line">        -- client = curator</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">protocols = [ </span><br><span class="line">    ProtocolConfig: </span><br><span class="line">        -- id = dubbo</span><br><span class="line">        -- name = dubbo</span><br><span class="line">        -- port = 20880    </span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="二、本地暴露"><a href="#二、本地暴露" class="headerlink" title="二、本地暴露"></a>二、本地暴露</h3><h4 id="1、ServiceConfig的export方法"><a href="#1、ServiceConfig的export方法" class="headerlink" title="1、ServiceConfig的export方法"></a>1、ServiceConfig的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void export() &#123;</span><br><span class="line">    if (provider != null) &#123;</span><br><span class="line">        if (export == null) &#123;</span><br><span class="line">            export = provider.getExport();</span><br><span class="line">        &#125;</span><br><span class="line">        if (delay == null) &#123;</span><br><span class="line">            delay = provider.getDelay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (export != null &amp;&amp; ! export.booleanValue()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //延时暴露</span><br><span class="line">    if (delay != null &amp;&amp; delay &gt; 0) &#123;</span><br><span class="line">        Thread thread = new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(delay);</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                doExport();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //由于是后台线程，则如果当前只有后台线程存在的情况下，JAVA虚拟机将退出，daemon线程也将结束</span><br><span class="line">        thread.setDaemon(true);</span><br><span class="line">        thread.setName(&quot;DelayExportServiceThread&quot;);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //暴露服务</span><br><span class="line">        doExport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、ServiceConfig的doExport方法"><a href="#2、ServiceConfig的doExport方法" class="headerlink" title="2、ServiceConfig的doExport方法"></a>2、ServiceConfig的doExport方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">protected synchronized void doExport() &#123;</span><br><span class="line">    //已经解除暴露</span><br><span class="line">    if (unexported) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Already unexported!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //已经暴露</span><br><span class="line">    if (exported) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    exported = true;</span><br><span class="line">    //interfaceName不能为空</span><br><span class="line">    if (interfaceName == null || interfaceName.length() == 0) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;&lt;dubbo:service interface=\&quot;\&quot; /&gt; interface not allow null!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //provider不存在，创建默认的ProviderConfig，并设置属性</span><br><span class="line">    checkDefault();</span><br><span class="line">    if (provider != null) &#123;</span><br><span class="line">        if (application == null) &#123;</span><br><span class="line">            application = provider.getApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        if (module == null) &#123;</span><br><span class="line">            module = provider.getModule();</span><br><span class="line">        &#125;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = provider.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = provider.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">        if (protocols == null) &#123;</span><br><span class="line">            protocols = provider.getProtocols();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (module != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = module.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = module.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (application != null) &#123;</span><br><span class="line">        if (registries == null) &#123;</span><br><span class="line">            registries = application.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        if (monitor == null) &#123;</span><br><span class="line">            monitor = application.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //ref是接口实现类引用，GenericService是泛接口</span><br><span class="line">    //这个方式主要用于服务器端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示</span><br><span class="line">    if (ref instanceof GenericService) &#123;</span><br><span class="line">        interfaceClass = GenericService.class;</span><br><span class="line">        if (StringUtils.isEmpty(generic)) &#123;</span><br><span class="line">            generic = Boolean.TRUE.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            interfaceClass = Class.forName(interfaceName, true, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">        checkRef();</span><br><span class="line">        generic = Boolean.FALSE.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    if(local !=null)&#123;</span><br><span class="line">        if(local==&quot;true&quot;)&#123;</span><br><span class="line">            local=interfaceName+&quot;Local&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; localClass;</span><br><span class="line">        try &#123;</span><br><span class="line">            localClass = ClassHelper.forNameWithThreadContextClassLoader(local);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        if(!interfaceClass.isAssignableFrom(localClass))&#123;</span><br><span class="line">            throw new IllegalStateException(&quot;The local implemention class &quot; + localClass.getName() + &quot; not implement interface &quot; + interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(stub !=null)&#123;</span><br><span class="line">        if(stub==&quot;true&quot;)&#123;</span><br><span class="line">            stub=interfaceName+&quot;Stub&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; stubClass;</span><br><span class="line">        try &#123;</span><br><span class="line">            stubClass = ClassHelper.forNameWithThreadContextClassLoader(stub);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            throw new IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        if(!interfaceClass.isAssignableFrom(stubClass))&#123;</span><br><span class="line">            throw new IllegalStateException(&quot;The stub implemention class &quot; + stubClass.getName() + &quot; not implement interface &quot; + interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //application为null,创建默认的ApplicationConfig，并设置属性</span><br><span class="line">    checkApplication();</span><br><span class="line">    //registries为null,创建默认的RegistryConfig，并设置属性</span><br><span class="line">    checkRegistry();</span><br><span class="line">    //protocols为null,创建默认的ProtocolConfig，并设置属性</span><br><span class="line">    checkProtocol();</span><br><span class="line">    //设置ServiceBean属性</span><br><span class="line">    appendProperties(this);</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line">    if (path == null || path.length() == 0) &#123;</span><br><span class="line">        path = interfaceName;</span><br><span class="line">    &#125;</span><br><span class="line">    //暴露服务</span><br><span class="line">    doExportUrls();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ServiceConfig的doExportUrls方法"><a href="#3、ServiceConfig的doExportUrls方法" class="headerlink" title="3、ServiceConfig的doExportUrls方法"></a>3、ServiceConfig的doExportUrls方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">private void doExportUrls() &#123;</span><br><span class="line">    //获取注册中心的配置</span><br><span class="line">    List&lt;URL&gt; registryURLs = loadRegistries(true);</span><br><span class="line">    //协议配置</span><br><span class="line">    for (ProtocolConfig protocolConfig : protocols) &#123;</span><br><span class="line">        //暴露服务</span><br><span class="line">        doExportUrlsFor1Protocol(protocolConfig, registryURLs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractInterfaceConfig的loadRegistries方法"><a href="#4、AbstractInterfaceConfig的loadRegistries方法" class="headerlink" title="4、AbstractInterfaceConfig的loadRegistries方法"></a>4、AbstractInterfaceConfig的loadRegistries方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;URL&gt; loadRegistries(boolean provider) &#123;</span><br><span class="line">    //registries不能为null</span><br><span class="line">    checkRegistry();</span><br><span class="line">    List&lt;URL&gt; registryList = new ArrayList&lt;URL&gt;();</span><br><span class="line">    if (registries != null &amp;&amp; registries.size() &gt; 0) &#123;</span><br><span class="line">        for (RegistryConfig config : registries) &#123;</span><br><span class="line">            //获取注册中心地址</span><br><span class="line">            String address = config.getAddress();</span><br><span class="line">            if (address == null || address.length() == 0) &#123;</span><br><span class="line">                address = Constants.ANYHOST_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            String sysaddress = System.getProperty(&quot;dubbo.registry.address&quot;);</span><br><span class="line">            if (sysaddress != null &amp;&amp; sysaddress.length() &gt; 0) &#123;</span><br><span class="line">                address = sysaddress;</span><br><span class="line">            &#125;</span><br><span class="line">            if (address != null &amp;&amp; address.length() &gt; 0 </span><br><span class="line">                    &amp;&amp; ! RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) &#123;</span><br><span class="line">                Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">                //获取application中的参数</span><br><span class="line">                appendParameters(map, application);</span><br><span class="line">                //获取config中的参数</span><br><span class="line">                appendParameters(map, config);</span><br><span class="line">                //设置path</span><br><span class="line">                map.put(&quot;path&quot;, RegistryService.class.getName());</span><br><span class="line">                //设置dubbo版本</span><br><span class="line">                map.put(&quot;dubbo&quot;, Version.getVersion());</span><br><span class="line">                //设置timestamp</span><br><span class="line">                map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">                //设置pid</span><br><span class="line">                if (ConfigUtils.getPid() &gt; 0) &#123;</span><br><span class="line">                    map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">                &#125;</span><br><span class="line">                //设置protocol</span><br><span class="line">                if (! map.containsKey(&quot;protocol&quot;)) &#123;</span><br><span class="line">                    if (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension(&quot;remote&quot;)) &#123;</span><br><span class="line">                        map.put(&quot;protocol&quot;, &quot;remote&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        map.put(&quot;protocol&quot;, &quot;dubbo&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //将map中的参数拼接到url中</span><br><span class="line">                List&lt;URL&gt; urls = UrlUtils.parseURLs(address, map);</span><br><span class="line">                for (URL url : urls) &#123;</span><br><span class="line">                    //url中添加registry参数</span><br><span class="line">                    url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());</span><br><span class="line">                    //设置protocol为registry</span><br><span class="line">                    url = url.setProtocol(Constants.REGISTRY_PROTOCOL);</span><br><span class="line">                    if ((provider &amp;&amp; url.getParameter(Constants.REGISTER_KEY, true))</span><br><span class="line">                            || (! provider &amp;&amp; url.getParameter(Constants.SUBSCRIBE_KEY, true))) &#123;</span><br><span class="line">                        //url加入registryList中</span><br><span class="line">                        registryList.add(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return registryList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法"><a href="#5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法" class="headerlink" title="5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法"></a>5、接（一、3）ServiceConfig的doExportUrlsFor1Protocol方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line">private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs) &#123;</span><br><span class="line">    //获取协议名，默认dubbo</span><br><span class="line">    String name = protocolConfig.getName();</span><br><span class="line">    if (name == null || name.length() == 0) &#123;</span><br><span class="line">        name = &quot;dubbo&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //从配置中获取host地址</span><br><span class="line">    String host = protocolConfig.getHost();</span><br><span class="line">    if (provider != null &amp;&amp; (host == null || host.length() == 0)) &#123;</span><br><span class="line">        host = provider.getHost();</span><br><span class="line">    &#125;</span><br><span class="line">    boolean anyhost = false;</span><br><span class="line">    //host不存在或无效</span><br><span class="line">    if (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">        anyhost = true;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取本机地址</span><br><span class="line">            host = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            logger.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        //host不存在或无效</span><br><span class="line">        if (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">            if (registryURLs != null &amp;&amp; registryURLs.size() &gt; 0) &#123;</span><br><span class="line">                for (URL registryURL : registryURLs) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Socket socket = new Socket();</span><br><span class="line">                        try &#123;</span><br><span class="line">                            SocketAddress addr = new InetSocketAddress(registryURL.getHost(), registryURL.getPort());</span><br><span class="line">                            //连接注册中心</span><br><span class="line">                            socket.connect(addr, 1000);</span><br><span class="line">                            //获取本机地址</span><br><span class="line">                            host = socket.getLocalAddress().getHostAddress();</span><br><span class="line">                            break;</span><br><span class="line">                        &#125; finally &#123;</span><br><span class="line">                            try &#123;</span><br><span class="line">                                socket.close();</span><br><span class="line">                            &#125; catch (Throwable e) &#123;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        logger.warn(e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">                //遍历本地网卡，返回第一个合理的IP</span><br><span class="line">                host = NetUtils.getLocalHost();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //从配置中获取端口</span><br><span class="line">    Integer port = protocolConfig.getPort();</span><br><span class="line">    if (provider != null &amp;&amp; (port == null || port == 0)) &#123;</span><br><span class="line">        port = provider.getPort();</span><br><span class="line">    &#125;</span><br><span class="line">    //获取DubboProtocol的默认端口20880</span><br><span class="line">    final int defaultPort = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(name).getDefaultPort();</span><br><span class="line">    if (port == null || port == 0) &#123;</span><br><span class="line">        port = defaultPort;</span><br><span class="line">    &#125;</span><br><span class="line">    //随机获取可用端口</span><br><span class="line">    if (port == null || port &lt;= 0) &#123;</span><br><span class="line">        port = getRandomPort(name);</span><br><span class="line">        if (port == null || port &lt; 0) &#123;</span><br><span class="line">            port = NetUtils.getAvailablePort(defaultPort);</span><br><span class="line">            putRandomPort(name, port);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.warn(&quot;Use random available port(&quot; + port + &quot;) for protocol &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">    //设置anyhost</span><br><span class="line">    if (anyhost) &#123;</span><br><span class="line">        map.put(Constants.ANYHOST_KEY, &quot;true&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置side为provider</span><br><span class="line">    map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);</span><br><span class="line">    //设置dubbo版本</span><br><span class="line">    map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());</span><br><span class="line">    //设置timestamp</span><br><span class="line">    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    //设置pid</span><br><span class="line">    if (ConfigUtils.getPid() &gt; 0) &#123;</span><br><span class="line">        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">    &#125;</span><br><span class="line">    //将配置属性加入map</span><br><span class="line">    appendParameters(map, application);</span><br><span class="line">    appendParameters(map, module);</span><br><span class="line">    appendParameters(map, provider, Constants.DEFAULT_KEY);</span><br><span class="line">    appendParameters(map, protocolConfig);</span><br><span class="line">    appendParameters(map, this);</span><br><span class="line">    if (methods != null &amp;&amp; methods.size() &gt; 0) &#123;</span><br><span class="line">        for (MethodConfig method : methods) &#123;</span><br><span class="line">            appendParameters(map, method, method.getName());</span><br><span class="line">            String retryKey = method.getName() + &quot;.retry&quot;;</span><br><span class="line">            if (map.containsKey(retryKey)) &#123;</span><br><span class="line">                String retryValue = map.remove(retryKey);</span><br><span class="line">                if (&quot;false&quot;.equals(retryValue)) &#123;</span><br><span class="line">                    map.put(method.getName() + &quot;.retries&quot;, &quot;0&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;ArgumentConfig&gt; arguments = method.getArguments();</span><br><span class="line">            if (arguments != null &amp;&amp; arguments.size() &gt; 0) &#123;</span><br><span class="line">                for (ArgumentConfig argument : arguments) &#123;</span><br><span class="line">                    //类型自动转换.</span><br><span class="line">                    if(argument.getType() != null &amp;&amp; argument.getType().length() &gt;0)&#123;</span><br><span class="line">                        Method[] methods = interfaceClass.getMethods();</span><br><span class="line">                        //遍历所有方法</span><br><span class="line">                        if(methods != null &amp;&amp; methods.length &gt; 0)&#123;</span><br><span class="line">                            for (int i = 0; i &lt; methods.length; i++) &#123;</span><br><span class="line">                                String methodName = methods[i].getName();</span><br><span class="line">                                //匹配方法名称，获取方法签名.</span><br><span class="line">                                if(methodName.equals(method.getName()))&#123;</span><br><span class="line">                                    Class&lt;?&gt;[] argtypes = methods[i].getParameterTypes();</span><br><span class="line">                                    //一个方法中单个callback</span><br><span class="line">                                    if (argument.getIndex() != -1 )&#123;</span><br><span class="line">                                        if (argtypes[argument.getIndex()].getName().equals(argument.getType()))&#123;</span><br><span class="line">                                            appendParameters(map, argument, method.getName() + &quot;.&quot; + argument.getIndex());</span><br><span class="line">                                        &#125;else &#123;</span><br><span class="line">                                            throw new IllegalArgumentException(&quot;argument config error : the index attribute and type attirbute not match :index :&quot;+argument.getIndex() + &quot;, type:&quot; + argument.getType());</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        //一个方法中多个callback</span><br><span class="line">                                        for (int j = 0 ;j&lt;argtypes.length ;j++) &#123;</span><br><span class="line">                                            Class&lt;?&gt; argclazz = argtypes[j];</span><br><span class="line">                                            if (argclazz.getName().equals(argument.getType()))&#123;</span><br><span class="line">                                                appendParameters(map, argument, method.getName() + &quot;.&quot; + j);</span><br><span class="line">                                                if (argument.getIndex() != -1 &amp;&amp; argument.getIndex() != j)&#123;</span><br><span class="line">                                                    throw new IllegalArgumentException(&quot;argument config error : the index attribute and type attirbute not match :index :&quot;+argument.getIndex() + &quot;, type:&quot; + argument.getType());</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;else if(argument.getIndex() != -1)&#123;</span><br><span class="line">                        appendParameters(map, argument, method.getName() + &quot;.&quot; + argument.getIndex());</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        throw new IllegalArgumentException(&quot;argument config must set index or type attribute.eg: &lt;dubbo:argument index=&apos;0&apos; .../&gt; or &lt;dubbo:argument type=xxx .../&gt;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; // end of methods for</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ProtocolUtils.isGeneric(generic)) &#123;</span><br><span class="line">        map.put(&quot;generic&quot;, generic);</span><br><span class="line">        map.put(&quot;methods&quot;, Constants.ANY_VALUE);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">        if (revision != null &amp;&amp; revision.length() &gt; 0) &#123;</span><br><span class="line">            map.put(&quot;revision&quot;, revision);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取接口中的方法</span><br><span class="line">        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">        if(methods.length == 0) &#123;</span><br><span class="line">            logger.warn(&quot;NO method found in service interface &quot; + interfaceClass.getName());</span><br><span class="line">            map.put(&quot;methods&quot;, Constants.ANY_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            map.put(&quot;methods&quot;, StringUtils.join(new HashSet&lt;String&gt;(Arrays.asList(methods)), &quot;,&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (! ConfigUtils.isEmpty(token)) &#123;</span><br><span class="line">        if (ConfigUtils.isDefault(token)) &#123;</span><br><span class="line">            map.put(&quot;token&quot;, UUID.randomUUID().toString());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            map.put(&quot;token&quot;, token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (&quot;injvm&quot;.equals(protocolConfig.getName())) &#123;</span><br><span class="line">        protocolConfig.setRegister(false);</span><br><span class="line">        map.put(&quot;notify&quot;, &quot;false&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 导出服务</span><br><span class="line">    String contextPath = protocolConfig.getContextpath();</span><br><span class="line">    if ((contextPath == null || contextPath.length() == 0) &amp;&amp; provider != null) &#123;</span><br><span class="line">        contextPath = provider.getContextpath();</span><br><span class="line">    &#125;</span><br><span class="line">    //创建注册中心地址</span><br><span class="line">    URL url = new URL(name, host, port, (contextPath == null || contextPath.length() == 0 ? &quot;&quot; : contextPath + &quot;/&quot;) + path, map);</span><br><span class="line"></span><br><span class="line">    if (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)</span><br><span class="line">            .hasExtension(url.getProtocol())) &#123;</span><br><span class="line">        url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)</span><br><span class="line">                .getExtension(url.getProtocol()).getConfigurator(url).configure(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String scope = url.getParameter(Constants.SCOPE_KEY);</span><br><span class="line">    //配置为none不暴露</span><br><span class="line">    if (! Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) &#123;</span><br><span class="line"></span><br><span class="line">        //配置不是remote的情况下做本地暴露 (配置为remote，则表示只暴露远程服务)</span><br><span class="line">        if (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) &#123;</span><br><span class="line">            exportLocal(url);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露远程服务)</span><br><span class="line">        if (! Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope) )&#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Export dubbo service &quot; + interfaceClass.getName() + &quot; to url &quot; + url);</span><br><span class="line">            &#125;</span><br><span class="line">            //注册中心配置不为空</span><br><span class="line">            if (registryURLs != null &amp;&amp; registryURLs.size() &gt; 0</span><br><span class="line">                    &amp;&amp; url.getParameter(&quot;register&quot;, true)) &#123;</span><br><span class="line">                for (URL registryURL : registryURLs) &#123;</span><br><span class="line">                    url = url.addParameterIfAbsent(&quot;dynamic&quot;, registryURL.getParameter(&quot;dynamic&quot;));</span><br><span class="line">                    URL monitorUrl = loadMonitor(registryURL);</span><br><span class="line">                    if (monitorUrl != null) &#123;</span><br><span class="line">                        url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                        logger.info(&quot;Register dubbo service &quot; + interfaceClass.getName() + &quot; url &quot; + url + &quot; to registry &quot; + registryURL);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //proxyFactory为ProxyFactory$Adaptive，最终执行JavassistProxyFactory的getInvoker方法</span><br><span class="line">                    //创建AbstractProxyInvoker，url默认使用&quot;UTF-8&quot;编码</span><br><span class="line">                    Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class="line">                    //protocol为Protocol$Adaptive，最终执行RegistryProtocol的export方法</span><br><span class="line">                    Exporter&lt;?&gt; exporter = protocol.export(invoker);</span><br><span class="line">                    exporters.add(exporter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);</span><br><span class="line">                //远程暴露</span><br><span class="line">                Exporter&lt;?&gt; exporter = protocol.export(invoker);</span><br><span class="line">                exporters.add(exporter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.urls.add(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、ServiceConfig的exportLocal方法"><a href="#6、ServiceConfig的exportLocal方法" class="headerlink" title="6、ServiceConfig的exportLocal方法"></a>6、ServiceConfig的exportLocal方法</h4><p>本地暴露，暴露在当前jvm中，相互调用不需要通过远程注册中心，但是又想使用filter链，可以使用本地暴露。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">private void exportLocal(URL url) &#123;</span><br><span class="line">    if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) &#123;</span><br><span class="line">        URL local = URL.valueOf(url.toFullString())</span><br><span class="line">                .setProtocol(Constants.LOCAL_PROTOCOL)</span><br><span class="line">                .setHost(NetUtils.LOCALHOST)</span><br><span class="line">                .setPort(0);</span><br><span class="line"></span><br><span class="line">        // modified by lishen</span><br><span class="line">        ServiceClassHolder.getInstance().pushServiceClass(getServiceClass(ref));</span><br><span class="line">        //protocol为Protocol$Adaptive</span><br><span class="line">        //依次调用ProtocolListenerWrapper、ProtocolFilterWrapper、InjvmProtocol的export方法</span><br><span class="line">        //返回被Listener监听器和Filter过滤器包裹以后的invoker</span><br><span class="line">        Exporter&lt;?&gt; exporter = protocol.export(</span><br><span class="line">                proxyFactory.getInvoker(ref, (Class) interfaceClass, local));</span><br><span class="line">        exporters.add(exporter);</span><br><span class="line">        logger.info(&quot;Export dubbo service &quot; + interfaceClass.getName() +&quot; to local registry&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>url示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=2999&amp;side=provider&amp;timestamp=1507005507343</span><br></pre></td></tr></table></figure></p><h4 id="7、InjvmProtocol的export方法"><a href="#7、InjvmProtocol的export方法" class="headerlink" title="7、InjvmProtocol的export方法"></a>7、InjvmProtocol的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; Exporter&lt;T&gt; export(Invoker&lt;T&gt; invoker) throws RpcException &#123;</span><br><span class="line">    return new InjvmExporter&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、远程暴露启动netty服务器"><a href="#三、远程暴露启动netty服务器" class="headerlink" title="三、远程暴露启动netty服务器"></a>三、远程暴露启动netty服务器</h3><h4 id="1、接（二、5）RegistryProtocol的export方法"><a href="#1、接（二、5）RegistryProtocol的export方法" class="headerlink" title="1、接（二、5）RegistryProtocol的export方法"></a>1、接（二、5）RegistryProtocol的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; Exporter&lt;T&gt; export(final Invoker&lt;T&gt; originInvoker) throws RpcException &#123;</span><br><span class="line">    //export invoker</span><br><span class="line">    //启动netty服务器</span><br><span class="line">    final ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);</span><br><span class="line">    //registry provider</span><br><span class="line">    //获取ZookeeperRegistry</span><br><span class="line">    final Registry registry = getRegistry(originInvoker);</span><br><span class="line">    //获取注册url</span><br><span class="line">    final URL registedProviderUrl = getRegistedProviderUrl(originInvoker);</span><br><span class="line">    registry.register(registedProviderUrl);</span><br><span class="line">    // 订阅override数据</span><br><span class="line">    // FIXME 提供者订阅时，会影响同一JVM即暴露服务，又引用同一服务的的场景，因为subscribed以服务名为缓存的key，导致订阅信息覆盖。</span><br><span class="line">    //获取overrideSubscribeUrl</span><br><span class="line">    final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registedProviderUrl);</span><br><span class="line">    //创建overrideSubscribeListener</span><br><span class="line">    final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl);</span><br><span class="line">    //将overrideSubscribeUrl:overrideSubscribeListener放入缓存</span><br><span class="line">    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    //订阅</span><br><span class="line">    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    //保证每次export都返回一个新的exporter实例</span><br><span class="line">    return new Exporter&lt;T&gt;() &#123;</span><br><span class="line">        public Invoker&lt;T&gt; getInvoker() &#123;</span><br><span class="line">            return exporter.getInvoker();</span><br><span class="line">        &#125;</span><br><span class="line">        public void unexport() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                exporter.unexport();</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.warn(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                registry.unregister(registedProviderUrl);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.warn(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                overrideListeners.remove(overrideSubscribeUrl);</span><br><span class="line">                registry.unsubscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.warn(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>originInvoker属性示例，url为解码后的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy： DemoServiceImpl实例</span><br><span class="line">type：  Class&lt;com.alibaba.dubbo.demo.DemoService&gt;</span><br><span class="line">url：   registry://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;client=curator</span><br><span class="line">        &amp;dubbo=2.0.0&amp;export=dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true</span><br><span class="line">        &amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService</span><br><span class="line">        &amp;methods=sayHello&amp;pid=887&amp;side=provider&amp;timestamp=1507096024334</span><br></pre></td></tr></table></figure></p><p>registedProviderUrl示例（解码后的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zookeeper://10.211.55.5:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;client=curator</span><br><span class="line">&amp;dubbo=2.0.0&amp;export=dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider</span><br><span class="line">&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=2791</span><br><span class="line">&amp;side=provider&amp;timestamp=1507262031554&amp;pid=2791&amp;timestamp=1507262031521</span><br></pre></td></tr></table></figure></p><p>overrideSubscribeUrl示例（解码后的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provider://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators</span><br><span class="line">&amp;check=false&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=5259&amp;side=provider</span><br><span class="line">&amp;timestamp=1507294508053</span><br></pre></td></tr></table></figure></p><h4 id="2、RegistryProtocol的doLocalExport方法"><a href="#2、RegistryProtocol的doLocalExport方法" class="headerlink" title="2、RegistryProtocol的doLocalExport方法"></a>2、RegistryProtocol的doLocalExport方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private &lt;T&gt; ExporterChangeableWrapper&lt;T&gt;  doLocalExport(final Invoker&lt;T&gt; originInvoker)&#123;</span><br><span class="line">    //根据originInvoker获取providerUrl</span><br><span class="line">    String key = getCacheKey(originInvoker);</span><br><span class="line">    ExporterChangeableWrapper&lt;T&gt; exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">    if (exporter == null) &#123;</span><br><span class="line">        synchronized (bounds) &#123;</span><br><span class="line">            exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">            if (exporter == null) &#123;</span><br><span class="line">                //存储originInvoker和providerUrl</span><br><span class="line">                final Invoker&lt;?&gt; invokerDelegete = new InvokerDelegete&lt;T&gt;(originInvoker, getProviderUrl(originInvoker));</span><br><span class="line">                //启动netty服务器，protocol为Protocol$Adaptive</span><br><span class="line">                //依次调用ProtocolListenerWrapper、ProtocolFilterWrapper、DubboProtocol的export方法</span><br><span class="line">                //返回被Listener监听器和Filter过滤器包裹以后的invoker</span><br><span class="line">                exporter = new ExporterChangeableWrapper&lt;T&gt;((Exporter&lt;T&gt;)protocol.export(invokerDelegete), originInvoker);</span><br><span class="line">                bounds.put(key, exporter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (ExporterChangeableWrapper&lt;T&gt;) exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InvokerDelegete属性示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">invoker:    originInvoker（AbstractProxyInvoker对象）</span><br><span class="line">InvokerWrapper.invoker： originInvoker（AbstractProxyInvoker对象）</span><br><span class="line">url：   providerUrl（dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider</span><br><span class="line">        &amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span><br><span class="line">        &amp;pid=1035&amp;side=provider&amp;timestamp=1507101286063）</span><br></pre></td></tr></table></figure></p><h4 id="3、DubboProtocol的export方法"><a href="#3、DubboProtocol的export方法" class="headerlink" title="3、DubboProtocol的export方法"></a>3、DubboProtocol的export方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; Exporter&lt;T&gt; export(Invoker&lt;T&gt; invoker) throws RpcException &#123;</span><br><span class="line"></span><br><span class="line">    URL url = invoker.getUrl();</span><br><span class="line">    </span><br><span class="line">    // export service.</span><br><span class="line">    //由url获取key，key的格式serviceGroup/serviceName:serviceVersion:port如com.alibaba.dubbo.demo.DemoService:20880</span><br><span class="line">    String key = serviceKey(url);</span><br><span class="line">    DubboExporter&lt;T&gt; exporter = new DubboExporter&lt;T&gt;(invoker, key, exporterMap);</span><br><span class="line">    exporterMap.put(key, exporter);</span><br><span class="line">    </span><br><span class="line">    //export an stub service for dispaching event</span><br><span class="line">    Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY,Constants.DEFAULT_STUB_EVENT);</span><br><span class="line">    Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, false);</span><br><span class="line">    if (isStubSupportEvent &amp;&amp; !isCallbackservice)&#123;</span><br><span class="line">        String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);</span><br><span class="line">        if (stubServiceMethods == null || stubServiceMethods.length() == 0 )&#123;</span><br><span class="line">            if (logger.isWarnEnabled())&#123;</span><br><span class="line">                logger.warn(new IllegalStateException(&quot;consumer [&quot; +url.getParameter(Constants.INTERFACE_KEY) +</span><br><span class="line">                        &quot;], has set stubproxy support event ,but no stub methods founded.&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动netty服务器</span><br><span class="line">    openServer(url);</span><br><span class="line"></span><br><span class="line">    // modified by lishen</span><br><span class="line">    optimizeSerialization(url);</span><br><span class="line"></span><br><span class="line">    return exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DubboExporter属性示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key：    com.alibaba.dubbo.demo.DemoService:20880</span><br><span class="line">invoker：    “InvokerDelegete的filter对象”</span><br><span class="line">exporterMap：&#123; &quot;com.alibaba.dubbo.demo.DemoService:20880&quot; -&gt; 当前的DubboExporter实例 &#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、DubboProtocol的openServer方法"><a href="#4、DubboProtocol的openServer方法" class="headerlink" title="4、DubboProtocol的openServer方法"></a>4、DubboProtocol的openServer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void openServer(URL url) &#123;</span><br><span class="line">    // find server.</span><br><span class="line">    //获取netty服务器地址</span><br><span class="line">    String key = url.getAddress();</span><br><span class="line">    //client 也可以暴露一个只有server可以调用的服务。</span><br><span class="line">    boolean isServer = url.getParameter(Constants.IS_SERVER_KEY,true);</span><br><span class="line">    if (isServer) &#123;</span><br><span class="line">        //从缓存里获取netty服务器</span><br><span class="line">        ExchangeServer server = serverMap.get(key);</span><br><span class="line">        if (server == null) &#123;</span><br><span class="line">            //创建并启动netty服务器</span><br><span class="line">            serverMap.put(key, createServer(url));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //server支持reset,配合override功能使用</span><br><span class="line">            server.reset(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DubboProtocol的createServer方法"><a href="#5、DubboProtocol的createServer方法" class="headerlink" title="5、DubboProtocol的createServer方法"></a>5、DubboProtocol的createServer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> private ExchangeServer createServer(URL url) &#123;</span><br><span class="line">    //添加参数channel.readonly.sent=true</span><br><span class="line">    //默认开启server关闭时发送readonly事件</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());</span><br><span class="line">    //默认开启heartbeat</span><br><span class="line">    //添加参数heartbeat=60000</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class="line">    String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);</span><br><span class="line"></span><br><span class="line">    if (str != null &amp;&amp; str.length() &gt; 0 &amp;&amp; ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))</span><br><span class="line">        throw new RpcException(&quot;Unsupported server type: &quot; + str + &quot;, url: &quot; + url);</span><br><span class="line">    //添加参数codec=dubbo</span><br><span class="line">    url = url.addParameter(Constants.CODEC_KEY, Version.isCompatibleVersion() ? COMPATIBLE_CODEC_NAME : DubboCodec.NAME);</span><br><span class="line">    ExchangeServer server;</span><br><span class="line">    try &#123;</span><br><span class="line">        //启动netty服务器，requestHandler为请求处理器</span><br><span class="line">        server = Exchangers.bind(url, requestHandler);</span><br><span class="line">    &#125; catch (RemotingException e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Fail to start server(url: &quot; + url + &quot;) &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取client参数</span><br><span class="line">    str = url.getParameter(Constants.CLIENT_KEY);</span><br><span class="line">    if (str != null &amp;&amp; str.length() &gt; 0) &#123;</span><br><span class="line">        Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();</span><br><span class="line">        if (!supportedTypes.contains(str)) &#123;</span><br><span class="line">            throw new RpcException(&quot;Unsupported client type: &quot; + str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Exchangers的bind方法"><a href="#6、Exchangers的bind方法" class="headerlink" title="6、Exchangers的bind方法"></a>6、Exchangers的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;handler == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, &quot;exchange&quot;);</span><br><span class="line">    //获取HeaderExchanger，执行bind方法</span><br><span class="line">    return getExchanger(url).bind(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、HeaderExchanger的bind方法"><a href="#7、HeaderExchanger的bind方法" class="headerlink" title="7、HeaderExchanger的bind方法"></a>7、HeaderExchanger的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException &#123;</span><br><span class="line">    return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、Transporters的bind方法"><a href="#8、Transporters的bind方法" class="headerlink" title="8、Transporters的bind方法"></a>8、Transporters的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static Server bind(URL url, ChannelHandler... handlers) throws RemotingException &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (handlers == null || handlers.length == 0) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;handlers == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    ChannelHandler handler;</span><br><span class="line">    if (handlers.length == 1) &#123;</span><br><span class="line">        handler = handlers[0];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        handler = new ChannelHandlerDispatcher(handlers);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取Transporter$Adaptive，最终执行NettyTransporter的bind方法</span><br><span class="line">    return getTransporter().bind(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、NettyTransporter的bind方法"><a href="#9、NettyTransporter的bind方法" class="headerlink" title="9、NettyTransporter的bind方法"></a>9、NettyTransporter的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Server bind(URL url, ChannelHandler listener) throws RemotingException &#123;</span><br><span class="line">    //创建netty服务器</span><br><span class="line">    return new NettyServer(url, listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、实例化NettyServer"><a href="#10、实例化NettyServer" class="headerlink" title="10、实例化NettyServer"></a>10、实例化NettyServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NettyServer(URL url, ChannelHandler handler) throws RemotingException&#123;</span><br><span class="line">    super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NettyServer的父类AbstractServer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public AbstractServer(URL url, ChannelHandler handler) throws RemotingException &#123;</span><br><span class="line">    super(url, handler);</span><br><span class="line">    //本机地址</span><br><span class="line">    localAddress = getUrl().toInetSocketAddress();</span><br><span class="line">    String host = url.getParameter(Constants.ANYHOST_KEY, false) </span><br><span class="line">                    || NetUtils.isInvalidLocalHost(getUrl().getHost()) </span><br><span class="line">                    ? NetUtils.ANYHOST : getUrl().getHost();</span><br><span class="line">    //netty服务器绑定地址</span><br><span class="line">    bindAddress = new InetSocketAddress(host, getUrl().getPort());</span><br><span class="line">    this.accepts = url.getParameter(Constants.ACCEPTS_KEY, Constants.DEFAULT_ACCEPTS);</span><br><span class="line">    this.idleTimeout = url.getParameter(Constants.IDLE_TIMEOUT_KEY, Constants.DEFAULT_IDLE_TIMEOUT);</span><br><span class="line">    try &#123;</span><br><span class="line">        //启动服务</span><br><span class="line">        doOpen();</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Start &quot; + getClass().getSimpleName() + &quot; bind &quot; + getBindAddress() + &quot;, export &quot; + getLocalAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        throw new RemotingException(url.toInetSocketAddress(), null, &quot;Failed to bind &quot; + getClass().getSimpleName() </span><br><span class="line">                                    + &quot; on &quot; + getLocalAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">    //从SimpleDataStore中获取线程池</span><br><span class="line">    executor = (ExecutorService) ExtensionLoader.getExtensionLoader(DataStore.class)</span><br><span class="line">            .getDefaultExtension().get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="11、NettyServer的doOpen方法"><a href="#11、NettyServer的doOpen方法" class="headerlink" title="11、NettyServer的doOpen方法"></a>11、NettyServer的doOpen方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doOpen() throws Throwable &#123;</span><br><span class="line">    NettyHelper.setNettyLoggerFactory();</span><br><span class="line">    //创建工作线程池</span><br><span class="line">    ExecutorService boss = Executors.newCachedThreadPool(new NamedThreadFactory(&quot;NettyServerBoss&quot;, true));</span><br><span class="line">    ExecutorService worker = Executors.newCachedThreadPool(new NamedThreadFactory(&quot;NettyServerWorker&quot;, true));</span><br><span class="line">    //channel工厂</span><br><span class="line">    ChannelFactory channelFactory = new NioServerSocketChannelFactory(boss, worker, getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS));</span><br><span class="line">    //创建ServerBootstrap对象</span><br><span class="line">    bootstrap = new ServerBootstrap(channelFactory);</span><br><span class="line">    //服务器处理器</span><br><span class="line">    final NettyHandler nettyHandler = new NettyHandler(getUrl(), this);</span><br><span class="line">    channels = nettyHandler.getChannels();</span><br><span class="line">    // https://issues.jboss.org/browse/NETTY-365</span><br><span class="line">    // https://issues.jboss.org/browse/NETTY-379</span><br><span class="line">    // final Timer timer = new HashedWheelTimer(new NamedThreadFactory(&quot;NettyIdleTimer&quot;, true));</span><br><span class="line">    //设置pipeline工厂</span><br><span class="line">    bootstrap.setPipelineFactory(new ChannelPipelineFactory() &#123;</span><br><span class="line">        public ChannelPipeline getPipeline() &#123;</span><br><span class="line">            NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec() ,getUrl(), NettyServer.this);</span><br><span class="line">            ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line">            /*int idleTimeout = getIdleTimeout();</span><br><span class="line">            if (idleTimeout &gt; 10000) &#123;</span><br><span class="line">                pipeline.addLast(&quot;timer&quot;, new IdleStateHandler(timer, idleTimeout / 1000, 0, 0));</span><br><span class="line">            &#125;*/</span><br><span class="line">            pipeline.addLast(&quot;decoder&quot;, adapter.getDecoder());</span><br><span class="line">            pipeline.addLast(&quot;encoder&quot;, adapter.getEncoder());</span><br><span class="line">            pipeline.addLast(&quot;handler&quot;, nettyHandler);</span><br><span class="line">            return pipeline;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    // bind</span><br><span class="line">    //netty服务器绑定端口</span><br><span class="line">    channel = bootstrap.bind(getBindAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、接（三、7）实例化HeaderExchangeServer"><a href="#12、接（三、7）实例化HeaderExchangeServer" class="headerlink" title="12、接（三、7）实例化HeaderExchangeServer"></a>12、接（三、7）实例化HeaderExchangeServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public HeaderExchangeServer(Server server) &#123;</span><br><span class="line">    if (server == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;server == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //NettyServer</span><br><span class="line">    this.server = server;</span><br><span class="line">    //获取心跳时间间隔&quot;heartbeat&quot;</span><br><span class="line">    this.heartbeat = server.getUrl().getParameter(Constants.HEARTBEAT_KEY, 0);</span><br><span class="line">    //获取心跳超时时间&quot;heartbeat.timeout&quot;</span><br><span class="line">    this.heartbeatTimeout = server.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3);</span><br><span class="line">    if (heartbeatTimeout &lt; heartbeat * 2) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;heartbeatTimeout &lt; heartbeatInterval * 2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //启动心跳计时器</span><br><span class="line">    startHeatbeatTimer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、HeaderExchangeServer的startHeatbeatTimer方法"><a href="#13、HeaderExchangeServer的startHeatbeatTimer方法" class="headerlink" title="13、HeaderExchangeServer的startHeatbeatTimer方法"></a>13、HeaderExchangeServer的startHeatbeatTimer方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void startHeatbeatTimer() &#123;</span><br><span class="line">    //关闭计时器</span><br><span class="line">    stopHeartbeatTimer();</span><br><span class="line">    if (heartbeat &gt; 0) &#123;</span><br><span class="line">        //启动计时器</span><br><span class="line">        heatbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class="line">                new HeartBeatTask( new HeartBeatTask.ChannelProvider() &#123;</span><br><span class="line">                    public Collection&lt;Channel&gt; getChannels() &#123;</span><br><span class="line">                        //获取已经来凝结服务器的channel</span><br><span class="line">                        return Collections.unmodifiableCollection(</span><br><span class="line">                                HeaderExchangeServer.this.getChannels() );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, heartbeat, heartbeatTimeout),</span><br><span class="line">                heartbeat, heartbeat,TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、HeartBeatTask的run方法"><a href="#14、HeartBeatTask的run方法" class="headerlink" title="14、HeartBeatTask的run方法"></a>14、HeartBeatTask的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        long now = System.currentTimeMillis();</span><br><span class="line">        //遍历channel</span><br><span class="line">        for ( Channel channel : channelProvider.getChannels() ) &#123;</span><br><span class="line">            //channel已关闭则不处理</span><br><span class="line">            if (channel.isClosed()) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                //最后一次读的时间</span><br><span class="line">                Long lastRead = ( Long ) channel.getAttribute(</span><br><span class="line">                        HeaderExchangeHandler.KEY_READ_TIMESTAMP );</span><br><span class="line">                //最后一次写的时间</span><br><span class="line">                Long lastWrite = ( Long ) channel.getAttribute(</span><br><span class="line">                        HeaderExchangeHandler.KEY_WRITE_TIMESTAMP );</span><br><span class="line">                //最后一次读和写在heartbeat时间（60s）内，则最后一次的读和写本身可以看作心跳</span><br><span class="line">                //否则，需要程序发送心跳</span><br><span class="line">                if ( ( lastRead != null &amp;&amp; now - lastRead &gt; heartbeat )</span><br><span class="line">                        || ( lastWrite != null &amp;&amp; now - lastWrite &gt; heartbeat ) ) &#123;</span><br><span class="line">                    Request req = new Request();</span><br><span class="line">                    req.setVersion( &quot;2.0.0&quot; );</span><br><span class="line">                    req.setTwoWay( true );</span><br><span class="line">                    req.setEvent( Request.HEARTBEAT_EVENT );</span><br><span class="line">                    //发送心跳信息</span><br><span class="line">                    channel.send( req );</span><br><span class="line">                    if ( logger.isDebugEnabled() ) &#123;</span><br><span class="line">                        logger.debug( &quot;Send heartbeat to remote channel &quot; + channel.getRemoteAddress()</span><br><span class="line">                                              + &quot;, cause: The channel has no data-transmission exceeds a heartbeat period: &quot; + heartbeat + &quot;ms&quot; );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //最后一次读的时间距离现在已经超过heartbeatTimeout了，</span><br><span class="line">                //则认为channel已经断了（因为在这个过程中，发送了至少三次心跳都没反应），此时channel进行重连</span><br><span class="line">                if ( lastRead != null &amp;&amp; now - lastRead &gt; heartbeatTimeout ) &#123;</span><br><span class="line">                    logger.warn( &quot;Close channel &quot; + channel</span><br><span class="line">                                         + &quot;, because heartbeat read idle time out: &quot; + heartbeatTimeout + &quot;ms&quot; );</span><br><span class="line">                    if (channel instanceof Client) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            ((Client)channel).reconnect();</span><br><span class="line">                        &#125;catch (Exception e) &#123;</span><br><span class="line">                            //do nothing</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        channel.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch ( Throwable t ) &#123;</span><br><span class="line">                logger.warn( &quot;Exception when heartbeat to remote channel &quot; + channel.getRemoteAddress(), t );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch ( Throwable t ) &#123;</span><br><span class="line">        logger.warn( &quot;Unhandled exception when heartbeat, cause: &quot; + t.getMessage(), t );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、远程暴露注册、订阅服务到zookeeper"><a href="#四、远程暴露注册、订阅服务到zookeeper" class="headerlink" title="四、远程暴露注册、订阅服务到zookeeper"></a>四、远程暴露注册、订阅服务到zookeeper</h3><h4 id="1、接（三、1）RegistryProtocol的getRegistry方法"><a href="#1、接（三、1）RegistryProtocol的getRegistry方法" class="headerlink" title="1、接（三、1）RegistryProtocol的getRegistry方法"></a>1、接（三、1）RegistryProtocol的getRegistry方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private Registry getRegistry(final Invoker&lt;?&gt; originInvoker)&#123;</span><br><span class="line">    URL registryUrl = originInvoker.getUrl();</span><br><span class="line">    if (Constants.REGISTRY_PROTOCOL.equals(registryUrl.getProtocol())) &#123;</span><br><span class="line">        String protocol = registryUrl.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_DIRECTORY);</span><br><span class="line">        registryUrl = registryUrl.setProtocol(protocol).removeParameter(Constants.REGISTRY_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    //RegistryFactory$Adaptive的getRegistry方法，执行ZookeeperRegistryFactory的getRegistry方法</span><br><span class="line">    //获取ZookeeperRegistry</span><br><span class="line">    return registryFactory.getRegistry(registryUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化ZookeeperRegistry"><a href="#2、实例化ZookeeperRegistry" class="headerlink" title="2、实例化ZookeeperRegistry"></a>2、实例化ZookeeperRegistry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) &#123;</span><br><span class="line">    super(url);</span><br><span class="line">    if (url.isAnyHost()) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;registry address == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);</span><br><span class="line">    if (! group.startsWith(Constants.PATH_SEPARATOR)) &#123;</span><br><span class="line">        group = Constants.PATH_SEPARATOR + group;</span><br><span class="line">    &#125;</span><br><span class="line">    // &quot;/dubbo&quot;</span><br><span class="line">    this.root = group;</span><br><span class="line">    //创建zk客户端，启动会话,返回CuratorZookeeperClient</span><br><span class="line">    zkClient = zookeeperTransporter.connect(url);</span><br><span class="line">    //监听重新连接成功事件，重新连接成功后，之前已经完成注册和订阅的url要重新进行注册和订阅</span><br><span class="line">    zkClient.addStateListener(new StateListener() &#123;</span><br><span class="line">        public void stateChanged(int state) &#123;</span><br><span class="line">            if (state == RECONNECTED) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    recover();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    logger.error(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化FailbackRegistry（失败重试）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public FailbackRegistry(URL url) &#123;</span><br><span class="line">    super(url);</span><br><span class="line">    //重连间隔</span><br><span class="line">    int retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);</span><br><span class="line">    this.retryFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            // 检测并连接注册中心</span><br><span class="line">            try &#123;</span><br><span class="line">                retry();</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 防御性容错</span><br><span class="line">                logger.error(&quot;Unexpected error occur at failed retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例化AbstractRegistry（维护缓存文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public AbstractRegistry(URL url) &#123;</span><br><span class="line">    setUrl(url);</span><br><span class="line">    // 启动文件保存定时器</span><br><span class="line">    syncSaveFile = url.getParameter(Constants.REGISTRY_FILESAVE_SYNC_KEY, false);</span><br><span class="line">    String filename = url.getParameter(Constants.FILE_KEY, System.getProperty(&quot;user.home&quot;) + &quot;/.dubbo/dubbo-registry-&quot; + url.getHost() + &quot;.cache&quot;);</span><br><span class="line">    File file = null;</span><br><span class="line">    if (ConfigUtils.isNotEmpty(filename)) &#123;</span><br><span class="line">        file = new File(filename);</span><br><span class="line">        if(! file.exists() &amp;&amp; file.getParentFile() != null &amp;&amp; ! file.getParentFile().exists())&#123;</span><br><span class="line">            if(! file.getParentFile().mkdirs())&#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;Invalid registry store file &quot; + file + &quot;, cause: Failed to create directory &quot; + file.getParentFile() + &quot;!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.file = file;</span><br><span class="line">    //加载properties文件</span><br><span class="line">    loadProperties();</span><br><span class="line">    notify(url.getBackupUrls());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、FailbackRegistry的retry方法"><a href="#3、FailbackRegistry的retry方法" class="headerlink" title="3、FailbackRegistry的retry方法"></a>3、FailbackRegistry的retry方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">// 重试失败的动作</span><br><span class="line">protected void retry() &#123;</span><br><span class="line">    //将注册失败的url（failedRegistered中的url）进行注册，之后从failedRegistered进行移除；</span><br><span class="line">    if (! failedRegistered.isEmpty()) &#123;</span><br><span class="line">        Set&lt;URL&gt; failed = new HashSet&lt;URL&gt;(failedRegistered);</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry register &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (URL url : failed) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        doRegister(url);</span><br><span class="line">                        failedRegistered.remove(url);</span><br><span class="line">                    &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                        logger.warn(&quot;Failed to retry register &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry register &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将取消注册失败的url（failedUnregistered中的url）进行取消注册，之后从failedUnregistered进行移除；</span><br><span class="line">    if(! failedUnregistered.isEmpty()) &#123;</span><br><span class="line">        Set&lt;URL&gt; failed = new HashSet&lt;URL&gt;(failedUnregistered);</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry unregister &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (URL url : failed) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        doUnregister(url);</span><br><span class="line">                        failedUnregistered.remove(url);</span><br><span class="line">                    &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                        logger.warn(&quot;Failed to retry unregister  &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry unregister  &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将订阅失败的url（failedSubscribed中的url）进行重新订阅，之后从failedSubscribed进行移除；</span><br><span class="line">    if (! failedSubscribed.isEmpty()) &#123;</span><br><span class="line">        Map&lt;URL, Set&lt;NotifyListener&gt;&gt; failed = new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failedSubscribed);</span><br><span class="line">        for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failed).entrySet()) &#123;</span><br><span class="line">            if (entry.getValue() == null || entry.getValue().size() == 0) &#123;</span><br><span class="line">                failed.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry subscribe &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : failed.entrySet()) &#123;</span><br><span class="line">                    URL url = entry.getKey();</span><br><span class="line">                    Set&lt;NotifyListener&gt; listeners = entry.getValue();</span><br><span class="line">                    for (NotifyListener listener : listeners) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            doSubscribe(url, listener);</span><br><span class="line">                            listeners.remove(listener);</span><br><span class="line">                        &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                            logger.warn(&quot;Failed to retry subscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry subscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将取消订阅失败的url（failedUnsubscribed中的url）进行取消订阅，之后从failedUnsubscribed进行移除</span><br><span class="line">    if (! failedUnsubscribed.isEmpty()) &#123;</span><br><span class="line">        Map&lt;URL, Set&lt;NotifyListener&gt;&gt; failed = new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failedUnsubscribed);</span><br><span class="line">        for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : new HashMap&lt;URL, Set&lt;NotifyListener&gt;&gt;(failed).entrySet()) &#123;</span><br><span class="line">            if (entry.getValue() == null || entry.getValue().size() == 0) &#123;</span><br><span class="line">                failed.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry unsubscribe &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (Map.Entry&lt;URL, Set&lt;NotifyListener&gt;&gt; entry : failed.entrySet()) &#123;</span><br><span class="line">                    URL url = entry.getKey();</span><br><span class="line">                    Set&lt;NotifyListener&gt; listeners = entry.getValue();</span><br><span class="line">                    for (NotifyListener listener : listeners) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            doUnsubscribe(url, listener);</span><br><span class="line">                            listeners.remove(listener);</span><br><span class="line">                        &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                            logger.warn(&quot;Failed to retry unsubscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry unsubscribe &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将所有通知失败的url（failedNotified中的url）进行通知，之后从failedNotified进行移除</span><br><span class="line">    if (! failedNotified.isEmpty()) &#123;</span><br><span class="line">        Map&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt; failed = new HashMap&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt;(failedNotified);</span><br><span class="line">        for (Map.Entry&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt; entry : new HashMap&lt;URL, Map&lt;NotifyListener, List&lt;URL&gt;&gt;&gt;(failed).entrySet()) &#123;</span><br><span class="line">            if (entry.getValue() == null || entry.getValue().size() == 0) &#123;</span><br><span class="line">                failed.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (failed.size() &gt; 0) &#123;</span><br><span class="line">            if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(&quot;Retry notify &quot; + failed);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (Map&lt;NotifyListener, List&lt;URL&gt;&gt; values : failed.values()) &#123;</span><br><span class="line">                    for (Map.Entry&lt;NotifyListener, List&lt;URL&gt;&gt; entry : values.entrySet()) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            NotifyListener listener = entry.getKey();</span><br><span class="line">                            List&lt;URL&gt; urls = entry.getValue();</span><br><span class="line">                            listener.notify(urls);</span><br><span class="line">                            values.remove(listener);</span><br><span class="line">                        &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                            logger.warn(&quot;Failed to retry notify &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123; // 忽略所有异常，等待下次重试</span><br><span class="line">                logger.warn(&quot;Failed to retry notify &quot; + failed + &quot;, waiting for again, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（三、1）FailbackRegistry的register方法"><a href="#4、接（三、1）FailbackRegistry的register方法" class="headerlink" title="4、接（三、1）FailbackRegistry的register方法"></a>4、接（三、1）FailbackRegistry的register方法</h4><p>ZookeeperRegistry的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void register(URL url) &#123;</span><br><span class="line">    //加入已注册集合</span><br><span class="line">    super.register(url);</span><br><span class="line">    //从注册失败的集合中删除</span><br><span class="line">    failedRegistered.remove(url);</span><br><span class="line">    failedUnregistered.remove(url);</span><br><span class="line">    try &#123;</span><br><span class="line">        // 向服务器端发送注册请求</span><br><span class="line">        doRegister(url);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">        boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                &amp;&amp; ! Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class="line">        boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">        if (check || skipFailback) &#123;</span><br><span class="line">            if(skipFailback) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            throw new IllegalStateException(&quot;Failed to register &quot; + url + &quot; to registry &quot; + getUrl().getAddress() + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.error(&quot;Failed to register &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的注册请求记录到失败列表，定时重试</span><br><span class="line">        failedRegistered.add(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、ZookeeperRegistry的doRegister方法"><a href="#5、ZookeeperRegistry的doRegister方法" class="headerlink" title="5、ZookeeperRegistry的doRegister方法"></a>5、ZookeeperRegistry的doRegister方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void doRegister(URL url) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建节点</span><br><span class="line">        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to register &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractZookeeperClient的create方法"><a href="#6、AbstractZookeeperClient的create方法" class="headerlink" title="6、AbstractZookeeperClient的create方法"></a>6、AbstractZookeeperClient的create方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void create(String path, boolean ephemeral) &#123;</span><br><span class="line">    int i = path.lastIndexOf(&apos;/&apos;);</span><br><span class="line">    //循环创建节点</span><br><span class="line">    if (i &gt; 0) &#123;</span><br><span class="line">        create(path.substring(0, i), false);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建临时节点</span><br><span class="line">    if (ephemeral) &#123;</span><br><span class="line">        createEphemeral(path);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        createPersistent(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>path示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo%3A%2F%2F10.10.10.10%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26methods%3DsayHello%26pid%3D5148%26side%3Dprovider%26timestamp%3D1507291294629</span><br><span class="line">解码后</span><br><span class="line">/dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=5148&amp;side=provider&amp;timestamp=1507291294629</span><br></pre></td></tr></table></figure></p><h4 id="7、接（三、1）FailbackRegistry的subscribe方法"><a href="#7、接（三、1）FailbackRegistry的subscribe方法" class="headerlink" title="7、接（三、1）FailbackRegistry的subscribe方法"></a>7、接（三、1）FailbackRegistry的subscribe方法</h4><p>ZookeeperRegistry的父类，订阅<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void subscribe(URL url, NotifyListener listener) &#123;</span><br><span class="line">    //listeners加入已订阅集合</span><br><span class="line">    super.subscribe(url, listener);</span><br><span class="line">    //从订阅失败集合删除</span><br><span class="line">    removeFailedSubscribed(url, listener);</span><br><span class="line">    try &#123;</span><br><span class="line">        //向服务器端发送订阅请求</span><br><span class="line">        doSubscribe(url, listener);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        Throwable t = e;</span><br><span class="line"></span><br><span class="line">        List&lt;URL&gt; urls = getCacheUrls(url);</span><br><span class="line">        if (urls != null &amp;&amp; urls.size() &gt; 0) &#123;</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">            logger.error(&quot;Failed to subscribe &quot; + url + &quot;, Using cached list: &quot; + urls + &quot; from cache file: &quot; + getUrl().getParameter(Constants.FILE_KEY, System.getProperty(&quot;user.home&quot;) + &quot;/dubbo-registry-&quot; + url.getHost() + &quot;.cache&quot;) + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 如果开启了启动时检测，则直接抛出异常</span><br><span class="line">            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)</span><br><span class="line">                    &amp;&amp; url.getParameter(Constants.CHECK_KEY, true);</span><br><span class="line">            boolean skipFailback = t instanceof SkipFailbackWrapperException;</span><br><span class="line">            if (check || skipFailback) &#123;</span><br><span class="line">                if(skipFailback) &#123;</span><br><span class="line">                    t = t.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">                throw new IllegalStateException(&quot;Failed to subscribe &quot; + url + &quot;, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                logger.error(&quot;Failed to subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将失败的订阅请求记录到失败列表，定时重试</span><br><span class="line">        addFailedSubscribed(url, listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7、ZookeeperRegistry的doSubscribe方法"><a href="#7、ZookeeperRegistry的doSubscribe方法" class="headerlink" title="7、ZookeeperRegistry的doSubscribe方法"></a>7、ZookeeperRegistry的doSubscribe方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">protected void doSubscribe(final URL url, final NotifyListener listener) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">            String root = toRootPath();</span><br><span class="line">            ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">            if (listeners == null) &#123;</span><br><span class="line">                zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                listeners = zkListeners.get(url);</span><br><span class="line">            &#125;</span><br><span class="line">            ChildListener zkListener = listeners.get(listener);</span><br><span class="line">            if (zkListener == null) &#123;</span><br><span class="line">                listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                    public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                        for (String child : currentChilds) &#123;</span><br><span class="line">                            child = URL.decode(child);</span><br><span class="line">                            if (! anyServices.contains(child)) &#123;</span><br><span class="line">                                anyServices.add(child);</span><br><span class="line">                                subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child, </span><br><span class="line">                                        Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                zkListener = listeners.get(listener);</span><br><span class="line">            &#125;</span><br><span class="line">            zkClient.create(root, false);</span><br><span class="line">            List&lt;String&gt; services = zkClient.addChildListener(root, zkListener);</span><br><span class="line">            if (services != null &amp;&amp; services.size() &gt; 0) &#123;</span><br><span class="line">                for (String service : services) &#123;</span><br><span class="line">                    service = URL.decode(service);</span><br><span class="line">                    anyServices.add(service);</span><br><span class="line">                    subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service, </span><br><span class="line">                            Constants.CHECK_KEY, String.valueOf(false)), listener);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;();</span><br><span class="line">            //categorypath：获取/dubbo/&#123;servicename&#125;/&#123;url中的category参数，默认是providers&#125;</span><br><span class="line">            //path示例&quot;/dubbo/com.alibaba.dubbo.demo.DemoService/configurators&quot;</span><br><span class="line">            for (String path : toCategoriesPath(url)) &#123;</span><br><span class="line">                //根据url获取ConcurrentMap&lt;NotifyListener, ChildListener&gt;，没有就创建</span><br><span class="line">                ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">                if (listeners == null) &#123;</span><br><span class="line">                    zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                    listeners = zkListeners.get(url);</span><br><span class="line">                &#125;</span><br><span class="line">                //根据listener从ConcurrentMap&lt;NotifyListener, ChildListener&gt;获取ChildListener</span><br><span class="line">                //没有就创建（创建的ChildListener用来监听子节点的变化）</span><br><span class="line">                ChildListener zkListener = listeners.get(listener);</span><br><span class="line">                if (zkListener == null) &#123;</span><br><span class="line">                    listeners.putIfAbsent(listener, new ChildListener() &#123;</span><br><span class="line">                        //监听子节点列表的变化</span><br><span class="line">                        public void childChanged(String parentPath, List&lt;String&gt; currentChilds) &#123;</span><br><span class="line">                            ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    zkListener = listeners.get(listener);</span><br><span class="line">                &#125;</span><br><span class="line">                //创建path持久化节点</span><br><span class="line">                zkClient.create(path, false);</span><br><span class="line">                //创建path子节点监听器</span><br><span class="line">                List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);</span><br><span class="line">                if (children != null) &#123;</span><br><span class="line">                    urls.addAll(toUrlsWithEmpty(url, path, children));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //通知path子节点变化</span><br><span class="line">            notify(url, listener, urls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new RpcException(&quot;Failed to subscribe &quot; + url + &quot; to zookeeper &quot; + getUrl() + &quot;, cause: &quot; + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url（overrideSubscribeUrl）示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provider://10.10.10.10:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;category=configurators</span><br><span class="line">&amp;check=false&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=9544&amp;side=provider</span><br><span class="line">&amp;timestamp=1507643800076</span><br></pre></td></tr></table></figure></p><h4 id="8、ZookeeperRegistry的toUrlsWithEmpty方法"><a href="#8、ZookeeperRegistry的toUrlsWithEmpty方法" class="headerlink" title="8、ZookeeperRegistry的toUrlsWithEmpty方法"></a>8、ZookeeperRegistry的toUrlsWithEmpty方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;URL&gt; toUrlsWithEmpty(URL consumer, String path, List&lt;String&gt; providers) &#123;</span><br><span class="line">    //过滤出providers中与consumer匹配的providerUrl集合</span><br><span class="line">    List&lt;URL&gt; urls = toUrlsWithoutEmpty(consumer, providers);</span><br><span class="line">    //urls为空，首先从path中获取category，然后将consumer的协议换成empty，添加参数category=configurators</span><br><span class="line">    if (urls.isEmpty()) &#123;</span><br><span class="line">        int i = path.lastIndexOf(&apos;/&apos;);</span><br><span class="line">        String category = i &lt; 0 ? path : path.substring(i + 1);</span><br><span class="line">        URL empty = consumer.setProtocol(Constants.EMPTY_PROTOCOL).addParameter(Constants.CATEGORY_KEY, category);</span><br><span class="line">        urls.add(empty);</span><br><span class="line">    &#125;</span><br><span class="line">    return urls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（四、7）FailbackRegistry的notify方法"><a href="#9、接（四、7）FailbackRegistry的notify方法" class="headerlink" title="9、接（四、7）FailbackRegistry的notify方法"></a>9、接（四、7）FailbackRegistry的notify方法</h4><p>通知<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //执行父类的notify方法</span><br><span class="line">        doNotify(url, listener, urls);</span><br><span class="line">    &#125; catch (Exception t) &#123;</span><br><span class="line">        // 将失败的通知请求记录到失败列表，定时重试</span><br><span class="line">        Map&lt;NotifyListener, List&lt;URL&gt;&gt; listeners = failedNotified.get(url);</span><br><span class="line">        if (listeners == null) &#123;</span><br><span class="line">            failedNotified.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, List&lt;URL&gt;&gt;());</span><br><span class="line">            listeners = failedNotified.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.put(listener, urls);</span><br><span class="line">        logger.error(&quot;Failed to notify for subscribe &quot; + url + &quot;, waiting for retry, cause: &quot; + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、AbstractRegistry的notify方法"><a href="#10、AbstractRegistry的notify方法" class="headerlink" title="10、AbstractRegistry的notify方法"></a>10、AbstractRegistry的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">protected void notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) &#123;</span><br><span class="line">    if (url == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify url == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (listener == null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;notify listener == null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if ((urls == null || urls.size() == 0) </span><br><span class="line">            &amp;&amp; ! Constants.ANY_VALUE.equals(url.getServiceInterface())) &#123;</span><br><span class="line">        logger.warn(&quot;Ignore empty notify urls for subscribe url &quot; + url);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Notify urls for subscribe url &quot; + url + &quot;, urls: &quot; + urls);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; result = new HashMap&lt;String, List&lt;URL&gt;&gt;();</span><br><span class="line">    //遍历List&lt;URL&gt; urls，将urls按照category进行分类</span><br><span class="line">    for (URL u : urls) &#123;</span><br><span class="line">        if (UrlUtils.isMatch(url, u)) &#123;</span><br><span class="line">            String category = u.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">            List&lt;URL&gt; categoryList = result.get(category);</span><br><span class="line">            if (categoryList == null) &#123;</span><br><span class="line">                categoryList = new ArrayList&lt;URL&gt;();</span><br><span class="line">                result.put(category, categoryList);</span><br><span class="line">            &#125;</span><br><span class="line">            categoryList.add(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (result.size() == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;URL&gt;&gt; categoryNotified = notified.get(url);</span><br><span class="line">    if (categoryNotified == null) &#123;</span><br><span class="line">        notified.putIfAbsent(url, new ConcurrentHashMap&lt;String, List&lt;URL&gt;&gt;());</span><br><span class="line">        categoryNotified = notified.get(url);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Map.Entry&lt;String, List&lt;URL&gt;&gt; entry : result.entrySet()) &#123;</span><br><span class="line">        String category = entry.getKey();</span><br><span class="line">        List&lt;URL&gt; categoryList = entry.getValue();</span><br><span class="line">        //添加已通知的url</span><br><span class="line">        categoryNotified.put(category, categoryList);</span><br><span class="line">        //保存传入的url到Properties properties（本地磁盘缓存中）</span><br><span class="line">        saveProperties(url);</span><br><span class="line">        //overrideSubscribeListener的notify方法</span><br><span class="line">        listener.notify(categoryList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、OverrideListener的notify方法"><a href="#11、OverrideListener的notify方法" class="headerlink" title="11、OverrideListener的notify方法"></a>11、OverrideListener的notify方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public void notify(List&lt;URL&gt; urls) &#123;</span><br><span class="line">    List&lt;URL&gt; result = null;</span><br><span class="line">    //检查是不是要应用到当前服务上</span><br><span class="line">    for (URL url : urls) &#123;</span><br><span class="line">        URL overrideUrl = url;</span><br><span class="line">        if (url.getParameter(Constants.CATEGORY_KEY) == null</span><br><span class="line">                &amp;&amp; Constants.OVERRIDE_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">            // 兼容旧版本</span><br><span class="line">            overrideUrl = url.addParameter(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);</span><br><span class="line">        &#125;</span><br><span class="line">        if (! UrlUtils.isMatch(subscribeUrl, overrideUrl)) &#123;</span><br><span class="line">            if (result == null) &#123;</span><br><span class="line">                result = new ArrayList&lt;URL&gt;(urls);</span><br><span class="line">            &#125;</span><br><span class="line">            result.remove(url);</span><br><span class="line">            logger.warn(&quot;Subsribe category=configurator, but notifed non-configurator urls. may be registry bug. unexcepted url: &quot; + url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (result != null) &#123;</span><br><span class="line">        urls = result;</span><br><span class="line">    &#125;</span><br><span class="line">    //由url创建OverrideConfigurator</span><br><span class="line">    this.configurators = RegistryDirectory.toConfigurators(urls);</span><br><span class="line">    //在doLocalExport方法中已经存放在这里了</span><br><span class="line">    List&lt;ExporterChangeableWrapper&lt;?&gt;&gt; exporters = new ArrayList&lt;ExporterChangeableWrapper&lt;?&gt;&gt;(bounds.values());</span><br><span class="line">    for (ExporterChangeableWrapper&lt;?&gt; exporter : exporters)&#123;</span><br><span class="line">        //获取原始的invoker</span><br><span class="line">        Invoker&lt;?&gt; invoker = exporter.getOriginInvoker();</span><br><span class="line">        final Invoker&lt;?&gt; originInvoker ;</span><br><span class="line">        if (invoker instanceof InvokerDelegete)&#123;</span><br><span class="line">            originInvoker = ((InvokerDelegete&lt;?&gt;)invoker).getInvoker();</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            originInvoker = invoker;</span><br><span class="line">        &#125;</span><br><span class="line">        //原始的Url</span><br><span class="line">        URL originUrl = RegistryProtocol.this.getProviderUrl(originInvoker);</span><br><span class="line">        //新Url，合并override参数</span><br><span class="line">        URL newUrl = getNewInvokerUrl(originUrl, urls);</span><br><span class="line">        //当前的provider订阅了/dubbo/com.alibaba.dubbo.demo.DemoService/configurators</span><br><span class="line">        //当其下的子节点发生变化时，如果providerUrl发生了变化，需要重新暴露</span><br><span class="line">        if (! originUrl.equals(newUrl))&#123;</span><br><span class="line">            //重新将invoker暴露为exporter</span><br><span class="line">            RegistryProtocol.this.doChangeLocalExport(originInvoker, newUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、创建ServiceBean&quot;&gt;&lt;a href=&quot;#一、创建ServiceBean&quot; class=&quot;headerlink&quot; title=&quot;一、创建ServiceBean&quot;&gt;&lt;/a&gt;一、创建ServiceBean&lt;/h3&gt;&lt;h4 id=&quot;1、ServiceBean
      
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>netty源码连接及读写过程</title>
    <link href="http://yoursite.com/2018/07/20/netty%E6%BA%90%E7%A0%81/netty%E6%BA%90%E7%A0%81%E8%BF%9E%E6%8E%A5%E5%8F%8A%E8%AF%BB%E5%86%99%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/20/netty源码/netty源码连接及读写过程/</id>
    <published>2018-07-20T12:53:19.774Z</published>
    <updated>2018-07-20T13:02:38.636Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>netty客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class EchoClient &#123;</span><br><span class="line">    private final String host;</span><br><span class="line">    private final int port;</span><br><span class="line">    </span><br><span class="line">    public EchoClient(String host, int port)&#123;</span><br><span class="line">        this.host = host;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void start() throws Exception&#123;</span><br><span class="line">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class="line">        try&#123;</span><br><span class="line">            //创建Bootstrap</span><br><span class="line">            Bootstrap b = new Bootstrap();  </span><br><span class="line">            //指定EventLoopGroup来处理客户端事件</span><br><span class="line">            b.group(group)  </span><br><span class="line">             //指定channel类型</span><br><span class="line">             .channel(NioSocketChannel.class)     </span><br><span class="line">             //设置服务器的InetSocketAddress  </span><br><span class="line">             .remoteAddress(new InetSocketAddress(host, port))   </span><br><span class="line">             //连接初始化器，成功connect后，初始化channel的pipeline</span><br><span class="line">             .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(&quot;framer&quot;,new DelimiterBasedFrameDecoder(1024,Delimiters.lineDelimiter()));</span><br><span class="line">                    ch.pipeline().addLast(&quot;decoder&quot;, new StringDecoder());</span><br><span class="line">                    ch.pipeline().addLast(&quot;encoder&quot;, new StringEncoder());</span><br><span class="line">                    ch.pipeline().addLast(new EchoClientHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            //连接到远端，一直等到连接完成</span><br><span class="line">            ChannelFuture f = b.connect().sync();</span><br><span class="line">            //一直阻塞到Channel关闭           </span><br><span class="line">            f.channel().closeFuture().sync();               </span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            //关闭所有连接池，释放所有资源</span><br><span class="line">            group.shutdownGracefully().sync();              </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String args[]) throws Exception &#123;</span><br><span class="line">        new EchoClient(&quot;localhost&quot;, 12000).start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>处理器，向服务器发送信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Sharable</span><br><span class="line">//标记这个类的实例可以被多个Channel共享                       </span><br><span class="line">public class EchoClientHandler extends SimpleChannelInboundHandler&lt;ByteBuf&gt;&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    //和服务器的连接建立起来后被调用                          </span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        //当收到连接成功的通知，发送一条消息</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;Netty rocks!&quot;, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    //从服务器收到一条消息时被调用                           </span><br><span class="line">    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception &#123;</span><br><span class="line">        //打印收到的消息到日志</span><br><span class="line">        System.out.println(&quot;Client received: &quot; + msg.toString(CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    //处理过程中异常发生时被调用                           </span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        //异常发生时，记录错误日志，关闭Channel</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一、客户端发起连接"><a href="#一、客户端发起连接" class="headerlink" title="一、客户端发起连接"></a>一、客户端发起连接</h3><h4 id="1、Bootstrap的connect方法"><a href="#1、Bootstrap的connect方法" class="headerlink" title="1、Bootstrap的connect方法"></a>1、Bootstrap的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public ChannelFuture connect() &#123;</span><br><span class="line">    //校验group、channelFactory、handler不为空</span><br><span class="line">    validate();</span><br><span class="line">    SocketAddress remoteAddress = this.remoteAddress;</span><br><span class="line">    if (remoteAddress == null) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;remoteAddress not set&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //初始化并建立连接</span><br><span class="line">    return doResolveAndConnect(remoteAddress, config.localAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Bootstrap的doResolveAndConnect方法"><a href="#2、Bootstrap的doResolveAndConnect方法" class="headerlink" title="2、Bootstrap的doResolveAndConnect方法"></a>2、Bootstrap的doResolveAndConnect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">private ChannelFuture doResolveAndConnect(final SocketAddress remoteAddress, final SocketAddress localAddress) &#123;</span><br><span class="line">    //初始化并且注册channel，channel为NioSocketChannel，其余操作与客户端类似</span><br><span class="line">    final ChannelFuture regFuture = initAndRegister();</span><br><span class="line">    final Channel channel = regFuture.channel();</span><br><span class="line">    //已注册</span><br><span class="line">    if (regFuture.isDone()) &#123;</span><br><span class="line">        //注册失败</span><br><span class="line">        if (!regFuture.isSuccess()) &#123;</span><br><span class="line">            return regFuture;</span><br><span class="line">        &#125;</span><br><span class="line">        //建立连接</span><br><span class="line">        return doResolveAndConnect0(channel, remoteAddress, localAddress, channel.newPromise());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Registration future is almost always fulfilled already, but just in case it&apos;s not.</span><br><span class="line">        final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);</span><br><span class="line">        //添加监听器，待注册成功再建立连接</span><br><span class="line">        regFuture.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                // Directly obtain the cause and do a null check so we only need one volatile read in case of a</span><br><span class="line">                // failure.</span><br><span class="line">                Throwable cause = future.cause();</span><br><span class="line">                //注册失败</span><br><span class="line">                if (cause != null) &#123;</span><br><span class="line">                    // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an</span><br><span class="line">                    // IllegalStateException once we try to access the EventLoop of the Channel.</span><br><span class="line">                    promise.setFailure(cause);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // Registration was successful, so set the correct executor to use.</span><br><span class="line">                    // See https://github.com/netty/netty/issues/2586</span><br><span class="line">                    promise.registered();</span><br><span class="line">                    //建立连接</span><br><span class="line">                    doResolveAndConnect0(channel, remoteAddress, localAddress, promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Bootstrap的doResolveAndConnect方法"><a href="#3、Bootstrap的doResolveAndConnect方法" class="headerlink" title="3、Bootstrap的doResolveAndConnect方法"></a>3、Bootstrap的doResolveAndConnect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">private ChannelFuture doResolveAndConnect0(final Channel channel, SocketAddress remoteAddress,</span><br><span class="line">                                           final SocketAddress localAddress, final ChannelPromise promise) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取channel注册的线程</span><br><span class="line">        final EventLoop eventLoop = channel.eventLoop();</span><br><span class="line">        //获取与此EventLoop相关联的地址解析器，InetSocketAddressResolver</span><br><span class="line">        final AddressResolver&lt;SocketAddress&gt; resolver = this.resolver.getResolver(eventLoop);</span><br><span class="line">        //解析器不支持，或者已经解析了，直接建立连接</span><br><span class="line">        if (!resolver.isSupported(remoteAddress) || resolver.isResolved(remoteAddress)) &#123;</span><br><span class="line">            // Resolver has no idea about what to do with the specified remote address or it&apos;s resolved already.</span><br><span class="line">            //建立连接</span><br><span class="line">            doConnect(remoteAddress, localAddress, promise);</span><br><span class="line">            return promise;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析器解析远程地址</span><br><span class="line">        final Future&lt;SocketAddress&gt; resolveFuture = resolver.resolve(remoteAddress);</span><br><span class="line">        //已解析完成</span><br><span class="line">        if (resolveFuture.isDone()) &#123;</span><br><span class="line">            final Throwable resolveFailureCause = resolveFuture.cause();</span><br><span class="line">            //解析失败</span><br><span class="line">            if (resolveFailureCause != null) &#123;</span><br><span class="line">                // Failed to resolve immediately</span><br><span class="line">                channel.close();</span><br><span class="line">                promise.setFailure(resolveFailureCause);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Succeeded to resolve immediately; cached? (or did a blocking lookup)</span><br><span class="line">                //建立连接</span><br><span class="line">                doConnect(resolveFuture.getNow(), localAddress, promise);</span><br><span class="line">            &#125;</span><br><span class="line">            return promise;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Wait until the name resolution is finished.</span><br><span class="line">        //添加监听器，待解析完成再建立连接</span><br><span class="line">        resolveFuture.addListener(new FutureListener&lt;SocketAddress&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void operationComplete(Future&lt;SocketAddress&gt; future) throws Exception &#123;</span><br><span class="line">                if (future.cause() != null) &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                    promise.setFailure(future.cause());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    doConnect(future.getNow(), localAddress, promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (Throwable cause) &#123;</span><br><span class="line">        promise.tryFailure(cause);</span><br><span class="line">    &#125;</span><br><span class="line">    return promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、Bootstrap的doConnect方法"><a href="#4、Bootstrap的doConnect方法" class="headerlink" title="4、Bootstrap的doConnect方法"></a>4、Bootstrap的doConnect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private static void doConnect(</span><br><span class="line">        final SocketAddress remoteAddress, final SocketAddress localAddress, final ChannelPromise connectPromise) &#123;</span><br><span class="line"></span><br><span class="line">    // This method is invoked before channelRegistered() is triggered.  Give user handlers a chance to set up</span><br><span class="line">    // the pipeline in its channelRegistered() implementation.</span><br><span class="line">    //获取channel,NioSocketChannel</span><br><span class="line">    final Channel channel = connectPromise.channel();</span><br><span class="line">    //向线程提交任务</span><br><span class="line">    channel.eventLoop().execute(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            if (localAddress == null) &#123;</span><br><span class="line">                //建立连接</span><br><span class="line">                channel.connect(remoteAddress, connectPromise);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                channel.connect(remoteAddress, localAddress, connectPromise);</span><br><span class="line">            &#125;</span><br><span class="line">            connectPromise.addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AbstractChannel的connect方法"><a href="#5、AbstractChannel的connect方法" class="headerlink" title="5、AbstractChannel的connect方法"></a>5、AbstractChannel的connect方法</h4><p>NioSocketChannel的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture connect(SocketAddress remoteAddress) &#123;</span><br><span class="line">    return pipeline.connect(remoteAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、DefaultChannelPipeline的connect方法"><a href="#6、DefaultChannelPipeline的connect方法" class="headerlink" title="6、DefaultChannelPipeline的connect方法"></a>6、DefaultChannelPipeline的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final ChannelFuture connect(SocketAddress remoteAddress) &#123;</span><br><span class="line">    return tail.connect(remoteAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractChannelHandlerContext的connect方法"><a href="#7、AbstractChannelHandlerContext的connect方法" class="headerlink" title="7、AbstractChannelHandlerContext的connect方法"></a>7、AbstractChannelHandlerContext的connect方法</h4><p>TailContext的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture connect(SocketAddress remoteAddress) &#123;</span><br><span class="line">    return connect(remoteAddress, newPromise());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture connect(SocketAddress remoteAddress, ChannelPromise promise) &#123;</span><br><span class="line">    return connect(remoteAddress, null, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture connect(</span><br><span class="line">        final SocketAddress remoteAddress, final SocketAddress localAddress, final ChannelPromise promise) &#123;</span><br><span class="line">    //远程地址为空</span><br><span class="line">    if (remoteAddress == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;remoteAddress&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //channel已失效</span><br><span class="line">    if (isNotValidPromise(promise, false)) &#123;</span><br><span class="line">        // cancelled</span><br><span class="line">        return promise;</span><br><span class="line">    &#125;</span><br><span class="line">    //往前查找第一个outbound类型的handler，默认会查出HeadContext</span><br><span class="line">    final AbstractChannelHandlerContext next = findContextOutbound();</span><br><span class="line">    EventExecutor executor = next.executor();</span><br><span class="line">    //当前线程为channel注册线程</span><br><span class="line">    if (executor.inEventLoop()) &#123;</span><br><span class="line">        //执行handler的connect方法</span><br><span class="line">        next.invokeConnect(remoteAddress, localAddress, promise);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        safeExecute(executor, new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                next.invokeConnect(remoteAddress, localAddress, promise);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, promise, null);</span><br><span class="line">    &#125;</span><br><span class="line">    return promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、HeadContext的connect方法"><a href="#8、HeadContext的connect方法" class="headerlink" title="8、HeadContext的connect方法"></a>8、HeadContext的connect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void connect(</span><br><span class="line">        ChannelHandlerContext ctx,</span><br><span class="line">        SocketAddress remoteAddress, SocketAddress localAddress,</span><br><span class="line">        ChannelPromise promise) throws Exception &#123;</span><br><span class="line">    //unsafe为NioSocketChannelUnsafe</span><br><span class="line">    unsafe.connect(remoteAddress, localAddress, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractNioUnsafe的connect方法"><a href="#9、AbstractNioUnsafe的connect方法" class="headerlink" title="9、AbstractNioUnsafe的connect方法"></a>9、AbstractNioUnsafe的connect方法</h4><p>NioSocketChannelUnsafe的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void connect(</span><br><span class="line">        final SocketAddress remoteAddress, final SocketAddress localAddress, final ChannelPromise promise) &#123;</span><br><span class="line">    //channel已关闭</span><br><span class="line">    if (!promise.setUncancellable() || !ensureOpen(promise)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //已连接</span><br><span class="line">        if (connectPromise != null) &#123;</span><br><span class="line">            // Already a connect in process.</span><br><span class="line">            throw new ConnectionPendingException();</span><br><span class="line">        &#125;</span><br><span class="line">        //已连接成功</span><br><span class="line">        boolean wasActive = isActive();</span><br><span class="line">        //建立连接</span><br><span class="line">        if (doConnect(remoteAddress, localAddress)) &#123;</span><br><span class="line">            //连接成功后续处理</span><br><span class="line">            fulfillConnectPromise(promise, wasActive);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            connectPromise = promise;</span><br><span class="line">            requestedRemoteAddress = remoteAddress;</span><br><span class="line"></span><br><span class="line">            // Schedule connect timeout.</span><br><span class="line">            int connectTimeoutMillis = config().getConnectTimeoutMillis();</span><br><span class="line">            if (connectTimeoutMillis &gt; 0) &#123;</span><br><span class="line">                //添加延时任务，检查如30秒仍未连接成功，则关闭连接</span><br><span class="line">                connectTimeoutFuture = eventLoop().schedule(new Runnable() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        ChannelPromise connectPromise = AbstractNioChannel.this.connectPromise;</span><br><span class="line">                        ConnectTimeoutException cause =</span><br><span class="line">                                new ConnectTimeoutException(&quot;connection timed out: &quot; + remoteAddress);</span><br><span class="line">                        if (connectPromise != null &amp;&amp; connectPromise.tryFailure(cause)) &#123;</span><br><span class="line">                            close(voidPromise());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, connectTimeoutMillis, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            //监听器，连接操作完成之后检测是否失败，失败则关闭连接</span><br><span class="line">            promise.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                    if (future.isCancelled()) &#123;</span><br><span class="line">                        if (connectTimeoutFuture != null) &#123;</span><br><span class="line">                            connectTimeoutFuture.cancel(false);</span><br><span class="line">                        &#125;</span><br><span class="line">                        connectPromise = null;</span><br><span class="line">                        close(voidPromise());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        promise.tryFailure(annotateConnectException(t, remoteAddress));</span><br><span class="line">        closeIfClosed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、NioSocketChannel的doConnect方法"><a href="#10、NioSocketChannel的doConnect方法" class="headerlink" title="10、NioSocketChannel的doConnect方法"></a>10、NioSocketChannel的doConnect方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean doConnect(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception &#123;</span><br><span class="line">    //绑定本地端口</span><br><span class="line">    if (localAddress != null) &#123;</span><br><span class="line">        doBind0(localAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean success = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        //建立连接</span><br><span class="line">        boolean connected = SocketUtils.connect(javaChannel(), remoteAddress);</span><br><span class="line">        if (!connected) &#123;</span><br><span class="line">            //关注CONNECT就绪</span><br><span class="line">            selectionKey().interestOps(SelectionKey.OP_CONNECT);</span><br><span class="line">        &#125;</span><br><span class="line">        success = true;</span><br><span class="line">        return connected;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (!success) &#123;</span><br><span class="line">            doClose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、服务端获取连接"><a href="#二、服务端获取连接" class="headerlink" title="二、服务端获取连接"></a>二、服务端获取连接</h3><h4 id="1、NioMessageUnsafe的read方法"><a href="#1、NioMessageUnsafe的read方法" class="headerlink" title="1、NioMessageUnsafe的read方法"></a>1、NioMessageUnsafe的read方法</h4><p>服务端获取连接ACCEPT就绪会执行该方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void read() &#123;</span><br><span class="line">    assert eventLoop().inEventLoop();</span><br><span class="line">    //获取channel配置，NioServerSocketChannelConfig</span><br><span class="line">    final ChannelConfig config = config();</span><br><span class="line">    //获取pipeline，DefaultChannelPipeline</span><br><span class="line">    final ChannelPipeline pipeline = pipeline();</span><br><span class="line">    //获取缓存处理器，默认AdaptiveRecvByteBufAllocator的内部类HandleImpl  </span><br><span class="line">    final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();</span><br><span class="line">    //重置allocHandle</span><br><span class="line">    allocHandle.reset(config);</span><br><span class="line"></span><br><span class="line">    boolean closed = false;</span><br><span class="line">    Throwable exception = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            do &#123;</span><br><span class="line">                //获取连接加入readBuf</span><br><span class="line">                int localRead = doReadMessages(readBuf);</span><br><span class="line">                //等于0表示没有连接进来</span><br><span class="line">                if (localRead == 0) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //已经关闭，则返回-1</span><br><span class="line">                if (localRead &lt; 0) &#123;</span><br><span class="line">                    closed = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //更新读取数据总数totalMessages</span><br><span class="line">                allocHandle.incMessagesRead(localRead);</span><br><span class="line">            //判断是否继续读取数据，读取messages是否小于maxMessagesPerRead</span><br><span class="line">            &#125; while (allocHandle.continueReading());</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            exception = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int size = readBuf.size();</span><br><span class="line">        for (int i = 0; i &lt; size; i ++) &#123;</span><br><span class="line">            readPending = false;</span><br><span class="line">            //从head开始，依次执行handler的channelRead方法</span><br><span class="line">            pipeline.fireChannelRead(readBuf.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        //清空readBuf</span><br><span class="line">        readBuf.clear();</span><br><span class="line">        allocHandle.readComplete();</span><br><span class="line">        //从head开始，依次执行handler的channelReadComplete方法</span><br><span class="line">        pipeline.fireChannelReadComplete();</span><br><span class="line"></span><br><span class="line">        //发生异常</span><br><span class="line">        if (exception != null) &#123;</span><br><span class="line">            closed = closeOnReadError(exception);</span><br><span class="line">            //依次执行handler的exceptionCaught方法</span><br><span class="line">            pipeline.fireExceptionCaught(exception);</span><br><span class="line">        &#125;</span><br><span class="line">        //关闭NioServerSocketChannel</span><br><span class="line">        if (closed) &#123;</span><br><span class="line">            inputShutdown = true;</span><br><span class="line">            if (isOpen()) &#123;</span><br><span class="line">                close(voidPromise());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Check if there is a readPending which was not processed yet.</span><br><span class="line">        // This could be for two reasons:</span><br><span class="line">        // * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method</span><br><span class="line">        // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method</span><br><span class="line">        //</span><br><span class="line">        // See https://github.com/netty/netty/issues/2254</span><br><span class="line">        if (!readPending &amp;&amp; !config.isAutoRead()) &#123;</span><br><span class="line">            removeReadOp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、NioServerSocketChannel的doReadMessages方法"><a href="#2、NioServerSocketChannel的doReadMessages方法" class="headerlink" title="2、NioServerSocketChannel的doReadMessages方法"></a>2、NioServerSocketChannel的doReadMessages方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected int doReadMessages(List&lt;Object&gt; buf) throws Exception &#123;</span><br><span class="line">    //获取连接</span><br><span class="line">    SocketChannel ch = SocketUtils.accept(javaChannel());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (ch != null) &#123;</span><br><span class="line">            //加入buf</span><br><span class="line">            buf.add(new NioSocketChannel(this, ch));</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        logger.warn(&quot;Failed to create a new channel from an accepted socket.&quot;, t);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            ch.close();</span><br><span class="line">        &#125; catch (Throwable t2) &#123;</span><br><span class="line">            logger.warn(&quot;Failed to close a socket.&quot;, t2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（二、1）ServerBootstrapAcceptor的channelRead方法"><a href="#3、接（二、1）ServerBootstrapAcceptor的channelRead方法" class="headerlink" title="3、接（二、1）ServerBootstrapAcceptor的channelRead方法"></a>3、接（二、1）ServerBootstrapAcceptor的channelRead方法</h4><p>ServerBootstrapAcceptor为初始化NioServerSocketChannel时，添加的处理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public void channelRead(ChannelHandlerContext ctx, Object msg) &#123;</span><br><span class="line">    //读取到的NioSocketChannel</span><br><span class="line">    final Channel child = (Channel) msg;</span><br><span class="line">    //将childHandler加入child的pipeline</span><br><span class="line">    child.pipeline().addLast(childHandler);</span><br><span class="line">    //设置channel的option</span><br><span class="line">    setChannelOptions(child, childOptions, logger);</span><br><span class="line">    //设置channel的attr</span><br><span class="line">    for (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;</span><br><span class="line">        child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //将child注册到childGroup线程池</span><br><span class="line">        childGroup.register(child).addListener(new ChannelFutureListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                if (!future.isSuccess()) &#123;</span><br><span class="line">                    forceClose(child, future.cause());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        forceClose(child, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、AbstractNioUnsafe的finishConnect方法"><a href="#4、AbstractNioUnsafe的finishConnect方法" class="headerlink" title="4、AbstractNioUnsafe的finishConnect方法"></a>4、AbstractNioUnsafe的finishConnect方法</h4><p>NioMessageUnsafe、NioSocketChannelUnsafe的父类，客户端及服务端CONNECT就绪都会执行该方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void finishConnect() &#123;</span><br><span class="line">    // Note this method is invoked by the event loop only if the connection attempt was</span><br><span class="line">    // neither cancelled nor timed out.</span><br><span class="line"></span><br><span class="line">    assert eventLoop().inEventLoop();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        boolean wasActive = isActive();</span><br><span class="line">        //完成建立连接</span><br><span class="line">        doFinishConnect();</span><br><span class="line">        //连接成功后续处理</span><br><span class="line">        fulfillConnectPromise(connectPromise, wasActive);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        fulfillConnectPromise(connectPromise, annotateConnectException(t, requestedRemoteAddress));</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Check for null as the connectTimeoutFuture is only created if a connectTimeoutMillis &gt; 0 is used</span><br><span class="line">        // See https://github.com/netty/netty/issues/1770</span><br><span class="line">        if (connectTimeoutFuture != null) &#123;</span><br><span class="line">            connectTimeoutFuture.cancel(false);</span><br><span class="line">        &#125;</span><br><span class="line">        connectPromise = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、AbstractNioUnsafe的fulfillConnectPromise方法"><a href="#5、AbstractNioUnsafe的fulfillConnectPromise方法" class="headerlink" title="5、AbstractNioUnsafe的fulfillConnectPromise方法"></a>5、AbstractNioUnsafe的fulfillConnectPromise方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private void fulfillConnectPromise(ChannelPromise promise, boolean wasActive) &#123;</span><br><span class="line">    if (promise == null) &#123;</span><br><span class="line">        // Closed via cancellation and the promise has been notified already.</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Get the state as trySuccess() may trigger an ChannelFutureListener that will close the Channel.</span><br><span class="line">    // We still need to ensure we call fireChannelActive() in this case.</span><br><span class="line">    //是否连接成功</span><br><span class="line">    boolean active = isActive();</span><br><span class="line"></span><br><span class="line">    // trySuccess() will return false if a user cancelled the connection attempt.</span><br><span class="line">    //设置连接成功</span><br><span class="line">    boolean promiseSet = promise.trySuccess();</span><br><span class="line"></span><br><span class="line">    // Regardless if the connection attempt was cancelled, channelActive() event should be triggered,</span><br><span class="line">    // because what happened is what happened.</span><br><span class="line">    if (!wasActive &amp;&amp; active) &#123;</span><br><span class="line">        //从head开始，依次执行handler的channelActive方法</span><br><span class="line">        pipeline().fireChannelActive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If a user cancelled the connection attempt, close the channel, which is followed by channelInactive().</span><br><span class="line">    //失败关闭连接</span><br><span class="line">    if (!promiseSet) &#123;</span><br><span class="line">        close(voidPromise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、客户端与服务端读写数据过程"><a href="#三、客户端与服务端读写数据过程" class="headerlink" title="三、客户端与服务端读写数据过程"></a>三、客户端与服务端读写数据过程</h3><h4 id="1、EchoClientHandler的channelActive方法"><a href="#1、EchoClientHandler的channelActive方法" class="headerlink" title="1、EchoClientHandler的channelActive方法"></a>1、EchoClientHandler的channelActive方法</h4><p>客户端发送数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override                           </span><br><span class="line">//和服务器的连接建立起来后被调用</span><br><span class="line">public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">    //当收到连接成功的通知，发送一条消息</span><br><span class="line">    ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;Netty rocks!&quot;, CharsetUtil.UTF_8));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AbstractChannelHandlerContext的writeAndFlush方法"><a href="#2、AbstractChannelHandlerContext的writeAndFlush方法" class="headerlink" title="2、AbstractChannelHandlerContext的writeAndFlush方法"></a>2、AbstractChannelHandlerContext的writeAndFlush方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture writeAndFlush(Object msg) &#123;</span><br><span class="line">    //将数据写入 channel并刷新到服务端</span><br><span class="line">    return writeAndFlush(msg, newPromise());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture writeAndFlush(Object msg, ChannelPromise promise) &#123;</span><br><span class="line">    if (msg == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;msg&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (isNotValidPromise(promise, true)) &#123;</span><br><span class="line">        ReferenceCountUtil.release(msg);</span><br><span class="line">        // cancelled</span><br><span class="line">        return promise;</span><br><span class="line">    &#125;</span><br><span class="line">    //将数据写入 channel并刷新到服务端</span><br><span class="line">    write(msg, true, promise);</span><br><span class="line"></span><br><span class="line">    return promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractChannelHandlerContext的write方法"><a href="#3、AbstractChannelHandlerContext的write方法" class="headerlink" title="3、AbstractChannelHandlerContext的write方法"></a>3、AbstractChannelHandlerContext的write方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void write(Object msg, boolean flush, ChannelPromise promise) &#123;</span><br><span class="line">    //获取上一个Outbound类型的处理器,最后一个为HeadContext</span><br><span class="line">    AbstractChannelHandlerContext next = findContextOutbound();</span><br><span class="line">    final Object m = pipeline.touch(msg, next);</span><br><span class="line">    //获取下一个处理器的工作线程</span><br><span class="line">    EventExecutor executor = next.executor();</span><br><span class="line">    //执行下一个Outbound类型处理器的write、flush方法</span><br><span class="line">    if (executor.inEventLoop()) &#123;</span><br><span class="line">        if (flush) &#123;</span><br><span class="line">            next.invokeWriteAndFlush(m, promise);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            next.invokeWrite(m, promise);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        AbstractWriteTask task;</span><br><span class="line">        if (flush) &#123;</span><br><span class="line">            task = WriteAndFlushTask.newInstance(next, m, promise);</span><br><span class="line">        &#125;  else &#123;</span><br><span class="line">            task = WriteTask.newInstance(next, m, promise);</span><br><span class="line">        &#125;</span><br><span class="line">        safeExecute(executor, task, promise, m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、HeadContext的write方法"><a href="#4、HeadContext的write方法" class="headerlink" title="4、HeadContext的write方法"></a>4、HeadContext的write方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception &#123;</span><br><span class="line">    //unsafe为NioSocketChannelUnsafe</span><br><span class="line">    unsafe.write(msg, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AbstractUnsafe的write方法"><a href="#5、AbstractUnsafe的write方法" class="headerlink" title="5、AbstractUnsafe的write方法"></a>5、AbstractUnsafe的write方法</h4><p>NioSocketChannelUnsafe的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public final void write(Object msg, ChannelPromise promise) &#123;</span><br><span class="line">        assertEventLoop();</span><br><span class="line"></span><br><span class="line">        ChannelOutboundBuffer outboundBuffer = this.outboundBuffer;</span><br><span class="line">        if (outboundBuffer == null) &#123;</span><br><span class="line">            // If the outboundBuffer is null we know the channel was closed and so</span><br><span class="line">            // need to fail the future right away. If it is not null the handling of the rest</span><br><span class="line">            // will be done in flush0()</span><br><span class="line">            // See https://github.com/netty/netty/issues/2362</span><br><span class="line">            safeSetFailure(promise, WRITE_CLOSED_CHANNEL_EXCEPTION);</span><br><span class="line">            // release message now to prevent resource-leak</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int size;</span><br><span class="line">        try &#123;</span><br><span class="line">            //默认为空</span><br><span class="line">            msg = filterOutboundMessage(msg);</span><br><span class="line">            //计算msg大小</span><br><span class="line">            size = pipeline.estimatorHandle().size(msg);</span><br><span class="line">            if (size &lt; 0) &#123;</span><br><span class="line">                size = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            safeSetFailure(promise, t);</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //数据加入缓存outboundBuffer</span><br><span class="line">        outboundBuffer.addMessage(msg, size, promise);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、HeadContext的flush方法"><a href="#6、HeadContext的flush方法" class="headerlink" title="6、HeadContext的flush方法"></a>6、HeadContext的flush方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void flush(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">    unsafe.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractUnsafe的flush方法"><a href="#7、AbstractUnsafe的flush方法" class="headerlink" title="7、AbstractUnsafe的flush方法"></a>7、AbstractUnsafe的flush方法</h4><p>NioSocketChannelUnsafe的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void flush() &#123;</span><br><span class="line">    assertEventLoop();</span><br><span class="line"></span><br><span class="line">    ChannelOutboundBuffer outboundBuffer = this.outboundBuffer;</span><br><span class="line">    if (outboundBuffer == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //标记刷新</span><br><span class="line">    outboundBuffer.addFlush();</span><br><span class="line">    //数据刷新到服务端</span><br><span class="line">    flush0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、NioByteUnsafe的read方法"><a href="#8、NioByteUnsafe的read方法" class="headerlink" title="8、NioByteUnsafe的read方法"></a>8、NioByteUnsafe的read方法</h4><p>服务端读取数据,NioSocketChannelUnsafe的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void read() &#123;</span><br><span class="line">    final ChannelConfig config = config();</span><br><span class="line">    final ChannelPipeline pipeline = pipeline();</span><br><span class="line">    //缓存分配器，默认UnpooledByteBufAllocator</span><br><span class="line">    final ByteBufAllocator allocator = config.getAllocator();</span><br><span class="line">    //获取缓存处理器，默认AdaptiveRecvByteBufAllocator的内部类HandleImpl  </span><br><span class="line">    final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();</span><br><span class="line">    //重置allocHandle</span><br><span class="line">    allocHandle.reset(config);</span><br><span class="line"></span><br><span class="line">    ByteBuf byteBuf = null;</span><br><span class="line">    boolean close = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        do &#123;</span><br><span class="line">            //分配缓存</span><br><span class="line">            byteBuf = allocHandle.allocate(allocator);</span><br><span class="line">            //将socketChannel数据写入缓存，并更新totalBytesRead</span><br><span class="line">            allocHandle.lastBytesRead(doReadBytes(byteBuf));</span><br><span class="line">            //0表示没有读取到数据，-1表示已经关闭连接</span><br><span class="line">            if (allocHandle.lastBytesRead() &lt;= 0) &#123;</span><br><span class="line">                // nothing was read. release the buffer.</span><br><span class="line">                byteBuf.release();</span><br><span class="line">                byteBuf = null;</span><br><span class="line">                close = allocHandle.lastBytesRead() &lt; 0;</span><br><span class="line">                if (close) &#123;</span><br><span class="line">                    // There is nothing left to read as we received an EOF.</span><br><span class="line">                    readPending = false;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //totalMessages加1</span><br><span class="line">            allocHandle.incMessagesRead(1);</span><br><span class="line">            readPending = false;</span><br><span class="line">            //从head开始，依次调用handler的channelRead方法</span><br><span class="line">            pipeline.fireChannelRead(byteBuf);</span><br><span class="line">            byteBuf = null;</span><br><span class="line">        //判断是否继续读取，读取totalMessages是否小于maxMessagesPerRead</span><br><span class="line">        &#125; while (allocHandle.continueReading());</span><br><span class="line">        //调整下次读取时缓存大小，根据本次totalBytesRead调整</span><br><span class="line">        allocHandle.readComplete();</span><br><span class="line">        //从head开始，依次调用handler的channelReadComplete方法</span><br><span class="line">        pipeline.fireChannelReadComplete();</span><br><span class="line">        //关闭连接</span><br><span class="line">        if (close) &#123;</span><br><span class="line">            closeOnRead(pipeline);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        handleReadException(pipeline, byteBuf, t, close, allocHandle);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Check if there is a readPending which was not processed yet.</span><br><span class="line">        // This could be for two reasons:</span><br><span class="line">        // * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method</span><br><span class="line">        // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method</span><br><span class="line">        //</span><br><span class="line">        // See https://github.com/netty/netty/issues/2254</span><br><span class="line">        if (!readPending &amp;&amp; !config.isAutoRead()) &#123;</span><br><span class="line">            removeReadOp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="9、EchoServerHandler的channelRead方法"><a href="#9、EchoServerHandler的channelRead方法" class="headerlink" title="9、EchoServerHandler的channelRead方法"></a>9、EchoServerHandler的channelRead方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">//每次收到消息时被调用</span><br><span class="line">public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">    ByteBuf in = (ByteBuf) msg;</span><br><span class="line">    //把消息打印到控制台</span><br><span class="line">    System.out.println(&quot;Server received: &quot; + in.toString(CharsetUtil.UTF_8)); </span><br><span class="line">    //将收到的消息写入发送方，不刷新输出消息      </span><br><span class="line">    ctx.write(in);              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（三、8）EchoServerHandler的channelRead方法"><a href="#10、接（三、8）EchoServerHandler的channelRead方法" class="headerlink" title="10、接（三、8）EchoServerHandler的channelRead方法"></a>10、接（三、8）EchoServerHandler的channelRead方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override                       </span><br><span class="line">//用来通知handler上一个ChannelRead()是被这批消息中的最后一个消息调用</span><br><span class="line">public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">    //刷新缓存的数据到远端，然后关闭Channel</span><br><span class="line">    ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、分隔符解码器"><a href="#四、分隔符解码器" class="headerlink" title="四、分隔符解码器"></a>四、分隔符解码器</h3><h4 id="1、实例化DelimiterBasedFrameDecoder"><a href="#1、实例化DelimiterBasedFrameDecoder" class="headerlink" title="1、实例化DelimiterBasedFrameDecoder"></a>1、实例化DelimiterBasedFrameDecoder</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public DelimiterBasedFrameDecoder(int maxFrameLength, ByteBuf... delimiters) &#123;</span><br><span class="line">    this(maxFrameLength, true, delimiters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public DelimiterBasedFrameDecoder(</span><br><span class="line">        int maxFrameLength, boolean stripDelimiter, ByteBuf... delimiters) &#123;</span><br><span class="line">    this(maxFrameLength, stripDelimiter, true, delimiters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public DelimiterBasedFrameDecoder(</span><br><span class="line">        int maxFrameLength, boolean stripDelimiter, boolean failFast, ByteBuf... delimiters) &#123;</span><br><span class="line">    //解码数据的最大长度,大于0</span><br><span class="line">    validateMaxFrameLength(maxFrameLength);</span><br><span class="line">    if (delimiters == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;delimiters&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (delimiters.length == 0) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;empty delimiters&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //分隔符为换行符</span><br><span class="line">    if (isLineBased(delimiters) &amp;&amp; !isSubclass()) &#123;</span><br><span class="line">        //创建LineBasedFrameDecoder</span><br><span class="line">        lineBasedDecoder = new LineBasedFrameDecoder(maxFrameLength, stripDelimiter, failFast);</span><br><span class="line">        this.delimiters = null;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.delimiters = new ByteBuf[delimiters.length];</span><br><span class="line">        for (int i = 0; i &lt; delimiters.length; i ++) &#123;</span><br><span class="line">            ByteBuf d = delimiters[i];</span><br><span class="line">            validateDelimiter(d);</span><br><span class="line">            this.delimiters[i] = d.slice(d.readerIndex(), d.readableBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        lineBasedDecoder = null;</span><br><span class="line">    &#125;</span><br><span class="line">    this.maxFrameLength = maxFrameLength;</span><br><span class="line">    this.stripDelimiter = stripDelimiter;</span><br><span class="line">    this.failFast = failFast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实例化LineBasedFrameDecoder"><a href="#2、实例化LineBasedFrameDecoder" class="headerlink" title="2、实例化LineBasedFrameDecoder"></a>2、实例化LineBasedFrameDecoder</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public LineBasedFrameDecoder(final int maxLength, final boolean stripDelimiter, final boolean failFast) &#123;</span><br><span class="line">    this.maxLength = maxLength;</span><br><span class="line">    this.failFast = failFast;</span><br><span class="line">    this.stripDelimiter = stripDelimiter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ByteToMessageDecoder的channelRead方法"><a href="#3、ByteToMessageDecoder的channelRead方法" class="headerlink" title="3、ByteToMessageDecoder的channelRead方法"></a>3、ByteToMessageDecoder的channelRead方法</h4><p>DelimiterBasedFrameDecoder的父类，读取数据后，会执行handler的channelRead方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">    //读取数据为字节数组</span><br><span class="line">    if (msg instanceof ByteBuf) &#123;</span><br><span class="line">        CodecOutputList out = CodecOutputList.newInstance();</span><br><span class="line">        try &#123;</span><br><span class="line">            ByteBuf data = (ByteBuf) msg;</span><br><span class="line">            first = cumulation == null;</span><br><span class="line">            if (first) &#123;</span><br><span class="line">                cumulation = data;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //将data合并到cumulation中</span><br><span class="line">                cumulation = cumulator.cumulate(ctx.alloc(), cumulation, data);</span><br><span class="line">            &#125;</span><br><span class="line">            //解码</span><br><span class="line">            callDecode(ctx, cumulation, out);</span><br><span class="line">        &#125; catch (DecoderException e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new DecoderException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //cumulation全部读完</span><br><span class="line">            if (cumulation != null &amp;&amp; !cumulation.isReadable()) &#123;</span><br><span class="line">                numReads = 0;</span><br><span class="line">                //清空cumulation</span><br><span class="line">                cumulation.release();</span><br><span class="line">                cumulation = null;</span><br><span class="line">            &#125; else if (++ numReads &gt;= discardAfterReads) &#123;</span><br><span class="line">                // We did enough reads already try to discard some bytes so we not risk to see a OOME.</span><br><span class="line">                // See https://github.com/netty/netty/issues/4275</span><br><span class="line">                numReads = 0;</span><br><span class="line">                //默认超过16次仍未清空cumulation，</span><br><span class="line">                //当读索引超过容量的一半时，将readerIndex之后的数据移动到从0开始</span><br><span class="line">                discardSomeReadBytes();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int size = out.size();</span><br><span class="line">            decodeWasNull = !out.insertSinceRecycled();</span><br><span class="line">            fireChannelRead(ctx, out, size);</span><br><span class="line">            //重置out</span><br><span class="line">            out.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //继续执行下一个handler的channelRead方法</span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、ByteToMessageDecoder的callDecode方法"><a href="#4、ByteToMessageDecoder的callDecode方法" class="headerlink" title="4、ByteToMessageDecoder的callDecode方法"></a>4、ByteToMessageDecoder的callDecode方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //存在待读取数据</span><br><span class="line">        while (in.isReadable()) &#123;</span><br><span class="line">            int outSize = out.size();</span><br><span class="line">            //out中有数据，则说明读取到一行数据，继续执行之后的handler的channelRead方法</span><br><span class="line">            if (outSize &gt; 0) &#123;</span><br><span class="line">                fireChannelRead(ctx, out, outSize);</span><br><span class="line">                out.clear();</span><br><span class="line"></span><br><span class="line">                // Check if this handler was removed before continuing with decoding.</span><br><span class="line">                // If it was removed, it is not safe to continue to operate on the buffer.</span><br><span class="line">                //</span><br><span class="line">                // See:</span><br><span class="line">                // - https://github.com/netty/netty/issues/4635</span><br><span class="line">                if (ctx.isRemoved()) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                outSize = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            //可读取的数据总长度</span><br><span class="line">            int oldInputLength = in.readableBytes();</span><br><span class="line">            //读取一段数据，读至分隔符</span><br><span class="line">            decodeRemovalReentryProtection(ctx, in, out);</span><br><span class="line"></span><br><span class="line">            // Check if this handler was removed before continuing the loop.</span><br><span class="line">            // If it was removed, it is not safe to continue to operate on the buffer.</span><br><span class="line">            //</span><br><span class="line">            // See https://github.com/netty/netty/issues/1664</span><br><span class="line">            //处理器已被移除，跳出循环</span><br><span class="line">            if (ctx.isRemoved()) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //out.size()未变，未读到数据</span><br><span class="line">            if (outSize == out.size()) &#123;</span><br><span class="line">                //未找到换行符，跳出循环</span><br><span class="line">                if (oldInputLength == in.readableBytes()) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //未读取数据，却解码出数据</span><br><span class="line">            if (oldInputLength == in.readableBytes()) &#123;</span><br><span class="line">                throw new DecoderException(</span><br><span class="line">                        StringUtil.simpleClassName(getClass()) +</span><br><span class="line">                                &quot;.decode() did not read anything but decoded a message.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (isSingleDecode()) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (DecoderException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Exception cause) &#123;</span><br><span class="line">        throw new DecoderException(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ByteToMessageDecoder的decodeRemovalReentryProtection方法"><a href="#5、ByteToMessageDecoder的decodeRemovalReentryProtection方法" class="headerlink" title="5、ByteToMessageDecoder的decodeRemovalReentryProtection方法"></a>5、ByteToMessageDecoder的decodeRemovalReentryProtection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">final void decodeRemovalReentryProtection(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">    //子类开始解码标记</span><br><span class="line">    decodeState = STATE_CALLING_CHILD_DECODE;</span><br><span class="line">    try &#123;</span><br><span class="line">        decode(ctx, in, out);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //在decodeState为STATE_CALLING_CHILD_DECODE的时候handlerRemoved被调用会更改decodeState的状态</span><br><span class="line">        boolean removePending = decodeState == STATE_HANDLER_REMOVED_PENDING;</span><br><span class="line">        //重置该状态</span><br><span class="line">        decodeState = STATE_INIT;</span><br><span class="line">        //handler已被删除，继续处理剩余数据</span><br><span class="line">        if (removePending) &#123;</span><br><span class="line">            handlerRemoved(ctx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DelimiterBasedFrameDecoder的decode方法"><a href="#6、DelimiterBasedFrameDecoder的decode方法" class="headerlink" title="6、DelimiterBasedFrameDecoder的decode方法"></a>6、DelimiterBasedFrameDecoder的decode方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception &#123;</span><br><span class="line">    //解码</span><br><span class="line">    Object decoded = decode(ctx, in);</span><br><span class="line">    //读到数据则加入out中</span><br><span class="line">    if (decoded != null) &#123;</span><br><span class="line">        out.add(decoded);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">protected Object decode(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception &#123;</span><br><span class="line">    //使用换行符解码</span><br><span class="line">    if (lineBasedDecoder != null) &#123;</span><br><span class="line">        return lineBasedDecoder.decode(ctx, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    // Try all delimiters and choose the delimiter which yields the shortest frame.</span><br><span class="line">    int minFrameLength = Integer.MAX_VALUE;</span><br><span class="line">    ByteBuf minDelim = null;</span><br><span class="line">    //查找最小分隔长度</span><br><span class="line">    for (ByteBuf delim: delimiters) &#123;</span><br><span class="line">        int frameLength = indexOf(buffer, delim);</span><br><span class="line">        if (frameLength &gt;= 0 &amp;&amp; frameLength &lt; minFrameLength) &#123;</span><br><span class="line">            minFrameLength = frameLength;</span><br><span class="line">            minDelim = delim;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //找到分隔符</span><br><span class="line">    if (minDelim != null) &#123;</span><br><span class="line">        int minDelimLength = minDelim.capacity();</span><br><span class="line">        ByteBuf frame;</span><br><span class="line">        //上一轮因过长被废弃</span><br><span class="line">        if (discardingTooLongFrame) &#123;</span><br><span class="line">            // We&apos;ve just finished discarding a very large frame.</span><br><span class="line">            // Go back to the initial state.</span><br><span class="line">            discardingTooLongFrame = false;</span><br><span class="line">            //跳过被废弃的数据</span><br><span class="line">            buffer.skipBytes(minFrameLength + minDelimLength);</span><br><span class="line">            int tooLongFrameLength = this.tooLongFrameLength;</span><br><span class="line">            this.tooLongFrameLength = 0;</span><br><span class="line">            if (!failFast) &#123;</span><br><span class="line">                fail(tooLongFrameLength);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //数据过长</span><br><span class="line">        if (minFrameLength &gt; maxFrameLength) &#123;</span><br><span class="line">            // Discard read frame.</span><br><span class="line">            //废弃该段数据</span><br><span class="line">            buffer.skipBytes(minFrameLength + minDelimLength);</span><br><span class="line">            fail(minFrameLength);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //读取数据</span><br><span class="line">        if (stripDelimiter) &#123;</span><br><span class="line">            frame = buffer.readRetainedSlice(minFrameLength);</span><br><span class="line">            buffer.skipBytes(minDelimLength);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            frame = buffer.readRetainedSlice(minFrameLength + minDelimLength);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return frame;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //未找到分隔符,</span><br><span class="line">        if (!discardingTooLongFrame) &#123;</span><br><span class="line">            //检查数据是否过长</span><br><span class="line">            if (buffer.readableBytes() &gt; maxFrameLength) &#123;</span><br><span class="line">                // Discard the content of the buffer until a delimiter is found.</span><br><span class="line">                tooLongFrameLength = buffer.readableBytes();</span><br><span class="line">                buffer.skipBytes(buffer.readableBytes());</span><br><span class="line">                discardingTooLongFrame = true;</span><br><span class="line">                if (failFast) &#123;</span><br><span class="line">                    fail(tooLongFrameLength);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        //未找到分隔符,且上轮数据过长被废弃，直接废弃跳过数据</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Still discarding the buffer since a delimiter is not found.</span><br><span class="line">            tooLongFrameLength += buffer.readableBytes();</span><br><span class="line">            buffer.skipBytes(buffer.readableBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、LineBasedFrameDecoder的decode方法"><a href="#7、LineBasedFrameDecoder的decode方法" class="headerlink" title="7、LineBasedFrameDecoder的decode方法"></a>7、LineBasedFrameDecoder的decode方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">protected Object decode(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception &#123;</span><br><span class="line">    //查找换行符位置</span><br><span class="line">    final int eol = findEndOfLine(buffer);</span><br><span class="line">    //上一轮数据是否废弃</span><br><span class="line">    if (!discarding) &#123;</span><br><span class="line">        //存在分隔符</span><br><span class="line">        if (eol &gt;= 0) &#123;</span><br><span class="line">            final ByteBuf frame;</span><br><span class="line">            //待读取长度</span><br><span class="line">            final int length = eol - buffer.readerIndex();</span><br><span class="line">            //分隔符即换行符长度，Unix为“\n”、Windows为“\r\n”</span><br><span class="line">            final int delimLength = buffer.getByte(eol) == &apos;\r&apos;? 2 : 1;</span><br><span class="line">            //长度大于最大长度</span><br><span class="line">            if (length &gt; maxLength) &#123;</span><br><span class="line">                //更新读取标记，废弃数据至分隔符</span><br><span class="line">                buffer.readerIndex(eol + delimLength);</span><br><span class="line">                //广播异常</span><br><span class="line">                fail(ctx, length);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            //是否删除分隔符</span><br><span class="line">            if (stripDelimiter) &#123;</span><br><span class="line">                //读取数据</span><br><span class="line">                frame = buffer.readRetainedSlice(length);</span><br><span class="line">                //跳过分隔符</span><br><span class="line">                buffer.skipBytes(delimLength);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //读取数据包括分隔符</span><br><span class="line">                frame = buffer.readRetainedSlice(length + delimLength);</span><br><span class="line">            &#125;</span><br><span class="line">            return frame;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //数据长度</span><br><span class="line">            final int length = buffer.readableBytes();</span><br><span class="line">            //长度大于最大长度</span><br><span class="line">            if (length &gt; maxLength) &#123;</span><br><span class="line">                //废弃该数据</span><br><span class="line">                discardedBytes = length;</span><br><span class="line">                //更新读取标记</span><br><span class="line">                buffer.readerIndex(buffer.writerIndex());</span><br><span class="line">                //废弃该数据</span><br><span class="line">                discarding = true;</span><br><span class="line">                offset = 0;</span><br><span class="line">                if (failFast) &#123;</span><br><span class="line">                    fail(ctx, &quot;over &quot; + discardedBytes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //上轮数据废弃，且找到分隔符，废弃数据至分隔符</span><br><span class="line">        if (eol &gt;= 0) &#123;</span><br><span class="line">            final int length = discardedBytes + eol - buffer.readerIndex();</span><br><span class="line">            final int delimLength = buffer.getByte(eol) == &apos;\r&apos;? 2 : 1;</span><br><span class="line">            //更新读取标记</span><br><span class="line">            buffer.readerIndex(eol + delimLength);</span><br><span class="line">            //清空废弃数据</span><br><span class="line">            discardedBytes = 0;</span><br><span class="line">            //废弃标记</span><br><span class="line">            discarding = false;</span><br><span class="line">            if (!failFast) &#123;</span><br><span class="line">                fail(ctx, length);</span><br><span class="line">            &#125;</span><br><span class="line">        //上轮数据废弃，且未找到分隔符，废弃数据</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //更新废弃的数据</span><br><span class="line">            discardedBytes += buffer.readableBytes();</span><br><span class="line">            //更新读取标记</span><br><span class="line">            buffer.readerIndex(buffer.writerIndex());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;netty客户端&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="netty" scheme="http://yoursite.com/categories/netty/"/>
    
    
  </entry>
  
  <entry>
    <title>netty源码服务端启动过程</title>
    <link href="http://yoursite.com/2018/07/20/netty%E6%BA%90%E7%A0%81/netty%E6%BA%90%E7%A0%81%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/20/netty源码/netty源码服务端启动过程/</id>
    <published>2018-07-20T12:53:19.772Z</published>
    <updated>2018-07-20T12:52:29.468Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>netty服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class EchoServer &#123;</span><br><span class="line">    private final int port;</span><br><span class="line"></span><br><span class="line">    public EchoServer(int port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line">        final EchoServerHandler serverHandler = new EchoServerHandler();</span><br><span class="line">        //负责接入连接的线程池</span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class="line">        //负责处理连接的线程池</span><br><span class="line">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建ServerBootstrap</span><br><span class="line">            ServerBootstrap b = new ServerBootstrap();</span><br><span class="line">            //设置线程池</span><br><span class="line">            b.group(bossGroup,workerGroup)</span><br><span class="line">             //指定channel类型</span><br><span class="line">             .channel(NioServerSocketChannel.class) </span><br><span class="line">             //设置socket地址</span><br><span class="line">             .localAddress(new InetSocketAddress(port))</span><br><span class="line">             //连接初始化器，客户端成功connect后，初始化接入连接的pipeline</span><br><span class="line">             .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                    //分隔符解码器</span><br><span class="line">                    ch.pipeline().addLast(&quot;framer&quot;,new DelimiterBasedFrameDecoder(1024, Delimiters.lineDelimiter()));</span><br><span class="line">                    //String解码器，将字节数组反序列化为String对象</span><br><span class="line">                    ch.pipeline().addLast(&quot;decoder&quot;, new StringDecoder());</span><br><span class="line">                    //String编码器，将String对象序列化为字节数组</span><br><span class="line">                    ch.pipeline().addLast(&quot;encoder&quot;, new StringEncoder());</span><br><span class="line">                    //EchoServerHandler是@Sharable的，所以我们可以一直用同一个实例</span><br><span class="line">                    ch.pipeline().addLast(serverHandler); </span><br><span class="line">                &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">            //异步绑定服务器，sync()一直等到绑定完成</span><br><span class="line">            ChannelFuture f = b.bind().sync();</span><br><span class="line">            //获得这个Channel的CloseFuture，阻塞当前线程直到关闭操作完成</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //关闭EventLoopGroup，释放所有资源</span><br><span class="line">            bossGroup.shutdownGracefully().sync(); </span><br><span class="line">            workerGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) throws Exception &#123;</span><br><span class="line">        new EchoServer(12000).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>处理器，将收到的消息发回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Sharable           </span><br><span class="line">//表明一个ChannelHandler可以被多个Channel安全的共享</span><br><span class="line">public class EchoServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    //每次收到消息时被调用</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        ByteBuf in = (ByteBuf) msg;</span><br><span class="line">        //把消息打印到控制台</span><br><span class="line">        System.out.println(&quot;Server received: &quot; + in.toString(CharsetUtil.UTF_8));</span><br><span class="line">        //将收到的消息写入发送方，不刷新输出消息       </span><br><span class="line">        ctx.write(in);              </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override                       </span><br><span class="line">    //用来通知handler上一个ChannelRead()是被这批消息中的最后一个消息调用</span><br><span class="line">    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        //刷新缓存的数据到远端，然后关闭Channel</span><br><span class="line">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override                       </span><br><span class="line">    //在读操作异常被抛出时被调用</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        //打印异常堆栈跟踪消息</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        //关闭这个Channel            </span><br><span class="line">        ctx.close();                        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一、创建工作线程池"><a href="#一、创建工作线程池" class="headerlink" title="一、创建工作线程池"></a>一、创建工作线程池</h3><h4 id="1、实例化NioEventLoopGroup"><a href="#1、实例化NioEventLoopGroup" class="headerlink" title="1、实例化NioEventLoopGroup"></a>1、实例化NioEventLoopGroup</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NioEventLoopGroup() &#123;</span><br><span class="line">    this(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NioEventLoopGroup(int nThreads) &#123;</span><br><span class="line">    this(nThreads, (Executor) null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NioEventLoopGroup(int nThreads, Executor executor) &#123;</span><br><span class="line">    this(nThreads, executor, SelectorProvider.provider());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public NioEventLoopGroup(</span><br><span class="line">        int nThreads, Executor executor, final SelectorProvider selectorProvider) &#123;</span><br><span class="line">    this(nThreads, executor, selectorProvider, DefaultSelectStrategyFactory.INSTANCE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public NioEventLoopGroup(int nThreads, Executor executor, final SelectorProvider selectorProvider,</span><br><span class="line">                         final SelectStrategyFactory selectStrategyFactory) &#123;</span><br><span class="line">    super(nThreads, executor, selectorProvider, selectStrategyFactory, RejectedExecutionHandlers.reject());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioEventLoopGroup的父类MultithreadEventLoopGroup<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected MultithreadEventLoopGroup(int nThreads, Executor executor, Object... args) &#123;</span><br><span class="line">    //DEFAULT_EVENT_LOOP_THREADS默认为处理器的数量</span><br><span class="line">    super(nThreads == 0 ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MultithreadEventLoopGroup的父类MultithreadEventExecutorGroup<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected MultithreadEventExecutorGroup(int nThreads, Executor executor, Object... args) &#123;</span><br><span class="line">    this(nThreads, executor, DefaultEventExecutorChooserFactory.INSTANCE, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">protected MultithreadEventExecutorGroup(int nThreads, Executor executor,</span><br><span class="line">                                        EventExecutorChooserFactory chooserFactory, Object... args) &#123;</span><br><span class="line">    if (nThreads &lt;= 0) &#123;</span><br><span class="line">        throw new IllegalArgumentException(String.format(&quot;nThreads: %d (expected: &gt; 0)&quot;, nThreads));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (executor == null) &#123;</span><br><span class="line">        //执行器</span><br><span class="line">        executor = new ThreadPerTaskExecutor(newDefaultThreadFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    children = new EventExecutor[nThreads];</span><br><span class="line"></span><br><span class="line">    //创建nTreads个NioEventLoop对象保存在children数组中</span><br><span class="line">    for (int i = 0; i &lt; nThreads; i ++) &#123;</span><br><span class="line">        boolean success = false;</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建NioEventLoop对象</span><br><span class="line">            children[i] = newChild(executor, args);</span><br><span class="line">            success = true;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: Think about if this is a good exception type</span><br><span class="line">            throw new IllegalStateException(&quot;failed to create a child event loop&quot;, e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //如果newChild方法执行失败，则对前面执行new成功的几个NioEventLoop进行shutdown处理</span><br><span class="line">            if (!success) &#123;</span><br><span class="line">                for (int j = 0; j &lt; i; j ++) &#123;</span><br><span class="line">                    children[j].shutdownGracefully();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                for (int j = 0; j &lt; i; j ++) &#123;</span><br><span class="line">                    EventExecutor e = children[j];</span><br><span class="line">                    try &#123;</span><br><span class="line">                        while (!e.isTerminated()) &#123;</span><br><span class="line">                            e.awaitTermination(Integer.MAX_VALUE, TimeUnit.SECONDS);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (InterruptedException interrupted) &#123;</span><br><span class="line">                        // Let the caller handle the interruption.</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //根据线程个数是否为2的幂，采用不同策略初始化chooser</span><br><span class="line">    //是2的幂返回PowerOfTwoEventExecutorChooser，否则返回GenericEventExecutorChooser</span><br><span class="line">    chooser = chooserFactory.newChooser(children);</span><br><span class="line"></span><br><span class="line">    //线程终止监听器</span><br><span class="line">    final FutureListener&lt;Object&gt; terminationListener = new FutureListener&lt;Object&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void operationComplete(Future&lt;Object&gt; future) throws Exception &#123;</span><br><span class="line">            //线程池线程全部关闭结束，则设置关闭成功</span><br><span class="line">            if (terminatedChildren.incrementAndGet() == children.length) &#123;</span><br><span class="line">                terminationFuture.setSuccess(null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    //添加监听器</span><br><span class="line">    for (EventExecutor e: children) &#123;</span><br><span class="line">        e.terminationFuture().addListener(terminationListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;EventExecutor&gt; childrenSet = new LinkedHashSet&lt;EventExecutor&gt;(children.length);</span><br><span class="line">    Collections.addAll(childrenSet, children);</span><br><span class="line">    //只读的线程集合</span><br><span class="line">    readonlyChildren = Collections.unmodifiableSet(childrenSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、NioEventLoopGroup的newChild方法"><a href="#2、NioEventLoopGroup的newChild方法" class="headerlink" title="2、NioEventLoopGroup的newChild方法"></a>2、NioEventLoopGroup的newChild方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected EventLoop newChild(Executor executor, Object... args) throws Exception &#123;</span><br><span class="line">    return new NioEventLoop(this, executor, (SelectorProvider) args[0],</span><br><span class="line">        ((SelectStrategyFactory) args[1]).newSelectStrategy(), (RejectedExecutionHandler) args[2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、实例化NioEventLoop"><a href="#3、实例化NioEventLoop" class="headerlink" title="3、实例化NioEventLoop"></a>3、实例化NioEventLoop</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">NioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider,</span><br><span class="line">             SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler) &#123;</span><br><span class="line">    super(parent, executor, false, DEFAULT_MAX_PENDING_TASKS, rejectedExecutionHandler);</span><br><span class="line">    if (selectorProvider == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;selectorProvider&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (strategy == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;selectStrategy&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //选择器工厂</span><br><span class="line">    provider = selectorProvider;</span><br><span class="line">    //创建selectorTuple</span><br><span class="line">    final SelectorTuple selectorTuple = openSelector();</span><br><span class="line">    //获取选择器，默认SelectedSelectionKeySetSelector</span><br><span class="line">    selector = selectorTuple.selector;</span><br><span class="line">    //获取nio原生的选择器</span><br><span class="line">    unwrappedSelector = selectorTuple.unwrappedSelector;</span><br><span class="line">    //默认DefaultSelectStrategy</span><br><span class="line">    selectStrategy = strategy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioEventLoop的父类SingleThreadEventLoop<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected SingleThreadEventLoop(EventLoopGroup parent, Executor executor,</span><br><span class="line">                                boolean addTaskWakesUp, int maxPendingTasks,</span><br><span class="line">                                RejectedExecutionHandler rejectedExecutionHandler) &#123;</span><br><span class="line">    super(parent, executor, addTaskWakesUp, maxPendingTasks, rejectedExecutionHandler);</span><br><span class="line">    //任务队列，优先级低于taskQueue</span><br><span class="line">    tailTasks = newTaskQueue(maxPendingTasks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SingleThreadEventLoop的父类SingleThreadEventExecutor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected SingleThreadEventExecutor(EventExecutorGroup parent, Executor executor,</span><br><span class="line">                                    boolean addTaskWakesUp, int maxPendingTasks,</span><br><span class="line">                                    RejectedExecutionHandler rejectedHandler) &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">    //添加任务时是否唤醒线程</span><br><span class="line">    this.addTaskWakesUp = addTaskWakesUp;</span><br><span class="line">    //任务队列大小即未执行的最大任务数</span><br><span class="line">    this.maxPendingTasks = Math.max(16, maxPendingTasks);</span><br><span class="line">    //执行器,ThreadPerTaskExecutor</span><br><span class="line">    this.executor = ObjectUtil.checkNotNull(executor, &quot;executor&quot;);</span><br><span class="line">    //任务队列，LinkedBlockingQueue，优先级低于定时任务</span><br><span class="line">    taskQueue = newTaskQueue(this.maxPendingTasks);</span><br><span class="line">    //拒接策略，默认RejectedExecutionHandler会抛出RejectedExecutionException异常</span><br><span class="line">    rejectedExecutionHandler = ObjectUtil.checkNotNull(rejectedHandler, &quot;rejectedHandler&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二、绑定服务器"><a href="#二、绑定服务器" class="headerlink" title="二、绑定服务器"></a>二、绑定服务器</h3><h4 id="1、AbstractBootstrap的bind方法"><a href="#1、AbstractBootstrap的bind方法" class="headerlink" title="1、AbstractBootstrap的bind方法"></a>1、AbstractBootstrap的bind方法</h4><p>ServerBootstrap的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public ChannelFuture bind() &#123;</span><br><span class="line">    //校验group、channelFactory是否存在</span><br><span class="line">    validate();</span><br><span class="line">    SocketAddress localAddress = this.localAddress;</span><br><span class="line">    if (localAddress == null) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;localAddress not set&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //绑定端口</span><br><span class="line">    return doBind(localAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AbstractBootstrap的doBind方法"><a href="#2、AbstractBootstrap的doBind方法" class="headerlink" title="2、AbstractBootstrap的doBind方法"></a>2、AbstractBootstrap的doBind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">private ChannelFuture doBind(final SocketAddress localAddress) &#123;</span><br><span class="line">    //初始化并注册NioServerSocketChannel</span><br><span class="line">    final ChannelFuture regFuture = initAndRegister();</span><br><span class="line">    final Channel channel = regFuture.channel();</span><br><span class="line">    //检查result是否为CauseHolder（表示失败），是则返回result的cause，否则返回null</span><br><span class="line">    if (regFuture.cause() != null) &#123;</span><br><span class="line">        return regFuture;</span><br><span class="line">    &#125;</span><br><span class="line">    //已注册完成</span><br><span class="line">    if (regFuture.isDone()) &#123;</span><br><span class="line">        // At this point we know that the registration was complete and successful.</span><br><span class="line">        ChannelPromise promise = channel.newPromise();</span><br><span class="line">        //绑定端口</span><br><span class="line">        doBind0(regFuture, channel, localAddress, promise);</span><br><span class="line">        return promise;</span><br><span class="line">    //尚在注册</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Registration future is almost always fulfilled already, but just in case it&apos;s not.</span><br><span class="line">        final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);</span><br><span class="line">        //添加监听器，待注册成功在绑定端口</span><br><span class="line">        regFuture.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                Throwable cause = future.cause();</span><br><span class="line">                if (cause != null) &#123;</span><br><span class="line">                    // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an</span><br><span class="line">                    // IllegalStateException once we try to access the EventLoop of the Channel.</span><br><span class="line">                    promise.setFailure(cause);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // Registration was successful, so set the correct executor to use.</span><br><span class="line">                    // See https://github.com/netty/netty/issues/2586</span><br><span class="line">                    promise.registered();</span><br><span class="line"></span><br><span class="line">                    doBind0(regFuture, channel, localAddress, promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractBootstrap的initAndRegister方法"><a href="#3、AbstractBootstrap的initAndRegister方法" class="headerlink" title="3、AbstractBootstrap的initAndRegister方法"></a>3、AbstractBootstrap的initAndRegister方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">final ChannelFuture initAndRegister() &#123;</span><br><span class="line">    Channel channel = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建NioServerSocketChannel</span><br><span class="line">        channel = channelFactory.newChannel();</span><br><span class="line">        //初始化channel</span><br><span class="line">        init(channel);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        if (channel != null) &#123;</span><br><span class="line">            // channel can be null if newChannel crashed (eg SocketException(&quot;too many open files&quot;))</span><br><span class="line">            channel.unsafe().closeForcibly();</span><br><span class="line">            // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor</span><br><span class="line">            return new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t);</span><br><span class="line">        &#125;</span><br><span class="line">        // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor</span><br><span class="line">        return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);</span><br><span class="line">    &#125;</span><br><span class="line">    //channel注册到NioEventLoop线程上</span><br><span class="line">    ChannelFuture regFuture = config().group().register(channel);</span><br><span class="line">    //cause不为null则注册失败</span><br><span class="line">    if (regFuture.c() != null) &#123;</span><br><span class="line">        //关闭channel</span><br><span class="line">        if (channel.isRegistered()) &#123;</span><br><span class="line">            channel.close();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            channel.unsafe().closeForcibly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If we are here and the promise is not failed, it&apos;s one of the following cases:</span><br><span class="line">    // 1) If we attempted registration from the event loop, the registration has been completed at this point.</span><br><span class="line">    //    i.e. It&apos;s safe to attempt bind() or connect() now because the channel has been registered.</span><br><span class="line">    // 2) If we attempted registration from the other thread, the registration request has been successfully</span><br><span class="line">    //    added to the event loop&apos;s task queue for later execution.</span><br><span class="line">    //    i.e. It&apos;s safe to attempt bind() or connect() now:</span><br><span class="line">    //         because bind() or connect() will be executed *after* the scheduled registration task is executed</span><br><span class="line">    //         because register(), bind(), and connect() are all bound to the same thread.</span><br><span class="line"></span><br><span class="line">    return regFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、实例化NioServerSocketChannel"><a href="#4、实例化NioServerSocketChannel" class="headerlink" title="4、实例化NioServerSocketChannel"></a>4、实例化NioServerSocketChannel</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public NioServerSocketChannel() &#123;</span><br><span class="line">    //newSocket创建ServerSocketChannelImpl</span><br><span class="line">    this(newSocket(DEFAULT_SELECTOR_PROVIDER));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public NioServerSocketChannel(ServerSocketChannel channel) &#123;</span><br><span class="line">    super(null, channel, SelectionKey.OP_ACCEPT);</span><br><span class="line">    //config属性</span><br><span class="line">    config = new NioServerSocketChannelConfig(this, javaChannel().socket());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioServerSocketChannel的父类AbstractNioChannel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected AbstractNioChannel(Channel parent, SelectableChannel ch, int readInterestOp) &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">    this.ch = ch;</span><br><span class="line">    //设置SelectionKey.OP_ACCEPT事件</span><br><span class="line">    this.readInterestOp = readInterestOp;</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置非阻塞</span><br><span class="line">        ch.configureBlocking(false);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ch.close();</span><br><span class="line">        &#125; catch (IOException e2) &#123;</span><br><span class="line">            if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(</span><br><span class="line">                        &quot;Failed to close a partially initialized socket.&quot;, e2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        throw new ChannelException(&quot;Failed to enter non-blocking mode.&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AbstractNioChannel的父类AbstractChannel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected AbstractChannel(Channel parent) &#123;</span><br><span class="line">    this.parent = parent;</span><br><span class="line">    //创建DefaultChannelId</span><br><span class="line">    id = newId();</span><br><span class="line">    //创建NioMessageUnsafe</span><br><span class="line">    unsafe = newUnsafe();</span><br><span class="line">    //创建DefaultChannelPipeline</span><br><span class="line">    pipeline = newChannelPipeline();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、接（二、3）ServerBootstrap的init方法"><a href="#5、接（二、3）ServerBootstrap的init方法" class="headerlink" title="5、接（二、3）ServerBootstrap的init方法"></a>5、接（二、3）ServerBootstrap的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">void init(Channel channel) throws Exception &#123;</span><br><span class="line">    //获取ServerBootstrap的options</span><br><span class="line">    final Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();</span><br><span class="line">    synchronized (options) &#123;</span><br><span class="line">        //设置channel的option</span><br><span class="line">        setChannelOptions(channel, options, logger);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取ServerBootstrap的attrs</span><br><span class="line">    final Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();</span><br><span class="line">    synchronized (attrs) &#123;</span><br><span class="line">        for (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) &#123;</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();</span><br><span class="line">            //设置channel的attr</span><br><span class="line">            channel.attr(key).set(e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取pipeline,默认为DefaultChannelPipeline</span><br><span class="line">    ChannelPipeline p = channel.pipeline();</span><br><span class="line"></span><br><span class="line">    //连接处理线程相关属性</span><br><span class="line">    final EventLoopGroup currentChildGroup = childGroup;</span><br><span class="line">    final ChannelHandler currentChildHandler = childHandler;</span><br><span class="line">    final Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;</span><br><span class="line">    final Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;</span><br><span class="line">    synchronized (childOptions) &#123;</span><br><span class="line">        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(childOptions.size()));</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (childAttrs) &#123;</span><br><span class="line">        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(childAttrs.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //将ChannelInitializer加入pipeline，初始化操作后将ChannelInitializer从pipeline中移除</span><br><span class="line">    p.addLast(new ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        //当channel注册到EventLoop后，对这个Channel执行一些初始化操作</span><br><span class="line">        public void initChannel(final Channel ch) throws Exception &#123;</span><br><span class="line">            final ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">            ChannelHandler handler = config.handler();</span><br><span class="line">            if (handler != null) &#123;</span><br><span class="line">                //ServerBootstrap中的handler加入pipeline中</span><br><span class="line">                pipeline.addLast(handler);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //向Channel注册的NioEventLoop线程中提交一个任务</span><br><span class="line">            ch.eventLoop().execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    //这是一个接入器，接受新请求并交给currentChildGroup线程池处理</span><br><span class="line">                    pipeline.addLast(new ServerBootstrapAcceptor(</span><br><span class="line">                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DefaultChannelPipeline的addLast方法"><a href="#6、DefaultChannelPipeline的addLast方法" class="headerlink" title="6、DefaultChannelPipeline的addLast方法"></a>6、DefaultChannelPipeline的addLast方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final ChannelPipeline addLast(String name, ChannelHandler handler) &#123;</span><br><span class="line">    return addLast(null, name, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler) &#123;</span><br><span class="line">    final AbstractChannelHandlerContext newCtx;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        //检查handler是否已添加,是否被@Sharable注解</span><br><span class="line">        checkMultiplicity(handler);</span><br><span class="line">        //创建DefaultChannelHandlerContext</span><br><span class="line">        newCtx = newContext(group, filterName(name, handler), handler);</span><br><span class="line">        //将newCtx加入队列</span><br><span class="line">        addLast0(newCtx);</span><br><span class="line"></span><br><span class="line">        // If the registered is false it means that the channel was not registered on an eventloop yet.</span><br><span class="line">        // In this case we add the context to the pipeline and add a task that will call</span><br><span class="line">        // ChannelHandler.handlerAdded(...) once the channel is registered.</span><br><span class="line">        //尚未注册</span><br><span class="line">        if (!registered) &#123;</span><br><span class="line">            //handlerState由INIT转换为ADD_PENDING</span><br><span class="line">            newCtx.setAddPending();</span><br><span class="line">            //将ctx封装为PendingHandlerAddedTask加入pendingHandlerCallbackHead队列</span><br><span class="line">            callHandlerCallbackLater(newCtx, true);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        //获取newCtx或channel的线程NioEventLoop</span><br><span class="line">        EventExecutor executor = newCtx.executor();</span><br><span class="line">        //不是当前线程</span><br><span class="line">        if (!executor.inEventLoop()) &#123;</span><br><span class="line">            newCtx.setAddPending();</span><br><span class="line">            //向线程中添加任务</span><br><span class="line">            executor.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    //执行handler的handlerAdded</span><br><span class="line">                    callHandlerAdded0(newCtx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //执行handler的handlerAdded</span><br><span class="line">    callHandlerAdded0(newCtx);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ChannelInitializer的handlerAdded方法"><a href="#7、ChannelInitializer的handlerAdded方法" class="headerlink" title="7、ChannelInitializer的handlerAdded方法"></a>7、ChannelInitializer的handlerAdded方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handlerAdded(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">    //已注册</span><br><span class="line">    if (ctx.channel().isRegistered()) &#123;</span><br><span class="line">        // This should always be true with our current DefaultChannelPipeline implementation.</span><br><span class="line">        // The good thing about calling initChannel(...) in handlerAdded(...) is that there will be no ordering</span><br><span class="line">        // surprises if a ChannelInitializer will add another ChannelInitializer. This is as all handlers</span><br><span class="line">        // will be added in the expected order.</span><br><span class="line">        //初始化方法</span><br><span class="line">        initChannel(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、ChannelInitializer的handlerAdded方法"><a href="#8、ChannelInitializer的handlerAdded方法" class="headerlink" title="8、ChannelInitializer的handlerAdded方法"></a>8、ChannelInitializer的handlerAdded方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private boolean initChannel(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">    if (initMap.putIfAbsent(ctx, Boolean.TRUE) == null) &#123; // Guard against re-entrance.</span><br><span class="line">        try &#123;</span><br><span class="line">            //初始化方法</span><br><span class="line">            initChannel((C) ctx.channel());</span><br><span class="line">        &#125; catch (Throwable cause) &#123;</span><br><span class="line">            // Explicitly call exceptionCaught(...) as we removed the handler before calling initChannel(...).</span><br><span class="line">            // We do so to prevent multiple calls to initChannel(...).</span><br><span class="line">            exceptionCaught(ctx, cause);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //从pipeline中移除自己</span><br><span class="line">            remove(ctx);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（二、3）MultithreadEventLoopGroup的register方法"><a href="#9、接（二、3）MultithreadEventLoopGroup的register方法" class="headerlink" title="9、接（二、3）MultithreadEventLoopGroup的register方法"></a>9、接（二、3）MultithreadEventLoopGroup的register方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture register(Channel channel) &#123;</span><br><span class="line">    //获取线程池中的下一个NioEventLoop线程，注册channel</span><br><span class="line">    return next().register(channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、SingleThreadEventLoop的register方法"><a href="#10、SingleThreadEventLoop的register方法" class="headerlink" title="10、SingleThreadEventLoop的register方法"></a>10、SingleThreadEventLoop的register方法</h4><p>NioEventLoop的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture register(Channel channel) &#123;</span><br><span class="line">    return register(new DefaultChannelPromise(channel, this));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture register(final ChannelPromise promise) &#123;</span><br><span class="line">    ObjectUtil.checkNotNull(promise, &quot;promise&quot;);</span><br><span class="line">    //获取NioMessageUnsafe注册promise</span><br><span class="line">    promise.channel().unsafe().register(this, promise);</span><br><span class="line">    return promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、AbstractUnsafe的register方法"><a href="#11、AbstractUnsafe的register方法" class="headerlink" title="11、AbstractUnsafe的register方法"></a>11、AbstractUnsafe的register方法</h4><p>NioMessageUnsafe的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void register(EventLoop eventLoop, final ChannelPromise promise) &#123;</span><br><span class="line">    if (eventLoop == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;eventLoop&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //已注册</span><br><span class="line">    if (isRegistered()) &#123;</span><br><span class="line">        promise.setFailure(new IllegalStateException(&quot;registered to an event loop already&quot;));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //检查eventLoop是否为NioEventLoop</span><br><span class="line">    if (!isCompatible(eventLoop)) &#123;</span><br><span class="line">        promise.setFailure(</span><br><span class="line">                new IllegalStateException(&quot;incompatible event loop type: &quot; + eventLoop.getClass().getName()));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AbstractChannel.this.eventLoop = eventLoop;</span><br><span class="line"></span><br><span class="line">    //判断当前线程是否为该EventLoop中拥有的线程</span><br><span class="line">    if (eventLoop.inEventLoop()) &#123;</span><br><span class="line">        //注册promise</span><br><span class="line">        register0(promise);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //向NioEventLoop线程中提交一个任务</span><br><span class="line">            eventLoop.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    //注册promise</span><br><span class="line">                    register0(promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            logger.warn(</span><br><span class="line">                    &quot;Force-closing a channel whose registration task was not accepted by an event loop: &#123;&#125;&quot;,</span><br><span class="line">                    AbstractChannel.this, t);</span><br><span class="line">            closeForcibly();</span><br><span class="line">            closeFuture.setClosed();</span><br><span class="line">            safeSetFailure(promise, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="12、SingleThreadEventExecutor的execute方法"><a href="#12、SingleThreadEventExecutor的execute方法" class="headerlink" title="12、SingleThreadEventExecutor的execute方法"></a>12、SingleThreadEventExecutor的execute方法</h4><p>NioEventLoop的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void execute(Runnable task) &#123;</span><br><span class="line">    if (task == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;task&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean inEventLoop = inEventLoop();</span><br><span class="line">    //判断当前线程是否为该EventLoop中拥有的线程</span><br><span class="line">    if (inEventLoop) &#123;</span><br><span class="line">        //添加任务</span><br><span class="line">        addTask(task);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //启动线程</span><br><span class="line">        startThread();</span><br><span class="line">        //添加任务</span><br><span class="line">        addTask(task);</span><br><span class="line">        //线程已关闭</span><br><span class="line">        if (isShutdown() &amp;&amp; removeTask(task)) &#123;</span><br><span class="line">            //拒绝任务</span><br><span class="line">            reject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //添加完任务，唤醒线程</span><br><span class="line">    if (!addTaskWakesUp &amp;&amp; wakesUpForTask(task)) &#123;</span><br><span class="line">        wakeup(inEventLoop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="13、SingleThreadEventExecutor的startThread方法"><a href="#13、SingleThreadEventExecutor的startThread方法" class="headerlink" title="13、SingleThreadEventExecutor的startThread方法"></a>13、SingleThreadEventExecutor的startThread方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void startThread() &#123;</span><br><span class="line">    //状态为未启动</span><br><span class="line">    if (state == ST_NOT_STARTED) &#123;</span><br><span class="line">        //状态转换为已启动</span><br><span class="line">        if (STATE_UPDATER.compareAndSet(this, ST_NOT_STARTED, ST_STARTED)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //启动线程</span><br><span class="line">                doStartThread();</span><br><span class="line">            &#125; catch (Throwable cause) &#123;</span><br><span class="line">                STATE_UPDATER.set(this, ST_NOT_STARTED);</span><br><span class="line">                PlatformDependent.throwException(cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、SingleThreadEventExecutor的doStartThread方法"><a href="#14、SingleThreadEventExecutor的doStartThread方法" class="headerlink" title="14、SingleThreadEventExecutor的doStartThread方法"></a>14、SingleThreadEventExecutor的doStartThread方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">private void doStartThread() &#123;</span><br><span class="line">    assert thread == null;</span><br><span class="line">    //ThreadPerTaskExecutor的execute方法创建一个新的线程</span><br><span class="line">    executor.execute(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            thread = Thread.currentThread();</span><br><span class="line">            //中断线程</span><br><span class="line">            if (interrupted) &#123;</span><br><span class="line">                thread.interrupt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            boolean success = false;</span><br><span class="line">            //更新最近执行时间</span><br><span class="line">            updateLastExecutionTime();</span><br><span class="line">            try &#123;</span><br><span class="line">                //处理任务</span><br><span class="line">                SingleThreadEventExecutor.this.run();</span><br><span class="line">                success = true;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                logger.warn(&quot;Unexpected exception from an event executor: &quot;, t);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                //线程状态切换为关闭</span><br><span class="line">                for (;;) &#123;</span><br><span class="line">                    int oldState = state;</span><br><span class="line">                    if (oldState &gt;= ST_SHUTTING_DOWN || STATE_UPDATER.compareAndSet(</span><br><span class="line">                            SingleThreadEventExecutor.this, oldState, ST_SHUTTING_DOWN)) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Check if confirmShutdown() was called at the end of the loop.</span><br><span class="line">                if (success &amp;&amp; gracefulShutdownStartTime == 0) &#123;</span><br><span class="line">                    logger.error(&quot;Buggy &quot; + EventExecutor.class.getSimpleName() + &quot; implementation; &quot; +</span><br><span class="line">                            SingleThreadEventExecutor.class.getSimpleName() + &quot;.confirmShutdown() must be called &quot; +</span><br><span class="line">                            &quot;before run() implementation terminates.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    // Run all remaining tasks and shutdown hooks.</span><br><span class="line">                    //确认线程是否关闭完成</span><br><span class="line">                    for (;;) &#123;</span><br><span class="line">                        if (confirmShutdown()) &#123;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //关闭selector</span><br><span class="line">                        cleanup();</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        //将SingleThreadEventExecutor的state设置为ST_TERMINATED</span><br><span class="line">                        STATE_UPDATER.set(SingleThreadEventExecutor.this, ST_TERMINATED);</span><br><span class="line">                        //释放线程锁</span><br><span class="line">                        threadLock.release();</span><br><span class="line">                        if (!taskQueue.isEmpty()) &#123;</span><br><span class="line">                            logger.warn(</span><br><span class="line">                                    &quot;An event executor terminated with &quot; +</span><br><span class="line">                                            &quot;non-empty task queue (&quot; + taskQueue.size() + &apos;)&apos;);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        terminationFuture.setSuccess(null);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（二、12）SingleThreadEventExecutor的addTask方法"><a href="#15、接（二、12）SingleThreadEventExecutor的addTask方法" class="headerlink" title="15、接（二、12）SingleThreadEventExecutor的addTask方法"></a>15、接（二、12）SingleThreadEventExecutor的addTask方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void addTask(Runnable task) &#123;</span><br><span class="line">    if (task == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;task&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //添加任务</span><br><span class="line">    if (!offerTask(task)) &#123;</span><br><span class="line">        //拒绝任务</span><br><span class="line">        reject(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、SingleThreadEventExecutor的offerTask方法"><a href="#16、SingleThreadEventExecutor的offerTask方法" class="headerlink" title="16、SingleThreadEventExecutor的offerTask方法"></a>16、SingleThreadEventExecutor的offerTask方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">final boolean offerTask(Runnable task) &#123;</span><br><span class="line">    //线程已关闭</span><br><span class="line">    if (isShutdown()) &#123;</span><br><span class="line">        //拒绝任务</span><br><span class="line">        reject();</span><br><span class="line">    &#125;</span><br><span class="line">    //任务添加进任务队列</span><br><span class="line">    return taskQueue.offer(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（二、11）AbstractUnsafe的register0方法"><a href="#17、接（二、11）AbstractUnsafe的register0方法" class="headerlink" title="17、接（二、11）AbstractUnsafe的register0方法"></a>17、接（二、11）AbstractUnsafe的register0方法</h4><p>NioMessageUnsafe的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">private void register0(ChannelPromise promise) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // check if the channel is still open as it could be closed in the mean time when the register</span><br><span class="line">        // call was outside of the eventLoop</span><br><span class="line">        //promise已关闭</span><br><span class="line">        if (!promise.setUncancellable() || !ensureOpen(promise)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //是否注册过</span><br><span class="line">        boolean firstRegistration = neverRegistered;</span><br><span class="line">        //向当前工作线程的unwrappedSelector上注册关注事件为0，把channel作为Attachment绑定到SelectionKey</span><br><span class="line">        doRegister();</span><br><span class="line">        neverRegistered = false;</span><br><span class="line">        registered = true;</span><br><span class="line"></span><br><span class="line">        // Ensure we call handlerAdded(...) before we actually notify the promise. This is needed as the</span><br><span class="line">        // user may already fire events through the pipeline in the ChannelFutureListener.</span><br><span class="line">        //初次注册，执行所有handler的handlerAdded方法</span><br><span class="line">        pipeline.invokeHandlerAddedIfNeeded();</span><br><span class="line">        //promise设置注册成功，唤醒等待线程，并且广播成功事件，执行监听器的operationComplete方法</span><br><span class="line">        safeSetSuccess(promise);</span><br><span class="line">        //从head开始，依次执行handler的channelRegistered方法</span><br><span class="line">        pipeline.fireChannelRegistered();</span><br><span class="line">        // Only fire a channelActive if the channel has never been registered. This prevents firing</span><br><span class="line">        // multiple channel actives if the channel is deregistered and re-registered.</span><br><span class="line">        // ServerSocketChannelImpl是否绑定</span><br><span class="line">        if (isActive()) &#123;</span><br><span class="line">            if (firstRegistration) &#123;</span><br><span class="line">                //从head开始，依次执行handler的channelActive</span><br><span class="line">                pipeline.fireChannelActive();</span><br><span class="line">            &#125; else if (config().isAutoRead()) &#123;</span><br><span class="line">                // This channel was registered before and autoRead() is set. This means we need to begin read</span><br><span class="line">                // again so that we process inbound data.</span><br><span class="line">                //</span><br><span class="line">                // See https://github.com/netty/netty/issues/4805</span><br><span class="line">                //注册关注读事件就绪</span><br><span class="line">                beginRead();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        // Close the channel directly to avoid FD leak.</span><br><span class="line">        closeForcibly();</span><br><span class="line">        closeFuture.setClosed();</span><br><span class="line">        safeSetFailure(promise, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="18、接（二、2）AbstractBootstrap的doBind0方法"><a href="#18、接（二、2）AbstractBootstrap的doBind0方法" class="headerlink" title="18、接（二、2）AbstractBootstrap的doBind0方法"></a>18、接（二、2）AbstractBootstrap的doBind0方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private static void doBind0(</span><br><span class="line">        final ChannelFuture regFuture, final Channel channel,</span><br><span class="line">        final SocketAddress localAddress, final ChannelPromise promise) &#123;</span><br><span class="line"></span><br><span class="line">    // This method is invoked before channelRegistered() is triggered.  Give user handlers a chance to set up</span><br><span class="line">    // the pipeline in its channelRegistered() implementation.</span><br><span class="line">    //向注册线程提交任务</span><br><span class="line">    channel.eventLoop().execute(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            if (regFuture.isSuccess()) &#123;</span><br><span class="line">                //NioServerSocketChannel绑定端口</span><br><span class="line">                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                promise.setFailure(regFuture.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、AbstractChannel的bind方法"><a href="#19、AbstractChannel的bind方法" class="headerlink" title="19、AbstractChannel的bind方法"></a>19、AbstractChannel的bind方法</h4><p>NioServerSocketChannel的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture bind(SocketAddress localAddress, ChannelPromise promise) &#123;</span><br><span class="line">    return pipeline.bind(localAddress, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="20、DefaultChannelPipeline的bind方法"><a href="#20、DefaultChannelPipeline的bind方法" class="headerlink" title="20、DefaultChannelPipeline的bind方法"></a>20、DefaultChannelPipeline的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final ChannelFuture bind(SocketAddress localAddress, ChannelPromise promise) &#123;</span><br><span class="line">    //hadler的队尾</span><br><span class="line">    return tail.bind(localAddress, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、AbstractChannelHandlerContext的bind方法"><a href="#21、AbstractChannelHandlerContext的bind方法" class="headerlink" title="21、AbstractChannelHandlerContext的bind方法"></a>21、AbstractChannelHandlerContext的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ChannelFuture bind(final SocketAddress localAddress, final ChannelPromise promise) &#123;</span><br><span class="line">    if (localAddress == null) &#123;</span><br><span class="line">        throw new NullPointerException(&quot;localAddress&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //已失效</span><br><span class="line">    if (isNotValidPromise(promise, false)) &#123;</span><br><span class="line">        // cancelled</span><br><span class="line">        return promise;</span><br><span class="line">    &#125;</span><br><span class="line">    //往前查找第一个outbound类型的handler，默认会查出HeadContext</span><br><span class="line">    final AbstractChannelHandlerContext next = findContextOutbound();</span><br><span class="line">    //获取线程</span><br><span class="line">    EventExecutor executor = next.executor();</span><br><span class="line">    if (executor.inEventLoop()) &#123;</span><br><span class="line">        //绑定端口</span><br><span class="line">        next.invokeBind(localAddress, promise);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        safeExecute(executor, new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                next.invokeBind(localAddress, promise);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, promise, null);</span><br><span class="line">    &#125;</span><br><span class="line">    return promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、HeadContext的bind方法"><a href="#22、HeadContext的bind方法" class="headerlink" title="22、HeadContext的bind方法"></a>22、HeadContext的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void bind(</span><br><span class="line">        ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">    //NioMessageUnsafe</span><br><span class="line">    unsafe.bind(localAddress, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、AbstractUnsafe的bind方法"><a href="#23、AbstractUnsafe的bind方法" class="headerlink" title="23、AbstractUnsafe的bind方法"></a>23、AbstractUnsafe的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void bind(final SocketAddress localAddress, final ChannelPromise promise) &#123;</span><br><span class="line">    assertEventLoop();</span><br><span class="line"></span><br><span class="line">    if (!promise.setUncancellable() || !ensureOpen(promise)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // See: https://github.com/netty/netty/issues/576</span><br><span class="line">    if (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) &amp;&amp;</span><br><span class="line">        localAddress instanceof InetSocketAddress &amp;&amp;</span><br><span class="line">        !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() &amp;&amp;</span><br><span class="line">        !PlatformDependent.isWindows() &amp;&amp; !PlatformDependent.maybeSuperUser()) &#123;</span><br><span class="line">        // Warn a user about the fact that a non-root user can&apos;t receive a</span><br><span class="line">        // broadcast packet on *nix if the socket is bound on non-wildcard address.</span><br><span class="line">        logger.warn(</span><br><span class="line">                &quot;A non-root user can&apos;t receive a broadcast packet if the socket &quot; +</span><br><span class="line">                &quot;is not bound to a wildcard address; binding to a non-wildcard &quot; +</span><br><span class="line">                &quot;address (&quot; + localAddress + &quot;) anyway as requested.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean wasActive = isActive();</span><br><span class="line">    try &#123;</span><br><span class="line">        //绑定端口</span><br><span class="line">        doBind(localAddress);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        safeSetFailure(promise, t);</span><br><span class="line">        closeIfClosed();</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!wasActive &amp;&amp; isActive()) &#123;</span><br><span class="line">        invokeLater(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                pipeline.fireChannelActive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    safeSetSuccess(promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、NioServerSocketChannel的bind方法"><a href="#24、NioServerSocketChannel的bind方法" class="headerlink" title="24、NioServerSocketChannel的bind方法"></a>24、NioServerSocketChannel的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doBind(SocketAddress localAddress) throws Exception &#123;</span><br><span class="line">    //判断java版本</span><br><span class="line">    if (PlatformDependent.javaVersion() &gt;= 7) &#123;</span><br><span class="line">        //ServerSocketChannel绑定端口，参数为绑定地址、最大等待连接数量</span><br><span class="line">        javaChannel().bind(localAddress, config.getBacklog());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        javaChannel().socket().bind(localAddress, config.getBacklog());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、处理任务"><a href="#三、处理任务" class="headerlink" title="三、处理任务"></a>三、处理任务</h3><h4 id="1、NioEventLoop的run方法"><a href="#1、NioEventLoop的run方法" class="headerlink" title="1、NioEventLoop的run方法"></a>1、NioEventLoop的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void run() &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //由taskQueue、tailTasks是否为空、选择是否采用阻塞等待的方式获取连接</span><br><span class="line">            switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;</span><br><span class="line">                case SelectStrategy.CONTINUE:</span><br><span class="line">                    continue;</span><br><span class="line">                case SelectStrategy.SELECT:</span><br><span class="line">                    //</span><br><span class="line">                    select(wakenUp.getAndSet(false));</span><br><span class="line"></span><br><span class="line">                    // &apos;wakenUp.compareAndSet(false, true)&apos; is always evaluated</span><br><span class="line">                    // before calling &apos;selector.wakeup()&apos; to reduce the wake-up</span><br><span class="line">                    // overhead. (Selector.wakeup() is an expensive operation.)</span><br><span class="line">                    //</span><br><span class="line">                    // However, there is a race condition in this approach.</span><br><span class="line">                    // The race condition is triggered when &apos;wakenUp&apos; is set to</span><br><span class="line">                    // true too early.</span><br><span class="line">                    //</span><br><span class="line">                    // &apos;wakenUp&apos; is set to true too early if:</span><br><span class="line">                    // 1) Selector is waken up between &apos;wakenUp.set(false)&apos; and</span><br><span class="line">                    //    &apos;selector.select(...)&apos;. (BAD)</span><br><span class="line">                    // 2) Selector is waken up between &apos;selector.select(...)&apos; and</span><br><span class="line">                    //    &apos;if (wakenUp.get()) &#123; ... &#125;&apos;. (OK)</span><br><span class="line">                    //</span><br><span class="line">                    // In the first case, &apos;wakenUp&apos; is set to true and the</span><br><span class="line">                    // following &apos;selector.select(...)&apos; will wake up immediately.</span><br><span class="line">                    // Until &apos;wakenUp&apos; is set to false again in the next round,</span><br><span class="line">                    // &apos;wakenUp.compareAndSet(false, true)&apos; will fail, and therefore</span><br><span class="line">                    // any attempt to wake up the Selector will fail, too, causing</span><br><span class="line">                    // the following &apos;selector.select(...)&apos; call to block</span><br><span class="line">                    // unnecessarily.</span><br><span class="line">                    //</span><br><span class="line">                    // To fix this problem, we wake up the selector again if wakenUp</span><br><span class="line">                    // is true immediately after selector.select(...).</span><br><span class="line">                    // It is inefficient in that it wakes up the selector for both</span><br><span class="line">                    // the first case (BAD - wake-up required) and the second case</span><br><span class="line">                    // (OK - no wake-up required).</span><br><span class="line"></span><br><span class="line">                    if (wakenUp.get()) &#123;</span><br><span class="line">                        //唤醒selector</span><br><span class="line">                        selector.wakeup();</span><br><span class="line">                    &#125;</span><br><span class="line">                    // fall through</span><br><span class="line">                default:</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cancelledKeys = 0;</span><br><span class="line">            needsToSelectAgain = false;</span><br><span class="line">            //默认50</span><br><span class="line">            final int ioRatio = this.ioRatio;</span><br><span class="line">            //不考虑IO耗时的占比</span><br><span class="line">            if (ioRatio == 100) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //处理selector中的就绪事件</span><br><span class="line">                    processSelectedKeys();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    // Ensure we always run tasks.</span><br><span class="line">                    //处理任务队列中的任务</span><br><span class="line">                    runAllTasks();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                final long ioStartTime = System.nanoTime();</span><br><span class="line">                try &#123;</span><br><span class="line">                    processSelectedKeys();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    // Ensure we always run tasks.</span><br><span class="line">                    final long ioTime = System.nanoTime() - ioStartTime;</span><br><span class="line">                    //处理任务队列中的任务,处理时间为ioTime按比例计算所得，时间用尽则不继续其他处理任务</span><br><span class="line">                    runAllTasks(ioTime * (100 - ioRatio) / ioRatio);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            handleLoopException(t);</span><br><span class="line">        &#125;</span><br><span class="line">        // Always handle shutdown even if the loop processing threw an exception.</span><br><span class="line">        try &#123;</span><br><span class="line">            if (isShuttingDown()) &#123;</span><br><span class="line">                closeAll();</span><br><span class="line">                if (confirmShutdown()) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            handleLoopException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、NioEventLoop的select方法"><a href="#2、NioEventLoop的select方法" class="headerlink" title="2、NioEventLoop的select方法"></a>2、NioEventLoop的select方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">private void select(boolean oldWakenUp) throws IOException &#123;</span><br><span class="line">    Selector selector = this.selector;</span><br><span class="line">    try &#123;</span><br><span class="line">        int selectCnt = 0;</span><br><span class="line">        long currentTimeNanos = System.nanoTime();</span><br><span class="line">        //计算延迟任务队列中第一个任务的到期执行时间</span><br><span class="line">        long selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            //计算超时时间</span><br><span class="line">            long timeoutMillis = (selectDeadLineNanos - currentTimeNanos + 500000L) / 1000000L;</span><br><span class="line">            //已超过，退出循环</span><br><span class="line">            if (timeoutMillis &lt;= 0) &#123;</span><br><span class="line">                if (selectCnt == 0) &#123;</span><br><span class="line">                    selector.selectNow();</span><br><span class="line">                    selectCnt = 1;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // If a task was submitted when wakenUp value was true, the task didn&apos;t get a chance to call</span><br><span class="line">            // Selector#wakeup. So we need to check task queue again before executing select operation.</span><br><span class="line">            // If we don&apos;t, the task might be pended until select operation was timed out.</span><br><span class="line">            // It might be pended until idle timeout if IdleStateHandler existed in pipeline.</span><br><span class="line">            //任务队列中发现任务</span><br><span class="line">            if (hasTasks() &amp;&amp; wakenUp.compareAndSet(false, true)) &#123;</span><br><span class="line">                selector.selectNow();</span><br><span class="line">                selectCnt = 1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //阻塞等待</span><br><span class="line">            int selectedKeys = selector.select(timeoutMillis);</span><br><span class="line">            selectCnt ++;</span><br><span class="line"></span><br><span class="line">            if (selectedKeys != 0 || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) &#123;</span><br><span class="line">                // - Selected something,</span><br><span class="line">                // - waken up by user, or</span><br><span class="line">                // - the task queue has a pending task.</span><br><span class="line">                // - a scheduled task is ready for processing</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //线程中断</span><br><span class="line">            if (Thread.interrupted()) &#123;</span><br><span class="line">                // Thread was interrupted so reset selected keys and break so we not run into a busy loop.</span><br><span class="line">                // As this is most likely a bug in the handler of the user or it&apos;s client library we will</span><br><span class="line">                // also log it.</span><br><span class="line">                //</span><br><span class="line">                // See https://github.com/netty/netty/issues/2426</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Selector.select() returned prematurely because &quot; +</span><br><span class="line">                            &quot;Thread.currentThread().interrupt() was called. Use &quot; +</span><br><span class="line">                            &quot;NioEventLoop.shutdownGracefully() to shutdown the NioEventLoop.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                selectCnt = 1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            long time = System.nanoTime();</span><br><span class="line">            //selector的select已等待了timeoutMillis长的时间</span><br><span class="line">            if (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) &gt;= currentTimeNanos) &#123;</span><br><span class="line">                // timeoutMillis elapsed without anything selected.</span><br><span class="line">                selectCnt = 1;</span><br><span class="line">            //selectCnt大于512，说明循环了512次，使用rebuildSelector来消除select(timeout)不会阻塞的bug</span><br><span class="line">            &#125; else if (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; 0 &amp;&amp;</span><br><span class="line">                    selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;</span><br><span class="line">                // The selector returned prematurely many times in a row.</span><br><span class="line">                // Rebuild the selector to work around the problem.</span><br><span class="line">                logger.warn(</span><br><span class="line">                        &quot;Selector.select() returned prematurely &#123;&#125; times in a row; rebuilding Selector &#123;&#125;.&quot;,</span><br><span class="line">                        selectCnt, selector);</span><br><span class="line"></span><br><span class="line">                rebuildSelector();</span><br><span class="line">                selector = this.selector;</span><br><span class="line"></span><br><span class="line">                // Select again to populate selectedKeys.</span><br><span class="line">                selector.selectNow();</span><br><span class="line">                selectCnt = 1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            currentTimeNanos = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (selectCnt &gt; MIN_PREMATURE_SELECTOR_RETURNS) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Selector.select() returned prematurely &#123;&#125; times in a row for Selector &#123;&#125;.&quot;,</span><br><span class="line">                        selectCnt - 1, selector);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (CancelledKeyException e) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(CancelledKeyException.class.getSimpleName() + &quot; raised by a Selector &#123;&#125; - JDK bug?&quot;,</span><br><span class="line">                    selector, e);</span><br><span class="line">        &#125;</span><br><span class="line">        // Harmless exception - log anyway</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（三、1）NioEventLoop的processSelectedKeys方法"><a href="#3、接（三、1）NioEventLoop的processSelectedKeys方法" class="headerlink" title="3、接（三、1）NioEventLoop的processSelectedKeys方法"></a>3、接（三、1）NioEventLoop的processSelectedKeys方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void processSelectedKeys() &#123;</span><br><span class="line">    //selectedKeys为封装以后的就绪事件的selectedKey集合</span><br><span class="line">    if (selectedKeys != null) &#123;</span><br><span class="line">        processSelectedKeysOptimized();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //未封装直接获取selector的selectedKey集合</span><br><span class="line">        processSelectedKeysPlain(selector.selectedKeys());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、NioEventLoop的processSelectedKeysOptimized方法"><a href="#4、NioEventLoop的processSelectedKeysOptimized方法" class="headerlink" title="4、NioEventLoop的processSelectedKeysOptimized方法"></a>4、NioEventLoop的processSelectedKeysOptimized方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private void processSelectedKeysOptimized() &#123;</span><br><span class="line">    for (int i = 0; i &lt; selectedKeys.size; ++i) &#123;</span><br><span class="line">        //就绪的事件的SelectionKey</span><br><span class="line">        final SelectionKey k = selectedKeys.keys[i];</span><br><span class="line">        // null out entry in the array to allow to have it GC&apos;ed once the Channel close</span><br><span class="line">        // See https://github.com/netty/netty/issues/2363</span><br><span class="line">        selectedKeys.keys[i] = null;</span><br><span class="line">        //获取key关联的对象</span><br><span class="line">        final Object a = k.attachment();</span><br><span class="line">        //key关联两种不同类型的对象，一种是AbstractNioChannel，一种是NioTask </span><br><span class="line">        if (a instanceof AbstractNioChannel) &#123;</span><br><span class="line">            processSelectedKey(k, (AbstractNioChannel) a);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            NioTask&lt;SelectableChannel&gt; task = (NioTask&lt;SelectableChannel&gt;) a;</span><br><span class="line">            processSelectedKey(k, task);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果需要重新select,取消的SelectionKey个数大于256</span><br><span class="line">        if (needsToSelectAgain) &#123;</span><br><span class="line">            // null out entries in the array to allow to have it GC&apos;ed once the Channel close</span><br><span class="line">            // See https://github.com/netty/netty/issues/2363</span><br><span class="line">            selectedKeys.reset(i + 1);</span><br><span class="line">            //重新执行selector的selectNow</span><br><span class="line">            selectAgain();</span><br><span class="line">            i = -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、NioEventLoop的processSelectedKey方法"><a href="#5、NioEventLoop的processSelectedKey方法" class="headerlink" title="5、NioEventLoop的processSelectedKey方法"></a>5、NioEventLoop的processSelectedKey方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) &#123;</span><br><span class="line">    final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();</span><br><span class="line">    //SelectionKey已失效，则关闭channel</span><br><span class="line">    if (!k.isValid()) &#123;</span><br><span class="line">        final EventLoop eventLoop;</span><br><span class="line">        try &#123;</span><br><span class="line">            eventLoop = ch.eventLoop();</span><br><span class="line">        &#125; catch (Throwable ignored) &#123;</span><br><span class="line">            // If the channel implementation throws an exception because there is no event loop, we ignore this</span><br><span class="line">            // because we are only trying to determine if ch is registered to this event loop and thus has authority</span><br><span class="line">            // to close ch.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop</span><br><span class="line">        // and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is</span><br><span class="line">        // still healthy and should not be closed.</span><br><span class="line">        // See https://github.com/netty/netty/issues/5125</span><br><span class="line">        if (eventLoop != this || eventLoop == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // close the channel if the key is not valid anymore</span><br><span class="line">        unsafe.close(unsafe.voidPromise());</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        int readyOps = k.readyOps();</span><br><span class="line">        // We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise</span><br><span class="line">        // the NIO JDK channel implementation may throw a NotYetConnectedException.</span><br><span class="line">        //如果CONNECT就绪</span><br><span class="line">        if ((readyOps &amp; SelectionKey.OP_CONNECT) != 0) &#123;</span><br><span class="line">            // remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span><br><span class="line">            // See https://github.com/netty/netty/issues/924</span><br><span class="line">            int ops = k.interestOps();</span><br><span class="line">            ops &amp;= ~SelectionKey.OP_CONNECT;</span><br><span class="line">            //移除对OP_CONNECT的关注</span><br><span class="line">            k.interestOps(ops);</span><br><span class="line">            //处理连接接入</span><br><span class="line">            unsafe.finishConnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Process OP_WRITE first as we may be able to write some queued buffers and so free memory.</span><br><span class="line">        //如果WRITE就绪</span><br><span class="line">        if ((readyOps &amp; SelectionKey.OP_WRITE) != 0) &#123;</span><br><span class="line">            // Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write</span><br><span class="line">            //刷新数据到客户端</span><br><span class="line">            ch.unsafe().forceFlush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead</span><br><span class="line">        // to a spin loop</span><br><span class="line">        //如果READ或ACCEPT就绪，检查是否为0，解决JDK可能会产生死循环的一个bug</span><br><span class="line">        if ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) &#123;</span><br><span class="line">            //读取数据</span><br><span class="line">            unsafe.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (CancelledKeyException ignored) &#123;</span><br><span class="line">        unsafe.close(unsafe.voidPromise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（三、1）SingleThreadEventExecutor的runAllTasks方法"><a href="#6、接（三、1）SingleThreadEventExecutor的runAllTasks方法" class="headerlink" title="6、接（三、1）SingleThreadEventExecutor的runAllTasks方法"></a>6、接（三、1）SingleThreadEventExecutor的runAllTasks方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected boolean runAllTasks() &#123;</span><br><span class="line">    assert inEventLoop();</span><br><span class="line">    boolean fetchedAll;</span><br><span class="line">    boolean ranAtLeastOne = false;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        //将要执行的定时任务加入taskQueue</span><br><span class="line">        fetchedAll = fetchFromScheduledTaskQueue();</span><br><span class="line">        //执行taskQueue中的任务</span><br><span class="line">        if (runAllTasksFrom(taskQueue)) &#123;</span><br><span class="line">            ranAtLeastOne = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (!fetchedAll); // keep on processing until we fetched all scheduled tasks.</span><br><span class="line">    //更新最新执行时间</span><br><span class="line">    if (ranAtLeastOne) &#123;</span><br><span class="line">        lastExecutionTime = ScheduledFutureTask.nanoTime();</span><br><span class="line">    &#125;</span><br><span class="line">    afterRunningAllTasks();</span><br><span class="line">    return ranAtLeastOne;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、SingleThreadEventExecutor的pollScheduledTask方法"><a href="#7、SingleThreadEventExecutor的pollScheduledTask方法" class="headerlink" title="7、SingleThreadEventExecutor的pollScheduledTask方法"></a>7、SingleThreadEventExecutor的pollScheduledTask方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private boolean fetchFromScheduledTaskQueue() &#123;</span><br><span class="line">    long nanoTime = AbstractScheduledEventExecutor.nanoTime();</span><br><span class="line">    //获取执行时间小于nanoTime的任务</span><br><span class="line">    Runnable scheduledTask  = pollScheduledTask(nanoTime);</span><br><span class="line">    //scheduledTask加入taskQueue</span><br><span class="line">    while (scheduledTask != null) &#123;</span><br><span class="line">        if (!taskQueue.offer(scheduledTask)) &#123;</span><br><span class="line">            // No space left in the task queue add it back to the scheduledTaskQueue so we pick it up again.</span><br><span class="line">            scheduledTaskQueue().add((ScheduledFutureTask&lt;?&gt;) scheduledTask);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledTask  = pollScheduledTask(nanoTime);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（三、6）SingleThreadEventExecutor的runAllTasksFrom方法"><a href="#8、接（三、6）SingleThreadEventExecutor的runAllTasksFrom方法" class="headerlink" title="8、接（三、6）SingleThreadEventExecutor的runAllTasksFrom方法"></a>8、接（三、6）SingleThreadEventExecutor的runAllTasksFrom方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected final boolean runAllTasksFrom(Queue&lt;Runnable&gt; taskQueue) &#123;</span><br><span class="line">    //获取任务</span><br><span class="line">    Runnable task = pollTaskFrom(taskQueue);</span><br><span class="line">    if (task == null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        //执行任务，执行task的run方法</span><br><span class="line">        safeExecute(task);</span><br><span class="line">        //获取任务</span><br><span class="line">        task = pollTaskFrom(taskQueue);</span><br><span class="line">        if (task == null) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、阻塞"><a href="#四、阻塞" class="headerlink" title="四、阻塞"></a>四、阻塞</h3><h4 id="1、DefaultChannelPromise的sync方法"><a href="#1、DefaultChannelPromise的sync方法" class="headerlink" title="1、DefaultChannelPromise的sync方法"></a>1、DefaultChannelPromise的sync方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Promise&lt;V&gt; sync() throws InterruptedException &#123;</span><br><span class="line">    //阻塞</span><br><span class="line">    await();</span><br><span class="line">    //cause存在则表示失败，抛出异常</span><br><span class="line">    rethrowIfFailed();</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultPromise的await方法"><a href="#2、DefaultPromise的await方法" class="headerlink" title="2、DefaultPromise的await方法"></a>2、DefaultPromise的await方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Promise&lt;V&gt; await() throws InterruptedException &#123;</span><br><span class="line">    //检查result确定是否处理完成</span><br><span class="line">    if (isDone()) &#123;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Thread.interrupted()) &#123;</span><br><span class="line">        throw new InterruptedException(toString());</span><br><span class="line">    &#125;</span><br><span class="line">    //检查线程</span><br><span class="line">    checkDeadLock();</span><br><span class="line"></span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        while (!isDone()) &#123;</span><br><span class="line">            //等待次数加一</span><br><span class="line">            incWaiters();</span><br><span class="line">            try &#123;</span><br><span class="line">                //等待</span><br><span class="line">                wait();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                //等待次数减一</span><br><span class="line">                decWaiters();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;netty服务端&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="netty" scheme="http://yoursite.com/categories/netty/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot源码内嵌tomcat</title>
    <link href="http://yoursite.com/2018/07/13/spring%E6%BA%90%E7%A0%81/springboot%E6%BA%90%E7%A0%81%E5%86%85%E5%B5%8Ctomcat/"/>
    <id>http://yoursite.com/2018/07/13/spring源码/springboot源码内嵌tomcat/</id>
    <published>2018-07-13T15:09:57.670Z</published>
    <updated>2018-07-14T02:51:27.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、EmbeddedServletContainerAutoConfiguration自动配置类"><a href="#一、EmbeddedServletContainerAutoConfiguration自动配置类" class="headerlink" title="一、EmbeddedServletContainerAutoConfiguration自动配置类"></a>一、EmbeddedServletContainerAutoConfiguration自动配置类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">//存在该类</span><br><span class="line">@ConditionalOnClass(ServletRequest.class)</span><br><span class="line">//判断是否是servlet web环境</span><br><span class="line">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="line">//自动配置server属性</span><br><span class="line">@EnableConfigurationProperties(ServerProperties.class)</span><br><span class="line">//注册webServerFactoryCustomizerBeanPostProcessor处理器,实例化容器工厂bean时初始化容器工厂</span><br><span class="line">//注册容器工厂</span><br><span class="line">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="line">        ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="line">        ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="line">        ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br><span class="line">public class ServletWebServerFactoryAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    //创建servlet初始化器工厂</span><br><span class="line">    public ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(</span><br><span class="line">            ServerProperties serverProperties) &#123;</span><br><span class="line">        return new ServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnClass(name = &quot;org.apache.catalina.startup.Tomcat&quot;)</span><br><span class="line">    //创建tomcat初始化器工厂</span><br><span class="line">    public TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(</span><br><span class="line">            ServerProperties serverProperties) &#123;</span><br><span class="line">        return new TomcatServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat"><a href="#1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat" class="headerlink" title="1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat"></a>1、ServletWebServerFactoryConfiguration配置类的内部类EmbeddedTomcat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">//存在Servlet、Tomcat、UpgradeProtocol类</span><br><span class="line">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</span><br><span class="line">//未创建ServletWebServerFactory的bean</span><br><span class="line">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line">public static class EmbeddedTomcat &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    //创建容器工厂</span><br><span class="line">    public TomcatServletWebServerFactory tomcatServletWebServerFactory() &#123;</span><br><span class="line">        return new TomcatServletWebServerFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、AnnotationConfigServletWebServerApplicationContext容器"><a href="#二、AnnotationConfigServletWebServerApplicationContext容器" class="headerlink" title="二、AnnotationConfigServletWebServerApplicationContext容器"></a>二、AnnotationConfigServletWebServerApplicationContext容器</h3><h4 id="1、实例化AnnotationConfigServletWebServerApplicationContext"><a href="#1、实例化AnnotationConfigServletWebServerApplicationContext" class="headerlink" title="1、实例化AnnotationConfigServletWebServerApplicationContext"></a>1、实例化AnnotationConfigServletWebServerApplicationContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationConfigServletWebServerApplicationContext() &#123;</span><br><span class="line">    this.reader = new AnnotatedBeanDefinitionReader(this);</span><br><span class="line">    this.scanner = new ClassPathBeanDefinitionScanner(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationConfigServletWebServerApplicationContext的refresh方法"><a href="#2、AnnotationConfigServletWebServerApplicationContext的refresh方法" class="headerlink" title="2、AnnotationConfigServletWebServerApplicationContext的refresh方法"></a>2、AnnotationConfigServletWebServerApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //刷新容器</span><br><span class="line">        super.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (RuntimeException ex) &#123;</span><br><span class="line">        //关闭web容器</span><br><span class="line">        stopAndReleaseReactiveWebServer();</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractApplicationContext的refresh方法"><a href="#3、AbstractApplicationContext的refresh方法" class="headerlink" title="3、AbstractApplicationContext的refresh方法"></a>3、AbstractApplicationContext的refresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">        synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">            // Prepare this context for refreshing.</span><br><span class="line">            //清空scanner缓存、准备刷新容器,与前文容器相同</span><br><span class="line">            prepareRefresh();</span><br><span class="line"></span><br><span class="line">            // Tell the subclass to refresh the internal bean factory.</span><br><span class="line">            //直接获取容器父类GenericApplicationContext中的DefaultListableBeanFactory对象</span><br><span class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">            // Prepare the bean factory for use in this context.</span><br><span class="line">            //对BeanFactory进行功能填充，与前文容器相同</span><br><span class="line">            prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                // Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">                //扫描器扫描AnnotationConfigReactiveWebServerApplicationContext的basePackages</span><br><span class="line">                //并且解析annotatedClasses</span><br><span class="line">                postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Invoke factory processors registered as beans in the context.</span><br><span class="line">                //激活BeanFactory处理器，与前文容器相同</span><br><span class="line">                invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Register bean processors that intercept bean creation.</span><br><span class="line">                //注册拦截bean的处理器，与前文容器相同</span><br><span class="line">                registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Initialize message source for this context.</span><br><span class="line">                //初始化国际化处理，与前文容器相同</span><br><span class="line">                initMessageSource();</span><br><span class="line"></span><br><span class="line">                // Initialize event multicaster for this context.</span><br><span class="line">                //初始化应用消息广播器，与前文容器相同</span><br><span class="line">                initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">                // Initialize other special beans in specific context subclasses.</span><br><span class="line">                //创建web容器</span><br><span class="line">                onRefresh();</span><br><span class="line"></span><br><span class="line">                // Check for listener beans and register them.</span><br><span class="line">                //注册监听器，与前文容器相同</span><br><span class="line">                registerListeners();</span><br><span class="line"></span><br><span class="line">                // Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">                //初始化剩下的单例（非懒加载的），与前文容器相同</span><br><span class="line">                finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">                // Last step: publish corresponding event.</span><br><span class="line">                //完成刷新过程，与前文容器相同</span><br><span class="line">                finishRefresh();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            catch (BeansException ex) &#123;</span><br><span class="line">                if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">                            &quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Destroy already created singletons to avoid dangling resources.</span><br><span class="line">                destroyBeans();</span><br><span class="line"></span><br><span class="line">                // Reset &apos;active&apos; flag.</span><br><span class="line">                cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">                // Propagate exception to caller.</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            finally &#123;</span><br><span class="line">                // Reset common introspection caches in Spring&apos;s core, since we</span><br><span class="line">                // might not ever need metadata for singleton beans anymore...</span><br><span class="line">                //清空缓存</span><br><span class="line">                resetCommonCaches();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line">#### 4、ServletWebServerApplicationContext的onRefresh方法</span><br></pre></td></tr></table></figure><pre><code>@Overrideprotected void onRefresh() {    super.onRefresh();    try {        //创建web容器        createWebServer();    }    catch (Throwable ex) {        throw new ApplicationContextException(&quot;Unable to start reactive web server&quot;,                ex);    }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 5、ServletWebServerApplicationContext的createWebServer方法</span><br></pre></td></tr></table></figure><pre><code>private void createWebServer() {    WebServer webServer = this.webServer;    ServletContext servletContext = getServletContext();    if (webServer == null &amp;&amp; servletContext == null) {        //获取容器工厂，TomcatServletWebServerFactory        ServletWebServerFactory factory = getWebServerFactory();        //创建web容器，参数为ServletWebServerApplicationContext的selfInitialize方法        this.webServer = factory.getWebServer(getSelfInitializer());    }    else if (servletContext != null) {        try {            getSelfInitializer().onStartup(servletContext);        }        catch (ServletException ex) {            throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;,                    ex);        }    }    //将环境属性初始化到servletContext中    initPropertySources();}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 6、TomcatServletWebServerFactory的getWebServer方法</span><br></pre></td></tr></table></figure><pre><code>@Overridepublic WebServer getWebServer(ServletContextInitializer... initializers) {    //创建tomcat对象    Tomcat tomcat = new Tomcat();    //tomcat安装路径    File baseDir = (this.baseDirectory != null ? this.baseDirectory            : createTempDir(&quot;tomcat&quot;));    tomcat.setBaseDir(baseDir.getAbsolutePath());    //tomcat连接器，默认Http11NioProtocol协议    Connector connector = new Connector(this.protocol);    tomcat.getService().addConnector(connector);    //初始化连接器    customizeConnector(connector);    tomcat.setConnector(connector);    //关闭自动部署    tomcat.getHost().setAutoDeploy(false);    //初始化Engine    configureEngine(tomcat.getEngine());    //添加自定义的连接器    for (Connector additionalConnector : this.additionalTomcatConnectors) {        tomcat.getService().addConnector(additionalConnector);    }    //初始化context    prepareContext(tomcat.getHost(), initializers);    //创建TomcatWebServer    return getTomcatWebServer(tomcat);}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 7、TomcatServletWebServerFactory的customizeConnector方法</span><br></pre></td></tr></table></figure><pre><code>protected void customizeConnector(Connector connector) {    int port = (getPort() &gt;= 0 ? getPort() : 0);    //设置端口    connector.setPort(port);    if (StringUtils.hasText(this.getServerHeader())) {        connector.setAttribute(&quot;server&quot;, this.getServerHeader());    }    //设置地址    if (connector.getProtocolHandler() instanceof AbstractProtocol) {        customizeProtocol((AbstractProtocol&lt;?&gt;) connector.getProtocolHandler());    }    //设置编码方式    if (getUriEncoding() != null) {        connector.setURIEncoding(getUriEncoding().name());    }    // Don&apos;t bind to the socket prematurely if ApplicationContext is slow to start    //设置连接器启动时套接字socket被绑定，连接器停止时套接字socket解除绑定    connector.setProperty(&quot;bindOnInit&quot;, &quot;false&quot;);    //使用SSL协议    if (getSsl() != null &amp;&amp; getSsl().isEnabled()) {        customizeSsl(connector);    }    //设置connector的压缩功能    TomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(            getCompression());    compression.customize(connector);    //自定义的初始化器    for (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {        customizer.customize(connector);    }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 8、CompressionConnectorCustomizer的customize方法</span><br></pre></td></tr></table></figure><pre><code>@Overridepublic void customize(Connector connector) {    //压缩功能配置    if (this.compression != null &amp;&amp; this.compression.getEnabled()) {        ProtocolHandler handler = connector.getProtocolHandler();        if (handler instanceof AbstractHttp11Protocol) {            customize((AbstractHttp11Protocol&lt;?&gt;) handler);        }    }}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">    private void customize(AbstractHttp11Protocol&lt;?&gt; protocol) &#123;</span><br><span class="line">        Compression compression = this.compression;</span><br><span class="line">        //打开压缩功能</span><br><span class="line">        protocol.setCompression(&quot;on&quot;);</span><br><span class="line">        //启用压缩的输出内容大小大于2048k</span><br><span class="line">        protocol.setCompressionMinSize(compression.getMinResponseSize());</span><br><span class="line">        //设置压缩类型</span><br><span class="line">        protocol.setCompressibleMimeType(</span><br><span class="line">                StringUtils.arrayToCommaDelimitedString(compression.getMimeTypes()));</span><br><span class="line">        //设置不启用压缩的浏览器类型</span><br><span class="line">        if (this.compression.getExcludedUserAgents() != null) &#123;</span><br><span class="line">            protocol.setNoCompressionUserAgents(StringUtils.arrayToCommaDelimitedString(</span><br><span class="line">                    this.compression.getExcludedUserAgents()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、6）TomcatServletWebServerFactory的configureEngine方法"><a href="#9、接（一、6）TomcatServletWebServerFactory的configureEngine方法" class="headerlink" title="9、接（一、6）TomcatServletWebServerFactory的configureEngine方法"></a>9、接（一、6）TomcatServletWebServerFactory的configureEngine方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void configureEngine(Engine engine) &#123;</span><br><span class="line">    //设置后台线程执行时间间隔</span><br><span class="line">    engine.setBackgroundProcessorDelay(this.backgroundProcessorDelay);</span><br><span class="line">    //添加自定义的engine管道的value</span><br><span class="line">    for (Valve valve : this.engineValves) &#123;</span><br><span class="line">        engine.getPipeline().addValve(valve);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、6）TomcatServletWebServerFactory的prepareContext方法"><a href="#10、接（一、6）TomcatServletWebServerFactory的prepareContext方法" class="headerlink" title="10、接（一、6）TomcatServletWebServerFactory的prepareContext方法"></a>10、接（一、6）TomcatServletWebServerFactory的prepareContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareContext(Host host, ServletContextInitializer[] initializers) &#123;</span><br><span class="line">    //准备Host的docBase</span><br><span class="line">    File documentRoot = getValidDocumentRoot();</span><br><span class="line">    //创建内置的context</span><br><span class="line">    TomcatEmbeddedContext context = new TomcatEmbeddedContext();</span><br><span class="line">    //初始化WebResouceRoot,WebResouceRoot维护了Web应用的资源（Class文件、Jar包以及其他资源文件）</span><br><span class="line">    if (documentRoot != null) &#123;</span><br><span class="line">        context.setResources(new LoaderHidingResourceRoot(context));</span><br><span class="line">    &#125;</span><br><span class="line">    context.setName(getContextPath());</span><br><span class="line">    context.setDisplayName(getDisplayName());</span><br><span class="line">    context.setPath(getContextPath());</span><br><span class="line">    //创建临时目录</span><br><span class="line">    File docBase = (documentRoot != null ? documentRoot</span><br><span class="line">            : createTempDir(&quot;tomcat-docbase&quot;));</span><br><span class="line">    context.setDocBase(docBase.getAbsolutePath());</span><br><span class="line">    context.addLifecycleListener(new FixContextListener());</span><br><span class="line">    //设置当前加载器为web应用父加载器</span><br><span class="line">    context.setParentClassLoader(</span><br><span class="line">            this.resourceLoader != null ? this.resourceLoader.getClassLoader()</span><br><span class="line">                    : ClassUtils.getDefaultClassLoader());</span><br><span class="line">    resetDefaultLocaleMapping(context);</span><br><span class="line">    addLocaleMappings(context);</span><br><span class="line">    context.setUseRelativeRedirects(false);</span><br><span class="line">    configureTldSkipPatterns(context);</span><br><span class="line">    //创建Web应用类加载器</span><br><span class="line">    WebappLoader loader = new WebappLoader(context.getParentClassLoader());</span><br><span class="line">    //设置内置的Web应用类加载器</span><br><span class="line">    loader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName());</span><br><span class="line">    loader.setDelegate(true);</span><br><span class="line">    context.setLoader(loader);</span><br><span class="line">    //添加默认的DefaultServlet，匹配&quot;/&quot;</span><br><span class="line">    if (isRegisterDefaultServlet()) &#123;</span><br><span class="line">        addDefaultServlet(context);</span><br><span class="line">    &#125;</span><br><span class="line">    //添加JspServlet,匹配&quot;*.jsp&quot;、&quot;*.jspx&quot;</span><br><span class="line">    if (shouldRegisterJspServlet()) &#123;</span><br><span class="line">        addJspServlet(context);</span><br><span class="line">        //添加JasperInitializer</span><br><span class="line">        addJasperInitializer(context);</span><br><span class="line">    &#125;</span><br><span class="line">    //监听器，将&quot;/META-INF/resources&quot;下的资源加入ResourceSet</span><br><span class="line">    context.addLifecycleListener(new StaticResourceConfigurer(context));</span><br><span class="line">    ServletContextInitializer[] initializersToUse = mergeInitializers(initializers);</span><br><span class="line">    //context添加到host中</span><br><span class="line">    host.addChild(context);</span><br><span class="line">    //初始化context</span><br><span class="line">    configureContext(context, initializersToUse);</span><br><span class="line">    //待子类实现</span><br><span class="line">    postProcessContext(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（一、6）实例化TomcatWebServer"><a href="#11、接（一、6）实例化TomcatWebServer" class="headerlink" title="11、接（一、6）实例化TomcatWebServer"></a>11、接（一、6）实例化TomcatWebServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public TomcatWebServer(Tomcat tomcat, boolean autoStart) &#123;</span><br><span class="line">    Assert.notNull(tomcat, &quot;Tomcat Server must not be null&quot;);</span><br><span class="line">    this.tomcat = tomcat;</span><br><span class="line">    this.autoStart = autoStart;</span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、TomcatWebServer的initialize方法"><a href="#12、TomcatWebServer的initialize方法" class="headerlink" title="12、TomcatWebServer的initialize方法"></a>12、TomcatWebServer的initialize方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private void initialize() throws WebServerException &#123;</span><br><span class="line">    TomcatWebServer.logger</span><br><span class="line">            .info(&quot;Tomcat initialized with port(s): &quot; + getPortsDescription(false));</span><br><span class="line">    synchronized (this.monitor) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //设置engineid</span><br><span class="line">            addInstanceIdToEngineName();</span><br><span class="line">            //检查是否有context</span><br><span class="line">            Context context = findContext();</span><br><span class="line">            //添加删除connector监听器</span><br><span class="line">            context.addLifecycleListener((event) -&gt; &#123;</span><br><span class="line">                if (context.equals(event.getSource())</span><br><span class="line">                        &amp;&amp; Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">                    // Remove service connectors so that protocol binding doesn&apos;t</span><br><span class="line">                    // happen when the service is started.</span><br><span class="line">                    removeServiceConnectors();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // Start the server to trigger initialization listeners</span><br><span class="line">            //启动tomcat</span><br><span class="line">            this.tomcat.start();</span><br><span class="line"></span><br><span class="line">            // We can re-throw failure exception directly in the main thread</span><br><span class="line">            rethrowDeferredStartupExceptions();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                ContextBindings.bindClassLoader(context, context.getNamingToken(),</span><br><span class="line">                        getClass().getClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (NamingException ex) &#123;</span><br><span class="line">                // Naming is not enabled. Continue</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Unlike Jetty, all Tomcat threads are daemon threads. We create a</span><br><span class="line">            // blocking non-daemon to stop immediate shutdown</span><br><span class="line">            //启动线程等待tomcat关闭命令</span><br><span class="line">            startDaemonAwaitThread();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            stopSilently();</span><br><span class="line">            throw new WebServerException(&quot;Unable to start embedded Tomcat&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、EmbeddedServletContainerAutoConfiguration自动配置类&quot;&gt;&lt;a href=&quot;#一、EmbeddedServletContainerAutoConfiguration自动配置类&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码项目部署</title>
    <link href="http://yoursite.com/2018/07/11/tomcat%E6%BA%90%E7%A0%81/Tomcat%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/07/11/tomcat源码/Tomcat源码项目部署/</id>
    <published>2018-07-11T12:46:40.589Z</published>
    <updated>2018-07-13T13:31:05.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、项目部署"><a href="#一、项目部署" class="headerlink" title="一、项目部署"></a>一、项目部署</h3><h4 id="1、HostConfig的lifecycleEvent方法"><a href="#1、HostConfig的lifecycleEvent方法" class="headerlink" title="1、HostConfig的lifecycleEvent方法"></a>1、HostConfig的lifecycleEvent方法</h4><p>HostConfig为StandardHost容器的监听器，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void lifecycleEvent(LifecycleEvent event) &#123;</span><br><span class="line"></span><br><span class="line">    // Identify the host we are associated with</span><br><span class="line">    try &#123;</span><br><span class="line">        host = (Host) event.getLifecycle();</span><br><span class="line">        if (host instanceof StandardHost) &#123;</span><br><span class="line">            //是否复制xml到$CATALINA_HOME/conf/[enginename]/[hostname]/，默认false</span><br><span class="line">            setCopyXML(((StandardHost) host).isCopyXML());</span><br><span class="line">            //是否部署context descriptor，只包含Context元素的xml格式的部署文件</span><br><span class="line">            setDeployXML(((StandardHost) host).isDeployXML());</span><br><span class="line">            //是否解压war包，默认true</span><br><span class="line">            setUnpackWARs(((StandardHost) host).isUnpackWARs());</span><br><span class="line">            //设置默认的Context为StandardContext</span><br><span class="line">            setContextClass(((StandardHost) host).getContextClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (ClassCastException e) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.cce&quot;, event.getLifecycle()), e);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process the event that has occurred</span><br><span class="line">    if (event.getType().equals(Lifecycle.PERIODIC_EVENT)) &#123;</span><br><span class="line">        check();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</span><br><span class="line">        //校验appBaseFile、hostConfigBase文件夹</span><br><span class="line">        beforeStart();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.START_EVENT)) &#123;</span><br><span class="line">        //部署web项目</span><br><span class="line">        start();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.STOP_EVENT)) &#123;</span><br><span class="line">        //从MBeanServer中移除HostConfig</span><br><span class="line">        stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、HostConfig的start方法"><a href="#2、HostConfig的start方法" class="headerlink" title="2、HostConfig的start方法"></a>2、HostConfig的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(sm.getString(&quot;hostConfig.start&quot;));</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //向MBeanServer中注册HostConfig</span><br><span class="line">        ObjectName hostON = host.getObjectName();</span><br><span class="line">        oname = new ObjectName</span><br><span class="line">            (hostON.getDomain() + &quot;:type=Deployer,host=&quot; + host.getName());</span><br><span class="line">        Registry.getRegistry(null, null).registerComponent</span><br><span class="line">            (this, oname, this.getClass().getName());</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.jmx.register&quot;, oname), e);</span><br><span class="line">    &#125;</span><br><span class="line">    //appBaseFile不为文件夹，则不立即部署</span><br><span class="line">    if (!host.getAppBaseFile().isDirectory()) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.appBase&quot;, host.getName(),</span><br><span class="line">                host.getAppBaseFile().getPath()));</span><br><span class="line">        host.setDeployOnStartup(false);</span><br><span class="line">        host.setAutoDeploy(false);</span><br><span class="line">    &#125;</span><br><span class="line">    //是否启动时部署</span><br><span class="line">    if (host.getDeployOnStartup())</span><br><span class="line">        //部署web项目</span><br><span class="line">        deployApps();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、HostConfig的deployApps方法"><a href="#3、HostConfig的deployApps方法" class="headerlink" title="3、HostConfig的deployApps方法"></a>3、HostConfig的deployApps方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void deployApps() &#123;</span><br><span class="line">    //项目文件夹，默认webapps</span><br><span class="line">    File appBase = host.getAppBaseFile();</span><br><span class="line">    //部署xml文件目录，默认$CATALINA_HOME/conf/[enginename]/[hostname]/</span><br><span class="line">    File configBase = host.getConfigBaseFile();</span><br><span class="line">    //获取webapps文件夹下的待部署项目</span><br><span class="line">    String[] filteredAppPaths = filterAppPaths(appBase.list());</span><br><span class="line">    // Deploy XML descriptors from configBase</span><br><span class="line">    //部署xml文件</span><br><span class="line">    deployDescriptors(configBase, configBase.list());</span><br><span class="line">    // Deploy WARs</span><br><span class="line">    //部署war包</span><br><span class="line">    deployWARs(appBase, filteredAppPaths);</span><br><span class="line">    // Deploy expanded folders</span><br><span class="line">    //部署项目文件夹</span><br><span class="line">    deployDirectories(appBase, filteredAppPaths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、HostConfig的deployDirectories方法"><a href="#4、HostConfig的deployDirectories方法" class="headerlink" title="4、HostConfig的deployDirectories方法"></a>4、HostConfig的deployDirectories方法</h4><p>以部署文件夹项目为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">protected void deployDirectories(File appBase, String[] files) &#123;</span><br><span class="line"></span><br><span class="line">    if (files == null)</span><br><span class="line">        return;</span><br><span class="line">    //获取线程池</span><br><span class="line">    ExecutorService es = host.getStartStopExecutor();</span><br><span class="line">    List&lt;Future&lt;?&gt;&gt; results = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        if (files[i].equalsIgnoreCase(&quot;META-INF&quot;))</span><br><span class="line">            continue;</span><br><span class="line">        if (files[i].equalsIgnoreCase(&quot;WEB-INF&quot;))</span><br><span class="line">            continue;</span><br><span class="line">        //创建文件的file引用</span><br><span class="line">        File dir = new File(appBase, files[i]);</span><br><span class="line">        if (dir.isDirectory()) &#123;</span><br><span class="line">            //根据文件夹的名字来设置context的名字</span><br><span class="line">            ContextName cn = new ContextName(files[i], false);</span><br><span class="line">            //已部署</span><br><span class="line">            if (isServiced(cn.getName()) || deploymentExists(cn.getName()))</span><br><span class="line">                continue;</span><br><span class="line">            //部署该项目</span><br><span class="line">            results.add(es.submit(new DeployDirectory(this, cn, dir)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (Future&lt;?&gt; result : results) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //阻塞等待</span><br><span class="line">            result.get();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    &quot;hostConfig.deployDir.threaded.error&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、DeployDirectory的run方法"><a href="#5、DeployDirectory的run方法" class="headerlink" title="5、DeployDirectory的run方法"></a>5、DeployDirectory的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    //部署项目</span><br><span class="line">    config.deployDirectory(cn, dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、HostConfig的deployDirectory方法"><a href="#6、HostConfig的deployDirectory方法" class="headerlink" title="6、HostConfig的deployDirectory方法"></a>6、HostConfig的deployDirectory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">protected void deployDirectory(ContextName cn, File dir) &#123;</span><br><span class="line"></span><br><span class="line">    long startTime = 0;</span><br><span class="line">    // Deploy the application in this directory</span><br><span class="line">    if( log.isInfoEnabled() ) &#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        //打印正在部署</span><br><span class="line">        log.info(sm.getString(&quot;hostConfig.deployDir&quot;,</span><br><span class="line">                dir.getAbsolutePath()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Context context = null;</span><br><span class="line">    //当前context的配置文件，&quot;META-INF/context.xml&quot;</span><br><span class="line">    File xml = new File(dir, Constants.ApplicationContextXml);</span><br><span class="line">    //获取host的配置文件夹里面当前context的配置</span><br><span class="line">    File xmlCopy = new File(host.getConfigBaseFile(), cn.getBaseName() + &quot;.xml&quot;);</span><br><span class="line">    //已经部署的app</span><br><span class="line">    DeployedApplication deployedApp;</span><br><span class="line">    //是否复制xml</span><br><span class="line">    boolean copyThisXml = isCopyXML();</span><br><span class="line">    //是否用dir下的xml部署</span><br><span class="line">    boolean deployThisXML = isDeployThisXML(dir, cn);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">            synchronized (digesterLock) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //解析context.xml，默认返回StandardContext</span><br><span class="line">                    context = (Context) digester.parse(xml);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    log.error(sm.getString(</span><br><span class="line">                            &quot;hostConfig.deployDescriptor.error&quot;,</span><br><span class="line">                            xml), e);</span><br><span class="line">                    context = new FailedContext();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    digester.reset();</span><br><span class="line">                    if (context == null) &#123;</span><br><span class="line">                        context = new FailedContext();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //是否将context.xml复制到host的配置文件夹里</span><br><span class="line">            if (copyThisXml == false &amp;&amp; context instanceof StandardContext) &#123;</span><br><span class="line">                // Host is using default value. Context may override it.</span><br><span class="line">                copyThisXml = ((StandardContext) context).getCopyXML();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (copyThisXml) &#123;</span><br><span class="line">                Files.copy(xml.toPath(), xmlCopy.toPath());</span><br><span class="line">                context.setConfigFile(xmlCopy.toURI().toURL());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                context.setConfigFile(xml.toURI().toURL());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (!deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">            // Block deployment as META-INF/context.xml may contain security</span><br><span class="line">            // configuration necessary for a secure deployment.</span><br><span class="line">            log.error(sm.getString(&quot;hostConfig.deployDescriptor.blocked&quot;,</span><br><span class="line">                    cn.getPath(), xml, xmlCopy));</span><br><span class="line">            context = new FailedContext();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //未发现context.xml，直接实例化StandardContext</span><br><span class="line">            context = (Context) Class.forName(contextClass).getConstructor().newInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        //添加ContextConfig监听器</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(host.getConfigClass());</span><br><span class="line">        LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();</span><br><span class="line">        context.addLifecycleListener(listener);</span><br><span class="line">        //设置当前context的名字</span><br><span class="line">        context.setName(cn.getName());</span><br><span class="line">        //应用所在的路径</span><br><span class="line">        context.setPath(cn.getPath());</span><br><span class="line">        //当前版本</span><br><span class="line">        context.setWebappVersion(cn.getVersion());</span><br><span class="line">        //设置自定义的项目路径</span><br><span class="line">        context.setDocBase(cn.getBaseName());</span><br><span class="line">        //在host添加context,并启动context</span><br><span class="line">        host.addChild(context);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(sm.getString(&quot;hostConfig.deployDir.error&quot;,</span><br><span class="line">                dir.getAbsolutePath()), t);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        deployedApp = new DeployedApplication(cn.getName(),</span><br><span class="line">                xml.exists() &amp;&amp; deployThisXML &amp;&amp; copyThisXml);</span><br><span class="line"></span><br><span class="line">        // Fake re-deploy resource to detect if a WAR is added at a later</span><br><span class="line">        // point</span><br><span class="line">        deployedApp.redeployResources.put(dir.getAbsolutePath() + &quot;.war&quot;,</span><br><span class="line">                Long.valueOf(0));</span><br><span class="line">        deployedApp.redeployResources.put(dir.getAbsolutePath(),</span><br><span class="line">                Long.valueOf(dir.lastModified()));</span><br><span class="line">        if (deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">            if (copyThisXml) &#123;</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xmlCopy.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(xmlCopy.lastModified()));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xml.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(xml.lastModified()));</span><br><span class="line">                // Fake re-deploy resource to detect if a context.xml file is</span><br><span class="line">                // added at a later point</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xmlCopy.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(0));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Fake re-deploy resource to detect if a context.xml file is</span><br><span class="line">            // added at a later point</span><br><span class="line">            deployedApp.redeployResources.put(</span><br><span class="line">                    xmlCopy.getAbsolutePath(),</span><br><span class="line">                    Long.valueOf(0));</span><br><span class="line">            if (!xml.exists()) &#123;</span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xml.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(0));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addWatchedResources(deployedApp, dir.getAbsolutePath(), context);</span><br><span class="line">        // Add the global redeploy resources (which are never deleted) at</span><br><span class="line">        // the end so they don&apos;t interfere with the deletion process</span><br><span class="line">        addGlobalRedeployResources(deployedApp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deployed.put(cn.getName(), deployedApp);</span><br><span class="line"></span><br><span class="line">    if( log.isInfoEnabled() ) &#123;</span><br><span class="line">        log.info(sm.getString(&quot;hostConfig.deployDir.finished&quot;,</span><br><span class="line">                dir.getAbsolutePath(), Long.valueOf(System.currentTimeMillis() - startTime)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、StandardContext的startInternal方法"><a href="#7、StandardContext的startInternal方法" class="headerlink" title="7、StandardContext的startInternal方法"></a>7、StandardContext的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    if(log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Starting &quot; + getBaseName());</span><br><span class="line"></span><br><span class="line">    // Send j2ee.state.starting notification</span><br><span class="line">    //广播启动的JMX通知</span><br><span class="line">    if (this.getObjectName() != null) &#123;</span><br><span class="line">        Notification notification = new Notification(&quot;j2ee.state.starting&quot;,</span><br><span class="line">                this.getObjectName(), sequenceNumber.getAndIncrement());</span><br><span class="line">        broadcaster.sendNotification(notification);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置配置标记为否</span><br><span class="line">    setConfigured(false);</span><br><span class="line">    boolean ok = true;</span><br><span class="line"></span><br><span class="line">    // Currently this is effectively a NO-OP but needs to be called to</span><br><span class="line">    // ensure the NamingResources follows the correct lifecycle</span><br><span class="line">    //启动当前维护的JNDI资源</span><br><span class="line">    if (namingResources != null) &#123;</span><br><span class="line">        namingResources.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Post work directory</span><br><span class="line">    //初始化临时工作目录workDir,默认为$CATALINA-BASE/work/&lt;Engine名称&gt;/&lt;Host名称&gt;/&lt;Context名称&gt;</span><br><span class="line">    postWorkDirectory();</span><br><span class="line"></span><br><span class="line">    // Add missing components as necessary</span><br><span class="line">    //初始化WebResouceRoot并启动,WebResouceRoot维护了Web应用的资源（Class文件、Jar包以及其他资源文件）</span><br><span class="line">    if (getResources() == null) &#123;   // (1) Required by Loader</span><br><span class="line">        if (log.isDebugEnabled())</span><br><span class="line">            log.debug(&quot;Configuring default Resources&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            setResources(new StandardRoot(this));</span><br><span class="line">        &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;standardContext.resourcesInit&quot;), e);</span><br><span class="line">            ok = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        resourcesStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (getLoader() == null) &#123;</span><br><span class="line">        //创建Web应用类加载器webappLoader,启动后创建Web应用类加载器ParallelWebappClassLoader</span><br><span class="line">        WebappLoader webappLoader = new WebappLoader(getParentClassLoader());</span><br><span class="line">        webappLoader.setDelegate(getDelegate());</span><br><span class="line">        setLoader(webappLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // An explicit cookie processor hasn&apos;t been specified; use the default</span><br><span class="line">    // 创建Cookie处理器，默认为Rfc6265CookieProcessor。</span><br><span class="line">    if (cookieProcessor == null) &#123;</span><br><span class="line">        cookieProcessor = new Rfc6265CookieProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize character set mapper</span><br><span class="line">    // 设置字符集映射,默认CharsetMapper</span><br><span class="line">    getCharsetMapper();</span><br><span class="line"></span><br><span class="line">    // Validate required extensions</span><br><span class="line">    // 检测web应用依赖</span><br><span class="line">    boolean dependencyCheck = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        dependencyCheck = ExtensionValidator.validateApplication(getResources(), this);</span><br><span class="line">    &#125; catch (IOException ioe) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;standardContext.extensionValidationError&quot;), ioe);</span><br><span class="line">        dependencyCheck = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!dependencyCheck) &#123;</span><br><span class="line">        // do not make application available if dependency check fails</span><br><span class="line">        ok = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Reading the &quot;catalina.useNaming&quot; environment variable</span><br><span class="line">    // 注册NamingContextListener</span><br><span class="line">    String useNamingProperty = System.getProperty(&quot;catalina.useNaming&quot;);</span><br><span class="line">    if ((useNamingProperty != null)</span><br><span class="line">        &amp;&amp; (useNamingProperty.equals(&quot;false&quot;))) &#123;</span><br><span class="line">        useNaming = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ok &amp;&amp; isUseNaming()) &#123;</span><br><span class="line">        if (getNamingContextListener() == null) &#123;</span><br><span class="line">            NamingContextListener ncl = new NamingContextListener();</span><br><span class="line">            ncl.setName(getNamingContextName());</span><br><span class="line">            ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());</span><br><span class="line">            addLifecycleListener(ncl);</span><br><span class="line">            setNamingContextListener(ncl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Standard container startup</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Processing standard container startup&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Binding thread</span><br><span class="line">    // ParallelWebappClassLoader绑定到当前线程</span><br><span class="line">    ClassLoader oldCCL = bindThread();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            // Start our subordinate components, if any</span><br><span class="line">            Loader loader = getLoader();</span><br><span class="line">            if (loader instanceof Lifecycle) &#123;</span><br><span class="line">                ((Lifecycle) loader).start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // since the loader just started, the webapp classloader is now</span><br><span class="line">            // created.</span><br><span class="line">            // 设置ParallelWebappClassLoader属性</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesRmiTargets&quot;,</span><br><span class="line">                    getClearReferencesRmiTargets());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesStopThreads&quot;,</span><br><span class="line">                    getClearReferencesStopThreads());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesStopTimerThreads&quot;,</span><br><span class="line">                    getClearReferencesStopTimerThreads());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesHttpClientKeepAliveThread&quot;,</span><br><span class="line">                    getClearReferencesHttpClientKeepAliveThread());</span><br><span class="line">            setClassLoaderProperty(&quot;clearReferencesObjectStreamClassCaches&quot;,</span><br><span class="line">                    getClearReferencesObjectStreamClassCaches());</span><br><span class="line"></span><br><span class="line">            // By calling unbindThread and bindThread in a row, we setup the</span><br><span class="line">            // current Thread CCL to be the webapp classloader</span><br><span class="line">            unbindThread(oldCCL);</span><br><span class="line">            oldCCL = bindThread();</span><br><span class="line"></span><br><span class="line">            // Initialize logger again. Other components might have used it</span><br><span class="line">            // too early, so it should be reset.</span><br><span class="line">            logger = null;</span><br><span class="line">            getLogger();</span><br><span class="line">            //启动安全组件</span><br><span class="line">            Realm realm = getRealmInternal();</span><br><span class="line">            if(null != realm) &#123;</span><br><span class="line">                if (realm instanceof Lifecycle) &#123;</span><br><span class="line">                    ((Lifecycle) realm).start();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Place the CredentialHandler into the ServletContext so</span><br><span class="line">                // applications can have access to it. Wrap it in a &quot;safe&quot;</span><br><span class="line">                // handler so application&apos;s can&apos;t modify it.</span><br><span class="line">                CredentialHandler safeHandler = new CredentialHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean matches(String inputCredentials, String storedCredentials) &#123;</span><br><span class="line">                        return getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public String mutate(String inputCredentials) &#123;</span><br><span class="line">                        return getRealmInternal().getCredentialHandler().mutate(inputCredentials);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Notify our interested LifecycleListeners</span><br><span class="line">            // 广播&quot;configure_start&quot;事件</span><br><span class="line">            fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);</span><br><span class="line"></span><br><span class="line">            // Start our child containers, if not already started</span><br><span class="line">            // 启动子容器Wrapper</span><br><span class="line">            for (Container child : findChildren()) &#123;</span><br><span class="line">                if (!child.getState().isAvailable()) &#123;</span><br><span class="line">                    child.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Start the Valves in our pipeline (including the basic),</span><br><span class="line">            // if any</span><br><span class="line">            //启动pipeline</span><br><span class="line">            if (pipeline instanceof Lifecycle) &#123;</span><br><span class="line">                ((Lifecycle) pipeline).start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Acquire clustered manager</span><br><span class="line">            // 创建会话管理器</span><br><span class="line">            Manager contextManager = null;</span><br><span class="line">            Manager manager = getManager();</span><br><span class="line">            if (manager == null) &#123;</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;standardContext.cluster.noManager&quot;,</span><br><span class="line">                            Boolean.valueOf((getCluster() != null)),</span><br><span class="line">                            Boolean.valueOf(distributable)));</span><br><span class="line">                &#125;</span><br><span class="line">                if ( (getCluster() != null) &amp;&amp; distributable) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        contextManager = getCluster().createManager(getName());</span><br><span class="line">                    &#125; catch (Exception ex) &#123;</span><br><span class="line">                        log.error(&quot;standardContext.clusterFail&quot;, ex);</span><br><span class="line">                        ok = false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    contextManager = new StandardManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Configure default manager if none was specified</span><br><span class="line">            if (contextManager != null) &#123;</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;standardContext.manager&quot;,</span><br><span class="line">                            contextManager.getClass().getName()));</span><br><span class="line">                &#125;</span><br><span class="line">                setManager(contextManager);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (manager!=null &amp;&amp; (getCluster() != null) &amp;&amp; distributable) &#123;</span><br><span class="line">                //let the cluster know that there is a context that is distributable</span><br><span class="line">                //and that it has its own manager</span><br><span class="line">                getCluster().registerManager(manager);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!getConfigured()) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;standardContext.configurationFail&quot;));</span><br><span class="line">            ok = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // We put the resources into the servlet context</span><br><span class="line">        // 将Context的Web资源集合添加到ServletContext</span><br><span class="line">        if (ok)</span><br><span class="line">            getServletContext().setAttribute</span><br><span class="line">                (Globals.RESOURCES_ATTR, getResources());</span><br><span class="line">        //创建实例管理器instanceManager，用于创建对象实例，如Servlet、Filter等</span><br><span class="line">        if (ok ) &#123;</span><br><span class="line">            if (getInstanceManager() == null) &#123;</span><br><span class="line">                javax.naming.Context context = null;</span><br><span class="line">                if (isUseNaming() &amp;&amp; getNamingContextListener() != null) &#123;</span><br><span class="line">                    context = getNamingContextListener().getEnvContext();</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;String, Map&lt;String, String&gt;&gt; injectionMap = buildInjectionMap(</span><br><span class="line">                        getIgnoreAnnotations() ? new NamingResourcesImpl(): getNamingResources());</span><br><span class="line">                setInstanceManager(new DefaultInstanceManager(context,</span><br><span class="line">                        injectionMap, this, this.getClass().getClassLoader()));</span><br><span class="line">            &#125;</span><br><span class="line">            getServletContext().setAttribute(</span><br><span class="line">                    InstanceManager.class.getName(), getInstanceManager());</span><br><span class="line">            InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Create context attributes that will be required</span><br><span class="line">        // 将Jar包扫描器添加到ServletContext</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            getServletContext().setAttribute(</span><br><span class="line">                    JarScanner.class.getName(), getJarScanner());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Set up the context init params</span><br><span class="line">        // 合并参数</span><br><span class="line">        mergeParameters();</span><br><span class="line"></span><br><span class="line">        // Call ServletContainerInitializers</span><br><span class="line">        // 启动添加到Context的ServletContainerInitializer</span><br><span class="line">        for (Map.Entry&lt;ServletContainerInitializer, Set&lt;Class&lt;?&gt;&gt;&gt; entry :</span><br><span class="line">            initializers.entrySet()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                entry.getKey().onStartup(entry.getValue(),</span><br><span class="line">                        getServletContext());</span><br><span class="line">            &#125; catch (ServletException e) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.sciFail&quot;), e);</span><br><span class="line">                ok = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Configure and call application event listeners</span><br><span class="line">        // 实例化应用类监听器ApplicationListener</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            if (!listenerStart()) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.listenerFail&quot;));</span><br><span class="line">                ok = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Check constraints for uncovered HTTP methods</span><br><span class="line">        // Needs to be after SCIs and listeners as they may programmatically</span><br><span class="line">        // change constraints</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            checkConstraintsForUncoveredMethods(findConstraints());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // Start manager</span><br><span class="line">            // 启动会话管理器</span><br><span class="line">            Manager manager = getManager();</span><br><span class="line">            if (manager instanceof Lifecycle) &#123;</span><br><span class="line">                ((Lifecycle) manager).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch(Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;standardContext.managerFail&quot;), e);</span><br><span class="line">            ok = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Configure and call application filters</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            // 实例化FilterConfig、Filter并调用Filter.init()</span><br><span class="line">            if (!filterStart()) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.filterFail&quot;));</span><br><span class="line">                ok = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Load and initialize all &quot;load on startup&quot; servlets</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            // 对于loadOnStartup大于等于0的Wrapper，调用Wrapper.load()，</span><br><span class="line">            // 该方法负责实例化Servlet，并调用Servlet.init()进行初始化</span><br><span class="line">            if (!loadOnStartup(findChildren()))&#123;</span><br><span class="line">                log.error(sm.getString(&quot;standardContext.servletFail&quot;));</span><br><span class="line">                ok = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Start ContainerBackgroundProcessor thread</span><br><span class="line">        // 启动后台线程</span><br><span class="line">        super.threadStart();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Unbinding thread</span><br><span class="line">        unbindThread(oldCCL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Set available status depending upon startup success</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        if (log.isDebugEnabled())</span><br><span class="line">            log.debug(&quot;Starting completed&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.error(sm.getString(&quot;standardContext.startFailed&quot;, getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    startTime=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    // Send j2ee.state.running notification</span><br><span class="line">    // 发布正在运行的JMX通知</span><br><span class="line">    if (ok &amp;&amp; (this.getObjectName() != null)) &#123;</span><br><span class="line">        Notification notification =</span><br><span class="line">            new Notification(&quot;j2ee.state.running&quot;, this.getObjectName(),</span><br><span class="line">                             sequenceNumber.getAndIncrement());</span><br><span class="line">        broadcaster.sendNotification(notification);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // The WebResources implementation caches references to JAR files. On</span><br><span class="line">    // some platforms these references may lock the JAR files. Since web</span><br><span class="line">    // application start is likely to have read from lots of JARs, trigger</span><br><span class="line">    // a clean-up now.</span><br><span class="line">    // 释放资源，如关闭jar文件</span><br><span class="line">    getResources().gc();</span><br><span class="line"></span><br><span class="line">    // Reinitializing if something went wrong</span><br><span class="line">    // 设置Context状态</span><br><span class="line">    if (!ok) &#123;</span><br><span class="line">        setState(LifecycleState.FAILED);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ContextConfig的lifecycleEvent方法"><a href="#7、ContextConfig的lifecycleEvent方法" class="headerlink" title="7、ContextConfig的lifecycleEvent方法"></a>7、ContextConfig的lifecycleEvent方法</h4><p>监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void lifecycleEvent(LifecycleEvent event) &#123;</span><br><span class="line"></span><br><span class="line">    // Identify the context we are associated with</span><br><span class="line">    try &#123;</span><br><span class="line">        context = (Context) event.getLifecycle();</span><br><span class="line">    &#125; catch (ClassCastException e) &#123;</span><br><span class="line">        log.error(sm.getString(&quot;contextConfig.cce&quot;, event.getLifecycle()), e);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Process the event that has occurred</span><br><span class="line">    if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) &#123;</span><br><span class="line">        //解析web.xml</span><br><span class="line">        configureStart();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</span><br><span class="line">        //如需要，解压war包将Context的docBase设置为解压后的路径，将Web应用目录复制到临时文件夹下防止对资源加锁</span><br><span class="line">        beforeStart();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.AFTER_START_EVENT)) &#123;</span><br><span class="line">        // Restore docBase for management tools</span><br><span class="line">        if (originalDocBase != null) &#123;</span><br><span class="line">            context.setDocBase(originalDocBase);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.CONFIGURE_STOP_EVENT)) &#123;</span><br><span class="line">        configureStop();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) &#123;</span><br><span class="line">        //解析context.xml</span><br><span class="line">        init();</span><br><span class="line">    &#125; else if (event.getType().equals(Lifecycle.AFTER_DESTROY_EVENT)) &#123;</span><br><span class="line">        destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、ContextConfig的init方法"><a href="#8、ContextConfig的init方法" class="headerlink" title="8、ContextConfig的init方法"></a>8、ContextConfig的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected void init() &#123;</span><br><span class="line">    // Called from StandardContext.init()</span><br><span class="line">    // 创建解析规则</span><br><span class="line">    Digester contextDigester = createContextDigester();</span><br><span class="line">    contextDigester.getParser();</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;contextConfig.init&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    context.setConfigured(false);</span><br><span class="line">    ok = true;</span><br><span class="line">    //解析context.xml</span><br><span class="line">    contextConfig(contextDigester);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ContextConfig的contextConfig方法"><a href="#9、ContextConfig的contextConfig方法" class="headerlink" title="9、ContextConfig的contextConfig方法"></a>9、ContextConfig的contextConfig方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">protected void contextConfig(Digester digester) &#123;</span><br><span class="line"></span><br><span class="line">    String defaultContextXml = null;</span><br><span class="line">    // Open the default context.xml file, if it exists</span><br><span class="line">    if (context instanceof StandardContext) &#123;</span><br><span class="line">        defaultContextXml = ((StandardContext)context).getDefaultContextXml();</span><br><span class="line">    &#125;</span><br><span class="line">    // set the default if we don&apos;t have any overrides</span><br><span class="line">    if (defaultContextXml == null) &#123;</span><br><span class="line">        //Catalina容器级默认配置文件,&quot;conf/context.xml&quot;</span><br><span class="line">        defaultContextXml = Constants.DefaultContextXml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!context.getOverride()) &#123;</span><br><span class="line">        File defaultContextFile = new File(defaultContextXml);</span><br><span class="line">        if (!defaultContextFile.isAbsolute()) &#123;</span><br><span class="line">            defaultContextFile =</span><br><span class="line">                    new File(context.getCatalinaBase(), defaultContextXml);</span><br><span class="line">        &#125;</span><br><span class="line">        if (defaultContextFile.exists()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                URL defaultContextUrl = defaultContextFile.toURI().toURL();</span><br><span class="line">                //覆盖Context属性</span><br><span class="line">                processContextConfig(digester, defaultContextUrl);</span><br><span class="line">            &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        &quot;contextConfig.badUrl&quot;, defaultContextFile), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //Host级的默认配置,context.xml.default</span><br><span class="line">        File hostContextFile = new File(getHostConfigBase(), Constants.HostContextXml);</span><br><span class="line">        if (hostContextFile.exists()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                URL hostContextUrl = hostContextFile.toURI().toURL();</span><br><span class="line">                //覆盖Context属性</span><br><span class="line">                processContextConfig(digester, hostContextUrl);</span><br><span class="line">            &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        &quot;contextConfig.badUrl&quot;, hostContextFile), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //Web应用配置,context.xml</span><br><span class="line">    if (context.getConfigFile() != null) &#123;</span><br><span class="line">        //覆盖Context属性</span><br><span class="line">        processContextConfig(digester, context.getConfigFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（一、7）ContextConfig的configureStart方法"><a href="#10、接（一、7）ContextConfig的configureStart方法" class="headerlink" title="10、接（一、7）ContextConfig的configureStart方法"></a>10、接（一、7）ContextConfig的configureStart方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">protected synchronized void configureStart() &#123;</span><br><span class="line">    // Called from StandardContext.start()</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;contextConfig.start&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;contextConfig.xmlSettings&quot;,</span><br><span class="line">                context.getName(),</span><br><span class="line">                Boolean.valueOf(context.getXmlValidation()),</span><br><span class="line">                Boolean.valueOf(context.getXmlNamespaceAware())));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析web.xml</span><br><span class="line">    webConfig();</span><br><span class="line"></span><br><span class="line">    if (!context.getIgnoreAnnotations()) &#123;</span><br><span class="line">        //处理Listener，Filter，Servet的class，field，method，  </span><br><span class="line">        //EJB,JSR 250类注解问题，@Resource等注解  </span><br><span class="line">        applicationAnnotationsConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        //配置安全角色信息</span><br><span class="line">        validateSecurityRoles();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Configure an authenticator if we need one</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        authenticatorConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Dump the contents of this pipeline if requested</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Pipeline Configuration:&quot;);</span><br><span class="line">        Pipeline pipeline = context.getPipeline();</span><br><span class="line">        Valve valves[] = null;</span><br><span class="line">        if (pipeline != null) &#123;</span><br><span class="line">            valves = pipeline.getValves();</span><br><span class="line">        &#125;</span><br><span class="line">        if (valves != null) &#123;</span><br><span class="line">            for (int i = 0; i &lt; valves.length; i++) &#123;</span><br><span class="line">                log.debug(&quot;  &quot; + valves[i].getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(&quot;======================&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Make our application available if no problems were encountered</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        context.setConfigured(true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.error(sm.getString(&quot;contextConfig.unavailable&quot;));</span><br><span class="line">        context.setConfigured(false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、ContextConfig的webConfig方法"><a href="#11、ContextConfig的webConfig方法" class="headerlink" title="11、ContextConfig的webConfig方法"></a>11、ContextConfig的webConfig方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">protected void webConfig() &#123;</span><br><span class="line">    /*</span><br><span class="line">     * Anything and everything can override the global and host defaults.</span><br><span class="line">     * This is implemented in two parts</span><br><span class="line">     * - Handle as a web fragment that gets added after everything else so</span><br><span class="line">     *   everything else takes priority</span><br><span class="line">     * - Mark Servlets as overridable so SCI configuration can replace</span><br><span class="line">     *   configuration from the defaults</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * The rules for annotation scanning are not as clear-cut as one might</span><br><span class="line">     * think. Tomcat implements the following process:</span><br><span class="line">     * - As per SRV.1.6.2, Tomcat will scan for annotations regardless of</span><br><span class="line">     *   which Servlet spec version is declared in web.xml. The EG has</span><br><span class="line">     *   confirmed this is the expected behaviour.</span><br><span class="line">     * - As per http://java.net/jira/browse/SERVLET_SPEC-36, if the main</span><br><span class="line">     *   web.xml is marked as metadata-complete, JARs are still processed</span><br><span class="line">     *   for SCIs.</span><br><span class="line">     * - If metadata-complete=true and an absolute ordering is specified,</span><br><span class="line">     *   JARs excluded from the ordering are also excluded from the SCI</span><br><span class="line">     *   processing.</span><br><span class="line">     * - If an SCI has a @HandlesType annotation then all classes (except</span><br><span class="line">     *   those in JARs excluded from an absolute ordering) need to be</span><br><span class="line">     *   scanned to check if they match.</span><br><span class="line">     */</span><br><span class="line">    // 创建web.xml解析器</span><br><span class="line">    WebXmlParser webXmlParser = new WebXmlParser(context.getXmlNamespaceAware(),</span><br><span class="line">            context.getXmlValidation(), context.getXmlBlockExternal());</span><br><span class="line"></span><br><span class="line">    Set&lt;WebXml&gt; defaults = new HashSet&lt;&gt;();</span><br><span class="line">    //从Catalina、Host获取默认WebXML（conf/web.xml、web.xml.default），通过Digester解析，添加到defaults</span><br><span class="line">    defaults.add(getDefaultWebXmlFragment(webXmlParser));</span><br><span class="line"></span><br><span class="line">    WebXml webXml = createWebXml();</span><br><span class="line"></span><br><span class="line">    // Parse context level web.xml</span><br><span class="line">    //解析WepApp的WebXML（/WEB-INF/web.xml）</span><br><span class="line">    InputSource contextWebXml = getContextWebXmlSource();</span><br><span class="line">    if (!webXmlParser.parseWebXml(contextWebXml, webXml, false)) &#123;</span><br><span class="line">        ok = false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 初始化ApplicationContext并返回ApplicationContextFacade</span><br><span class="line">    ServletContext sContext = context.getServletContext();</span><br><span class="line"></span><br><span class="line">    // Ordering is important here</span><br><span class="line"></span><br><span class="line">    // Step 1. Identify all the JARs packaged with the application and those</span><br><span class="line">    // provided by the container. If any of the application JARs have a</span><br><span class="line">    // web-fragment.xml it will be parsed at this point. web-fragment.xml</span><br><span class="line">    // files are ignored for container provided JARs.</span><br><span class="line">    // 扫描应用打包的所有Jar,检索Jar包里面的web.xml配置并解析</span><br><span class="line">    Map&lt;String,WebXml&gt; fragments = processJarsForWebFragments(webXml, webXmlParser);</span><br><span class="line"></span><br><span class="line">    // Step 2. Order the fragments.</span><br><span class="line">    // 对web配置进行排序</span><br><span class="line">    Set&lt;WebXml&gt; orderedFragments = null;</span><br><span class="line">    orderedFragments = WebXml.orderWebFragments(webXml, fragments, sContext);</span><br><span class="line"></span><br><span class="line">    // Step 3. Look for ServletContainerInitializer implementations</span><br><span class="line">    // 基于SPI机制查找ServletContainerInitializer的实现</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        processServletContainerInitializers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if  (!webXml.isMetadataComplete() || typeInitializerMap.size() &gt; 0) &#123;</span><br><span class="line">        // Step 4. Process /WEB-INF/classes for annotations and</span><br><span class="line">        // @HandlesTypes matches</span><br><span class="line">        Map&lt;String,JavaClassCacheEntry&gt; javaClassCache = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //处理/WEB-INF/classes下面的类的注解</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            WebResource[] webResources =</span><br><span class="line">                    context.getResources().listResources(&quot;/WEB-INF/classes&quot;);</span><br><span class="line"></span><br><span class="line">            for (WebResource webResource : webResources) &#123;</span><br><span class="line">                // Skip the META-INF directory from any JARs that have been</span><br><span class="line">                // expanded in to WEB-INF/classes (sometimes IDEs do this).</span><br><span class="line">                if (&quot;META-INF&quot;.equals(webResource.getName())) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                processAnnotationsWebResource(webResource, webXml,</span><br><span class="line">                        webXml.isMetadataComplete(), javaClassCache);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Step 5. Process JARs for annotations and</span><br><span class="line">        // @HandlesTypes matches - only need to process those fragments we</span><br><span class="line">        // are going to use (remember orderedFragments includes any</span><br><span class="line">        // container fragments)</span><br><span class="line">        // 处理Jar包中的注解类</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            processAnnotations(</span><br><span class="line">                    orderedFragments, webXml.isMetadataComplete(), javaClassCache);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Cache, if used, is no longer required so clear it</span><br><span class="line">        javaClassCache.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!webXml.isMetadataComplete()) &#123;</span><br><span class="line">        // Step 6. Merge web-fragment.xml files into the main web.xml</span><br><span class="line">        // file.</span><br><span class="line">        // 将jar包web配置合并</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            ok = webXml.merge(orderedFragments);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Step 7. Apply global defaults</span><br><span class="line">        // Have to merge defaults before JSP conversion since defaults</span><br><span class="line">        // provide JSP servlet definition.</span><br><span class="line">        // 将默认web配置合并</span><br><span class="line">        webXml.merge(defaults);</span><br><span class="line"></span><br><span class="line">        // Step 8. Convert explicitly mentioned jsps to servlets</span><br><span class="line">        // 将JSP转换为Servlet</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            convertJsps(webXml);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Step 9. Apply merged web.xml to Context</span><br><span class="line">        // 将web配置应用到Context容器</span><br><span class="line">        if (ok) &#123;</span><br><span class="line">            configureContext(webXml);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        webXml.merge(defaults);</span><br><span class="line">        convertJsps(webXml);</span><br><span class="line">        configureContext(webXml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (context.getLogEffectiveWebXml()) &#123;</span><br><span class="line">        log.info(&quot;web.xml:\n&quot; + webXml.toXml());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Always need to look for static resources</span><br><span class="line">    // Step 10. Look for static resources packaged in JARs</span><br><span class="line">    // 检索Jar包中的静态资源</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        // Spec does not define an order.</span><br><span class="line">        // Use ordered JARs followed by remaining JARs</span><br><span class="line">        Set&lt;WebXml&gt; resourceJars = new LinkedHashSet&lt;&gt;();</span><br><span class="line">        for (WebXml fragment : orderedFragments) &#123;</span><br><span class="line">            resourceJars.add(fragment);</span><br><span class="line">        &#125;</span><br><span class="line">        for (WebXml fragment : fragments.values()) &#123;</span><br><span class="line">            if (!resourceJars.contains(fragment)) &#123;</span><br><span class="line">                resourceJars.add(fragment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        processResourceJARs(resourceJars);</span><br><span class="line">        // See also StandardContext.resourcesStart() for</span><br><span class="line">        // WEB-INF/classes/META-INF/resources configuration</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Step 11. Apply the ServletContainerInitializer config to the</span><br><span class="line">    // context</span><br><span class="line">    // 将ServletContainerInitializer配置到上下文</span><br><span class="line">    if (ok) &#123;</span><br><span class="line">        for (Map.Entry&lt;ServletContainerInitializer,</span><br><span class="line">                Set&lt;Class&lt;?&gt;&gt;&gt; entry :</span><br><span class="line">                    initializerClassMap.entrySet()) &#123;</span><br><span class="line">            if (entry.getValue().isEmpty()) &#123;</span><br><span class="line">                context.addServletContainerInitializer(</span><br><span class="line">                        entry.getKey(), null);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                context.addServletContainerInitializer(</span><br><span class="line">                        entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、ContextConfig的configureContext方法"><a href="#12、ContextConfig的configureContext方法" class="headerlink" title="12、ContextConfig的configureContext方法"></a>12、ContextConfig的configureContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">private void configureContext(WebXml webxml) &#123;</span><br><span class="line">    // As far as possible, process in alphabetical order so it is easy to</span><br><span class="line">    // check everything is present</span><br><span class="line">    // Some validation depends on correct public ID</span><br><span class="line">    // 设置xml的publicId</span><br><span class="line">    context.setPublicId(webxml.getPublicId());</span><br><span class="line"></span><br><span class="line">    // Everything else in order</span><br><span class="line">    context.setEffectiveMajorVersion(webxml.getMajorVersion());</span><br><span class="line">    context.setEffectiveMinorVersion(webxml.getMinorVersion());</span><br><span class="line"></span><br><span class="line">    for (Entry&lt;String, String&gt; entry : webxml.getContextParams().entrySet()) &#123;</span><br><span class="line">        context.addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    context.setDenyUncoveredHttpMethods(</span><br><span class="line">            webxml.getDenyUncoveredHttpMethods());</span><br><span class="line">    context.setDisplayName(webxml.getDisplayName());</span><br><span class="line">    context.setDistributable(webxml.isDistributable());</span><br><span class="line">    for (ContextLocalEjb ejbLocalRef : webxml.getEjbLocalRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addLocalEjb(ejbLocalRef);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextEjb ejbRef : webxml.getEjbRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addEjb(ejbRef);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextEnvironment environment : webxml.getEnvEntries().values()) &#123;</span><br><span class="line">        context.getNamingResources().addEnvironment(environment);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ErrorPage errorPage : webxml.getErrorPages().values()) &#123;</span><br><span class="line">        context.addErrorPage(errorPage);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置过滤器</span><br><span class="line">    for (FilterDef filter : webxml.getFilters().values()) &#123;</span><br><span class="line">        if (filter.getAsyncSupported() == null) &#123;</span><br><span class="line">            filter.setAsyncSupported(&quot;false&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        context.addFilterDef(filter);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置过滤器映射</span><br><span class="line">    for (FilterMap filterMap : webxml.getFilterMappings()) &#123;</span><br><span class="line">        context.addFilterMap(filterMap);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置JspConfigDescriptorImpl</span><br><span class="line">    context.setJspConfigDescriptor(webxml.getJspConfigDescriptor());</span><br><span class="line">    //设置web监听器</span><br><span class="line">    for (String listener : webxml.getListeners()) &#123;</span><br><span class="line">        context.addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getLocaleEncodingMappings().entrySet()) &#123;</span><br><span class="line">        context.addLocaleEncodingMappingParameter(entry.getKey(),</span><br><span class="line">                entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    // Prevents IAE</span><br><span class="line">    if (webxml.getLoginConfig() != null) &#123;</span><br><span class="line">        context.setLoginConfig(webxml.getLoginConfig());</span><br><span class="line">    &#125;</span><br><span class="line">    for (MessageDestinationRef mdr :</span><br><span class="line">            webxml.getMessageDestinationRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addMessageDestinationRef(mdr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // messageDestinations were ignored in Tomcat 6, so ignore here</span><br><span class="line"></span><br><span class="line">    context.setIgnoreAnnotations(webxml.isMetadataComplete());</span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getMimeMappings().entrySet()) &#123;</span><br><span class="line">        context.addMimeMapping(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    // Name is just used for ordering</span><br><span class="line">    for (ContextResourceEnvRef resource :</span><br><span class="line">            webxml.getResourceEnvRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addResourceEnvRef(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextResource resource : webxml.getResourceRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addResource(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    boolean allAuthenticatedUsersIsAppRole =</span><br><span class="line">            webxml.getSecurityRoles().contains(</span><br><span class="line">                    SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS);</span><br><span class="line">    for (SecurityConstraint constraint : webxml.getSecurityConstraints()) &#123;</span><br><span class="line">        if (allAuthenticatedUsersIsAppRole) &#123;</span><br><span class="line">            constraint.treatAllAuthenticatedUsersAsApplicationRole();</span><br><span class="line">        &#125;</span><br><span class="line">        context.addConstraint(constraint);</span><br><span class="line">    &#125;</span><br><span class="line">    for (String role : webxml.getSecurityRoles()) &#123;</span><br><span class="line">        context.addSecurityRole(role);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ContextService service : webxml.getServiceRefs().values()) &#123;</span><br><span class="line">        context.getNamingResources().addService(service);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置servlet</span><br><span class="line">    for (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">        Wrapper wrapper = context.createWrapper();</span><br><span class="line">        // Description is ignored</span><br><span class="line">        // Display name is ignored</span><br><span class="line">        // Icons are ignored</span><br><span class="line"></span><br><span class="line">        // jsp-file gets passed to the JSP Servlet as an init-param</span><br><span class="line">        //设置LoadOnStartup值</span><br><span class="line">        if (servlet.getLoadOnStartup() != null) &#123;</span><br><span class="line">            wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (servlet.getEnabled() != null) &#123;</span><br><span class="line">            wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setName(servlet.getServletName());</span><br><span class="line">        Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">        for (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">            wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">        Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">        for (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">            wrapper.addSecurityReference(</span><br><span class="line">                    roleRef.getName(), roleRef.getLink());</span><br><span class="line">        &#125;</span><br><span class="line">        //设置ServletClass</span><br><span class="line">        wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">        MultipartDef multipartdef = servlet.getMultipartDef();</span><br><span class="line">        if (multipartdef != null) &#123;</span><br><span class="line">            if (multipartdef.getMaxFileSize() != null &amp;&amp;</span><br><span class="line">                    multipartdef.getMaxRequestSize()!= null &amp;&amp;</span><br><span class="line">                    multipartdef.getFileSizeThreshold() != null) &#123;</span><br><span class="line">                wrapper.setMultipartConfigElement(new MultipartConfigElement(</span><br><span class="line">                        multipartdef.getLocation(),</span><br><span class="line">                        Long.parseLong(multipartdef.getMaxFileSize()),</span><br><span class="line">                        Long.parseLong(multipartdef.getMaxRequestSize()),</span><br><span class="line">                        Integer.parseInt(</span><br><span class="line">                                multipartdef.getFileSizeThreshold())));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                wrapper.setMultipartConfigElement(new MultipartConfigElement(</span><br><span class="line">                        multipartdef.getLocation()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //设置是否支持异步任务</span><br><span class="line">        if (servlet.getAsyncSupported() != null) &#123;</span><br><span class="line">            wrapper.setAsyncSupported(</span><br><span class="line">                    servlet.getAsyncSupported().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">        //context中添加子容器wrapper</span><br><span class="line">        context.addChild(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">        context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    SessionConfig sessionConfig = webxml.getSessionConfig();</span><br><span class="line">    //设置Session相关属性</span><br><span class="line">    if (sessionConfig != null) &#123;</span><br><span class="line">        //设置session超时时间</span><br><span class="line">        if (sessionConfig.getSessionTimeout() != null) &#123;</span><br><span class="line">            context.setSessionTimeout(</span><br><span class="line">                    sessionConfig.getSessionTimeout().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        SessionCookieConfig scc =</span><br><span class="line">            context.getServletContext().getSessionCookieConfig();</span><br><span class="line">        scc.setName(sessionConfig.getCookieName());</span><br><span class="line">        scc.setDomain(sessionConfig.getCookieDomain());</span><br><span class="line">        scc.setPath(sessionConfig.getCookiePath());</span><br><span class="line">        scc.setComment(sessionConfig.getCookieComment());</span><br><span class="line">        if (sessionConfig.getCookieHttpOnly() != null) &#123;</span><br><span class="line">            scc.setHttpOnly(sessionConfig.getCookieHttpOnly().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (sessionConfig.getCookieSecure() != null) &#123;</span><br><span class="line">            scc.setSecure(sessionConfig.getCookieSecure().booleanValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (sessionConfig.getCookieMaxAge() != null) &#123;</span><br><span class="line">            scc.setMaxAge(sessionConfig.getCookieMaxAge().intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        if (sessionConfig.getSessionTrackingModes().size() &gt; 0) &#123;</span><br><span class="line">            context.getServletContext().setSessionTrackingModes(</span><br><span class="line">                    sessionConfig.getSessionTrackingModes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Context doesn&apos;t use version directly</span><br><span class="line">    // 设置welcomeFile</span><br><span class="line">    for (String welcomeFile : webxml.getWelcomeFiles()) &#123;</span><br><span class="line">        /*</span><br><span class="line">         * The following will result in a welcome file of &quot;&quot; so don&apos;t add</span><br><span class="line">         * that to the context</span><br><span class="line">         * &lt;welcome-file-list&gt;</span><br><span class="line">         *   &lt;welcome-file/&gt;</span><br><span class="line">         * &lt;/welcome-file-list&gt;</span><br><span class="line">         */</span><br><span class="line">        if (welcomeFile != null &amp;&amp; welcomeFile.length() &gt; 0) &#123;</span><br><span class="line">            //添加welcomeFile，并广播该事件</span><br><span class="line">            context.addWelcomeFile(welcomeFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Do this last as it depends on servlets</span><br><span class="line">    // 添加jsp映射</span><br><span class="line">    for (JspPropertyGroup jspPropertyGroup :</span><br><span class="line">            webxml.getJspPropertyGroups()) &#123;</span><br><span class="line">        String jspServletName = context.findServletMapping(&quot;*.jsp&quot;);</span><br><span class="line">        if (jspServletName == null) &#123;</span><br><span class="line">            jspServletName = &quot;jsp&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (context.findChild(jspServletName) != null) &#123;</span><br><span class="line">            for (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                context.addServletMappingDecoded(urlPattern, jspServletName, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if(log.isDebugEnabled()) &#123;</span><br><span class="line">                for (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                    log.debug(&quot;Skipping &quot; + urlPattern + &quot; , no servlet &quot; +</span><br><span class="line">                            jspServletName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getPostConstructMethods().entrySet()) &#123;</span><br><span class="line">        context.addPostConstructMethod(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (Entry&lt;String, String&gt; entry :</span><br><span class="line">        webxml.getPreDestroyMethods().entrySet()) &#123;</span><br><span class="line">        context.addPreDestroyMethod(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（一、7）StandardManager的startInternal方法"><a href="#13、接（一、7）StandardManager的startInternal方法" class="headerlink" title="13、接（一、7）StandardManager的startInternal方法"></a>13、接（一、7）StandardManager的startInternal方法</h4><p>启动会话管理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line">    //父类启动方法，创建sessionIdGenerator</span><br><span class="line">    super.startInternal();</span><br><span class="line"></span><br><span class="line">    // Load unloaded sessions, if any</span><br><span class="line">    try &#123;</span><br><span class="line">        //加载磁盘中的sessions</span><br><span class="line">        load();</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(sm.getString(&quot;standardManager.managerLoad&quot;), t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="14、StandardManager的doLoad方法"><a href="#14、StandardManager的doLoad方法" class="headerlink" title="14、StandardManager的doLoad方法"></a>14、StandardManager的doLoad方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">protected void doLoad() throws ClassNotFoundException, IOException &#123;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Start: Loading persisted sessions&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize our internal data structures</span><br><span class="line">    sessions.clear();</span><br><span class="line"></span><br><span class="line">    // Open an input stream to the specified pathname, if any</span><br><span class="line">    // 磁盘中的session文件，SESSIONS.ser</span><br><span class="line">    File file = file();</span><br><span class="line">    if (file == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;standardManager.loading&quot;, pathname));</span><br><span class="line">    &#125;</span><br><span class="line">    Loader loader = null;</span><br><span class="line">    ClassLoader classLoader = null;</span><br><span class="line">    Log logger = null;</span><br><span class="line">    try (FileInputStream fis = new FileInputStream(file.getAbsolutePath());</span><br><span class="line">            BufferedInputStream bis = new BufferedInputStream(fis)) &#123;</span><br><span class="line">        Context c = getContext();</span><br><span class="line">        loader = c.getLoader();</span><br><span class="line">        logger = c.getLogger();</span><br><span class="line">        if (loader != null) &#123;</span><br><span class="line">            classLoader = loader.getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        if (classLoader == null) &#123;</span><br><span class="line">            classLoader = getClass().getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Load the previously unloaded active sessions</span><br><span class="line">        synchronized (sessions) &#123;</span><br><span class="line">            try (ObjectInputStream ois = new CustomObjectInputStream(bis, classLoader, logger,</span><br><span class="line">                    getSessionAttributeValueClassNamePattern(),</span><br><span class="line">                    getWarnOnSessionAttributeFilterFailure())) &#123;</span><br><span class="line">                //磁盘中的session数量</span><br><span class="line">                Integer count = (Integer) ois.readObject();</span><br><span class="line">                int n = count.intValue();</span><br><span class="line">                if (log.isDebugEnabled())</span><br><span class="line">                    log.debug(&quot;Loading &quot; + n + &quot; persisted sessions&quot;);</span><br><span class="line">                for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">                    //创建session</span><br><span class="line">                    StandardSession session = getNewSession();</span><br><span class="line">                    //读取磁盘中的session文件</span><br><span class="line">                    session.readObjectData(ois);</span><br><span class="line">                    session.setManager(this);</span><br><span class="line">                    sessions.put(session.getIdInternal(), session);</span><br><span class="line">                    session.activate();</span><br><span class="line">                    if (!session.isValidInternal()) &#123;</span><br><span class="line">                        // If session is already invalid,</span><br><span class="line">                        // expire session to prevent memory leak.</span><br><span class="line">                        session.setValid(true);</span><br><span class="line">                        session.expire();</span><br><span class="line">                    &#125;</span><br><span class="line">                    sessionCounter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                // Delete the persistent storage file</span><br><span class="line">                if (file.exists()) &#123;</span><br><span class="line">                    file.delete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(&quot;No persisted data file found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Finish: Loading persisted sessions&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、后台线程"><a href="#二、后台线程" class="headerlink" title="二、后台线程"></a>二、后台线程</h3><h4 id="1、ContainerBackgroundProcessor的run方法"><a href="#1、ContainerBackgroundProcessor的run方法" class="headerlink" title="1、ContainerBackgroundProcessor的run方法"></a>1、ContainerBackgroundProcessor的run方法</h4><p>后台线程，实现热部署、管理过期session<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    Throwable t = null;</span><br><span class="line">    String unexpectedDeathMessage = sm.getString(</span><br><span class="line">            &quot;containerBase.backgroundProcess.unexpectedThreadDeath&quot;,</span><br><span class="line">            Thread.currentThread().getName());</span><br><span class="line">    try &#123;</span><br><span class="line">        while (!threadDone) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //后台线程执行间隔</span><br><span class="line">                Thread.sleep(backgroundProcessorDelay * 1000L);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">            if (!threadDone) &#123;</span><br><span class="line">                //部署容器</span><br><span class="line">                processChildren(ContainerBase.this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RuntimeException|Error e) &#123;</span><br><span class="line">        t = e;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (!threadDone) &#123;</span><br><span class="line">            log.error(unexpectedDeathMessage, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ContainerBackgroundProcessor的processChildren方法"><a href="#2、ContainerBackgroundProcessor的processChildren方法" class="headerlink" title="2、ContainerBackgroundProcessor的processChildren方法"></a>2、ContainerBackgroundProcessor的processChildren方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">protected void processChildren(Container container) &#123;</span><br><span class="line">    ClassLoader originalClassLoader = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (container instanceof Context) &#123;</span><br><span class="line">            Loader loader = ((Context) container).getLoader();</span><br><span class="line">            // Loader will be null for FailedContext instances</span><br><span class="line">            if (loader == null) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Ensure background processing for Contexts and Wrappers</span><br><span class="line">            // is performed under the web app&apos;s class loader</span><br><span class="line">            // 设置类加载器，ParallelWebappClassLoader</span><br><span class="line">            originalClassLoader = ((Context) container).bind(false, null);</span><br><span class="line">        &#125;</span><br><span class="line">        //容器后台线程</span><br><span class="line">        container.backgroundProcess();</span><br><span class="line">        //子容器后台线程</span><br><span class="line">        Container[] children = container.findChildren();</span><br><span class="line">        for (int i = 0; i &lt; children.length; i++) &#123;</span><br><span class="line">            if (children[i].getBackgroundProcessorDelay() &lt;= 0) &#123;</span><br><span class="line">                processChildren(children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(&quot;Exception invoking periodic operation: &quot;, t);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (container instanceof Context) &#123;</span><br><span class="line">            ((Context) container).unbind(false, originalClassLoader);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、StandardContext的backgroundProcess方法"><a href="#3、StandardContext的backgroundProcess方法" class="headerlink" title="3、StandardContext的backgroundProcess方法"></a>3、StandardContext的backgroundProcess方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void backgroundProcess() &#123;</span><br><span class="line"></span><br><span class="line">    if (!getState().isAvailable())</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    Loader loader = getLoader();</span><br><span class="line">    if (loader != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //重启context</span><br><span class="line">            loader.backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.loader&quot;, loader), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Manager manager = getManager();</span><br><span class="line">    if (manager != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //失效过期的session</span><br><span class="line">            manager.backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.manager&quot;, manager),</span><br><span class="line">                    e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    WebResourceRoot resources = getResources();</span><br><span class="line">    if (resources != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //清除过期的Web应用的资源缓存</span><br><span class="line">            resources.backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.resources&quot;,</span><br><span class="line">                    resources), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    InstanceManager instanceManager = getInstanceManager();</span><br><span class="line">    if (instanceManager instanceof DefaultInstanceManager) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //清除annotationCache中，过期的key</span><br><span class="line">            ((DefaultInstanceManager)instanceManager).backgroundProcess();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;standardContext.backgroundProcess.instanceManager&quot;,</span><br><span class="line">                    resources), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //执行cluster、realm、Valve的后台线程</span><br><span class="line">    super.backgroundProcess();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、注册容器映射"><a href="#三、注册容器映射" class="headerlink" title="三、注册容器映射"></a>三、注册容器映射</h3><h4 id="1、MapperListener的containerEvent方法"><a href="#1、MapperListener的containerEvent方法" class="headerlink" title="1、MapperListener的containerEvent方法"></a>1、MapperListener的containerEvent方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void containerEvent(ContainerEvent event) &#123;</span><br><span class="line">    //添加容器事件</span><br><span class="line">    if (Container.ADD_CHILD_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        Container child = (Container) event.getData();</span><br><span class="line">        //给子容器注册监听器</span><br><span class="line">        addListeners(child);</span><br><span class="line">        // If child is started then it is too late for life-cycle listener</span><br><span class="line">        // to register the child so register it here</span><br><span class="line">        if (child.getState().isAvailable()) &#123;</span><br><span class="line">            if (child instanceof Host) &#123;</span><br><span class="line">                //注册Host</span><br><span class="line">                registerHost((Host) child);</span><br><span class="line">            &#125; else if (child instanceof Context) &#123;</span><br><span class="line">                //注册Context</span><br><span class="line">                registerContext((Context) child);</span><br><span class="line">            &#125; else if (child instanceof Wrapper) &#123;</span><br><span class="line">                // Only if the Context has started. If it has not, then it</span><br><span class="line">                // will have its own &quot;after_start&quot; life-cycle event later.</span><br><span class="line">                if (child.getParent().getState().isAvailable()) &#123;</span><br><span class="line">                    //注册Wrapper</span><br><span class="line">                    registerWrapper((Wrapper) child);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    //移除容器事件</span><br><span class="line">    &#125; else if (Container.REMOVE_CHILD_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        Container child = (Container) event.getData();</span><br><span class="line">        removeListeners(child);</span><br><span class="line">        // No need to unregister - life-cycle listener will handle this when</span><br><span class="line">        // the child stops</span><br><span class="line">    //添加Host别名事件</span><br><span class="line">    &#125; else if (Host.ADD_ALIAS_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically adding host aliases</span><br><span class="line">        mapper.addHostAlias(((Host) event.getSource()).getName(),</span><br><span class="line">                event.getData().toString());</span><br><span class="line">    //移除Host别名事件</span><br><span class="line">    &#125; else if (Host.REMOVE_ALIAS_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically removing host aliases</span><br><span class="line">        mapper.removeHostAlias(event.getData().toString());</span><br><span class="line">    //warper添加mapping事件</span><br><span class="line">    &#125; else if (Wrapper.ADD_MAPPING_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically adding wrappers</span><br><span class="line">        //获取warpper对象</span><br><span class="line">        Wrapper wrapper = (Wrapper) event.getSource();</span><br><span class="line">        //获取warpper所属的context</span><br><span class="line">        Context context = (Context) wrapper.getParent();</span><br><span class="line">        //获取context的path</span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String version = context.getWebappVersion();</span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line">        String wrapperName = wrapper.getName();</span><br><span class="line">        //要map的路径</span><br><span class="line">        String mapping = (String) event.getData();</span><br><span class="line">        boolean jspWildCard = (&quot;jsp&quot;.equals(wrapperName)</span><br><span class="line">                &amp;&amp; mapping.endsWith(&quot;/*&quot;));</span><br><span class="line">        //注册warpper</span><br><span class="line">        mapper.addWrapper(hostName, contextPath, version, mapping, wrapper,</span><br><span class="line">                jspWildCard, context.isResourceOnlyServlet(wrapperName));</span><br><span class="line">    //warper移除mapping事件</span><br><span class="line">    &#125; else if (Wrapper.REMOVE_MAPPING_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically removing wrappers</span><br><span class="line">        Wrapper wrapper = (Wrapper) event.getSource();</span><br><span class="line"></span><br><span class="line">        Context context = (Context) wrapper.getParent();</span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String version = context.getWebappVersion();</span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String mapping = (String) event.getData();</span><br><span class="line"></span><br><span class="line">        mapper.removeWrapper(hostName, contextPath, version, mapping);</span><br><span class="line">    //addWelcomeFile事件</span><br><span class="line">    &#125; else if (Context.ADD_WELCOME_FILE_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically adding welcome files</span><br><span class="line">        Context context = (Context) event.getSource();</span><br><span class="line"></span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String welcomeFile = (String) event.getData();</span><br><span class="line"></span><br><span class="line">        mapper.addWelcomeFile(hostName, contextPath,</span><br><span class="line">                context.getWebappVersion(), welcomeFile);</span><br><span class="line">    &#125; else if (Context.REMOVE_WELCOME_FILE_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically removing welcome files</span><br><span class="line">        Context context = (Context) event.getSource();</span><br><span class="line"></span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String welcomeFile = (String) event.getData();</span><br><span class="line"></span><br><span class="line">        mapper.removeWelcomeFile(hostName, contextPath,</span><br><span class="line">                context.getWebappVersion(), welcomeFile);</span><br><span class="line">    &#125; else if (Context.CLEAR_WELCOME_FILES_EVENT.equals(event.getType())) &#123;</span><br><span class="line">        // Handle dynamically clearing welcome files</span><br><span class="line">        Context context = (Context) event.getSource();</span><br><span class="line"></span><br><span class="line">        String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mapper.clearWelcomeFiles(hostName, contextPath,</span><br><span class="line">                context.getWebappVersion());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、MapperListener的registerContext方法"><a href="#2、MapperListener的registerContext方法" class="headerlink" title="2、MapperListener的registerContext方法"></a>2、MapperListener的registerContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private void registerContext(Context context) &#123;</span><br><span class="line">    //获取context的path</span><br><span class="line">    String contextPath = context.getPath();</span><br><span class="line">    if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">        contextPath = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取host</span><br><span class="line">    Host host = (Host)context.getParent();</span><br><span class="line">    //获取root</span><br><span class="line">    WebResourceRoot resources = context.getResources();</span><br><span class="line">    //获取welcomeFile</span><br><span class="line">    String[] welcomeFiles = context.findWelcomeFiles();</span><br><span class="line">    List&lt;WrapperMappingInfo&gt; wrappers = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    //获取warpper中的mapping信息</span><br><span class="line">    for (Container container : context.findChildren()) &#123;</span><br><span class="line">        prepareWrapperMappingInfo(context, (Wrapper) container, wrappers);</span><br><span class="line"></span><br><span class="line">        if(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(&quot;mapperListener.registerWrapper&quot;,</span><br><span class="line">                    container.getName(), contextPath, service));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加context的map，容器按name排序存放在Mapper中</span><br><span class="line">    mapper.addContextVersion(host.getName(), host, contextPath,</span><br><span class="line">            context.getWebappVersion(), context, welcomeFiles, resources,</span><br><span class="line">            wrappers);</span><br><span class="line"></span><br><span class="line">    if(log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;mapperListener.registerContext&quot;,</span><br><span class="line">                contextPath, service));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、MapperListener的registerContext方法"><a href="#3、MapperListener的registerContext方法" class="headerlink" title="3、MapperListener的registerContext方法"></a>3、MapperListener的registerContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void registerWrapper(Wrapper wrapper) &#123;</span><br><span class="line">    //获取所属的context对象</span><br><span class="line">    Context context = (Context) wrapper.getParent();</span><br><span class="line">    //获取context的path</span><br><span class="line">    String contextPath = context.getPath();</span><br><span class="line">    if (&quot;/&quot;.equals(contextPath)) &#123;</span><br><span class="line">        contextPath = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //webapp的版本</span><br><span class="line">    String version = context.getWebappVersion();</span><br><span class="line">    String hostName = context.getParent().getName();</span><br><span class="line"></span><br><span class="line">    List&lt;WrapperMappingInfo&gt; wrappers = new ArrayList&lt;&gt;();</span><br><span class="line">    //获取warpper中的mapping信息</span><br><span class="line">    prepareWrapperMappingInfo(context, wrapper, wrappers);</span><br><span class="line">    //添加warpper的map，容器按name排序存放在Mapper中</span><br><span class="line">    mapper.addWrappers(hostName, contextPath, version, wrappers);</span><br><span class="line"></span><br><span class="line">    if(log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;mapperListener.registerWrapper&quot;,</span><br><span class="line">                wrapper.getName(), contextPath, service));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、项目部署&quot;&gt;&lt;a href=&quot;#一、项目部署&quot; class=&quot;headerlink&quot; title=&quot;一、项目部署&quot;&gt;&lt;/a&gt;一、项目部署&lt;/h3&gt;&lt;h4 id=&quot;1、HostConfig的lifecycleEvent方法&quot;&gt;&lt;a href=&quot;#1、HostCo
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码请求处理过程</title>
    <link href="http://yoursite.com/2018/07/11/tomcat%E6%BA%90%E7%A0%81/Tomcat%E6%BA%90%E7%A0%81%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/11/tomcat源码/Tomcat源码请求处理过程/</id>
    <published>2018-07-11T12:46:40.576Z</published>
    <updated>2018-07-11T12:41:46.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、请求处理过程"><a href="#一、请求处理过程" class="headerlink" title="一、请求处理过程"></a>一、请求处理过程</h3><h4 id="1、NioEndpoint的setSocketOptions方法"><a href="#1、NioEndpoint的setSocketOptions方法" class="headerlink" title="1、NioEndpoint的setSocketOptions方法"></a>1、NioEndpoint的setSocketOptions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">protected boolean setSocketOptions(SocketChannel socket) &#123;</span><br><span class="line">    // Process the connection</span><br><span class="line">    try &#123;</span><br><span class="line">        //disable blocking, APR style, we are gonna be polling it</span><br><span class="line">        //设置非阻塞</span><br><span class="line">        socket.configureBlocking(false);</span><br><span class="line">        Socket sock = socket.socket();</span><br><span class="line">        //设置属性</span><br><span class="line">        socketProperties.setProperties(sock);</span><br><span class="line">        //获取NioChannel</span><br><span class="line">        NioChannel channel = nioChannels.pop();</span><br><span class="line">        if (channel == null) &#123;</span><br><span class="line">            SocketBufferHandler bufhandler = new SocketBufferHandler(</span><br><span class="line">                    socketProperties.getAppReadBufSize(),</span><br><span class="line">                    socketProperties.getAppWriteBufSize(),</span><br><span class="line">                    socketProperties.getDirectBuffer());</span><br><span class="line">            if (isSSLEnabled()) &#123;</span><br><span class="line">                channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //创建NioChannel</span><br><span class="line">                channel = new NioChannel(socket, bufhandler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //重置NioChannel</span><br><span class="line">            channel.setIOChannel(socket);</span><br><span class="line">            channel.reset();</span><br><span class="line">        &#125;</span><br><span class="line">        //依次向Poller中注册channel</span><br><span class="line">        getPoller0().register(channel);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        try &#123;</span><br><span class="line">            log.error(&quot;&quot;,t);</span><br><span class="line">        &#125; catch (Throwable tt) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(tt);</span><br><span class="line">        &#125;</span><br><span class="line">        // Tell to close the socket</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Poller的register方法"><a href="#2、Poller的register方法" class="headerlink" title="2、Poller的register方法"></a>2、Poller的register方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void register(final NioChannel socket) &#123;</span><br><span class="line">    socket.setPoller(this);</span><br><span class="line">    NioSocketWrapper ka = new NioSocketWrapper(socket, NioEndpoint.this);</span><br><span class="line">    socket.setSocketWrapper(ka);</span><br><span class="line">    ka.setPoller(this);</span><br><span class="line">    //超时时间</span><br><span class="line">    ka.setReadTimeout(getSocketProperties().getSoTimeout());</span><br><span class="line">    ka.setWriteTimeout(getSocketProperties().getSoTimeout());</span><br><span class="line">    //连接存活时间，默认100s</span><br><span class="line">    ka.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());</span><br><span class="line">    ka.setSecure(isSSLEnabled());</span><br><span class="line">    ka.setReadTimeout(getConnectionTimeout());</span><br><span class="line">    ka.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">    //获取任务缓存</span><br><span class="line">    PollerEvent r = eventCache.pop();</span><br><span class="line">    //设置interestOps</span><br><span class="line">    ka.interestOps(SelectionKey.OP_READ);//this is what OP_REGISTER turns into.</span><br><span class="line">    //创建或重置任务</span><br><span class="line">    if ( r==null) r = new PollerEvent(socket,ka,OP_REGISTER);</span><br><span class="line">    else r.reset(socket,ka,OP_REGISTER);</span><br><span class="line">    //往Poller任务队列中添加</span><br><span class="line">    addEvent(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Poller的run方法"><a href="#3、Poller的run方法" class="headerlink" title="3、Poller的run方法"></a>3、Poller的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    // Loop until destroy() is called</span><br><span class="line">    while (true) &#123;</span><br><span class="line"></span><br><span class="line">        boolean hasEvents = false;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            if (!close) &#123;</span><br><span class="line">                //注册PollerEvent中的任务</span><br><span class="line">                hasEvents = events();</span><br><span class="line">                //查看就绪事件个数</span><br><span class="line">                if (wakeupCounter.getAndSet(-1) &gt; 0) &#123;</span><br><span class="line">                    //if we are here, means we have other stuff to do</span><br><span class="line">                    //do a non blocking select</span><br><span class="line">                    keyCount = selector.selectNow();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    keyCount = selector.select(selectorTimeout);</span><br><span class="line">                &#125;</span><br><span class="line">                //重置wakeupCounter</span><br><span class="line">                wakeupCounter.set(0);</span><br><span class="line">            &#125;</span><br><span class="line">            //关闭Poller</span><br><span class="line">            if (close) &#123;</span><br><span class="line">                events();</span><br><span class="line">                timeout(0, false);</span><br><span class="line">                try &#123;</span><br><span class="line">                    //关闭selector</span><br><span class="line">                    selector.close();</span><br><span class="line">                &#125; catch (IOException ioe) &#123;</span><br><span class="line">                    log.error(sm.getString(&quot;endpoint.nio.selectorCloseFail&quot;), ioe);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable x) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(x);</span><br><span class="line">            log.error(&quot;&quot;,x);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //either we timed out or we woke up, process events first</span><br><span class="line">        if ( keyCount == 0 ) hasEvents = (hasEvents | events());</span><br><span class="line">        //获取就绪的事件</span><br><span class="line">        Iterator&lt;SelectionKey&gt; iterator = keyCount &gt; 0 ? selector.selectedKeys().iterator() : null;</span><br><span class="line">        // Walk through the collection of ready keys and dispatch</span><br><span class="line">        // any active event.</span><br><span class="line">        while (iterator != null &amp;&amp; iterator.hasNext()) &#123;</span><br><span class="line">            SelectionKey sk = iterator.next();</span><br><span class="line">            NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();</span><br><span class="line">            // Attachment may be null if another thread has called</span><br><span class="line">            // cancelledKey()</span><br><span class="line">            // 去除并处理该事件</span><br><span class="line">            if (attachment == null) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">                processKey(sk, attachment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;//while</span><br><span class="line"></span><br><span class="line">        //process timeouts</span><br><span class="line">        timeout(keyCount,hasEvents);</span><br><span class="line">    &#125;//while</span><br><span class="line">    //stopLatch减一</span><br><span class="line">    getStopLatch().countDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、Poller的events方法"><a href="#4、Poller的events方法" class="headerlink" title="4、Poller的events方法"></a>4、Poller的events方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean events() &#123;</span><br><span class="line">    boolean result = false;</span><br><span class="line"></span><br><span class="line">    PollerEvent pe = null;</span><br><span class="line">    for (int i = 0, size = events.size(); i &lt; size &amp;&amp; (pe = events.poll()) != null; i++ ) &#123;</span><br><span class="line">        result = true;</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册任务</span><br><span class="line">            pe.run();</span><br><span class="line">            //重置PollerEvent</span><br><span class="line">            pe.reset();</span><br><span class="line">            if (running &amp;&amp; !paused) &#123;</span><br><span class="line">                //加入缓存</span><br><span class="line">                eventCache.push(pe);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch ( Throwable x ) &#123;</span><br><span class="line">            log.error(&quot;&quot;,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、PollerEvent的run方法"><a href="#5、PollerEvent的run方法" class="headerlink" title="5、PollerEvent的run方法"></a>5、PollerEvent的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    if (interestOps == OP_REGISTER) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //向Poller的selector中注册OP_READ，关注读数据就绪事件 </span><br><span class="line">            socket.getIOChannel().register(</span><br><span class="line">                    socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class="line">        &#125; catch (Exception x) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;endpoint.nio.registerFail&quot;), x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //获取注册到该Poller的selector上的key</span><br><span class="line">        final SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line">        try &#123;</span><br><span class="line">            //该key已关闭</span><br><span class="line">            if (key == null) &#123;</span><br><span class="line">                // The key was cancelled (e.g. due to socket closure)</span><br><span class="line">                // and removed from the selector while it was being</span><br><span class="line">                // processed. Count down the connections at this point</span><br><span class="line">                // since it won&apos;t have been counted down when the socket</span><br><span class="line">                // closed.</span><br><span class="line">                // 连接数减一</span><br><span class="line">                socket.socketWrapper.getEndpoint().countDownConnection();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                final NioSocketWrapper socketWrapper = (NioSocketWrapper) key.attachment();</span><br><span class="line">                if (socketWrapper != null) &#123;</span><br><span class="line">                    //we are registering the key to start with, reset the fairness counter.</span><br><span class="line">                    //向Poller的selector中添加注册interestOps，添加关注interestOps数据就绪事件</span><br><span class="line">                    int ops = key.interestOps() | interestOps;</span><br><span class="line">                    socketWrapper.interestOps(ops);</span><br><span class="line">                    key.interestOps(ops);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //关闭该key</span><br><span class="line">                    socket.getPoller().cancelledKey(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (CancelledKeyException ckx) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                socket.getPoller().cancelledKey(key);</span><br><span class="line">            &#125; catch (Exception ignore) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、3）Poller的processKey方法"><a href="#6、接（一、3）Poller的processKey方法" class="headerlink" title="6、接（一、3）Poller的processKey方法"></a>6、接（一、3）Poller的processKey方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">protected void processKey(SelectionKey sk, NioSocketWrapper attachment) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //Poller已关闭，关闭该key</span><br><span class="line">        if ( close ) &#123;</span><br><span class="line">            cancelledKey(sk);</span><br><span class="line">        &#125; else if ( sk.isValid() &amp;&amp; attachment != null ) &#123;</span><br><span class="line">            //读数据事件或者写数据事件就绪</span><br><span class="line">            if (sk.isReadable() || sk.isWritable() ) &#123;</span><br><span class="line">                //以文件形式发送给客户端</span><br><span class="line">                if ( attachment.getSendfileData() != null ) &#123;</span><br><span class="line">                    processSendfile(sk,attachment, false);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //去除对于已就绪事件的关注，防止socket变脏</span><br><span class="line">                    unreg(sk, attachment, sk.readyOps());</span><br><span class="line">                    boolean closeSocket = false;</span><br><span class="line">                    // Read goes before write</span><br><span class="line">                    // 处理读数据</span><br><span class="line">                    if (sk.isReadable()) &#123;</span><br><span class="line">                        if (!processSocket(attachment, SocketEvent.OPEN_READ, true)) &#123;</span><br><span class="line">                            closeSocket = true;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 处理写数据</span><br><span class="line">                    if (!closeSocket &amp;&amp; sk.isWritable()) &#123;</span><br><span class="line">                        if (!processSocket(attachment, SocketEvent.OPEN_WRITE, true)) &#123;</span><br><span class="line">                            closeSocket = true;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //关闭socket</span><br><span class="line">                    if (closeSocket) &#123;</span><br><span class="line">                        cancelledKey(sk);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //invalid key</span><br><span class="line">            //关闭key</span><br><span class="line">            cancelledKey(sk);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch ( CancelledKeyException ckx ) &#123;</span><br><span class="line">        //关闭key</span><br><span class="line">        cancelledKey(sk);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(&quot;&quot;,t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractEndpoint的processKey方法"><a href="#7、AbstractEndpoint的processKey方法" class="headerlink" title="7、AbstractEndpoint的processKey方法"></a>7、AbstractEndpoint<s>的processKey方法</s></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public boolean processSocket(SocketWrapperBase&lt;S&gt; socketWrapper,</span><br><span class="line">        SocketEvent event, boolean dispatch) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (socketWrapper == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //获取处理器</span><br><span class="line">        SocketProcessorBase&lt;S&gt; sc = processorCache.pop();</span><br><span class="line">        //创建或重置处理器，默认SocketProcessor</span><br><span class="line">        if (sc == null) &#123;</span><br><span class="line">            sc = createSocketProcessor(socketWrapper, event);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sc.reset(socketWrapper, event);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行处理器</span><br><span class="line">        Executor executor = getExecutor();</span><br><span class="line">        if (dispatch &amp;&amp; executor != null) &#123;</span><br><span class="line">            executor.execute(sc);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sc.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RejectedExecutionException ree) &#123;</span><br><span class="line">        getLog().warn(sm.getString(&quot;endpoint.executor.fail&quot;, socketWrapper) , ree);</span><br><span class="line">        return false;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        // This means we got an OOM or similar creating a thread, or that</span><br><span class="line">        // the pool and its queue are full</span><br><span class="line">        getLog().error(sm.getString(&quot;endpoint.process.fail&quot;), t);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、SocketProcessor的doRun方法"><a href="#8、SocketProcessor的doRun方法" class="headerlink" title="8、SocketProcessor的doRun方法"></a>8、SocketProcessor的doRun方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doRun() &#123;</span><br><span class="line">    NioChannel socket = socketWrapper.getSocket();</span><br><span class="line">    //获取注册到Poller的selector中的key</span><br><span class="line">    SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        int handshake = -1;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            if (key != null) &#123;</span><br><span class="line">                //默认返回true</span><br><span class="line">                if (socket.isHandshakeComplete()) &#123;</span><br><span class="line">                    // No TLS handshaking required. Let the handler</span><br><span class="line">                    // process this socket / event combination.</span><br><span class="line">                    handshake = 0;</span><br><span class="line">                &#125; else if (event == SocketEvent.STOP || event == SocketEvent.DISCONNECT ||</span><br><span class="line">                        event == SocketEvent.ERROR) &#123;</span><br><span class="line">                    // Unable to complete the TLS handshake. Treat it as</span><br><span class="line">                    // if the handshake failed.</span><br><span class="line">                    handshake = -1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    handshake = socket.handshake(key.isReadable(), key.isWritable());</span><br><span class="line">                    // The handshake process reads/writes from/to the</span><br><span class="line">                    // socket. status may therefore be OPEN_WRITE once</span><br><span class="line">                    // the handshake completes. However, the handshake</span><br><span class="line">                    // happens when the socket is opened so the status</span><br><span class="line">                    // must always be OPEN_READ after it completes. It</span><br><span class="line">                    // is OK to always set this as it is only used if</span><br><span class="line">                    // the handshake completes.</span><br><span class="line">                    event = SocketEvent.OPEN_READ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException x) &#123;</span><br><span class="line">            handshake = -1;</span><br><span class="line">            if (log.isDebugEnabled()) log.debug(&quot;Error during SSL handshake&quot;,x);</span><br><span class="line">        &#125; catch (CancelledKeyException ckx) &#123;</span><br><span class="line">            handshake = -1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (handshake == 0) &#123;</span><br><span class="line">            SocketState state = SocketState.OPEN;</span><br><span class="line">            // Process the request from this socket</span><br><span class="line">            if (event == null) &#123;</span><br><span class="line">                state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //获取ConnectionHandler，处理socket</span><br><span class="line">                state = getHandler().process(socketWrapper, event);</span><br><span class="line">            &#125;</span><br><span class="line">            if (state == SocketState.CLOSED) &#123;</span><br><span class="line">                //关闭socket</span><br><span class="line">                close(socket, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (handshake == -1 ) &#123;</span><br><span class="line">            //关闭socket</span><br><span class="line">            close(socket, key);</span><br><span class="line">        &#125; else if (handshake == SelectionKey.OP_READ)&#123;</span><br><span class="line">            //注册关注读数据就绪事件</span><br><span class="line">            socketWrapper.registerReadInterest();</span><br><span class="line">        &#125; else if (handshake == SelectionKey.OP_WRITE)&#123;</span><br><span class="line">            //注册关注写数据就绪事件</span><br><span class="line">            socketWrapper.registerWriteInterest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (CancelledKeyException cx) &#123;</span><br><span class="line">        socket.getPoller().cancelledKey(key);</span><br><span class="line">    &#125; catch (VirtualMachineError vme) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(vme);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        log.error(&quot;&quot;, t);</span><br><span class="line">        socket.getPoller().cancelledKey(key);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        socketWrapper = null;</span><br><span class="line">        event = null;</span><br><span class="line">        //return to cache</span><br><span class="line">        if (running &amp;&amp; !paused) &#123;</span><br><span class="line">            processorCache.push(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、ConnectionHandler的process方法"><a href="#9、ConnectionHandler的process方法" class="headerlink" title="9、ConnectionHandler的process方法"></a>9、ConnectionHandler的process方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SocketState process(SocketWrapperBase&lt;S&gt; wrapper, SocketEvent status) &#123;</span><br><span class="line">    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">        getLog().debug(sm.getString(&quot;abstractConnectionHandler.process&quot;,</span><br><span class="line">                wrapper.getSocket(), status));</span><br><span class="line">    &#125;</span><br><span class="line">    // Socket已关闭</span><br><span class="line">    if (wrapper == null) &#123;</span><br><span class="line">        // Nothing to do. Socket has been closed.</span><br><span class="line">        return SocketState.CLOSED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    S socket = wrapper.getSocket();</span><br><span class="line"></span><br><span class="line">    //获取socket对应的处理器，获取到说明该请求为异步任务</span><br><span class="line">    Processor processor = connections.get(socket);</span><br><span class="line">    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">        getLog().debug(sm.getString(&quot;abstractConnectionHandler.connectionsGet&quot;,</span><br><span class="line">                processor, socket));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (processor != null) &#123;</span><br><span class="line">        // Make sure an async timeout doesn&apos;t fire</span><br><span class="line">        //从等待处理完成的异步任务集合中，去除该socket的异步任务</span><br><span class="line">        getProtocol().removeWaitingProcessor(processor);</span><br><span class="line">    &#125; else if (status == SocketEvent.DISCONNECT || status == SocketEvent.ERROR) &#123;</span><br><span class="line">        // Nothing to do. Endpoint requested a close and there is no</span><br><span class="line">        // longer a processor associated with this socket.</span><br><span class="line">        return SocketState.CLOSED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ContainerThreadMarker.set();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (processor == null) &#123;</span><br><span class="line">            //获取协商协议</span><br><span class="line">            String negotiatedProtocol = wrapper.getNegotiatedProtocol();</span><br><span class="line">            if (negotiatedProtocol != null) &#123;</span><br><span class="line">                UpgradeProtocol upgradeProtocol =</span><br><span class="line">                        getProtocol().getNegotiatedProtocol(negotiatedProtocol);</span><br><span class="line">                if (upgradeProtocol != null) &#123;</span><br><span class="line">                    processor = upgradeProtocol.getProcessor(</span><br><span class="line">                            wrapper, getProtocol().getAdapter());</span><br><span class="line">                &#125; else if (negotiatedProtocol.equals(&quot;http/1.1&quot;)) &#123;</span><br><span class="line">                    // Explicitly negotiated the default protocol.</span><br><span class="line">                    // Obtain a processor below.</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // TODO:</span><br><span class="line">                    // OpenSSL 1.0.2&apos;s ALPN callback doesn&apos;t support</span><br><span class="line">                    // failing the handshake with an error if no</span><br><span class="line">                    // protocol can be negotiated. Therefore, we need to</span><br><span class="line">                    // fail the connection here. Once this is fixed,</span><br><span class="line">                    // replace the code below with the commented out</span><br><span class="line">                    // block.</span><br><span class="line">                    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                        getLog().debug(sm.getString(</span><br><span class="line">                            &quot;abstractConnectionHandler.negotiatedProcessor.fail&quot;,</span><br><span class="line">                            negotiatedProtocol));</span><br><span class="line">                    &#125;</span><br><span class="line">                    return SocketState.CLOSED;</span><br><span class="line">                    /*</span><br><span class="line">                     * To replace the code above once OpenSSL 1.1.0 is</span><br><span class="line">                     * used.</span><br><span class="line">                    // Failed to create processor. This is a bug.</span><br><span class="line">                    throw new IllegalStateException(sm.getString(</span><br><span class="line">                            &quot;abstractConnectionHandler.negotiatedProcessor.fail&quot;,</span><br><span class="line">                            negotiatedProtocol));</span><br><span class="line">                    */</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (processor == null) &#123;</span><br><span class="line">            //从队列中获取processor,processor在处理完任务之后会被重置并加入该队列</span><br><span class="line">            processor = recycledProcessors.pop();</span><br><span class="line">            if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                getLog().debug(sm.getString(&quot;abstractConnectionHandler.processorPop&quot;,</span><br><span class="line">                        processor));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //创建处理器，默认Http11Processor</span><br><span class="line">        if (processor == null) &#123;</span><br><span class="line">            processor = getProtocol().createProcessor();</span><br><span class="line">            register(processor);</span><br><span class="line">        &#125;</span><br><span class="line">        //是否支持ssl协议</span><br><span class="line">        processor.setSslSupport(</span><br><span class="line">                wrapper.getSslSupport(getProtocol().getClientCertProvider()));</span><br><span class="line"></span><br><span class="line">        // Associate the processor with the connection</span><br><span class="line">        // 建立socket与processor映射</span><br><span class="line">        connections.put(socket, processor);</span><br><span class="line"></span><br><span class="line">        SocketState state = SocketState.CLOSED;</span><br><span class="line">        do &#123;</span><br><span class="line">            //处理socket</span><br><span class="line">            state = processor.process(wrapper, status);</span><br><span class="line">            //使用HTTP/2协议处理该请求</span><br><span class="line">            if (state == SocketState.UPGRADING) &#123;</span><br><span class="line">                // Get the HTTP upgrade handler</span><br><span class="line">                UpgradeToken upgradeToken = processor.getUpgradeToken();</span><br><span class="line">                // Retrieve leftover input</span><br><span class="line">                ByteBuffer leftOverInput = processor.getLeftoverInput();</span><br><span class="line">                if (upgradeToken == null) &#123;</span><br><span class="line">                    // Assume direct HTTP/2 connection</span><br><span class="line">                    UpgradeProtocol upgradeProtocol = getProtocol().getUpgradeProtocol(&quot;h2c&quot;);</span><br><span class="line">                    if (upgradeProtocol != null) &#123;</span><br><span class="line">                        processor = upgradeProtocol.getProcessor(</span><br><span class="line">                                wrapper, getProtocol().getAdapter());</span><br><span class="line">                        wrapper.unRead(leftOverInput);</span><br><span class="line">                        // Associate with the processor with the connection</span><br><span class="line">                        connections.put(socket, processor);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                            getLog().debug(sm.getString(</span><br><span class="line">                                &quot;abstractConnectionHandler.negotiatedProcessor.fail&quot;,</span><br><span class="line">                                &quot;h2c&quot;));</span><br><span class="line">                        &#125;</span><br><span class="line">                        return SocketState.CLOSED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    HttpUpgradeHandler httpUpgradeHandler = upgradeToken.getHttpUpgradeHandler();</span><br><span class="line">                    // Release the Http11 processor to be re-used</span><br><span class="line">                    release(processor);</span><br><span class="line">                    // Create the upgrade processor</span><br><span class="line">                    processor = getProtocol().createUpgradeProcessor(wrapper, upgradeToken);</span><br><span class="line">                    if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                        getLog().debug(sm.getString(&quot;abstractConnectionHandler.upgradeCreate&quot;,</span><br><span class="line">                                processor, wrapper));</span><br><span class="line">                    &#125;</span><br><span class="line">                    wrapper.unRead(leftOverInput);</span><br><span class="line">                    // Mark the connection as upgraded</span><br><span class="line">                    wrapper.setUpgraded(true);</span><br><span class="line">                    // Associate with the processor with the connection</span><br><span class="line">                    connections.put(socket, processor);</span><br><span class="line">                    // Initialise the upgrade handler (which may trigger</span><br><span class="line">                    // some IO using the new protocol which is why the lines</span><br><span class="line">                    // above are necessary)</span><br><span class="line">                    // This cast should be safe. If it fails the error</span><br><span class="line">                    // handling for the surrounding try/catch will deal with</span><br><span class="line">                    // it.</span><br><span class="line">                    if (upgradeToken.getInstanceManager() == null) &#123;</span><br><span class="line">                        httpUpgradeHandler.init((WebConnection) processor);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        ClassLoader oldCL = upgradeToken.getContextBind().bind(false, null);</span><br><span class="line">                        try &#123;</span><br><span class="line">                            httpUpgradeHandler.init((WebConnection) processor);</span><br><span class="line">                        &#125; finally &#123;</span><br><span class="line">                            upgradeToken.getContextBind().unbind(false, oldCL);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; while ( state == SocketState.UPGRADING);</span><br><span class="line"></span><br><span class="line">        //该请求为异步任务</span><br><span class="line">        if (state == SocketState.LONG) &#123;</span><br><span class="line">            // In the middle of processing a request/response. Keep the</span><br><span class="line">            // socket associated with the processor. Exact requirements</span><br><span class="line">            // depend on type of long poll</span><br><span class="line">            longPoll(wrapper, processor);</span><br><span class="line">            if (processor.isAsync()) &#123;</span><br><span class="line">                //异步任务把processor添加到等待队列中继续处理读写，异步任务即使用业务线程池处理任务，</span><br><span class="line">                //这样不会占用Executor线程数，可以增加系统的吞吐量</span><br><span class="line">                getProtocol().addWaitingProcessor(processor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (state == SocketState.OPEN) &#123;</span><br><span class="line">            // In keep-alive but between requests. OK to recycle</span><br><span class="line">            // processor. Continue to poll for the next request.</span><br><span class="line">            //请求已处理完且为http长连接，回收processor对象，然后再将channel注册到poller上面去继续等待，  </span><br><span class="line">            //一个http连接可以发送多次请求</span><br><span class="line">            connections.remove(socket);</span><br><span class="line">            release(processor);</span><br><span class="line">            wrapper.registerReadInterest();</span><br><span class="line">        &#125; else if (state == SocketState.SENDFILE) &#123;</span><br><span class="line">            // Sendfile in progress. If it fails, the socket will be</span><br><span class="line">            // closed. If it works, the socket either be added to the</span><br><span class="line">            // poller (or equivalent) to await more data or processed</span><br><span class="line">            // if there are any pipe-lined requests remaining.</span><br><span class="line">        &#125; else if (state == SocketState.UPGRADED) &#123;</span><br><span class="line">            // Don&apos;t add sockets back to the poller if this was a</span><br><span class="line">            // non-blocking write otherwise the poller may trigger</span><br><span class="line">            // multiple read events which may lead to thread starvation</span><br><span class="line">            // in the connector. The write() method will add this socket</span><br><span class="line">            // to the poller if necessary.</span><br><span class="line">            if (status != SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">                longPoll(wrapper, processor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (state == SocketState.SUSPENDED) &#123;</span><br><span class="line">            // Don&apos;t add sockets back to the poller.</span><br><span class="line">            // The resumeProcessing() method will add this socket</span><br><span class="line">            // to the poller.</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Connection closed. OK to recycle the processor. Upgrade</span><br><span class="line">            // processors are not recycled.</span><br><span class="line">            // 重置处理器，并关闭连接</span><br><span class="line">            connections.remove(socket);</span><br><span class="line">            if (processor.isUpgrade()) &#123;</span><br><span class="line">                UpgradeToken upgradeToken = processor.getUpgradeToken();</span><br><span class="line">                HttpUpgradeHandler httpUpgradeHandler = upgradeToken.getHttpUpgradeHandler();</span><br><span class="line">                InstanceManager instanceManager = upgradeToken.getInstanceManager();</span><br><span class="line">                if (instanceManager == null) &#123;</span><br><span class="line">                    httpUpgradeHandler.destroy();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ClassLoader oldCL = upgradeToken.getContextBind().bind(false, null);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        httpUpgradeHandler.destroy();</span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            instanceManager.destroyInstance(httpUpgradeHandler);</span><br><span class="line">                        &#125; catch (Throwable e) &#123;</span><br><span class="line">                            ExceptionUtils.handleThrowable(e);</span><br><span class="line">                            getLog().error(sm.getString(&quot;abstractConnectionHandler.error&quot;), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        upgradeToken.getContextBind().unbind(false, oldCL);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                release(processor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return state;</span><br><span class="line">    &#125; catch(java.net.SocketException e) &#123;</span><br><span class="line">        // SocketExceptions are normal</span><br><span class="line">        getLog().debug(sm.getString(</span><br><span class="line">                &quot;abstractConnectionHandler.socketexception.debug&quot;), e);</span><br><span class="line">    &#125; catch (java.io.IOException e) &#123;</span><br><span class="line">        // IOExceptions are normal</span><br><span class="line">        getLog().debug(sm.getString(</span><br><span class="line">                &quot;abstractConnectionHandler.ioexception.debug&quot;), e);</span><br><span class="line">    &#125; catch (ProtocolException e) &#123;</span><br><span class="line">        // Protocol exceptions normally mean the client sent invalid or</span><br><span class="line">        // incomplete data.</span><br><span class="line">        getLog().debug(sm.getString(</span><br><span class="line">                &quot;abstractConnectionHandler.protocolexception.debug&quot;), e);</span><br><span class="line">    &#125;</span><br><span class="line">    // Future developers: if you discover any other</span><br><span class="line">    // rare-but-nonfatal exceptions, catch them here, and log as</span><br><span class="line">    // above.</span><br><span class="line">    catch (Throwable e) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(e);</span><br><span class="line">        // any other exception or error is odd. Here we log it</span><br><span class="line">        // with &quot;ERROR&quot; level, so it will show up even on</span><br><span class="line">        // less-than-verbose logs.</span><br><span class="line">        getLog().error(sm.getString(&quot;abstractConnectionHandler.error&quot;), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        ContainerThreadMarker.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Make sure socket/processor is removed from the list of current</span><br><span class="line">    // connections</span><br><span class="line">    // 重置处理器，并关闭连接</span><br><span class="line">    connections.remove(socket);</span><br><span class="line">    release(processor);</span><br><span class="line">    return SocketState.CLOSED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AbstractProcessorLight的process方法"><a href="#10、AbstractProcessorLight的process方法" class="headerlink" title="10、AbstractProcessorLight的process方法"></a>10、AbstractProcessorLight的process方法</h4><p>Http11Processor的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SocketState process(SocketWrapperBase&lt;?&gt; socketWrapper, SocketEvent status)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    SocketState state = SocketState.CLOSED;</span><br><span class="line">    Iterator&lt;DispatchType&gt; dispatches = null;</span><br><span class="line">    do &#123;</span><br><span class="line">        if (dispatches != null) &#123;</span><br><span class="line">            DispatchType nextDispatch = dispatches.next();</span><br><span class="line">            // 异步任务的后续处理,处理read或者write</span><br><span class="line">            state = dispatch(nextDispatch.getSocketStatus());</span><br><span class="line">        &#125; else if (status == SocketEvent.DISCONNECT) &#123;</span><br><span class="line">            // Do nothing here, just wait for it to get recycled</span><br><span class="line">        &#125; else if (isAsync() || isUpgrade() || state == SocketState.ASYNC_END) &#123;</span><br><span class="line">            //异步任务的后续处理，直接返回给客户端结果或转发请求给其他的servlet。</span><br><span class="line">            state = dispatch(status);</span><br><span class="line">            if (state == SocketState.OPEN) &#123;</span><br><span class="line">                // There may be pipe-lined data to read. If the data isn&apos;t</span><br><span class="line">                // processed now, execution will exit this loop and call</span><br><span class="line">                // release() which will recycle the processor (and input</span><br><span class="line">                // buffer) deleting any pipe-lined data. To avoid this,</span><br><span class="line">                // process it now.</span><br><span class="line">                // 异步任务处理完成，处理新请求</span><br><span class="line">                state = service(socketWrapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (status == SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">            // Extra write event likely after async, ignore</span><br><span class="line">            state = SocketState.LONG;</span><br><span class="line">        &#125; else if (status == SocketEvent.OPEN_READ)&#123;</span><br><span class="line">            //读取socket的数据封装成request和response对象，然后把这个两个对象交给容器</span><br><span class="line">            state = service(socketWrapper);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Default to closing the socket if the SocketEvent passed in</span><br><span class="line">            // is not consistent with the current state of the Processor</span><br><span class="line">            state = SocketState.CLOSED;</span><br><span class="line">        &#125;</span><br><span class="line">        //异步任务，如果已处理完毕，则返回ASYNC_END，</span><br><span class="line">        //如果未处理完毕，释放当前占用的容器线程池，等待异步servlet通知容器线程池重新处理servlet</span><br><span class="line">        if (state != SocketState.CLOSED &amp;&amp; isAsync()) &#123;</span><br><span class="line">            state = asyncPostProcess();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (getLog().isDebugEnabled()) &#123;</span><br><span class="line">            getLog().debug(&quot;Socket: [&quot; + socketWrapper +</span><br><span class="line">                    &quot;], Status in: [&quot; + status +</span><br><span class="line">                    &quot;], State out: [&quot; + state + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (dispatches == null || !dispatches.hasNext()) &#123;</span><br><span class="line">            // Only returns non-null iterator if there are</span><br><span class="line">            // dispatches to process.</span><br><span class="line">            // 获取待后续处理的异步任务</span><br><span class="line">            dispatches = getIteratorAndClearDispatches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (state == SocketState.ASYNC_END ||</span><br><span class="line">            dispatches != null &amp;&amp; state != SocketState.CLOSED);</span><br><span class="line"></span><br><span class="line">    return state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="11、Http11Processor的service方法"><a href="#11、Http11Processor的service方法" class="headerlink" title="11、Http11Processor的service方法"></a>11、Http11Processor的service方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SocketState service(SocketWrapperBase&lt;?&gt; socketWrapper)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    RequestInfo rp = request.getRequestProcessor();</span><br><span class="line">    rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);</span><br><span class="line"></span><br><span class="line">    // Setting up the I/O</span><br><span class="line">    setSocketWrapper(socketWrapper);</span><br><span class="line">    //初始化读缓冲区</span><br><span class="line">    inputBuffer.init(socketWrapper);</span><br><span class="line">    //初始化写缓冲区</span><br><span class="line">    outputBuffer.init(socketWrapper);</span><br><span class="line"></span><br><span class="line">    // Flags</span><br><span class="line">    // 是否为http长连接</span><br><span class="line">    keepAlive = true;</span><br><span class="line">    openSocket = false;</span><br><span class="line">    //读是否完成</span><br><span class="line">    readComplete = true;</span><br><span class="line">    boolean keptAlive = false;</span><br><span class="line">    SendfileState sendfileState = SendfileState.DONE;</span><br><span class="line"></span><br><span class="line">    while (!getErrorState().isError() &amp;&amp; keepAlive &amp;&amp; !isAsync() &amp;&amp; upgradeToken == null &amp;&amp;</span><br><span class="line">            sendfileState == SendfileState.DONE &amp;&amp; !endpoint.isPaused()) &#123;</span><br><span class="line"></span><br><span class="line">        // Parsing the request header</span><br><span class="line">        try &#123;</span><br><span class="line">            //读取请求行</span><br><span class="line">            if (!inputBuffer.parseRequestLine(keptAlive)) &#123;</span><br><span class="line">                if (inputBuffer.getParsingRequestLinePhase() == -1) &#123;</span><br><span class="line">                    // 使用http2.0</span><br><span class="line">                    return SocketState.UPGRADING;</span><br><span class="line">                &#125; else if (handleIncompleteRequestLineRead()) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //已挂起</span><br><span class="line">            if (endpoint.isPaused()) &#123;</span><br><span class="line">                // 503 - Service unavailable</span><br><span class="line">                // 503 网站不可用</span><br><span class="line">                response.setStatus(503);</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CLEAN, null);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 默认http长连接</span><br><span class="line">                keptAlive = true;</span><br><span class="line">                // Set this every time in case limit has been changed via JMX</span><br><span class="line">                //设置header个数的限制</span><br><span class="line">                request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());</span><br><span class="line">                // 循环解析所有的header name和value对，并添加到MimeHeaders的headers数组中</span><br><span class="line">                if (!inputBuffer.parseHeaders()) &#123;</span><br><span class="line">                    // We&apos;ve read part of the request, don&apos;t recycle it</span><br><span class="line">                    // instead associate it with the socket</span><br><span class="line">                    openSocket = true;</span><br><span class="line">                    readComplete = false;</span><br><span class="line">                    //读取失败</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                if (!disableUploadTimeout) &#123;</span><br><span class="line">                    //设置upload超时时间</span><br><span class="line">                    socketWrapper.setReadTimeout(connectionUploadTimeout);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(sm.getString(&quot;http11processor.header.parse&quot;), e);</span><br><span class="line">            &#125;</span><br><span class="line">            setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);</span><br><span class="line">            break;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            UserDataHelper.Mode logMode = userDataHelper.getNextMode();</span><br><span class="line">            if (logMode != null) &#123;</span><br><span class="line">                String message = sm.getString(&quot;http11processor.header.parse&quot;);</span><br><span class="line">                switch (logMode) &#123;</span><br><span class="line">                    case INFO_THEN_DEBUG:</span><br><span class="line">                        message += sm.getString(&quot;http11processor.fallToDebug&quot;);</span><br><span class="line">                        //$FALL-THROUGH$</span><br><span class="line">                    case INFO:</span><br><span class="line">                        log.info(message, t);</span><br><span class="line">                        break;</span><br><span class="line">                    case DEBUG:</span><br><span class="line">                        log.debug(message, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 400 - Bad Request</span><br><span class="line">            response.setStatus(400);</span><br><span class="line">            setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">            getAdapter().log(request, response, 0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Has an upgrade been requested?</span><br><span class="line">        // 获取header中的Connection，若存在Connection的值为upgrade，则认为http2.0</span><br><span class="line">        Enumeration&lt;String&gt; connectionValues = request.getMimeHeaders().values(&quot;Connection&quot;);</span><br><span class="line">        boolean foundUpgrade = false;</span><br><span class="line">        while (connectionValues.hasMoreElements() &amp;&amp; !foundUpgrade) &#123;</span><br><span class="line">            foundUpgrade = connectionValues.nextElement().toLowerCase(</span><br><span class="line">                    Locale.ENGLISH).contains(&quot;upgrade&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (foundUpgrade) &#123;</span><br><span class="line">            // Check the protocol</span><br><span class="line">            String requestedProtocol = request.getHeader(&quot;Upgrade&quot;);</span><br><span class="line"></span><br><span class="line">            UpgradeProtocol upgradeProtocol = httpUpgradeProtocols.get(requestedProtocol);</span><br><span class="line">            if (upgradeProtocol != null) &#123;</span><br><span class="line">                if (upgradeProtocol.accept(request)) &#123;</span><br><span class="line">                    // TODO Figure out how to handle request bodies at this</span><br><span class="line">                    // point.</span><br><span class="line">                    response.setStatus(HttpServletResponse.SC_SWITCHING_PROTOCOLS);</span><br><span class="line">                    response.setHeader(&quot;Connection&quot;, &quot;Upgrade&quot;);</span><br><span class="line">                    response.setHeader(&quot;Upgrade&quot;, requestedProtocol);</span><br><span class="line">                    action(ActionCode.CLOSE,  null);</span><br><span class="line">                    getAdapter().log(request, response, 0);</span><br><span class="line"></span><br><span class="line">                    InternalHttpUpgradeHandler upgradeHandler =</span><br><span class="line">                            upgradeProtocol.getInternalUpgradeHandler(</span><br><span class="line">                                    getAdapter(), cloneRequest(request));</span><br><span class="line">                    UpgradeToken upgradeToken = new UpgradeToken(upgradeHandler, null, null);</span><br><span class="line">                    action(ActionCode.UPGRADE, upgradeToken);</span><br><span class="line">                    return SocketState.UPGRADING;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!getErrorState().isError()) &#123;</span><br><span class="line">            // Setting up filters, and parse some request headers</span><br><span class="line">            rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);</span><br><span class="line">            try &#123;</span><br><span class="line">                //预处理请求</span><br><span class="line">                prepareRequest();</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                if (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(&quot;http11processor.request.prepare&quot;), t);</span><br><span class="line">                &#125;</span><br><span class="line">                // 500 - Internal Server Error</span><br><span class="line">                response.setStatus(500);</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">                getAdapter().log(request, response, 0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //长连接数量限制</span><br><span class="line">        if (maxKeepAliveRequests == 1) &#123;</span><br><span class="line">            keepAlive = false;</span><br><span class="line">        &#125; else if (maxKeepAliveRequests &gt; 0 &amp;&amp;</span><br><span class="line">                socketWrapper.decrementKeepAlive() &lt;= 0) &#123;</span><br><span class="line">            keepAlive = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Process the request in the adapter</span><br><span class="line">        if (!getErrorState().isError()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);</span><br><span class="line">                //获取CoyoteAdapter处理请求</span><br><span class="line">                getAdapter().service(request, response);</span><br><span class="line">                // Handle when the response was committed before a serious</span><br><span class="line">                // error occurred.  Throwing a ServletException should both</span><br><span class="line">                // set the status to 500 and set the errorException.</span><br><span class="line">                // If we fail here, then the response is likely already</span><br><span class="line">                // committed, so we can&apos;t try and set headers.</span><br><span class="line">                if(keepAlive &amp;&amp; !getErrorState().isError() &amp;&amp; !isAsync() &amp;&amp;</span><br><span class="line">                        statusDropsConnection(response.getStatus())) &#123;</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CLEAN, null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedIOException e) &#123;</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);</span><br><span class="line">            &#125; catch (HeadersTooLargeException e) &#123;</span><br><span class="line">                log.error(sm.getString(&quot;http11processor.request.process&quot;), e);</span><br><span class="line">                // The response should not have been committed but check it</span><br><span class="line">                // anyway to be safe</span><br><span class="line">                if (response.isCommitted()) &#123;</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_NOW, e);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    response.reset();</span><br><span class="line">                    response.setStatus(500);</span><br><span class="line">                    setErrorState(ErrorState.CLOSE_CLEAN, e);</span><br><span class="line">                    response.setHeader(&quot;Connection&quot;, &quot;close&quot;); // TODO: Remove</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(sm.getString(&quot;http11processor.request.process&quot;), t);</span><br><span class="line">                // 500 - Internal Server Error</span><br><span class="line">                response.setStatus(500);</span><br><span class="line">                setErrorState(ErrorState.CLOSE_CLEAN, t);</span><br><span class="line">                getAdapter().log(request, response, 0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Finish the handling of the request</span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);</span><br><span class="line">        //不是异步任务，请求处理结束</span><br><span class="line">        if (!isAsync()) &#123;</span><br><span class="line">            // If this is an async request then the request ends when it has</span><br><span class="line">            // been completed. The AsyncContext is responsible for calling</span><br><span class="line">            // endRequest() in that case.</span><br><span class="line">            endRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);</span><br><span class="line"></span><br><span class="line">        // If there was an error, make sure the request is counted as</span><br><span class="line">        // and error, and update the statistics counter</span><br><span class="line">        if (getErrorState().isError()) &#123;</span><br><span class="line">            response.setStatus(500);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 重置，处理下一个请求</span><br><span class="line">        if (!isAsync() || getErrorState().isError()) &#123;</span><br><span class="line">            request.updateCounters();</span><br><span class="line">            if (getErrorState().isIoAllowed()) &#123;</span><br><span class="line">                inputBuffer.nextRequest();</span><br><span class="line">                outputBuffer.nextRequest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //设置Upload超时时间</span><br><span class="line">        if (!disableUploadTimeout) &#123;</span><br><span class="line">            int soTimeout = endpoint.getConnectionTimeout();</span><br><span class="line">            if(soTimeout &gt; 0) &#123;</span><br><span class="line">                socketWrapper.setReadTimeout(soTimeout);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                socketWrapper.setReadTimeout(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);</span><br><span class="line">        //tomcat默认设置是当数据大小达到48kb时，将启用文件传输</span><br><span class="line">        sendfileState = processSendfile(socketWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);</span><br><span class="line"></span><br><span class="line">    if (getErrorState().isError() || endpoint.isPaused()) &#123;</span><br><span class="line">        return SocketState.CLOSED;</span><br><span class="line">    &#125; else if (isAsync()) &#123;</span><br><span class="line">        return SocketState.LONG;</span><br><span class="line">    &#125; else if (isUpgrade()) &#123;</span><br><span class="line">        return SocketState.UPGRADING;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (sendfileState == SendfileState.PENDING) &#123;</span><br><span class="line">            return SocketState.SENDFILE;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (openSocket) &#123;</span><br><span class="line">                if (readComplete) &#123;</span><br><span class="line">                    return SocketState.OPEN;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return SocketState.LONG;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return SocketState.CLOSED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、CoyoteAdapter的service方法"><a href="#12、CoyoteAdapter的service方法" class="headerlink" title="12、CoyoteAdapter的service方法"></a>12、CoyoteAdapter的service方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void service(org.apache.coyote.Request req, org.apache.coyote.Response res)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    Request request = (Request) req.getNote(ADAPTER_NOTES);</span><br><span class="line">    Response response = (Response) res.getNote(ADAPTER_NOTES);</span><br><span class="line">    // 创建request及response</span><br><span class="line">    if (request == null) &#123;</span><br><span class="line">        // Create objects</span><br><span class="line">        request = connector.createRequest();</span><br><span class="line">        request.setCoyoteRequest(req);</span><br><span class="line">        response = connector.createResponse();</span><br><span class="line">        response.setCoyoteResponse(res);</span><br><span class="line"></span><br><span class="line">        // Link objects</span><br><span class="line">        request.setResponse(response);</span><br><span class="line">        response.setRequest(request);</span><br><span class="line"></span><br><span class="line">        // Set as notes</span><br><span class="line">        req.setNote(ADAPTER_NOTES, request);</span><br><span class="line">        res.setNote(ADAPTER_NOTES, response);</span><br><span class="line"></span><br><span class="line">        // Set query string encoding</span><br><span class="line">        req.getParameters().setQueryStringCharset(connector.getURICharset());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (connector.getXpoweredBy()) &#123;</span><br><span class="line">        response.addHeader(&quot;X-Powered-By&quot;, POWERED_BY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean async = false;</span><br><span class="line">    boolean postParseSuccess = false;</span><br><span class="line"></span><br><span class="line">    req.getRequestProcessor().setWorkerThreadName(THREAD_NAME.get());</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Parse and set Catalina and configuration specific</span><br><span class="line">        // request parameters</span><br><span class="line">        // 处理请求，解析请求url中的参数，由Mapper中查找请求对应的host、context、wrapper</span><br><span class="line">        // 获取Path或Cookies中的sessionID存入request中</span><br><span class="line">        postParseSuccess = postParseRequest(req, request, res, response);</span><br><span class="line">        if (postParseSuccess) &#123;</span><br><span class="line">            //check valves if we support async</span><br><span class="line">            //设置是否支持异步任务</span><br><span class="line">            request.setAsyncSupported(</span><br><span class="line">                    connector.getService().getContainer().getPipeline().isAsyncSupported());</span><br><span class="line">            // Calling the container</span><br><span class="line">            //获取Engine的管道的value链，默认只有StandardEngineValve，执行invoke方法</span><br><span class="line">            connector.getService().getContainer().getPipeline().getFirst().invoke(</span><br><span class="line">                    request, response);</span><br><span class="line">        &#125;</span><br><span class="line">        if (request.isAsync()) &#123;</span><br><span class="line">            async = true;</span><br><span class="line">            ReadListener readListener = req.getReadListener();</span><br><span class="line">            if (readListener != null &amp;&amp; request.isFinished()) &#123;</span><br><span class="line">                // Possible the all data may have been read during service()</span><br><span class="line">                // method so this needs to be checked here</span><br><span class="line">                ClassLoader oldCL = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    oldCL = request.getContext().bind(false, null);</span><br><span class="line">                    if (req.sendAllDataReadEvent()) &#123;</span><br><span class="line">                        req.getReadListener().onAllDataRead();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    request.getContext().unbind(false, oldCL);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Throwable throwable =</span><br><span class="line">                    (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span><br><span class="line"></span><br><span class="line">            // If an async request was started, is not going to end once</span><br><span class="line">            // this container thread finishes and an error occurred, trigger</span><br><span class="line">            // the async error process</span><br><span class="line">            if (!request.isAsyncCompleting() &amp;&amp; throwable != null) &#123;</span><br><span class="line">                request.getAsyncContextInternal().setErrorState(throwable, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //请求处理结束，发送返回</span><br><span class="line">            request.finishRequest();</span><br><span class="line">            response.finishResponse();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        // Ignore</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        AtomicBoolean error = new AtomicBoolean(false);</span><br><span class="line">        res.action(ActionCode.IS_ERROR, error);</span><br><span class="line"></span><br><span class="line">        if (request.isAsyncCompleting() &amp;&amp; error.get()) &#123;</span><br><span class="line">            // Connection will be forcibly closed which will prevent</span><br><span class="line">            // completion happening at the usual point. Need to trigger</span><br><span class="line">            // call to onComplete() here.</span><br><span class="line">            res.action(ActionCode.ASYNC_POST_PROCESS,  null);</span><br><span class="line">            async = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Access log</span><br><span class="line">        if (!async &amp;&amp; postParseSuccess) &#123;</span><br><span class="line">            // Log only if processing was invoked.</span><br><span class="line">            // If postParseRequest() failed, it has already logged it.</span><br><span class="line">            Context context = request.getContext();</span><br><span class="line">            // If the context is null, it is likely that the endpoint was</span><br><span class="line">            // shutdown, this connection closed and the request recycled in</span><br><span class="line">            // a different thread. That thread will have updated the access</span><br><span class="line">            // log so it is OK not to update the access log here in that</span><br><span class="line">            // case.</span><br><span class="line">            if (context != null) &#123;</span><br><span class="line">                context.logAccess(request, response,</span><br><span class="line">                        System.currentTimeMillis() - req.getStartTime(), false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        req.getRequestProcessor().setWorkerThreadName(null);</span><br><span class="line"></span><br><span class="line">        // Recycle the wrapper request and response</span><br><span class="line">        if (!async) &#123;</span><br><span class="line">            request.recycle();</span><br><span class="line">            response.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、StandardEngineValve的invoke方法"><a href="#13、StandardEngineValve的invoke方法" class="headerlink" title="13、StandardEngineValve的invoke方法"></a>13、StandardEngineValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void invoke(Request request, Response response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Select the Host to be used for this Request</span><br><span class="line">    Host host = request.getHost();</span><br><span class="line">    if (host == null) &#123;</span><br><span class="line">        response.sendError</span><br><span class="line">            (HttpServletResponse.SC_BAD_REQUEST,</span><br><span class="line">             sm.getString(&quot;standardEngine.noHost&quot;,</span><br><span class="line">                          request.getServerName()));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Ask this Host to process this request</span><br><span class="line">    //获取Host的管道的value链，默认只有StandardHostValve，执行invoke方法 </span><br><span class="line">    host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、StandardHostValve的invoke方法"><a href="#14、StandardHostValve的invoke方法" class="headerlink" title="14、StandardHostValve的invoke方法"></a>14、StandardHostValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void invoke(Request request, Response response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Select the Context to be used for this Request</span><br><span class="line">    Context context = request.getContext();</span><br><span class="line">    if (context == null) &#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,</span><br><span class="line">             sm.getString(&quot;standardHost.noContext&quot;));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(context.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean asyncAtStart = request.isAsync();</span><br><span class="line">    boolean asyncDispatching = request.isAsyncDispatching();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        context.bind(Globals.IS_SECURITY_ENABLED, MY_CLASSLOADER);</span><br><span class="line"></span><br><span class="line">        if (!asyncAtStart &amp;&amp; !context.fireRequestInitEvent(request.getRequest())) &#123;</span><br><span class="line">            // Don&apos;t fire listeners during async processing (the listener</span><br><span class="line">            // fired for the request that called startAsync()).</span><br><span class="line">            // If a request init listener throws an exception, the request</span><br><span class="line">            // is aborted.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Ask this Context to process this request. Requests that are in</span><br><span class="line">        // async mode and are not being dispatched to this resource must be</span><br><span class="line">        // in error and have been routed here to check for application</span><br><span class="line">        // defined error pages.</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!asyncAtStart || asyncDispatching) &#123;</span><br><span class="line">                //获取Context的管道的value链，默认只有StandardContextValve，执行invoke方法 </span><br><span class="line">                context.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Make sure this request/response is here because an error</span><br><span class="line">                // report is required.</span><br><span class="line">                if (!response.isErrorReportRequired()) &#123;</span><br><span class="line">                    throw new IllegalStateException(sm.getString(&quot;standardHost.asyncStateError&quot;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            container.getLogger().error(&quot;Exception Processing &quot; + request.getRequestURI(), t);</span><br><span class="line">            // If a new error occurred while trying to report a previous</span><br><span class="line">            // error allow the original error to be reported.</span><br><span class="line">            if (!response.isErrorReportRequired()) &#123;</span><br><span class="line">                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);</span><br><span class="line">                throwable(request, response, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Now that the request/response pair is back under container</span><br><span class="line">        // control lift the suspension so that the error handling can</span><br><span class="line">        // complete and/or the container can flush any remaining data</span><br><span class="line">        response.setSuspended(false);</span><br><span class="line"></span><br><span class="line">        Throwable t = (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span><br><span class="line"></span><br><span class="line">        // Protect against NPEs if the context was destroyed during a</span><br><span class="line">        // long running request.</span><br><span class="line">        if (!context.getState().isAvailable()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Look for (and render if found) an application level error page</span><br><span class="line">        // 发送错误信息</span><br><span class="line">        if (response.isErrorReportRequired()) &#123;</span><br><span class="line">            if (t != null) &#123;</span><br><span class="line">                throwable(request, response, t);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                status(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 广播request销毁事件</span><br><span class="line">        if (!request.isAsync() &amp;&amp; !asyncAtStart) &#123;</span><br><span class="line">            context.fireRequestDestroyEvent(request.getRequest());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Access a session (if present) to update last accessed time, based</span><br><span class="line">        // on a strict interpretation of the specification</span><br><span class="line">        // 更新session的时间</span><br><span class="line">        if (ACCESS_SESSION) &#123;</span><br><span class="line">            request.getSession(false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.unbind(Globals.IS_SECURITY_ENABLED, MY_CLASSLOADER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、StandardContextValve的invoke方法"><a href="#15、StandardContextValve的invoke方法" class="headerlink" title="15、StandardContextValve的invoke方法"></a>15、StandardContextValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void invoke(Request request, Response response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Disallow any direct access to resources under WEB-INF or META-INF</span><br><span class="line">    MessageBytes requestPathMB = request.getRequestPathMB();</span><br><span class="line">    // 不允许直接访问该目录的资源</span><br><span class="line">    if ((requestPathMB.startsWithIgnoreCase(&quot;/META-INF/&quot;, 0))</span><br><span class="line">            || (requestPathMB.equalsIgnoreCase(&quot;/META-INF&quot;))</span><br><span class="line">            || (requestPathMB.startsWithIgnoreCase(&quot;/WEB-INF/&quot;, 0))</span><br><span class="line">            || (requestPathMB.equalsIgnoreCase(&quot;/WEB-INF&quot;))) &#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Select the Wrapper to be used for this Request</span><br><span class="line">    // 检查是否找到wrapper</span><br><span class="line">    Wrapper wrapper = request.getWrapper();</span><br><span class="line">    if (wrapper == null || wrapper.isUnavailable()) &#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Acknowledge the request</span><br><span class="line">    try &#123;</span><br><span class="line">        //确认已收到该请求</span><br><span class="line">        response.sendAcknowledgement();</span><br><span class="line">    &#125; catch (IOException ioe) &#123;</span><br><span class="line">        container.getLogger().error(sm.getString(</span><br><span class="line">                &quot;standardContextValve.acknowledgeException&quot;), ioe);</span><br><span class="line">        request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);</span><br><span class="line">        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置是否支持异步任务</span><br><span class="line">    if (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(wrapper.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line">    //获取Wrapper的管道的value链，默认只有StandardWrapperValve，执行invoke方法 </span><br><span class="line">    wrapper.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、StandardWrapperValve的invoke方法"><a href="#16、StandardWrapperValve的invoke方法" class="headerlink" title="16、StandardWrapperValve的invoke方法"></a>16、StandardWrapperValve的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> public final void invoke(Request request, Response response)</span><br><span class="line">     throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">     // Initialize local variables we may need</span><br><span class="line">     boolean unavailable = false;</span><br><span class="line">     Throwable throwable = null;</span><br><span class="line">     // This should be a Request attribute...</span><br><span class="line">     long t1=System.currentTimeMillis();</span><br><span class="line">     requestCount.incrementAndGet();</span><br><span class="line">     StandardWrapper wrapper = (StandardWrapper) getContainer();</span><br><span class="line">     Servlet servlet = null;</span><br><span class="line">     Context context = (Context) wrapper.getParent();</span><br><span class="line"></span><br><span class="line">     // Check for the application being marked unavailable</span><br><span class="line">     if (!context.getState().isAvailable()) &#123;</span><br><span class="line">         response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                        sm.getString(&quot;standardContext.isUnavailable&quot;));</span><br><span class="line">         unavailable = true;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Check for the servlet being marked unavailable</span><br><span class="line">     if (!unavailable &amp;&amp; wrapper.isUnavailable()) &#123;</span><br><span class="line">         container.getLogger().info(sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                 wrapper.getName()));</span><br><span class="line">         long available = wrapper.getAvailable();</span><br><span class="line">         if ((available &gt; 0L) &amp;&amp; (available &lt; Long.MAX_VALUE)) &#123;</span><br><span class="line">             response.setDateHeader(&quot;Retry-After&quot;, available);</span><br><span class="line">             response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                     sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                             wrapper.getName()));</span><br><span class="line">         &#125; else if (available == Long.MAX_VALUE) &#123;</span><br><span class="line">             response.sendError(HttpServletResponse.SC_NOT_FOUND,</span><br><span class="line">                     sm.getString(&quot;standardWrapper.notFound&quot;,</span><br><span class="line">                             wrapper.getName()));</span><br><span class="line">         &#125;</span><br><span class="line">         unavailable = true;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Allocate a servlet instance to process this request</span><br><span class="line">     try &#123;</span><br><span class="line">         if (!unavailable) &#123;</span><br><span class="line">             // 获取wrapper中的servlet</span><br><span class="line">             servlet = wrapper.allocate();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (UnavailableException e) &#123;</span><br><span class="line">         container.getLogger().error(</span><br><span class="line">                 sm.getString(&quot;standardWrapper.allocateException&quot;,</span><br><span class="line">                         wrapper.getName()), e);</span><br><span class="line">         long available = wrapper.getAvailable();</span><br><span class="line">         if ((available &gt; 0L) &amp;&amp; (available &lt; Long.MAX_VALUE)) &#123;</span><br><span class="line">             response.setDateHeader(&quot;Retry-After&quot;, available);</span><br><span class="line">             response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                        sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125; else if (available == Long.MAX_VALUE) &#123;</span><br><span class="line">             response.sendError(HttpServletResponse.SC_NOT_FOUND,</span><br><span class="line">                        sm.getString(&quot;standardWrapper.notFound&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (ServletException e) &#123;</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.allocateException&quot;,</span><br><span class="line">                          wrapper.getName()), StandardWrapper.getRootCause(e));</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.allocateException&quot;,</span><br><span class="line">                          wrapper.getName()), e);</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">         servlet = null;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     MessageBytes requestPathMB = request.getRequestPathMB();</span><br><span class="line">     DispatcherType dispatcherType = DispatcherType.REQUEST;</span><br><span class="line">     if (request.getDispatcherType()==DispatcherType.ASYNC) dispatcherType = DispatcherType.ASYNC;</span><br><span class="line">     //request对象设置请求类型和请求路径属性</span><br><span class="line">     request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,dispatcherType);</span><br><span class="line">     request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,requestPathMB);</span><br><span class="line"></span><br><span class="line">     // Create the filter chain for this request</span><br><span class="line">     // 创建过滤器链，添加匹配的过滤器、servlet</span><br><span class="line">     ApplicationFilterChain filterChain =</span><br><span class="line">             ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line"></span><br><span class="line">     // Call the filter chain for this request</span><br><span class="line">     // NOTE: This also calls the servlet&apos;s service() method</span><br><span class="line">     try &#123;</span><br><span class="line">         if ((servlet != null) &amp;&amp; (filterChain != null)) &#123;</span><br><span class="line">             // Swallow output if needed</span><br><span class="line">             if (context.getSwallowOutput()) &#123;</span><br><span class="line">                 try &#123;</span><br><span class="line">                     SystemLogHandler.startCapture();</span><br><span class="line">                     //处理异步任务请求转发</span><br><span class="line">                     if (request.isAsyncDispatching()) &#123;</span><br><span class="line">                         request.getAsyncContextInternal().doInternalDispatch();</span><br><span class="line">                     &#125; else &#123;</span><br><span class="line">                         //执行过滤器及servlet的service方法</span><br><span class="line">                         filterChain.doFilter(request.getRequest(),</span><br><span class="line">                                 response.getResponse());</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125; finally &#123;</span><br><span class="line">                     String log = SystemLogHandler.stopCapture();</span><br><span class="line">                     if (log != null &amp;&amp; log.length() &gt; 0) &#123;</span><br><span class="line">                         context.getLogger().info(log);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; else &#123;</span><br><span class="line">                 if (request.isAsyncDispatching()) &#123;</span><br><span class="line">                     request.getAsyncContextInternal().doInternalDispatch();</span><br><span class="line">                 &#125; else &#123;</span><br><span class="line">                     filterChain.doFilter</span><br><span class="line">                         (request.getRequest(), response.getResponse());</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (ClientAbortException e) &#123;</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (IOException e) &#123;</span><br><span class="line">         container.getLogger().error(sm.getString(</span><br><span class="line">                 &quot;standardWrapper.serviceException&quot;, wrapper.getName(),</span><br><span class="line">                 context.getName()), e);</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (UnavailableException e) &#123;</span><br><span class="line">         container.getLogger().error(sm.getString(</span><br><span class="line">                 &quot;standardWrapper.serviceException&quot;, wrapper.getName(),</span><br><span class="line">                 context.getName()), e);</span><br><span class="line">         //            throwable = e;</span><br><span class="line">         //            exception(request, response, e);</span><br><span class="line">         wrapper.unavailable(e);</span><br><span class="line">         long available = wrapper.getAvailable();</span><br><span class="line">         if ((available &gt; 0L) &amp;&amp; (available &lt; Long.MAX_VALUE)) &#123;</span><br><span class="line">             response.setDateHeader(&quot;Retry-After&quot;, available);</span><br><span class="line">             response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                        sm.getString(&quot;standardWrapper.isUnavailable&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125; else if (available == Long.MAX_VALUE) &#123;</span><br><span class="line">             response.sendError(HttpServletResponse.SC_NOT_FOUND,</span><br><span class="line">                         sm.getString(&quot;standardWrapper.notFound&quot;,</span><br><span class="line">                                     wrapper.getName()));</span><br><span class="line">         &#125;</span><br><span class="line">         // Do not save exception in &apos;throwable&apos;, because we</span><br><span class="line">         // do not want to do exception(request, response, e) processing</span><br><span class="line">     &#125; catch (ServletException e) &#123;</span><br><span class="line">         Throwable rootCause = StandardWrapper.getRootCause(e);</span><br><span class="line">         if (!(rootCause instanceof ClientAbortException)) &#123;</span><br><span class="line">             container.getLogger().error(sm.getString(</span><br><span class="line">                     &quot;standardWrapper.serviceExceptionRoot&quot;,</span><br><span class="line">                     wrapper.getName(), context.getName(), e.getMessage()),</span><br><span class="line">                     rootCause);</span><br><span class="line">         &#125;</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(</span><br><span class="line">                 &quot;standardWrapper.serviceException&quot;, wrapper.getName(),</span><br><span class="line">                 context.getName()), e);</span><br><span class="line">         throwable = e;</span><br><span class="line">         exception(request, response, e);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Release the filter chain (if any) for this request</span><br><span class="line">     // 清空对Servlet、Filter的引用</span><br><span class="line">     if (filterChain != null) &#123;</span><br><span class="line">         filterChain.release();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // Deallocate the allocated servlet instance</span><br><span class="line">     try &#123;</span><br><span class="line">         // servlet加入instancePool</span><br><span class="line">         if (servlet != null) &#123;</span><br><span class="line">             wrapper.deallocate(servlet);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.deallocateException&quot;,</span><br><span class="line">                          wrapper.getName()), e);</span><br><span class="line">         if (throwable == null) &#123;</span><br><span class="line">             throwable = e;</span><br><span class="line">             exception(request, response, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // If this servlet has been marked permanently unavailable,</span><br><span class="line">     // unload it and release this instance</span><br><span class="line">     try &#123;</span><br><span class="line">         if ((servlet != null) &amp;&amp;</span><br><span class="line">             (wrapper.getAvailable() == Long.MAX_VALUE)) &#123;</span><br><span class="line">             wrapper.unload();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; catch (Throwable e) &#123;</span><br><span class="line">         ExceptionUtils.handleThrowable(e);</span><br><span class="line">         container.getLogger().error(sm.getString(&quot;standardWrapper.unloadException&quot;,</span><br><span class="line">                          wrapper.getName()), e);</span><br><span class="line">         if (throwable == null) &#123;</span><br><span class="line">             throwable = e;</span><br><span class="line">             exception(request, response, e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     long t2=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">     long time=t2-t1;</span><br><span class="line">     processingTime += time;</span><br><span class="line">     if( time &gt; maxTime) maxTime=time;</span><br><span class="line">     if( time &lt; minTime) minTime=time;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="17、ApplicationFilterChain的internalDoFilter方法"><a href="#17、ApplicationFilterChain的internalDoFilter方法" class="headerlink" title="17、ApplicationFilterChain的internalDoFilter方法"></a>17、ApplicationFilterChain的internalDoFilter方法</h4><p>ApplicationFilterChain的doFilter方法，实际调用了internalDoFilter方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">private void internalDoFilter(ServletRequest request,</span><br><span class="line">                              ServletResponse response)</span><br><span class="line">    throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    // Call the next filter if there is one</span><br><span class="line">    // 依次执行filter的doFilter方法</span><br><span class="line">    if (pos &lt; n) &#123;</span><br><span class="line">        ApplicationFilterConfig filterConfig = filters[pos++];</span><br><span class="line">        try &#123;</span><br><span class="line">            Filter filter = filterConfig.getFilter();</span><br><span class="line"></span><br><span class="line">            if (request.isAsyncSupported() &amp;&amp; &quot;false&quot;.equalsIgnoreCase(</span><br><span class="line">                    filterConfig.getFilterDef().getAsyncSupported())) &#123;</span><br><span class="line">                request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);</span><br><span class="line">            &#125;</span><br><span class="line">            if( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                final ServletRequest req = request;</span><br><span class="line">                final ServletResponse res = response;</span><br><span class="line">                Principal principal =</span><br><span class="line">                    ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line"></span><br><span class="line">                Object[] args = new Object[]&#123;req, res, this&#125;;</span><br><span class="line">                SecurityUtil.doAsPrivilege (&quot;doFilter&quot;, filter, classType, args, principal);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                filter.doFilter(request, response, this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">            ExceptionUtils.handleThrowable(e);</span><br><span class="line">            throw new ServletException(sm.getString(&quot;filterChain.filter&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // We fell off the end of the chain -- call the servlet instance</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置最近处理请求</span><br><span class="line">        if (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">            lastServicedRequest.set(request);</span><br><span class="line">            lastServicedResponse.set(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (request.isAsyncSupported() &amp;&amp; !servletSupportsAsync) &#123;</span><br><span class="line">            request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,</span><br><span class="line">                    Boolean.FALSE);</span><br><span class="line">        &#125;</span><br><span class="line">        // Use potentially wrapped request from this point</span><br><span class="line">        if ((request instanceof HttpServletRequest) &amp;&amp;</span><br><span class="line">                (response instanceof HttpServletResponse) &amp;&amp;</span><br><span class="line">                Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">            final ServletRequest req = request;</span><br><span class="line">            final ServletResponse res = response;</span><br><span class="line">            Principal principal =</span><br><span class="line">                ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line">            Object[] args = new Object[]&#123;req, res&#125;;</span><br><span class="line">            //执行servlet的service方法</span><br><span class="line">            SecurityUtil.doAsPrivilege(&quot;service&quot;,</span><br><span class="line">                                       servlet,</span><br><span class="line">                                       classTypeUsedInService,</span><br><span class="line">                                       args,</span><br><span class="line">                                       principal);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //执行servlet的service方法</span><br><span class="line">            servlet.service(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">        ExceptionUtils.handleThrowable(e);</span><br><span class="line">        throw new ServletException(sm.getString(&quot;filterChain.servlet&quot;), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //清空最近处理请求</span><br><span class="line">        if (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">            lastServicedRequest.set(null);</span><br><span class="line">            lastServicedResponse.set(null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二、session创建"><a href="#二、session创建" class="headerlink" title="二、session创建"></a>二、session创建</h3><h4 id="1、Request的getSession方法"><a href="#1、Request的getSession方法" class="headerlink" title="1、Request的getSession方法"></a>1、Request的getSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public HttpSession getSession(boolean create) &#123;</span><br><span class="line">    //获取session，参数为不存在时是否创建</span><br><span class="line">    Session session = doGetSession(create);</span><br><span class="line">    if (session == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return session.getSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Request的doGetSession方法"><a href="#2、Request的doGetSession方法" class="headerlink" title="2、Request的doGetSession方法"></a>2、Request的doGetSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">protected Session doGetSession(boolean create) &#123;</span><br><span class="line"></span><br><span class="line">    // There cannot be a session if no context has been assigned yet</span><br><span class="line">    Context context = getContext();</span><br><span class="line">    if (context == null) &#123;</span><br><span class="line">        return (null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return the current session if it exists and is valid</span><br><span class="line">    //判断当前Request对象是否已经存在有效的Session，如果存在则返回此Session</span><br><span class="line">    if ((session != null) &amp;&amp; !session.isValid()) &#123;</span><br><span class="line">        session = null;</span><br><span class="line">    &#125;</span><br><span class="line">    if (session != null) &#123;</span><br><span class="line">        return (session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return the requested session if it exists and is valid</span><br><span class="line">    // 获取Session管理器，默认StandardManager</span><br><span class="line">    Manager manager = context.getManager();</span><br><span class="line">    if (manager == null) &#123;</span><br><span class="line">        return (null);      // Sessions are not supported</span><br><span class="line">    &#125;</span><br><span class="line">    // 从StandardManager的Session缓存中获取Session，如果有则返回此Session</span><br><span class="line">    if (requestedSessionId != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            session = manager.findSession(requestedSessionId);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            session = null;</span><br><span class="line">        &#125;</span><br><span class="line">        if ((session != null) &amp;&amp; !session.isValid()) &#123;</span><br><span class="line">            session = null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (session != null) &#123;</span><br><span class="line">            // 更新Session的访问时间以及访问次数</span><br><span class="line">            session.access();</span><br><span class="line">            return (session);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create a new session if requested and the response is not committed</span><br><span class="line">    // 是否创建session</span><br><span class="line">    if (!create) &#123;</span><br><span class="line">        return (null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //请求处理结束，输出流已关闭</span><br><span class="line">    if (response != null</span><br><span class="line">            &amp;&amp; context.getServletContext()</span><br><span class="line">                    .getEffectiveSessionTrackingModes()</span><br><span class="line">                    .contains(SessionTrackingMode.COOKIE)</span><br><span class="line">            &amp;&amp; response.getResponse().isCommitted()) &#123;</span><br><span class="line">        throw new IllegalStateException(</span><br><span class="line">                sm.getString(&quot;coyoteRequest.sessionCreateCommitted&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Re-use session IDs provided by the client in very limited</span><br><span class="line">    // circumstances.</span><br><span class="line">    // 获取sessionid</span><br><span class="line">    String sessionId = getRequestedSessionId();</span><br><span class="line">    if (requestedSessionSSL) &#123;</span><br><span class="line">        // If the session ID has been obtained from the SSL handshake then</span><br><span class="line">        // use it.</span><br><span class="line">    &#125; else if ((&quot;/&quot;.equals(context.getSessionCookiePath())</span><br><span class="line">            &amp;&amp; isRequestedSessionIdFromCookie())) &#123;</span><br><span class="line">        /* This is the common(ish) use case: using the same session ID with</span><br><span class="line">         * multiple web applications on the same host. Typically this is</span><br><span class="line">         * used by Portlet implementations. It only works if sessions are</span><br><span class="line">         * tracked via cookies. The cookie must have a path of &quot;/&quot; else it</span><br><span class="line">         * won&apos;t be provided for requests to all web applications.</span><br><span class="line">         *</span><br><span class="line">         * Any session ID provided by the client should be for a session</span><br><span class="line">         * that already exists somewhere on the host. Check if the context</span><br><span class="line">         * is configured for this to be confirmed.</span><br><span class="line">         */</span><br><span class="line">        if (context.getValidateClientProvidedNewSessionId()) &#123;</span><br><span class="line">            boolean found = false;</span><br><span class="line">            for (Container container : getHost().findChildren()) &#123;</span><br><span class="line">                Manager m = ((Context) container).getManager();</span><br><span class="line">                if (m != null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        if (m.findSession(sessionId) != null) &#123;</span><br><span class="line">                            found = true;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        // Ignore. Problems with this manager will be</span><br><span class="line">                        // handled elsewhere.</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!found) &#123;</span><br><span class="line">                sessionId = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        sessionId = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建Session</span><br><span class="line">    session = manager.createSession(sessionId);</span><br><span class="line"></span><br><span class="line">    // Creating a new session cookie based on that session</span><br><span class="line">    // 创建保存Session ID的Cookie</span><br><span class="line">    if (session != null</span><br><span class="line">            &amp;&amp; context.getServletContext()</span><br><span class="line">                    .getEffectiveSessionTrackingModes()</span><br><span class="line">                    .contains(SessionTrackingMode.COOKIE)) &#123;</span><br><span class="line">        Cookie cookie =</span><br><span class="line">            ApplicationSessionCookieConfig.createSessionCookie(</span><br><span class="line">                    context, session.getIdInternal(), isSecure());</span><br><span class="line">        response.addSessionCookieInternal(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (session == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //更新Session的访问时间以及访问次数</span><br><span class="line">    session.access();</span><br><span class="line">    return session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ManagerBase的createSession方法"><a href="#3、ManagerBase的createSession方法" class="headerlink" title="3、ManagerBase的createSession方法"></a>3、ManagerBase的createSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Session createSession(String sessionId) &#123;</span><br><span class="line"></span><br><span class="line">    if ((maxActiveSessions &gt;= 0) &amp;&amp;</span><br><span class="line">            (getActiveSessions() &gt;= maxActiveSessions)) &#123;</span><br><span class="line">        rejectedSessions++;</span><br><span class="line">        throw new TooManyActiveSessionsException(</span><br><span class="line">                sm.getString(&quot;managerBase.createSession.ise&quot;),</span><br><span class="line">                maxActiveSessions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Recycle or create a Session instance</span><br><span class="line">    //创建session，默认StandardSession</span><br><span class="line">    Session session = createEmptySession();</span><br><span class="line"></span><br><span class="line">    // Initialize the properties of the new session and return it</span><br><span class="line">    // 新session</span><br><span class="line">    session.setNew(true);</span><br><span class="line">    // 有效</span><br><span class="line">    session.setValid(true);</span><br><span class="line">    // 创建时间</span><br><span class="line">    session.setCreationTime(System.currentTimeMillis());</span><br><span class="line">    // 超时时间</span><br><span class="line">    session.setMaxInactiveInterval(getContext().getSessionTimeout() * 60);</span><br><span class="line">    // 创建sessionId</span><br><span class="line">    String id = sessionId;</span><br><span class="line">    if (id == null) &#123;</span><br><span class="line">        id = generateSessionId();</span><br><span class="line">    &#125;</span><br><span class="line">    session.setId(id);</span><br><span class="line">    //创建session个数</span><br><span class="line">    sessionCounter++;</span><br><span class="line"></span><br><span class="line">    SessionTiming timing = new SessionTiming(session.getCreationTime(), 0);</span><br><span class="line">    synchronized (sessionCreationTiming) &#123;</span><br><span class="line">        sessionCreationTiming.add(timing);</span><br><span class="line">        sessionCreationTiming.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    return (session);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、异步任务"><a href="#三、异步任务" class="headerlink" title="三、异步任务"></a>三、异步任务</h3><h4 id="1、AsyncContextImpl的complete方法"><a href="#1、AsyncContextImpl的complete方法" class="headerlink" title="1、AsyncContextImpl的complete方法"></a>1、AsyncContextImpl的complete方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void complete() &#123;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        logDebug(&quot;complete   &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    check();</span><br><span class="line">    //更改任务状态</span><br><span class="line">    request.getCoyoteRequest().action(ActionCode.ASYNC_COMPLETE, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DISPATCHED：普通servlet结束的状态</span><br><span class="line">STARTING：servlet开始异步时的状态</span><br><span class="line">STARTED：当前servlet已经开始异步，释放容器线程之前异步servlet并未结束的状态</span><br><span class="line">MUST_COMPLETE：释放容器线程之前，异步servlet已经结束的状态（complete函数）</span><br><span class="line">COMPLETING：异步servlet并未dispatch到其他servlet上，然后异步结束的状态</span><br><span class="line">TIMING_OUT：当前异步servlet已经超时的状态</span><br><span class="line">MUST_DISPATCH：释放容器线程之前，异步servlet dispatch到其他servlet上的状态</span><br><span class="line">DISPATCHING：异步servlet结束，dispatch到其他servlet上的状态</span><br><span class="line">ERROR：异步servlet异常的状态</span><br></pre></td></tr></table></figure></p><h4 id="2、Request的action方法"><a href="#2、Request的action方法" class="headerlink" title="2、Request的action方法"></a>2、Request的action方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void action(ActionCode actionCode, Object param) &#123;</span><br><span class="line">    if (hook != null) &#123;</span><br><span class="line">        if (param == null) &#123;</span><br><span class="line">            hook.action(actionCode, this);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            hook.action(actionCode, param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractProcessor的action方法"><a href="#3、AbstractProcessor的action方法" class="headerlink" title="3、AbstractProcessor的action方法"></a>3、AbstractProcessor的action方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void action(ActionCode actionCode, Object param) &#123;</span><br><span class="line">    switch (actionCode) &#123;</span><br><span class="line">    ...</span><br><span class="line">    case ASYNC_COMPLETE: &#123;</span><br><span class="line">        //清空dispatches</span><br><span class="line">        clearDispatches();</span><br><span class="line">        //更改请求状态</span><br><span class="line">        if (asyncStateMachine.asyncComplete()) &#123;</span><br><span class="line">            //再次调用processSocket</span><br><span class="line">            processSocketEvent(SocketEvent.OPEN_READ, true);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    case ASYNC_DISPATCH: &#123;</span><br><span class="line">        //更改请求状态</span><br><span class="line">        if (asyncStateMachine.asyncDispatch()) &#123;</span><br><span class="line">            //再次调用processSocket</span><br><span class="line">            processSocketEvent(SocketEvent.OPEN_READ, true);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    case ASYNC_DISPATCHED: &#123;</span><br><span class="line">        //更改请求状态</span><br><span class="line">        asyncStateMachine.asyncDispatched();</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、请求处理过程&quot;&gt;&lt;a href=&quot;#一、请求处理过程&quot; class=&quot;headerlink&quot; title=&quot;一、请求处理过程&quot;&gt;&lt;/a&gt;一、请求处理过程&lt;/h3&gt;&lt;h4 id=&quot;1、NioEndpoint的setSocketOptions方法&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码启动过程</title>
    <link href="http://yoursite.com/2018/07/11/tomcat%E6%BA%90%E7%A0%81/Tomcat%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/11/tomcat源码/Tomcat源码启动过程/</id>
    <published>2018-07-11T12:46:40.574Z</published>
    <updated>2018-07-11T12:42:04.125Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//整个Tomcat容器,port为接受shutdown指令的端口号</span><br><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">    //Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class="line">    //Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class="line">    //在Web应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，</span><br><span class="line">    //然后编译成class文件供JVM使用</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.JasperListener&quot; /&gt;</span><br><span class="line">    //与类加载器导致的内存泄露有关</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class="line">    //通过该监听器，初始化&lt; GlobalNamingResources&gt;标签中定义的全局JNDI资源</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class="line">    //当Web应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新</span><br><span class="line">    &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class="line">    //定义的全局JNDI资源</span><br><span class="line">    &lt;GlobalNamingResources&gt;</span><br><span class="line">        &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class="line">                 type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class="line">                 description=&quot;User database that can be updated and saved&quot;</span><br><span class="line">                 factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class="line">                 pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class="line">    &lt;/GlobalNamingResources&gt;</span><br><span class="line">    //Service的作用，是在Connector和Engine外面包了一层,Tomcat可以提供多个Service</span><br><span class="line">    &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class="line">        //连接器，客户端可以通过8080端口号使用http协议访问Tomcat</span><br><span class="line">        &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">                  connectionTimeout=&quot;20000&quot;</span><br><span class="line">                  redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">        //连接器，客户端可以通过8009端口号使用AJP协议访问Tomcat</span><br><span class="line">        &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">        //Engine是Service组件中的请求处理组件</span><br><span class="line">        &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class="line">            //Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用</span><br><span class="line">            &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class="line">            &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class="line">                  resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class="line">            &lt;/Realm&gt;</span><br><span class="line">            //每个Host组件代表Engine中的一个虚拟主机</span><br><span class="line">            &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">                  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">                //AccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求</span><br><span class="line">                &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">                      prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">                      pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">            &lt;/Host&gt;</span><br><span class="line">        &lt;/Engine&gt;</span><br><span class="line">    &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><p>配置文件详解参考<a href="https://www.cnblogs.com/kismetv/p/7228274.html#title5-2" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/7228274.html#title5-2</a> </p><h3 id="一、容器启动过程"><a href="#一、容器启动过程" class="headerlink" title="一、容器启动过程"></a>一、容器启动过程</h3><h4 id="1、Bootstrap的main方法"><a href="#1、Bootstrap的main方法" class="headerlink" title="1、Bootstrap的main方法"></a>1、Bootstrap的main方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">    //创建Bootstrap</span><br><span class="line">    if (daemon == null) &#123;</span><br><span class="line">        // Don&apos;t set daemon until init() has completed</span><br><span class="line">        Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">        try &#123;</span><br><span class="line">            //初始化bootstrap</span><br><span class="line">            bootstrap.init();</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        daemon = bootstrap;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // When running as a service the call to stop will be on a new</span><br><span class="line">        // thread so make sure the correct class loader is used to prevent</span><br><span class="line">        // a range of class not found exceptions.</span><br><span class="line">        //设置初始化tomcat环境类加载器</span><br><span class="line">        Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        String command = &quot;start&quot;;</span><br><span class="line">        if (args.length &gt; 0) &#123;</span><br><span class="line">            command = args[args.length - 1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (command.equals(&quot;startd&quot;)) &#123;</span><br><span class="line">            args[args.length - 1] = &quot;start&quot;;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125; else if (command.equals(&quot;stopd&quot;)) &#123;</span><br><span class="line">            args[args.length - 1] = &quot;stop&quot;;</span><br><span class="line">            daemon.stop();</span><br><span class="line">        &#125; else if (command.equals(&quot;start&quot;)) &#123;</span><br><span class="line">            //设置Catalina的await为true,阻塞主线程</span><br><span class="line">            daemon.setAwait(true);</span><br><span class="line">            //加载配置文件，初始化容器</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            //启动容器</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125; else if (command.equals(&quot;stop&quot;)) &#123;</span><br><span class="line">            //关闭Server</span><br><span class="line">            daemon.stopServer(args);</span><br><span class="line">        &#125; else if (command.equals(&quot;configtest&quot;)) &#123;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            if (null==daemon.getServer()) &#123;</span><br><span class="line">                System.exit(1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.exit(0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.warn(&quot;Bootstrap: command \&quot;&quot; + command + &quot;\&quot; does not exist.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        // Unwrap the Exception for clearer error reporting</span><br><span class="line">        if (t instanceof InvocationTargetException &amp;&amp;</span><br><span class="line">                t.getCause() != null) &#123;</span><br><span class="line">            t = t.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        handleThrowable(t);</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">        System.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Bootstrap的init方法"><a href="#2、Bootstrap的init方法" class="headerlink" title="2、Bootstrap的init方法"></a>2、Bootstrap的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public void init() throws Exception &#123;</span><br><span class="line">    //初始化tomcat环境类加载器</span><br><span class="line">    initClassLoaders();</span><br><span class="line">    //设置初始化tomcat环境类加载器</span><br><span class="line">    Thread.currentThread().setContextClassLoader(catalinaLoader);</span><br><span class="line">    //加载tomcat环境</span><br><span class="line">    SecurityClassLoad.securityClassLoad(catalinaLoader);</span><br><span class="line"></span><br><span class="line">    // Load our startup class and call its process() method</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Loading startup class&quot;);</span><br><span class="line">    //加载Catalina类</span><br><span class="line">    Class&lt;?&gt; startupClass = catalinaLoader.loadClass(&quot;org.apache.catalina.startup.Catalina&quot;);</span><br><span class="line">    //实例化Catalina</span><br><span class="line">    Object startupInstance = startupClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">    // Set the shared extensions class loader</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Setting startup class properties&quot;);</span><br><span class="line">    String methodName = &quot;setParentClassLoader&quot;;</span><br><span class="line">    Class&lt;?&gt; paramTypes[] = new Class[1];</span><br><span class="line">    paramTypes[0] = Class.forName(&quot;java.lang.ClassLoader&quot;);</span><br><span class="line">    Object paramValues[] = new Object[1];</span><br><span class="line">    paramValues[0] = sharedLoader;</span><br><span class="line">    Method method =</span><br><span class="line">        startupInstance.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">    //为Catalina设置类加载器</span><br><span class="line">    method.invoke(startupInstance, paramValues);</span><br><span class="line">    //初始化catalinaDaemon</span><br><span class="line">    catalinaDaemon = startupInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Bootstrap的initClassLoaders方法"><a href="#3、Bootstrap的initClassLoaders方法" class="headerlink" title="3、Bootstrap的initClassLoaders方法"></a>3、Bootstrap的initClassLoaders方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void initClassLoaders() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建tomcat环境加载器</span><br><span class="line">        commonLoader = createClassLoader(&quot;common&quot;, null);</span><br><span class="line">        if( commonLoader == null ) &#123;</span><br><span class="line">            // no config file, default to this loader - we might be in a &apos;single&apos; env.</span><br><span class="line">            commonLoader=this.getClass().getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        //未配置</span><br><span class="line">        catalinaLoader = createClassLoader(&quot;server&quot;, commonLoader);</span><br><span class="line">        //未配置</span><br><span class="line">        sharedLoader = createClassLoader(&quot;shared&quot;, commonLoader);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        handleThrowable(t);</span><br><span class="line">        log.error(&quot;Class loader creation threw exception&quot;, t);</span><br><span class="line">        System.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>catalina.properties中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">common.loader=&quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</span><br></pre></td></tr></table></figure></p><h4 id="4、接（一、1）Bootstrap的load方法"><a href="#4、接（一、1）Bootstrap的load方法" class="headerlink" title="4、接（一、1）Bootstrap的load方法"></a>4、接（一、1）Bootstrap的load方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void load(String[] arguments)</span><br><span class="line">    throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    // Call the load() method</span><br><span class="line">    String methodName = &quot;load&quot;;</span><br><span class="line">    Object param[];</span><br><span class="line">    Class&lt;?&gt; paramTypes[];</span><br><span class="line">    if (arguments==null || arguments.length==0) &#123;</span><br><span class="line">        paramTypes = null;</span><br><span class="line">        param = null;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        paramTypes = new Class[1];</span><br><span class="line">        paramTypes[0] = arguments.getClass();</span><br><span class="line">        param = new Object[1];</span><br><span class="line">        param[0] = arguments;</span><br><span class="line">    &#125;</span><br><span class="line">    Method method =</span><br><span class="line">        catalinaDaemon.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">    if (log.isDebugEnabled())</span><br><span class="line">        log.debug(&quot;Calling startup class &quot; + method);</span><br><span class="line">    //执行Catalina的load方法</span><br><span class="line">    method.invoke(catalinaDaemon, param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、Catalina的load方法"><a href="#5、Catalina的load方法" class="headerlink" title="5、Catalina的load方法"></a>5、Catalina的load方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">public void load() &#123;</span><br><span class="line">    //已load，直接退出</span><br><span class="line">    if (loaded) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    loaded = true;</span><br><span class="line"></span><br><span class="line">    long t1 = System.nanoTime();</span><br><span class="line">    //查看临时文件夹是否存在</span><br><span class="line">    initDirs();</span><br><span class="line"></span><br><span class="line">    // Before digester - it may be needed</span><br><span class="line">    //初始化命名系统</span><br><span class="line">    initNaming();</span><br><span class="line"></span><br><span class="line">    // Create and execute our Digester</span><br><span class="line">    //创建配置文件解析器</span><br><span class="line">    Digester digester = createStartDigester();</span><br><span class="line"></span><br><span class="line">    InputSource inputSource = null;</span><br><span class="line">    InputStream inputStream = null;</span><br><span class="line">    File file = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取配置文件&quot;conf/server.xml&quot;</span><br><span class="line">            file = configFile();</span><br><span class="line">            //获取输入流</span><br><span class="line">            inputStream = new FileInputStream(file);</span><br><span class="line">            inputSource = new InputSource(file.toURI().toURL().toString());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(sm.getString(&quot;catalina.configFail&quot;, file), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        try &#123;</span><br><span class="line">            //设置输入流</span><br><span class="line">            inputSource.setByteStream(inputStream);</span><br><span class="line">            digester.push(this);</span><br><span class="line">            //解析配置文件</span><br><span class="line">            digester.parse(inputSource);</span><br><span class="line">        &#125; catch (SAXParseException spe) &#123;</span><br><span class="line">            log.warn(&quot;Catalina.start using &quot; + getConfigFile() + &quot;: &quot; +</span><br><span class="line">                    spe.getMessage());</span><br><span class="line">            return;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(&quot;Catalina.start using &quot; + getConfigFile() + &quot;: &quot; , e);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (inputStream != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置Catalina</span><br><span class="line">    getServer().setCatalina(this);</span><br><span class="line">    //设置catalina.home</span><br><span class="line">    getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</span><br><span class="line">    //设置catalina.base</span><br><span class="line">    getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</span><br><span class="line"></span><br><span class="line">    // Stream redirection</span><br><span class="line">    initStreams();</span><br><span class="line"></span><br><span class="line">    // Start the new server</span><br><span class="line">    try &#123;</span><br><span class="line">        //初始化容器</span><br><span class="line">        getServer().init();</span><br><span class="line">    &#125; catch (LifecycleException e) &#123;</span><br><span class="line">        if (Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;)) &#123;</span><br><span class="line">            throw new java.lang.Error(e);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.error(&quot;Catalina.start&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long t2 = System.nanoTime();</span><br><span class="line">    if(log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Catalina的createStartDigester方法"><a href="#6、Catalina的createStartDigester方法" class="headerlink" title="6、Catalina的createStartDigester方法"></a>6、Catalina的createStartDigester方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">protected Digester createStartDigester() &#123;</span><br><span class="line">    long t1=System.currentTimeMillis();</span><br><span class="line">    // Initialize the digester</span><br><span class="line">    //创建digester</span><br><span class="line">    Digester digester = new Digester();</span><br><span class="line">    digester.setValidating(false);</span><br><span class="line">    digester.setRulesValidation(true);</span><br><span class="line">    HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = new HashMap&lt;&gt;();</span><br><span class="line">    ArrayList&lt;String&gt; attrs = new ArrayList&lt;&gt;();</span><br><span class="line">    attrs.add(&quot;className&quot;);</span><br><span class="line">    fakeAttributes.put(Object.class, attrs);</span><br><span class="line">    digester.setFakeAttributes(fakeAttributes);</span><br><span class="line">    digester.setUseContextClassLoader(true);</span><br><span class="line"></span><br><span class="line">    // Configure the actions we will be using</span><br><span class="line">    //创建Server的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.core.StandardServer&quot;,</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    //设置Server属性的规则</span><br><span class="line">    digester.addSetProperties(&quot;Server&quot;);</span><br><span class="line">    //Catalina添加Server规则</span><br><span class="line">    digester.addSetNext(&quot;Server&quot;,</span><br><span class="line">                        &quot;setServer&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Server&quot;);</span><br><span class="line">    //创建GlobalNamingResources的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server/GlobalNamingResources&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.deploy.NamingResourcesImpl&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/GlobalNamingResources&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/GlobalNamingResources&quot;,</span><br><span class="line">                        &quot;setGlobalNamingResources&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.deploy.NamingResourcesImpl&quot;);</span><br><span class="line">    //创建Server的Listener的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Listener&quot;,</span><br><span class="line">                             null, // MUST be specified in the element</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Listener&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/Listener&quot;,</span><br><span class="line">                        &quot;addLifecycleListener&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.LifecycleListener&quot;);</span><br><span class="line">    //创建Service的规则</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Service&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.core.StandardService&quot;,</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Service&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/Service&quot;,</span><br><span class="line">                        &quot;addService&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Service&quot;);</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Service/Listener&quot;,</span><br><span class="line">                             null, // MUST be specified in the element</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Service/Listener&quot;);</span><br><span class="line">    digester.addSetNext(&quot;Server/Service/Listener&quot;,</span><br><span class="line">                        &quot;addLifecycleListener&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.LifecycleListener&quot;);</span><br><span class="line"></span><br><span class="line">    //Executor</span><br><span class="line">    digester.addObjectCreate(&quot;Server/Service/Executor&quot;,</span><br><span class="line">                     &quot;org.apache.catalina.core.StandardThreadExecutor&quot;,</span><br><span class="line">                     &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(&quot;Server/Service/Executor&quot;);</span><br><span class="line"></span><br><span class="line">    digester.addSetNext(&quot;Server/Service/Executor&quot;,</span><br><span class="line">                        &quot;addExecutor&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Executor&quot;);</span><br><span class="line">    //创建Connector的规则</span><br><span class="line">    digester.addRule(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                     new ConnectorCreateRule());</span><br><span class="line">    digester.addRule(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                     new SetAllPropertiesRule(new String[]&#123;&quot;executor&quot;, &quot;sslImplementationName&quot;&#125;));</span><br><span class="line">    digester.addSetNext(&quot;Server/Service/Connector&quot;,</span><br><span class="line">                        &quot;addConnector&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.connector.Connector&quot;);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    // Add RuleSets for nested elements</span><br><span class="line">    //批量添加规则</span><br><span class="line">    digester.addRuleSet(new NamingRuleSet(&quot;Server/GlobalNamingResources/&quot;));</span><br><span class="line">    digester.addRuleSet(new EngineRuleSet(&quot;Server/Service/&quot;));</span><br><span class="line">    digester.addRuleSet(new HostRuleSet(&quot;Server/Service/Engine/&quot;));</span><br><span class="line">    digester.addRuleSet(new ContextRuleSet(&quot;Server/Service/Engine/Host/&quot;));</span><br><span class="line">    addClusterRuleSet(digester, &quot;Server/Service/Engine/Host/Cluster/&quot;);</span><br><span class="line">    digester.addRuleSet(new NamingRuleSet(&quot;Server/Service/Engine/Host/Context/&quot;));</span><br><span class="line"></span><br><span class="line">    // When the &apos;engine&apos; is found, set the parentClassLoader.</span><br><span class="line">    digester.addRule(&quot;Server/Service/Engine&quot;,</span><br><span class="line">                     new SetParentClassLoaderRule(parentClassLoader));</span><br><span class="line">    addClusterRuleSet(digester, &quot;Server/Service/Engine/Cluster/&quot;);</span><br><span class="line"></span><br><span class="line">    long t2=System.currentTimeMillis();</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(&quot;Digester for server.xml created &quot; + ( t2-t1 ));</span><br><span class="line">    &#125;</span><br><span class="line">    return (digester);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、HostRuleSet的createStartDigester方法"><a href="#7、HostRuleSet的createStartDigester方法" class="headerlink" title="7、HostRuleSet的createStartDigester方法"></a>7、HostRuleSet的createStartDigester方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void addRuleInstances(Digester digester) &#123;</span><br><span class="line">    //创建Host规则</span><br><span class="line">    digester.addObjectCreate(prefix + &quot;Host&quot;,</span><br><span class="line">                             &quot;org.apache.catalina.core.StandardHost&quot;,</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(prefix + &quot;Host&quot;);</span><br><span class="line">    digester.addRule(prefix + &quot;Host&quot;,</span><br><span class="line">                     new CopyParentClassLoaderRule());</span><br><span class="line">    //创建HostConfig监听器，添加到Host中</span><br><span class="line">    digester.addRule(prefix + &quot;Host&quot;,</span><br><span class="line">                     new LifecycleListenerRule</span><br><span class="line">                     (&quot;org.apache.catalina.startup.HostConfig&quot;,</span><br><span class="line">                      &quot;hostConfigClass&quot;));</span><br><span class="line">    //Engine中添加Host子容器</span><br><span class="line">    digester.addSetNext(prefix + &quot;Host&quot;,</span><br><span class="line">                        &quot;addChild&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Container&quot;);</span><br><span class="line">    ... </span><br><span class="line">    //创建AccessLogValve规则</span><br><span class="line">    digester.addObjectCreate(prefix + &quot;Host/Valve&quot;,</span><br><span class="line">                             null, // MUST be specified in the element</span><br><span class="line">                             &quot;className&quot;);</span><br><span class="line">    digester.addSetProperties(prefix + &quot;Host/Valve&quot;);</span><br><span class="line">    digester.addSetNext(prefix + &quot;Host/Valve&quot;,</span><br><span class="line">                        &quot;addValve&quot;,</span><br><span class="line">                        &quot;org.apache.catalina.Valve&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、5）LifecycleBase的init方法"><a href="#8、接（一、5）LifecycleBase的init方法" class="headerlink" title="8、接（一、5）LifecycleBase的init方法"></a>8、接（一、5）LifecycleBase的init方法</h4><p>StandardServer的父类，实现生命周期管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void init() throws LifecycleException &#123;</span><br><span class="line">    //state默认为LifecycleState.NEW</span><br><span class="line">    if (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        //状态有误，抛出异常</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //设置state为正在初始化，并广播事件</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZING, null, false);</span><br><span class="line">        //初始化</span><br><span class="line">        initInternal();</span><br><span class="line">        //设置state为初始化完成，并广播事件</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZED, null, false);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;lifecycleBase.initFail&quot;,toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="9、StandardServer的initInternal方法"><a href="#9、StandardServer的initInternal方法" class="headerlink" title="9、StandardServer的initInternal方法"></a>9、StandardServer的initInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    //注册到MBeanServer中</span><br><span class="line">    super.initInternal();</span><br><span class="line"></span><br><span class="line">    // Register global String cache</span><br><span class="line">    // Note although the cache is global, if there are multiple Servers</span><br><span class="line">    // present in the JVM (may happen when embedding) then the same cache</span><br><span class="line">    // will be registered under multiple names</span><br><span class="line">    onameStringCache = register(new StringCache(), &quot;type=StringCache&quot;);</span><br><span class="line"></span><br><span class="line">    // Register the MBeanFactory</span><br><span class="line">    MBeanFactory factory = new MBeanFactory();</span><br><span class="line">    factory.setContainer(this);</span><br><span class="line">    onameMBeanFactory = register(factory, &quot;type=MBeanFactory&quot;);</span><br><span class="line"></span><br><span class="line">    // Register the naming resources</span><br><span class="line">    //初始化globalNamingResources，主要是相关资源注册到MBeanServer中</span><br><span class="line">    globalNamingResources.init();</span><br><span class="line"></span><br><span class="line">    // Populate the extension validator with JARs from common and shared</span><br><span class="line">    // class loaders</span><br><span class="line">    //获取jar包的Manifest文件</span><br><span class="line">    if (getCatalina() != null) &#123;</span><br><span class="line">        ClassLoader cl = getCatalina().getParentClassLoader();</span><br><span class="line">        // Walk the class loader hierarchy. Stop at the system class loader.</span><br><span class="line">        // This will add the shared (if present) and common class loaders</span><br><span class="line">        while (cl != null &amp;&amp; cl != ClassLoader.getSystemClassLoader()) &#123;</span><br><span class="line">            if (cl instanceof URLClassLoader) &#123;</span><br><span class="line">                URL[] urls = ((URLClassLoader) cl).getURLs();</span><br><span class="line">                for (URL url : urls) &#123;</span><br><span class="line">                    if (url.getProtocol().equals(&quot;file&quot;)) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            File f = new File (url.toURI());</span><br><span class="line">                            if (f.isFile() &amp;&amp;</span><br><span class="line">                                    f.getName().endsWith(&quot;.jar&quot;)) &#123;</span><br><span class="line">                                ExtensionValidator.addSystemResource(f);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; catch (URISyntaxException e) &#123;</span><br><span class="line">                            // Ignore</span><br><span class="line">                        &#125; catch (IOException e) &#123;</span><br><span class="line">                            // Ignore</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cl = cl.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Initialize our defined Services</span><br><span class="line">    for (int i = 0; i &lt; services.length; i++) &#123;</span><br><span class="line">        //初始化service</span><br><span class="line">        services[i].init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、StandardService的initInternal方法"><a href="#10、StandardService的initInternal方法" class="headerlink" title="10、StandardService的initInternal方法"></a>10、StandardService的initInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    //注册到MBeanServer中</span><br><span class="line">    super.initInternal();</span><br><span class="line">    //初始化engine</span><br><span class="line">    if (engine != null) &#123;</span><br><span class="line">        engine.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize any Executors</span><br><span class="line">    //初始化executor，未配置</span><br><span class="line">    for (Executor executor : findExecutors()) &#123;</span><br><span class="line">        if (executor instanceof JmxEnabled) &#123;</span><br><span class="line">            ((JmxEnabled) executor).setDomain(getDomain());</span><br><span class="line">        &#125;</span><br><span class="line">        executor.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize mapper listener</span><br><span class="line">    //初始化mapperListener，注册到MBeanServer中</span><br><span class="line">    mapperListener.init();</span><br><span class="line"></span><br><span class="line">    // Initialize our defined Connectors</span><br><span class="line">    //初始化连接器</span><br><span class="line">    synchronized (connectorsLock) &#123;</span><br><span class="line">        for (Connector connector : connectors) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connector.init();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                String message = sm.getString(</span><br><span class="line">                        &quot;standardService.connector.initFailed&quot;, connector);</span><br><span class="line">                log.error(message, e);</span><br><span class="line"></span><br><span class="line">                if (Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;))</span><br><span class="line">                    throw new LifecycleException(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、StandardEngine的initInternal方法"><a href="#11、StandardEngine的initInternal方法" class="headerlink" title="11、StandardEngine的initInternal方法"></a>11、StandardEngine的initInternal方法</h4><p>实例化StandardEngine<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public StandardEngine() &#123;</span><br><span class="line">    super();</span><br><span class="line">    //处理request的管道，往valve队列中添加StandardEngineValve</span><br><span class="line">    pipeline.setBasic(new StandardEngineValve());</span><br><span class="line">    /* Set the jmvRoute using the system property jvmRoute */</span><br><span class="line">    try &#123;</span><br><span class="line">        //在负载匀衡中使用的标识符，必须唯一</span><br><span class="line">        setJvmRoute(System.getProperty(&quot;jvmRoute&quot;));</span><br><span class="line">    &#125; catch(Exception ex) &#123;</span><br><span class="line">        log.warn(sm.getString(&quot;standardEngine.jvmRouteFail&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    // By default, the engine will hold the reloading thread</span><br><span class="line">    //后台线程执行间隔</span><br><span class="line">    backgroundProcessorDelay = 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>初始化方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    // Ensure that a Realm is present before any attempt is made to start</span><br><span class="line">    // one. This will create the default NullRealm if necessary.</span><br><span class="line">    getRealm();</span><br><span class="line">    super.initInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="12、ContainerBase的initInternal方法"><a href="#12、ContainerBase的initInternal方法" class="headerlink" title="12、ContainerBase的initInternal方法"></a>12、ContainerBase的initInternal方法</h4><p>StandardEngine的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">    //任务队列</span><br><span class="line">    BlockingQueue&lt;Runnable&gt; startStopQueue = new LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">    //启停线程池</span><br><span class="line">    startStopExecutor = new ThreadPoolExecutor(</span><br><span class="line">            getStartStopThreadsInternal(),</span><br><span class="line">            getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,</span><br><span class="line">            startStopQueue,</span><br><span class="line">            new StartStopThreadFactory(getName() + &quot;-startStop-&quot;));</span><br><span class="line">    //核心线程会超时关闭</span><br><span class="line">    startStopExecutor.allowCoreThreadTimeOut(true);</span><br><span class="line">    super.initInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="13、接（一、1）Bootstrap的start方法"><a href="#13、接（一、1）Bootstrap的start方法" class="headerlink" title="13、接（一、1）Bootstrap的start方法"></a>13、接（一、1）Bootstrap的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void start()</span><br><span class="line">    throws Exception &#123;</span><br><span class="line">    if( catalinaDaemon==null ) init();</span><br><span class="line">    Method method = catalinaDaemon.getClass().getMethod(&quot;start&quot;, (Class [] )null);</span><br><span class="line">    //执行catalina的start方法</span><br><span class="line">    method.invoke(catalinaDaemon, (Object [])null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、Catalina的start方法"><a href="#14、Catalina的start方法" class="headerlink" title="14、Catalina的start方法"></a>14、Catalina的start方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line">    //Server不存在，则初始化</span><br><span class="line">    if (getServer() == null) &#123;</span><br><span class="line">        load();</span><br><span class="line">    &#125;</span><br><span class="line">    //Server不存在，退出</span><br><span class="line">    if (getServer() == null) &#123;</span><br><span class="line">        log.fatal(&quot;Cannot start server. Server instance is not configured.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">    // Start the new server</span><br><span class="line">    try &#123;</span><br><span class="line">        //启动Server</span><br><span class="line">        getServer().start();</span><br><span class="line">    &#125; catch (LifecycleException e) &#123;</span><br><span class="line">        log.fatal(sm.getString(&quot;catalina.serverStartFail&quot;), e);</span><br><span class="line">        try &#123;</span><br><span class="line">            //销毁Server</span><br><span class="line">            getServer().destroy();</span><br><span class="line">        &#125; catch (LifecycleException e1) &#123;</span><br><span class="line">            log.debug(&quot;destroy() failed for failed Server &quot;, e1);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long t2 = System.nanoTime();</span><br><span class="line">    if(log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(&quot;Server startup in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Register shutdown hook</span><br><span class="line">    if (useShutdownHook) &#123;</span><br><span class="line">        if (shutdownHook == null) &#123;</span><br><span class="line">            //钩子函数，执行Catalina的stop方法</span><br><span class="line">            shutdownHook = new CatalinaShutdownHook();</span><br><span class="line">        &#125;</span><br><span class="line">        //添加钩子函数，jvm关闭时执行</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(shutdownHook);</span><br><span class="line"></span><br><span class="line">        // If JULI is being used, disable JULI&apos;s shutdown hook since</span><br><span class="line">        // shutdown hooks run in parallel and log messages may be lost</span><br><span class="line">        // if JULI&apos;s hook completes before the CatalinaShutdownHook()</span><br><span class="line">        LogManager logManager = LogManager.getLogManager();</span><br><span class="line">        if (logManager instanceof ClassLoaderLogManager) &#123;</span><br><span class="line">            ((ClassLoaderLogManager) logManager).setUseShutdownHook(</span><br><span class="line">                    false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //是否阻塞主线程</span><br><span class="line">    if (await) &#123;</span><br><span class="line">        //阻塞本线程，创建ServerSocket监听8005端口，等待shutdown命令</span><br><span class="line">        await();</span><br><span class="line">        //停止Server</span><br><span class="line">        stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、LifecycleBase的start方法"><a href="#15、LifecycleBase的start方法" class="headerlink" title="15、LifecycleBase的start方法"></a>15、LifecycleBase的start方法</h4><p>StandardServer的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void start() throws LifecycleException &#123;</span><br><span class="line">    //已启动</span><br><span class="line">    if (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) ||</span><br><span class="line">            LifecycleState.STARTED.equals(state)) &#123;</span><br><span class="line"></span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            Exception e = new LifecycleException();</span><br><span class="line">            log.debug(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;, toString()), e);</span><br><span class="line">        &#125; else if (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;, toString()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //尚未初始化</span><br><span class="line">    if (state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        init();</span><br><span class="line">    //失败</span><br><span class="line">    &#125; else if (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">        stop();</span><br><span class="line">    //状态不对，抛出异常</span><br><span class="line">    &#125; else if (!state.equals(LifecycleState.INITIALIZED) &amp;&amp;</span><br><span class="line">            !state.equals(LifecycleState.STOPPED)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_START_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //设置状态为准备启动，并广播事件</span><br><span class="line">        setStateInternal(LifecycleState.STARTING_PREP, null, false);</span><br><span class="line">        //启动server</span><br><span class="line">        startInternal();</span><br><span class="line">        //启动失败</span><br><span class="line">        if (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">            // This is a &apos;controlled&apos; failure. The component put itself into the</span><br><span class="line">            // FAILED state so call stop() to complete the clean-up.</span><br><span class="line">            //停止</span><br><span class="line">            stop();</span><br><span class="line">        &#125; else if (!state.equals(LifecycleState.STARTING)) &#123;</span><br><span class="line">            // Shouldn&apos;t be necessary but acts as a check that sub-classes are</span><br><span class="line">            // doing what they are supposed to.</span><br><span class="line">            //抛出异常</span><br><span class="line">            invalidTransition(Lifecycle.AFTER_START_EVENT);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //设置状态已启动，并广播事件</span><br><span class="line">            setStateInternal(LifecycleState.STARTED, null, false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        // This is an &apos;uncontrolled&apos; failure so put the component into the</span><br><span class="line">        // FAILED state and throw an exception.</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(sm.getString(&quot;lifecycleBase.startFail&quot;, toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="16、StandardServer的startInternal方法"><a href="#16、StandardServer的startInternal方法" class="headerlink" title="16、StandardServer的startInternal方法"></a>16、StandardServer的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void startInternal() throws LifecycleException &#123;</span><br><span class="line">    //广播configure_start事件</span><br><span class="line">    fireLifecycleEvent(CONFIGURE_START_EVENT, null);</span><br><span class="line">    //设置状态为正在启动</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line">    //广播configure_start事件</span><br><span class="line">    globalNamingResources.start();</span><br><span class="line"></span><br><span class="line">    // Start our defined Services</span><br><span class="line">    synchronized (servicesLock) &#123;</span><br><span class="line">        for (int i = 0; i &lt; services.length; i++) &#123;</span><br><span class="line">            //启动service</span><br><span class="line">            services[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、StandardService的startInternal方法"><a href="#17、StandardService的startInternal方法" class="headerlink" title="17、StandardService的startInternal方法"></a>17、StandardService的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    if(log.isInfoEnabled())</span><br><span class="line">        log.info(sm.getString(&quot;standardService.start.name&quot;, this.name));</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    // Start our defined Container first</span><br><span class="line">    //启动engine</span><br><span class="line">    if (engine != null) &#123;</span><br><span class="line">        synchronized (engine) &#123;</span><br><span class="line">            engine.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动executor</span><br><span class="line">    synchronized (executors) &#123;</span><br><span class="line">        for (Executor executor: executors) &#123;</span><br><span class="line">            executor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动mapperListener</span><br><span class="line">    mapperListener.start();</span><br><span class="line"></span><br><span class="line">    // Start our defined Connectors second</span><br><span class="line">    //启动连接器</span><br><span class="line">    synchronized (connectorsLock) &#123;</span><br><span class="line">        for (Connector connector: connectors) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // If it has already failed, don&apos;t try and start it</span><br><span class="line">                if (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                    connector.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        &quot;standardService.connector.startFailed&quot;,</span><br><span class="line">                        connector), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、StandardEngine的startInternal方法"><a href="#18、StandardEngine的startInternal方法" class="headerlink" title="18、StandardEngine的startInternal方法"></a>18、StandardEngine的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Log our server identification information</span><br><span class="line">    if(log.isInfoEnabled())</span><br><span class="line">        log.info( &quot;Starting Servlet Engine: &quot; + ServerInfo.getServerInfo());</span><br><span class="line"></span><br><span class="line">    // Standard container startup</span><br><span class="line">    //启动容器</span><br><span class="line">    super.startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、ContainerBase的startInternal方法"><a href="#19、ContainerBase的startInternal方法" class="headerlink" title="19、ContainerBase的startInternal方法"></a>19、ContainerBase的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Start our subordinate components, if any</span><br><span class="line">    logger = null;</span><br><span class="line">    getLogger();</span><br><span class="line">    //启动tomcat集群相关组件</span><br><span class="line">    Cluster cluster = getClusterInternal();</span><br><span class="line">    if (cluster instanceof Lifecycle) &#123;</span><br><span class="line">        ((Lifecycle) cluster).start();</span><br><span class="line">    &#125;</span><br><span class="line">    //启动安全域</span><br><span class="line">    Realm realm = getRealmInternal();</span><br><span class="line">    if (realm instanceof Lifecycle) &#123;</span><br><span class="line">        ((Lifecycle) realm).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start our child containers, if any</span><br><span class="line">    //启动子容器</span><br><span class="line">    Container children[] = findChildren();</span><br><span class="line">    List&lt;Future&lt;Void&gt;&gt; results = new ArrayList&lt;&gt;();</span><br><span class="line">    for (int i = 0; i &lt; children.length; i++) &#123;</span><br><span class="line">        results.add(startStopExecutor.submit(new StartChild(children[i])));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean fail = false;</span><br><span class="line">    for (Future&lt;Void&gt; result : results) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            result.get();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(&quot;containerBase.threadedStartFailed&quot;), e);</span><br><span class="line">            fail = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    if (fail) &#123;</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;containerBase.threadedStartFailed&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start the Valves in our pipeline (including the basic), if any</span><br><span class="line">    //启动管道</span><br><span class="line">    if (pipeline instanceof Lifecycle)</span><br><span class="line">        ((Lifecycle) pipeline).start();</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    // Start our thread</span><br><span class="line">    //启动后台线程，ContainerBackgroundProcessor</span><br><span class="line">    threadStart();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、StandardHost的startInternal方法"><a href="#20、StandardHost的startInternal方法" class="headerlink" title="20、StandardHost的startInternal方法"></a>20、StandardHost的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Set error report valve</span><br><span class="line">    //往pipeline的value队列中添加ErrorReportValve对象</span><br><span class="line">    String errorValve = getErrorReportValveClass();</span><br><span class="line">    if ((errorValve != null) &amp;&amp; (!errorValve.equals(&quot;&quot;))) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            boolean found = false;</span><br><span class="line">            Valve[] valves = getPipeline().getValves();</span><br><span class="line">            for (Valve valve : valves) &#123;</span><br><span class="line">                if (errorValve.equals(valve.getClass().getName())) &#123;</span><br><span class="line">                    found = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(!found) &#123;</span><br><span class="line">                Valve valve =</span><br><span class="line">                    (Valve) Class.forName(errorValve).getConstructor().newInstance();</span><br><span class="line">                getPipeline().addValve(valve);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    &quot;standardHost.invalidErrorReportValveClass&quot;,</span><br><span class="line">                    errorValve), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //执行父类ContainerBase的startInternal方法</span><br><span class="line">    super.startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、接（一、17）MapperListener的startInternal方法"><a href="#21、接（一、17）MapperListener的startInternal方法" class="headerlink" title="21、接（一、17）MapperListener的startInternal方法"></a>21、接（一、17）MapperListener的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    Engine engine = service.getContainer();</span><br><span class="line">    if (engine == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //查找配置的&quot;defaultHost&quot;</span><br><span class="line">    findDefaultHost();</span><br><span class="line">    //往container及其子容器中添加该监听器</span><br><span class="line">    addListeners(engine);</span><br><span class="line"></span><br><span class="line">    Container[] conHosts = engine.findChildren();</span><br><span class="line">    for (Container conHost : conHosts) &#123;</span><br><span class="line">        Host host = (Host) conHost;</span><br><span class="line">        if (!LifecycleState.NEW.equals(host.getState())) &#123;</span><br><span class="line">            // Registering the host will register the context and wrappers</span><br><span class="line">            //注册主机，及其子容器，容器按name排序存放在Mapper中</span><br><span class="line">            registerHost(host);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、启动连接器"><a href="#二、启动连接器" class="headerlink" title="二、启动连接器"></a>二、启动连接器</h3><h4 id="1、实例化Connector"><a href="#1、实例化Connector" class="headerlink" title="1、实例化Connector"></a>1、实例化Connector</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Connector() &#123;</span><br><span class="line">    this(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Connector(String protocol) &#123;</span><br><span class="line">    //设置协议</span><br><span class="line">    setProtocol(protocol);</span><br><span class="line">    // Instantiate protocol handler</span><br><span class="line">    ProtocolHandler p = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //实例化协议处理器,默认Http11NioProtocol</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class="line">        p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(sm.getString(</span><br><span class="line">                &quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //设置协议处理器</span><br><span class="line">        this.protocolHandler = p;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置编码格式</span><br><span class="line">    if (Globals.STRICT_SERVLET_COMPLIANCE) &#123;</span><br><span class="line">        uriCharset = StandardCharsets.ISO_8859_1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        uriCharset = StandardCharsets.UTF_8;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、接（一、10）Connector的initInternal方法"><a href="#2、接（一、10）Connector的initInternal方法" class="headerlink" title="2、接（一、10）Connector的initInternal方法"></a>2、接（一、10）Connector的initInternal方法</h4><p>初始化连接器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    super.initInternal();</span><br><span class="line"></span><br><span class="line">    // Initialize adapter</span><br><span class="line">    //连接器与容器的适配器</span><br><span class="line">    adapter = new CoyoteAdapter(this);</span><br><span class="line">    //设置适配器</span><br><span class="line">    protocolHandler.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">    // Make sure parseBodyMethodsSet has a default</span><br><span class="line">    if (null == parseBodyMethodsSet) &#123;</span><br><span class="line">        setParseBodyMethods(getParseBodyMethods());</span><br><span class="line">    &#125;</span><br><span class="line">    //设置apr环境</span><br><span class="line">    if (protocolHandler.isAprRequired() &amp;&amp; !AprLifecycleListener.isAprAvailable()) &#123;</span><br><span class="line">        throw new LifecycleException(sm.getString(&quot;coyoteConnector.protocolHandlerNoApr&quot;,</span><br><span class="line">                getProtocolHandlerClassName()));</span><br><span class="line">    &#125;</span><br><span class="line">    if (AprLifecycleListener.isAprAvailable() &amp;&amp; AprLifecycleListener.getUseOpenSSL() &amp;&amp;</span><br><span class="line">            protocolHandler instanceof AbstractHttp11JsseProtocol) &#123;</span><br><span class="line">        AbstractHttp11JsseProtocol&lt;?&gt; jsseProtocolHandler =</span><br><span class="line">                (AbstractHttp11JsseProtocol&lt;?&gt;) protocolHandler;</span><br><span class="line">        if (jsseProtocolHandler.isSSLEnabled() &amp;&amp;</span><br><span class="line">                jsseProtocolHandler.getSslImplementationName() == null) &#123;</span><br><span class="line">            // OpenSSL is compatible with the JSSE configuration, so use it if APR is available</span><br><span class="line">            jsseProtocolHandler.setSslImplementationName(OpenSSLImplementation.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //初始化协议</span><br><span class="line">        protocolHandler.init();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、接（一、17）Connector的startInternal方法"><a href="#3、接（一、17）Connector的startInternal方法" class="headerlink" title="3、接（一、17）Connector的startInternal方法"></a>3、接（一、17）Connector的startInternal方法</h4><p>启动连接器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">    // Validate settings before starting</span><br><span class="line">    if (getPort() &lt; 0) &#123;</span><br><span class="line">        throw new LifecycleException(sm.getString(</span><br><span class="line">                &quot;coyoteConnector.invalidPort&quot;, Integer.valueOf(getPort())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //启动协议</span><br><span class="line">        protocolHandler.start();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;coyoteConnector.protocolHandlerStartFailed&quot;), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、接（二、1）实例化Http11NioProtocol"><a href="#4、接（二、1）实例化Http11NioProtocol" class="headerlink" title="4、接（二、1）实例化Http11NioProtocol"></a>4、接（二、1）实例化Http11NioProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Http11NioProtocol() &#123;</span><br><span class="line">    super(new NioEndpoint());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Http11NioProtocol的父类AbstractHttp11Protocol<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public AbstractHttp11Protocol(AbstractEndpoint&lt;S&gt; endpoint) &#123;</span><br><span class="line">    super(endpoint);</span><br><span class="line">    setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">    ConnectionHandler&lt;S&gt; cHandler = new ConnectionHandler&lt;&gt;(this);</span><br><span class="line">    setHandler(cHandler);</span><br><span class="line">    getEndpoint().setHandler(cHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、接（二、3）AbstractProtocol的start方法"><a href="#5、接（二、3）AbstractProtocol的start方法" class="headerlink" title="5、接（二、3）AbstractProtocol的start方法"></a>5、接（二、3）AbstractProtocol<s>的start方法</s></h4><p>Http11NioProtocol的父类，启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void start() throws Exception &#123;</span><br><span class="line">    if (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(&quot;abstractProtocolHandler.start&quot;, getName()));</span><br><span class="line">    &#125;</span><br><span class="line">    //启动NioEndpoint</span><br><span class="line">    endpoint.start();</span><br><span class="line"></span><br><span class="line">    // Start async timeout thread</span><br><span class="line">    //异步任务超时处理线程</span><br><span class="line">    asyncTimeout = new AsyncTimeout();</span><br><span class="line">    Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + &quot;-AsyncTimeout&quot;);</span><br><span class="line">    int priority = endpoint.getThreadPriority();</span><br><span class="line">    if (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class="line">        priority = Thread.NORM_PRIORITY;</span><br><span class="line">    &#125;</span><br><span class="line">    timeoutThread.setPriority(priority);</span><br><span class="line">    timeoutThread.setDaemon(true);</span><br><span class="line">    timeoutThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、AbstractEndpoint的start方法"><a href="#6、AbstractEndpoint的start方法" class="headerlink" title="6、AbstractEndpoint的start方法"></a>6、AbstractEndpoint<s>的start方法</s></h4><p>NioEndpoint的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public final void start() throws Exception &#123;</span><br><span class="line">    if (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">        //绑定端口</span><br><span class="line">        bind();</span><br><span class="line">        bindState = BindState.BOUND_ON_START;</span><br><span class="line">    &#125;</span><br><span class="line">    //启动NioEndpoint</span><br><span class="line">    startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7、NioEndpoint的bind方法"><a href="#7、NioEndpoint的bind方法" class="headerlink" title="7、NioEndpoint的bind方法"></a>7、NioEndpoint的bind方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void bind() throws Exception &#123;</span><br><span class="line">    //创建服务端通道ServerSocketChannel</span><br><span class="line">    serverSock = ServerSocketChannel.open();</span><br><span class="line">    //设置属性</span><br><span class="line">    socketProperties.setProperties(serverSock.socket());</span><br><span class="line">    //获取监听地址</span><br><span class="line">    InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));</span><br><span class="line">    //绑定监听地址，默认最大堆积连接100</span><br><span class="line">    serverSock.socket().bind(addr,getAcceptCount());</span><br><span class="line">    //设置模式为阻塞</span><br><span class="line">    serverSock.configureBlocking(true); //mimic APR behavior</span><br><span class="line"></span><br><span class="line">    // Initialize thread count defaults for acceptor, poller</span><br><span class="line">    // acceptor线程数量，默认1个</span><br><span class="line">    if (acceptorThreadCount == 0) &#123;</span><br><span class="line">        // FIXME: Doesn&apos;t seem to work that well with multiple accept threads</span><br><span class="line">        acceptorThreadCount = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //Poller线程数量，默认处理器数量的一半</span><br><span class="line">    if (pollerThreadCount &lt;= 0) &#123;</span><br><span class="line">        //minimum one poller thread</span><br><span class="line">        pollerThreadCount = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //关闭等待poller关闭</span><br><span class="line">    setStopLatch(new CountDownLatch(pollerThreadCount));</span><br><span class="line"></span><br><span class="line">    // Initialize SSL if needed</span><br><span class="line">    //初始化SSLHostConfig</span><br><span class="line">    initialiseSsl();</span><br><span class="line">    //创建共享的Selector</span><br><span class="line">    selectorPool.open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（二、6）NioEndpoint的startInternal方法"><a href="#8、接（二、6）NioEndpoint的startInternal方法" class="headerlink" title="8、接（二、6）NioEndpoint的startInternal方法"></a>8、接（二、6）NioEndpoint的startInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void startInternal() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    if (!running) &#123;</span><br><span class="line">        //运行状态</span><br><span class="line">        running = true;</span><br><span class="line">        //挂起状态</span><br><span class="line">        paused = false;</span><br><span class="line">        //处理器缓存</span><br><span class="line">        processorCache = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                socketProperties.getProcessorCache());</span><br><span class="line">        //任务缓存</span><br><span class="line">        eventCache = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                        socketProperties.getEventCache());</span><br><span class="line">        //NioChannel缓存</span><br><span class="line">        nioChannels = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                socketProperties.getBufferPool());</span><br><span class="line"></span><br><span class="line">        // Create worker collection</span><br><span class="line">        //创建工作线程，默认最多200个工作线程</span><br><span class="line">        if ( getExecutor() == null ) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line">        //初始化连接限制，默认最多1000个连接</span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        // Start poller threads</span><br><span class="line">        //启动poller线程</span><br><span class="line">        pollers = new Poller[getPollerThreadCount()];</span><br><span class="line">        for (int i=0; i&lt;pollers.length; i++) &#123;</span><br><span class="line">            pollers[i] = new Poller();</span><br><span class="line">            Thread pollerThread = new Thread(pollers[i], getName() + &quot;-ClientPoller-&quot;+i);</span><br><span class="line">            pollerThread.setPriority(threadPriority);</span><br><span class="line">            pollerThread.setDaemon(true);</span><br><span class="line">            pollerThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        //启动Acceptor线程</span><br><span class="line">        startAcceptorThreads();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、Acceptor的run方法"><a href="#9、Acceptor的run方法" class="headerlink" title="9、Acceptor的run方法"></a>9、Acceptor的run方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line"></span><br><span class="line">    int errorDelay = 0;</span><br><span class="line"></span><br><span class="line">    // Loop until we receive a shutdown command</span><br><span class="line">    while (running) &#123;</span><br><span class="line"></span><br><span class="line">        // Loop if endpoint is paused</span><br><span class="line">        while (paused &amp;&amp; running) &#123;</span><br><span class="line">            state = AcceptorState.PAUSED;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(50);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!running) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        state = AcceptorState.RUNNING;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //if we have reached max connections, wait</span><br><span class="line">            //连接数加一</span><br><span class="line">            countUpOrAwaitConnection();</span><br><span class="line"></span><br><span class="line">            SocketChannel socket = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                // Accept the next incoming connection from the server</span><br><span class="line">                // socket</span><br><span class="line">                //等待客户端连接</span><br><span class="line">                socket = serverSock.accept();</span><br><span class="line">            &#125; catch (IOException ioe) &#123;</span><br><span class="line">                // We didn&apos;t get a socket</span><br><span class="line">                countDownConnection();</span><br><span class="line">                if (running) &#123;</span><br><span class="line">                    // Introduce delay if necessary</span><br><span class="line">                    errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">                    // re-throw</span><br><span class="line">                    throw ioe;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // Successful accept, reset the error delay</span><br><span class="line">            errorDelay = 0;</span><br><span class="line"></span><br><span class="line">            // Configure the socket</span><br><span class="line">            if (running &amp;&amp; !paused) &#123;</span><br><span class="line">                // setSocketOptions() will hand the socket off to</span><br><span class="line">                // an appropriate processor if successful</span><br><span class="line">                //处理请求，失败则关闭socket</span><br><span class="line">                if (!setSocketOptions(socket)) &#123;</span><br><span class="line">                    closeSocket(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                closeSocket(socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            log.error(sm.getString(&quot;endpoint.accept.fail&quot;), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    state = AcceptorState.ENDED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码整合MyBatis</title>
    <link href="http://yoursite.com/2018/06/27/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81%E6%95%B4%E5%90%88MyBatis/"/>
    <id>http://yoursite.com/2018/06/27/spring源码/spring源码整合MyBatis/</id>
    <published>2018-06-27T13:10:29.035Z</published>
    <updated>2018-07-07T15:10:18.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans  </span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;!-- 1.配置数据源：DriverManagerDataSource --&gt;  </span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;oracle.jdbc.OracleDriver&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;scott&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;tiger&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/**/sql/*.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;mapperscanner&quot; class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.**.mapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、创建SqlSessionFactory"><a href="#一、创建SqlSessionFactory" class="headerlink" title="一、创建SqlSessionFactory"></a>一、创建SqlSessionFactory</h3><h4 id="1、SqlSessionFactoryBean的afterPropertiesSet方法"><a href="#1、SqlSessionFactoryBean的afterPropertiesSet方法" class="headerlink" title="1、SqlSessionFactoryBean的afterPropertiesSet方法"></a>1、SqlSessionFactoryBean的afterPropertiesSet方法</h4><p>SqlSessionFactoryBean实现了InitializingBean接口，创建完bean执行自定义初始化方法afterPropertiesSet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    notNull(dataSource, &quot;Property &apos;dataSource&apos; is required&quot;);</span><br><span class="line">    notNull(sqlSessionFactoryBuilder, &quot;Property &apos;sqlSessionFactoryBuilder&apos; is required&quot;);</span><br><span class="line">    //创建sqlSessionFactory</span><br><span class="line">    this.sqlSessionFactory = buildSqlSessionFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、SqlSessionFactoryBean的buildSqlSessionFactory方法"><a href="#2、SqlSessionFactoryBean的buildSqlSessionFactory方法" class="headerlink" title="2、SqlSessionFactoryBean的buildSqlSessionFactory方法"></a>2、SqlSessionFactoryBean的buildSqlSessionFactory方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">protected SqlSessionFactory buildSqlSessionFactory() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    Configuration configuration;</span><br><span class="line"></span><br><span class="line">    XMLConfigBuilder xmlConfigBuilder = null;</span><br><span class="line">    if (this.configLocation != null) &#123;</span><br><span class="line">        //如果spring配置中configLocation属性不为空，则加载指定的Mybatis配置</span><br><span class="line">        xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, </span><br><span class="line">              this.configurationProperties);</span><br><span class="line">        configuration = xmlConfigBuilder.getConfiguration();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Property &apos;configLocation&apos; not specified, using default MyBatis Configuration&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //否则则采用默认的Mybatis配置</span><br><span class="line">        configuration = new Configuration();</span><br><span class="line">        configuration.setVariables(this.configurationProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.objectFactory != null) &#123;</span><br><span class="line">        configuration.setObjectFactory(this.objectFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.objectWrapperFactory != null) &#123;</span><br><span class="line">        configuration.setObjectWrapperFactory(this.objectWrapperFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    //对包下的类注册别民</span><br><span class="line">    if (hasLength(this.typeAliasesPackage)) &#123;</span><br><span class="line">        String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,</span><br><span class="line">                ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        for (String packageToScan : typeAliasPackageArray) &#123;</span><br><span class="line">            //对应方法的目的是通过扫描包得到其包以及子包目录下的typeAliasesSuperType的子类Class</span><br><span class="line">            //然后为每个class注册别名,别名为类名</span><br><span class="line">            configuration.getTypeAliasRegistry().registerAliases(packageToScan,</span><br><span class="line">                typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for aliases&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //对类注册别名</span><br><span class="line">    if (!isEmpty(this.typeAliases)) &#123;</span><br><span class="line">        for (Class&lt;?&gt; typeAlias : this.typeAliases) &#123;</span><br><span class="line">            configuration.getTypeAliasRegistry().registerAlias(typeAlias);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered type alias: &apos;&quot; + typeAlias + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加插件</span><br><span class="line">    if (!isEmpty(this.plugins)) &#123;</span><br><span class="line">        for (Interceptor plugin : this.plugins) &#123;</span><br><span class="line">            configuration.addInterceptor(plugin);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered plugin: &apos;&quot; + plugin + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (hasLength(this.typeHandlersPackage)) &#123;</span><br><span class="line">        String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,</span><br><span class="line">            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        for (String packageToScan : typeHandlersPackageArray) &#123;</span><br><span class="line">            configuration.getTypeHandlerRegistry().register(packageToScan);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for type handlers&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isEmpty(this.typeHandlers)) &#123;</span><br><span class="line">        for (TypeHandler&lt;?&gt; typeHandler : this.typeHandlers) &#123;</span><br><span class="line">            configuration.getTypeHandlerRegistry().register(typeHandler);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Registered type handler: &apos;&quot; + typeHandler + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (xmlConfigBuilder != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //解析配置文件</span><br><span class="line">            xmlConfigBuilder.parse();</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Parsed configuration file: &apos;&quot; + this.configLocation + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            throw new NestedIOException(&quot;Failed to parse config resource: &quot; + this.configLocation, ex);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.transactionFactory == null) &#123;</span><br><span class="line">        //创建事务管理器</span><br><span class="line">        this.transactionFactory = new SpringManagedTransactionFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    //设置环境</span><br><span class="line">    Environment environment = new Environment(this.environment, this.transactionFactory, this.dataSource);</span><br><span class="line">    configuration.setEnvironment(environment);</span><br><span class="line"></span><br><span class="line">    if (this.databaseIdProvider != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new NestedIOException(&quot;Failed getting a databaseId&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isEmpty(this.mapperLocations)) &#123;</span><br><span class="line">        for (Resource mapperLocation : this.mapperLocations) &#123;</span><br><span class="line">            if (mapperLocation == null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),</span><br><span class="line">                    configuration, mapperLocation.toString(), configuration.getSqlFragments());</span><br><span class="line">                //解析mapper文件</span><br><span class="line">                xmlMapperBuilder.parse();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new NestedIOException(&quot;Failed to parse mapping resource: &apos;&quot; + mapperLocation + &quot;&apos;&quot;, e);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                ErrorContext.instance().reset();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Parsed mapper file: &apos;&quot; + mapperLocation + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Property &apos;mapperLocations&apos; was not specified or no matching resources found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return this.sqlSessionFactoryBuilder.build(configuration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、SqlSessionFactoryBean的getObject方法"><a href="#3、SqlSessionFactoryBean的getObject方法" class="headerlink" title="3、SqlSessionFactoryBean的getObject方法"></a>3、SqlSessionFactoryBean的getObject方法</h4><p>获取SqlSessionFactory对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionFactory getObject() throws Exception &#123;</span><br><span class="line">    if (this.sqlSessionFactory == null) &#123;</span><br><span class="line">        afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">    return this.sqlSessionFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二、扫描mapper接口"><a href="#二、扫描mapper接口" class="headerlink" title="二、扫描mapper接口"></a>二、扫描mapper接口</h3><h4 id="1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法"><a href="#1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法" class="headerlink" title="1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法"></a>1、MapperScannerConfigurer的postProcessBeanDefinitionRegistry方法</h4><p>BeanFactoryPostProcessor首先会执行postProcessBeanDefinitionRegistry方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    //若属性配置文件配置存在表达式$&#123;basePackage&#125;,此时尚未执行PropertyResourceConfigurer的postProcessBeanFactory加载Properties</span><br><span class="line">    //因此方法中创建一个容器，预先执行获取该属性</span><br><span class="line">    if (this.processPropertyPlaceHolders) &#123;</span><br><span class="line">      processPropertyPlaceHolders();</span><br><span class="line">    &#125;</span><br><span class="line">    //扫描器</span><br><span class="line">    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);</span><br><span class="line">    scanner.setAddToConfig(this.addToConfig);</span><br><span class="line">    scanner.setAnnotationClass(this.annotationClass);</span><br><span class="line">    scanner.setMarkerInterface(this.markerInterface);</span><br><span class="line">    //sqlSessionFactory</span><br><span class="line">    scanner.setSqlSessionFactory(this.sqlSessionFactory);</span><br><span class="line">    scanner.setSqlSessionTemplate(this.sqlSessionTemplate);</span><br><span class="line">    scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName);</span><br><span class="line">    scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName);</span><br><span class="line">    scanner.setResourceLoader(this.applicationContext);</span><br><span class="line">    scanner.setBeanNameGenerator(this.nameGenerator);</span><br><span class="line">    //注册过滤器</span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    //扫描包路径</span><br><span class="line">    scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ClassPathMapperScanner的registerFilters方法"><a href="#2、ClassPathMapperScanner的registerFilters方法" class="headerlink" title="2、ClassPathMapperScanner的registerFilters方法"></a>2、ClassPathMapperScanner的registerFilters方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public void registerFilters() &#123;</span><br><span class="line">    boolean acceptAllInterfaces = true;</span><br><span class="line"></span><br><span class="line">    // if specified, use the given annotation and / or marker interface</span><br><span class="line">    //添加注解类型过滤器</span><br><span class="line">    if (this.annotationClass != null) &#123;</span><br><span class="line">        addIncludeFilter(new AnnotationTypeFilter(this.annotationClass));</span><br><span class="line">        acceptAllInterfaces = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // override AssignableTypeFilter to ignore matches on the actual marker interface</span><br><span class="line">    //添加接口类型过滤器，获取实现了该接口的类或接口，但忽略本接口</span><br><span class="line">    if (this.markerInterface != null) &#123;</span><br><span class="line">        addIncludeFilter(new AssignableTypeFilter(this.markerInterface) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected boolean matchClassName(String className) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        acceptAllInterfaces = false;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取所有接口</span><br><span class="line">    if (acceptAllInterfaces) &#123;</span><br><span class="line">        // default include filter that accepts all classes</span><br><span class="line">        addIncludeFilter(new TypeFilter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // exclude package-info.java</span><br><span class="line">    //排除package-info.java</span><br><span class="line">    addExcludeFilter(new TypeFilter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">            String className = metadataReader.getClassMetadata().getClassName();</span><br><span class="line">            return className.endsWith(&quot;package-info&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ClassPathMapperScanner的doScan方法"><a href="#3、ClassPathMapperScanner的doScan方法" class="headerlink" title="3、ClassPathMapperScanner的doScan方法"></a>3、ClassPathMapperScanner的doScan方法</h4><p>ClassPathMapperScanner继承了ClassPathBeanDefinitionScanner，重写了doScan方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) &#123;</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = super.doScan(basePackages);</span><br><span class="line"></span><br><span class="line">    if (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">        logger.warn(&quot;No MyBatis mapper was found in &apos;&quot; + Arrays.toString(basePackages) + &quot;&apos; package. Please check your configuration.&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        processBeanDefinitions(beanDefinitions);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、ClassPathMapperScanner的isCandidateComponent方法"><a href="#4、ClassPathMapperScanner的isCandidateComponent方法" class="headerlink" title="4、ClassPathMapperScanner的isCandidateComponent方法"></a>4、ClassPathMapperScanner的isCandidateComponent方法</h4><p>ClassPathMapperScanner继承了ClassPathScanningCandidateComponentProvider，重写了isCandidateComponent方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) &#123;</span><br><span class="line">    //只获取接口</span><br><span class="line">    return beanDefinition.getMetadata().isInterface() &amp;&amp; beanDefinition.getMetadata().isIndependent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法"><a href="#5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法" class="headerlink" title="5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法"></a>5、接（二、3）ClassPathMapperScanner的processBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private void processBeanDefinitions(Set&lt;BeanDefinitionHolder&gt; beanDefinitions) &#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    for (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">        definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Creating MapperFactoryBean with name &apos;&quot; + holder.getBeanName() </span><br><span class="line">              + &quot;&apos; and &apos;&quot; + definition.getBeanClassName() + &quot;&apos; mapperInterface&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // the mapper interface is the original class of the bean</span><br><span class="line">        // but, the actual class of the bean is MapperFactoryBean</span><br><span class="line">        //设置构造器参数</span><br><span class="line">        definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName()); // issue #59</span><br><span class="line">        //设置mapper代理类的工厂</span><br><span class="line">        definition.setBeanClass(this.mapperFactoryBean.getClass());</span><br><span class="line"></span><br><span class="line">        definition.getPropertyValues().add(&quot;addToConfig&quot;, this.addToConfig);</span><br><span class="line"></span><br><span class="line">        boolean explicitFactoryUsed = false;</span><br><span class="line">        //设置sqlSessionFactory</span><br><span class="line">        if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionFactory&quot;, new RuntimeBeanReference(this.sqlSessionFactoryBeanName));</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125; else if (this.sqlSessionFactory != null) &#123;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionFactory&quot;, this.sqlSessionFactory);</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">            if (explicitFactoryUsed) &#123;</span><br><span class="line">                logger.warn(&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionTemplate&quot;, new RuntimeBeanReference(this.sqlSessionTemplateBeanName));</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125; else if (this.sqlSessionTemplate != null) &#123;</span><br><span class="line">            if (explicitFactoryUsed) &#123;</span><br><span class="line">                logger.warn(&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            definition.getPropertyValues().add(&quot;sqlSessionTemplate&quot;, this.sqlSessionTemplate);</span><br><span class="line">            explicitFactoryUsed = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!explicitFactoryUsed) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Enabling autowire by type for MapperFactoryBean with name &apos;&quot; + holder.getBeanName() + &quot;&apos;.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置自动注入byType</span><br><span class="line">            definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、创建mapper代理对象"><a href="#三、创建mapper代理对象" class="headerlink" title="三、创建mapper代理对象"></a>三、创建mapper代理对象</h3><h4 id="1、实例化MapperFactoryBean"><a href="#1、实例化MapperFactoryBean" class="headerlink" title="1、实例化MapperFactoryBean"></a>1、实例化MapperFactoryBean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public MapperFactoryBean(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class="line">    this.mapperInterface = mapperInterface;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、SqlSessionDaoSupport的setSqlSessionFactory方法"><a href="#2、SqlSessionDaoSupport的setSqlSessionFactory方法" class="headerlink" title="2、SqlSessionDaoSupport的setSqlSessionFactory方法"></a>2、SqlSessionDaoSupport的setSqlSessionFactory方法</h4><p>注入sqlSessionFactory属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">    if (!this.externalSqlSession) &#123;</span><br><span class="line">        this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、实例化SqlSessionTemplate"><a href="#3、实例化SqlSessionTemplate" class="headerlink" title="3、实例化SqlSessionTemplate"></a>3、实例化SqlSessionTemplate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">    this(sqlSessionFactory, sqlSessionFactory.getConfiguration().getDefaultExecutorType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType) &#123;</span><br><span class="line">    this(sqlSessionFactory, executorType,</span><br><span class="line">        new MyBatisExceptionTranslator(</span><br><span class="line">            sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), true));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span><br><span class="line">      PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(sqlSessionFactory, &quot;Property &apos;sqlSessionFactory&apos; is required&quot;);</span><br><span class="line">    notNull(executorType, &quot;Property &apos;executorType&apos; is required&quot;);</span><br><span class="line"></span><br><span class="line">    this.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    //ExecutorType.SIMPLE</span><br><span class="line">    this.executorType = executorType;</span><br><span class="line">    this.exceptionTranslator = exceptionTranslator;</span><br><span class="line">    //sqlSession代理</span><br><span class="line">    this.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class="line">        SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">        new Class[] &#123; SqlSession.class &#125;,</span><br><span class="line">        new SqlSessionInterceptor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、MapperFactoryBean的getObject方法"><a href="#4、MapperFactoryBean的getObject方法" class="headerlink" title="4、MapperFactoryBean的getObject方法"></a>4、MapperFactoryBean的getObject方法</h4><p>获取bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public T getObject() throws Exception &#123;</span><br><span class="line">    //SqlSessionTemplate获取代理对象</span><br><span class="line">    return getSqlSession().getMapper(this.mapperInterface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、SqlSessionTemplate的getMapper方法"><a href="#5、SqlSessionTemplate的getMapper方法" class="headerlink" title="5、SqlSessionTemplate的getMapper方法"></a>5、SqlSessionTemplate的getMapper方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T getMapper(Class&lt;T&gt; type) &#123;</span><br><span class="line">    //获取代理对象与mybatis中相同，传入的参数为SqlSessionTemplate，spring只创建这一个SqlSession</span><br><span class="line">    return getConfiguration().getMapper(type, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、拦截器SqlSessionInterceptor"><a href="#三、拦截器SqlSessionInterceptor" class="headerlink" title="三、拦截器SqlSessionInterceptor"></a>三、拦截器SqlSessionInterceptor</h3><h4 id="1、SqlSessionInterceptor的invoke方法"><a href="#1、SqlSessionInterceptor的invoke方法" class="headerlink" title="1、SqlSessionInterceptor的invoke方法"></a>1、SqlSessionInterceptor的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">    //创建一个sqlSession</span><br><span class="line">    final SqlSession sqlSession = getSqlSession(</span><br><span class="line">        SqlSessionTemplate.this.sqlSessionFactory,</span><br><span class="line">        SqlSessionTemplate.this.executorType,</span><br><span class="line">        SqlSessionTemplate.this.exceptionTranslator);</span><br><span class="line">    try &#123;</span><br><span class="line">        //执行</span><br><span class="line">        Object result = method.invoke(sqlSession, args);</span><br><span class="line">        //没有使用事务，直接提交</span><br><span class="line">        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) &#123;</span><br><span class="line">            // force commit even on non-dirty sessions because some databases require</span><br><span class="line">            // a commit/rollback before calling close()</span><br><span class="line">            sqlSession.commit(true);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        Throwable unwrapped = unwrapThrowable(t);</span><br><span class="line">        if (SqlSessionTemplate.this.exceptionTranslator != null &amp;&amp; unwrapped instanceof PersistenceException) &#123;</span><br><span class="line">            Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class="line">            if (translated != null) &#123;</span><br><span class="line">                unwrapped = translated;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw unwrapped;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、SqlSessionInterceptor的getSqlSession方法"><a href="#2、SqlSessionInterceptor的getSqlSession方法" class="headerlink" title="2、SqlSessionInterceptor的getSqlSession方法"></a>2、SqlSessionInterceptor的getSqlSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, </span><br><span class="line">      PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(sessionFactory, &quot;No SqlSessionFactory specified&quot;);</span><br><span class="line">    notNull(executorType, &quot;No ExecutorType specified&quot;);</span><br><span class="line">    //获取本线程的SqlSession容器</span><br><span class="line">    SqlSessionHolder holder = (SqlSessionHolder) getResource(sessionFactory);</span><br><span class="line">    //holder已被事务获取</span><br><span class="line">    if (holder != null &amp;&amp; holder.isSynchronizedWithTransaction()) &#123;</span><br><span class="line">        if (holder.getExecutorType() != executorType) &#123;</span><br><span class="line">            throw new TransientDataAccessResourceException(&quot;Cannot change the ExecutorType when there is an existing transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //正在使用次数加一</span><br><span class="line">        holder.requested();</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Fetched SqlSession [&quot; + holder.getSqlSession() + &quot;] from current transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return holder.getSqlSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating a new SqlSession&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建SqlSession</span><br><span class="line">    SqlSession session = sessionFactory.openSession(executorType);</span><br><span class="line"></span><br><span class="line">    // Register session holder if synchronization is active (i.e. a Spring TX is active)</span><br><span class="line">    //</span><br><span class="line">    // Note: The DataSource used by the Environment should be synchronized with the</span><br><span class="line">    // transaction either through DataSourceTxMgr or another tx synchronization.</span><br><span class="line">    // Further assume that if an exception is thrown, whatever started the transaction will</span><br><span class="line">    // handle closing / rolling back the Connection associated with the SqlSession.</span><br><span class="line">    //当前线程是否激活事务</span><br><span class="line">    if (isSynchronizationActive()) &#123;</span><br><span class="line">        //获取环境</span><br><span class="line">        Environment environment = sessionFactory.getConfiguration().getEnvironment();</span><br><span class="line">        //事务管理器为是spring事务管理器</span><br><span class="line">        if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">              logger.debug(&quot;Registering transaction synchronization for SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //创建本线程SqlSession容器</span><br><span class="line">            holder = new SqlSessionHolder(session, executorType, exceptionTranslator);</span><br><span class="line">            //holder注册到本线程</span><br><span class="line">            bindResource(sessionFactory, holder);</span><br><span class="line">            //设置回调函数释放资源</span><br><span class="line">            registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));</span><br><span class="line">            //设置holder已被事务获取</span><br><span class="line">            holder.setSynchronizedWithTransaction(true);</span><br><span class="line">            //SqlSession正在使用加一</span><br><span class="line">            holder.requested();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (getResource(environment.getDataSource()) == null) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because DataSource is not transactional&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new TransientDataAccessResourceException(</span><br><span class="line">                  &quot;SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because synchronization is not active&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、接（三、1）SqlSessionInterceptor的closeSqlSession方法"><a href="#3、接（三、1）SqlSessionInterceptor的closeSqlSession方法" class="headerlink" title="3、接（三、1）SqlSessionInterceptor的closeSqlSession方法"></a>3、接（三、1）SqlSessionInterceptor的closeSqlSession方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void closeSqlSession(SqlSession session, SqlSessionFactory sessionFactory) &#123;</span><br><span class="line"></span><br><span class="line">    notNull(session, &quot;No SqlSession specified&quot;);</span><br><span class="line">    notNull(sessionFactory, &quot;No SqlSessionFactory specified&quot;);</span><br><span class="line">    //获取本线程SqlSession容器</span><br><span class="line">    SqlSessionHolder holder = (SqlSessionHolder) getResource(sessionFactory);</span><br><span class="line">    if ((holder != null) &amp;&amp; (holder.getSqlSession() == session)) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Releasing transactional SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //正在使用减一</span><br><span class="line">        holder.released();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Closing non transactional SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //没有事务，关闭SqlSession</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码XmlBeanFactory(2)</title>
    <link href="http://yoursite.com/2018/06/27/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81XmlBeanFactory(2)/"/>
    <id>http://yoursite.com/2018/06/27/spring源码/spring源码XmlBeanFactory(2)/</id>
    <published>2018-06-27T13:10:29.033Z</published>
    <updated>2018-07-07T15:10:12.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、bean加载"><a href="#一、bean加载" class="headerlink" title="一、bean加载"></a>一、bean加载</h3><h4 id="1、AbstractBeanFactory的getBean方法"><a href="#1、AbstractBeanFactory的getBean方法" class="headerlink" title="1、AbstractBeanFactory的getBean方法"></a>1、AbstractBeanFactory的getBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">    return doGetBean(name, null, null, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractBeanFactory的doGetBean方法"><a href="#2、AbstractBeanFactory的doGetBean方法" class="headerlink" title="2、AbstractBeanFactory的doGetBean方法"></a>2、AbstractBeanFactory的doGetBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected &lt;T&gt; T doGetBean(</span><br><span class="line">        final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line">    //FactoryBean以&quot;&amp;&quot;开头，去除该符号，别名转换为beanName</span><br><span class="line">    final String beanName = transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    // Eagerly check singleton cache for manually registered singletons.</span><br><span class="line">    //从缓存中获取</span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    if (sharedInstance != null &amp;&amp; args == null) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            if (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(&quot;Returning eagerly cached instance of singleton bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; that is not fully initialized yet - a consequence of a circular reference&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                logger.debug(&quot;Returning cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果是FactoryBean，则从FactoryBean中获取对象</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">        // Fail if we&apos;re already creating this bean instance:</span><br><span class="line">        // We&apos;re assumably within a circular reference.</span><br><span class="line">        //该bean正在创建，发生循环依赖</span><br><span class="line">        if (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            throw new BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Check if bean definition exists in this factory.</span><br><span class="line">        //获取父容器，</span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        //当前容器不存在该bean，则从父容器中获取该bean</span><br><span class="line">        if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            // Not found -&gt; check parent.</span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            if (args != null) &#123;</span><br><span class="line">                // Delegation to parent with explicit args.</span><br><span class="line">                return (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // No args -&gt; delegate to standard getBean method.</span><br><span class="line">                return parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //标记bean正在创建</span><br><span class="line">        if (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //将储存xml配置的GernericBeanDefinition转换为RootBeanDefinition</span><br><span class="line">            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            // Guarantee initialization of beans that the current bean depends on.</span><br><span class="line">            //指定依赖</span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            if (dependsOn != null) &#123;</span><br><span class="line">                for (String dependsOnBean : dependsOn) &#123;</span><br><span class="line">                    //dependOn依赖关系已注册，出现循环依赖</span><br><span class="line">                    if (isDependent(beanName, dependsOnBean)) &#123;</span><br><span class="line">                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                &quot;Circular depends-on relationship between &apos;&quot; + beanName + &quot;&apos; and &apos;&quot; + dependsOnBean + &quot;&apos;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //注册dependOn依赖关系</span><br><span class="line">                    registerDependentBean(dependsOnBean, beanName);</span><br><span class="line">                    //先加载依赖bean</span><br><span class="line">                    getBean(dependsOnBean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Create bean instance.</span><br><span class="line">            //bean为单例模式</span><br><span class="line">            if (mbd.isSingleton()) &#123;</span><br><span class="line">                //获取该单例bean</span><br><span class="line">                sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object getObject() throws BeansException &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //创建该bean</span><br><span class="line">                            return createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (BeansException ex) &#123;</span><br><span class="line">                            // Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="line">                            // eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="line">                            // Also remove any beans that received a temporary reference to the bean.</span><br><span class="line">                            destroySingleton(beanName);</span><br><span class="line">                            throw ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                //如果是FactoryBean，则从FactoryBean中获取对象</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            //bean为prototype模式</span><br><span class="line">            else if (mbd.isPrototype()) &#123;</span><br><span class="line">                // It&apos;s a prototype -&gt; create a new instance.</span><br><span class="line">                Object prototypeInstance = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //标记该bean正在创建</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    //创建该prototype模式的bean</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    //删除正在创建标记</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            //bean为另外的scope</span><br><span class="line">            else &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                final Scope scope = this.scopes.get(scopeName);</span><br><span class="line">                if (scope == null) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;No Scope registered for scope &apos;&quot; + scopeName + &quot;&apos;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public Object getObject() throws BeansException &#123;</span><br><span class="line">                            beforePrototypeCreation(beanName);</span><br><span class="line">                            try &#123;</span><br><span class="line">                                return createBean(beanName, mbd, args);</span><br><span class="line">                            &#125;</span><br><span class="line">                            finally &#123;</span><br><span class="line">                                afterPrototypeCreation(beanName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (IllegalStateException ex) &#123;</span><br><span class="line">                    throw new BeanCreationException(beanName,</span><br><span class="line">                            &quot;Scope &apos;&quot; + scopeName + &quot;&apos; is not active for the current thread; &quot; +</span><br><span class="line">                            &quot;consider defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;,</span><br><span class="line">                            ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check if required type matches the type of the actual bean instance.</span><br><span class="line">    if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TypeMismatchException ex) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Failed to convert bean &apos;&quot; + name + &quot;&apos; to required type [&quot; +</span><br><span class="line">                        ClassUtils.getQualifiedName(requiredType) + &quot;]&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractBeanFactory的getSingleton方法"><a href="#3、AbstractBeanFactory的getSingleton方法" class="headerlink" title="3、AbstractBeanFactory的getSingleton方法"></a>3、AbstractBeanFactory的getSingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getSingleton(String beanName) &#123;</span><br><span class="line">    return getSingleton(beanName, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">    //从缓存中获取</span><br><span class="line">    Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">    if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        synchronized (this.singletonObjects) &#123;</span><br><span class="line">            //从早期bean缓存中获取暴露的早期bean，解决循环依赖</span><br><span class="line">            singletonObject = this.earlySingletonObjects.get(beanName);</span><br><span class="line">            //允许获取早期bean</span><br><span class="line">            if (singletonObject == null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                //获取singletonFactory</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);</span><br><span class="line">                if (singletonFactory != null) &#123;</span><br><span class="line">                    //从singletonFactoy中，获取早期bean</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    //放入早期bean缓存</span><br><span class="line">                    this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    this.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (singletonObject != NULL_OBJECT ? singletonObject : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法"><a href="#4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法" class="headerlink" title="4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法"></a>4、接（一、2）AbstractBeanFactory的getObjectForBeanInstance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">protected Object getObjectForBeanInstance(</span><br><span class="line">        Object beanInstance, String name, String beanName, RootBeanDefinition mbd) &#123;</span><br><span class="line"></span><br><span class="line">    // Don&apos;t let calling code try to dereference the factory if the bean isn&apos;t a factory.</span><br><span class="line">    //name是工厂类型即“&amp;”开头，但实例并非FactoryBean</span><br><span class="line">    if (BeanFactoryUtils.isFactoryDereference(name) &amp;&amp; !(beanInstance instanceof FactoryBean)) &#123;</span><br><span class="line">        throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Now we have the bean instance, which may be a normal bean or a FactoryBean.</span><br><span class="line">    // If it&apos;s a FactoryBean, we use it to create a bean instance, unless the</span><br><span class="line">    // caller actually wants a reference to the factory.</span><br><span class="line">    //name是工厂或实例并非FactoryBean，直接返回</span><br><span class="line">    if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">        return beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object object = null;</span><br><span class="line">    if (mbd == null) &#123;</span><br><span class="line">        //从缓存中获取FactoryBean</span><br><span class="line">        object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    if (object == null) &#123;</span><br><span class="line">        // Return bean instance from factory.</span><br><span class="line">        FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">        // Caches object obtained from FactoryBean if it is a singleton.</span><br><span class="line">        if (mbd == null &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            //将储存xml配置的GernericBeanDefinition转换为RootBeanDefinition</span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean synthetic = (mbd != null &amp;&amp; mbd.isSynthetic());</span><br><span class="line">        //从FactoryBean中获取bean</span><br><span class="line">        object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">    &#125;</span><br><span class="line">    return object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、AbstractBeanFactory的getObjectFromFactoryBean方法"><a href="#5、AbstractBeanFactory的getObjectFromFactoryBean方法" class="headerlink" title="5、AbstractBeanFactory的getObjectFromFactoryBean方法"></a>5、AbstractBeanFactory的getObjectFromFactoryBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">protected Object getObjectFromFactoryBean(FactoryBean&lt;?&gt; factory, String beanName, boolean shouldPostProcess) &#123;</span><br><span class="line">    //单例模式</span><br><span class="line">    if (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">        synchronized (getSingletonMutex()) &#123;</span><br><span class="line">            Object object = this.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            if (object == null) &#123;</span><br><span class="line">                //获取bean，执行factory的getObject方法</span><br><span class="line">                object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                // Only post-process and store if not put there already during getObject() call above</span><br><span class="line">                // (e.g. because of circular reference processing triggered by custom getBean calls)</span><br><span class="line">                //从缓存中获取</span><br><span class="line">                Object alreadyThere = this.factoryBeanObjectCache.get(beanName);</span><br><span class="line">                if (alreadyThere != null) &#123;</span><br><span class="line">                    object = alreadyThere;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    if (object != null &amp;&amp; shouldPostProcess) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //从FactoryBean中获取对象的后处理器</span><br><span class="line">                            object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (Throwable ex) &#123;</span><br><span class="line">                            throw new BeanCreationException(beanName,</span><br><span class="line">                                    &quot;Post-processing of FactoryBean&apos;s singleton object failed&quot;, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //添加缓存</span><br><span class="line">                    this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return (object != NULL_OBJECT ? object : null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        if (object != null &amp;&amp; shouldPostProcess) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Throwable ex) &#123;</span><br><span class="line">                throw new BeanCreationException(beanName, &quot;Post-processing of FactoryBean&apos;s object failed&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法"><a href="#6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法" class="headerlink" title="6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法"></a>6、AbstractBeanFactory的postProcessObjectFromFactoryBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object postProcessObjectFromFactoryBean(Object object, String beanName) &#123;</span><br><span class="line">    return applyBeanPostProcessorsAfterInitialization(object, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法"><a href="#7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法" class="headerlink" title="7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法"></a>7、AbstractBeanFactory的applyBeanPostProcessorsAfterInitialization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)</span><br><span class="line">        throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    Object result = existingBean;</span><br><span class="line">    //执行bean初始化后处理器</span><br><span class="line">    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">        result = beanProcessor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、2）AbstractBeanFactory的getSingleton方法"><a href="#8、接（一、2）AbstractBeanFactory的getSingleton方法" class="headerlink" title="8、接（一、2）AbstractBeanFactory的getSingleton方法"></a>8、接（一、2）AbstractBeanFactory的getSingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">    Assert.notNull(beanName, &quot;&apos;beanName&apos; must not be null&quot;);</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        //从缓存里获取</span><br><span class="line">        Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">        if (singletonObject == null) &#123;</span><br><span class="line">            if (this.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line">                throw new BeanCreationNotAllowedException(beanName,</span><br><span class="line">                        &quot;Singleton bean creation not allowed while the singletons of this factory are in destruction &quot; +</span><br><span class="line">                        &quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Creating shared instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //检查该bean是否正在创建</span><br><span class="line">            beforeSingletonCreation(beanName);</span><br><span class="line">            boolean newSingleton = false;</span><br><span class="line">            boolean recordSuppressedExceptions = (this.suppressedExceptions == null);</span><br><span class="line">            if (recordSuppressedExceptions) &#123;</span><br><span class="line">                this.suppressedExceptions = new LinkedHashSet&lt;Exception&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                //创建bean</span><br><span class="line">                singletonObject = singletonFactory.getObject();</span><br><span class="line">                newSingleton = true;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IllegalStateException ex) &#123;</span><br><span class="line">                // Has the singleton object implicitly appeared in the meantime -&gt;</span><br><span class="line">                // if yes, proceed with it since the exception indicates that state.</span><br><span class="line">                singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">                if (singletonObject == null) &#123;</span><br><span class="line">                    throw ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (BeanCreationException ex) &#123;</span><br><span class="line">                if (recordSuppressedExceptions) &#123;</span><br><span class="line">                    for (Exception suppressedException : this.suppressedExceptions) &#123;</span><br><span class="line">                        ex.addRelatedCause(suppressedException);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if (recordSuppressedExceptions) &#123;</span><br><span class="line">                    this.suppressedExceptions = null;</span><br><span class="line">                &#125;</span><br><span class="line">                //删除正在创建标记</span><br><span class="line">                afterSingletonCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            if (newSingleton) &#123;</span><br><span class="line">                //添加缓存，删除为解决循环依赖而提早暴露的bean</span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (singletonObject != NULL_OBJECT ? singletonObject : null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractAutowireCapableBeanFactory的createBean方法"><a href="#9、AbstractAutowireCapableBeanFactory的createBean方法" class="headerlink" title="9、AbstractAutowireCapableBeanFactory的createBean方法"></a>9、AbstractAutowireCapableBeanFactory的createBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object createBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)</span><br><span class="line">        throws BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // Make sure bean class is actually resolved at this point.</span><br><span class="line">    //获取bean的class</span><br><span class="line">    resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    // Prepare method overrides.</span><br><span class="line">    try &#123;</span><br><span class="line">        //预处理准备覆盖的方法</span><br><span class="line">        mbd.prepareMethodOverrides();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(mbd.getResourceDescription(),</span><br><span class="line">                beanName, &quot;Validation of method overrides failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span><br><span class="line">        // 给BeanPostProcessors一个机会返回代理，来替代真正的实例</span><br><span class="line">        Object bean = resolveBeforeInstantiation(beanName, mbd);</span><br><span class="line">        if (bean != null) &#123;</span><br><span class="line">            return bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                &quot;BeanPostProcessor before instantiation of bean failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建bean</span><br><span class="line">    Object beanInstance = doCreateBean(beanName, mbd, args);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Finished creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法"><a href="#10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法" class="headerlink" title="10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法"></a>10、AbstractAutowireCapableBeanFactory的resolveBeforeInstantiation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) &#123;</span><br><span class="line">    Object bean = null;</span><br><span class="line">    //尚未被解析</span><br><span class="line">    if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">        // Make sure bean class is actually resolved at this point.</span><br><span class="line">        if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">            Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">            if (targetType != null) &#123;</span><br><span class="line">                //实例化bean前处理器，这里可以在创建BeanWrapper之前更改BeanDefinition，并可能会创建一个代理bean返回</span><br><span class="line">                bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                if (bean != null) &#123;</span><br><span class="line">                    //如果bean已经创建，调用实例化bean后处理器</span><br><span class="line">                    bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mbd.beforeInstantiationResolved = (bean != null);</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法"><a href="#11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法" class="headerlink" title="11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法"></a>11、接（一、9）AbstractAutowireCapableBeanFactory的doCreateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123;</span><br><span class="line">    // Instantiate the bean.</span><br><span class="line">    BeanWrapper instanceWrapper = null;</span><br><span class="line">    if (mbd.isSingleton()) &#123;</span><br><span class="line">        //单例模式，删除原有的beanWrapper</span><br><span class="line">        instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    if (instanceWrapper == null) &#123;</span><br><span class="line">        //创建beanWrapper，里面存放了bean对象</span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);</span><br><span class="line">    Class&lt;?&gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);</span><br><span class="line"></span><br><span class="line">    // Allow post-processors to modify the merged bean definition.</span><br><span class="line">    synchronized (mbd.postProcessingLock) &#123;</span><br><span class="line">        if (!mbd.postProcessed) &#123;</span><br><span class="line">            //应用MergedBeanDefinitionPostProcessor</span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            mbd.postProcessed = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Eagerly cache singletons to be able to resolve circular references</span><br><span class="line">    // even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br><span class="line">    //单例&amp;允许循环依赖&amp;该bean正在创建，则提早曝光</span><br><span class="line">    boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class="line">            isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    if (earlySingletonExposure) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Eagerly caching bean &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos; to allow for resolving potential circular references&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //singletonFactories中添加ObjectFactory</span><br><span class="line">        addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object getObject() throws BeansException &#123;</span><br><span class="line">                //应用SmartInstantiationAwareBeanPostProcessor，没有直接返回</span><br><span class="line">                //AOP在此处将advice动态织入bean中</span><br><span class="line">                return getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Initialize the bean instance.</span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    try &#123;</span><br><span class="line">        //将各个属性值注入bean中，依赖其他bean，则递归初始化bean</span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        if (exposedObject != null) &#123;</span><br><span class="line">            //调用初始化方法，比如init-method</span><br><span class="line">            exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            throw (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (earlySingletonExposure) &#123;</span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, false);</span><br><span class="line">        //出现循环依赖的情况下，该值不为空</span><br><span class="line">        if (earlySingletonReference != null) &#123;</span><br><span class="line">            if (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;String&gt;(dependentBeans.length);</span><br><span class="line">                for (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //检查依赖的bean是否都已经创建</span><br><span class="line">                if (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    throw new BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                            &quot;Bean with name &apos;&quot; + beanName + &quot;&apos; has been injected into other beans [&quot; +</span><br><span class="line">                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                            &quot;] in its raw version as part of a circular reference, but has eventually been &quot; +</span><br><span class="line">                            &quot;wrapped. This means that said other beans do not use the final version of the &quot; +</span><br><span class="line">                            &quot;bean. This is often the result of over-eager type matching - consider using &quot; +</span><br><span class="line">                            &quot;&apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Register bean as disposable.</span><br><span class="line">    try &#123;</span><br><span class="line">        //根据scope注册bean</span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractAutowireCapableBeanFactory的createBeanInstance方法"><a href="#12、AbstractAutowireCapableBeanFactory的createBeanInstance方法" class="headerlink" title="12、AbstractAutowireCapableBeanFactory的createBeanInstance方法"></a>12、AbstractAutowireCapableBeanFactory的createBeanInstance方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) &#123;</span><br><span class="line">    // Make sure bean class is actually resolved at this point.</span><br><span class="line">    //获取class</span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    if (beanClass != null &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                &quot;Bean class isn&apos;t public, and non-public access not allowed: &quot; + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    //存在工厂方法，用工厂方法创建bean</span><br><span class="line">    if (mbd.getFactoryMethodName() != null)  &#123;</span><br><span class="line">        return instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Shortcut when re-creating the same bean...</span><br><span class="line">    boolean resolved = false;</span><br><span class="line">    boolean autowireNecessary = false;</span><br><span class="line">    //没有参数，不需解析</span><br><span class="line">    if (args == null) &#123;</span><br><span class="line">        synchronized (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            if (mbd.resolvedConstructorOrFactoryMethod != null) &#123;</span><br><span class="line">                resolved = true;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //已经解析</span><br><span class="line">    if (resolved) &#123;</span><br><span class="line">        if (autowireNecessary) &#123;</span><br><span class="line">            //构造函数或工厂方法创建对象</span><br><span class="line">            return autowireConstructor(beanName, mbd, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //默认构造函数创建</span><br><span class="line">            return instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Need to determine the constructor...</span><br><span class="line">    //由参数解析构造函数或工厂方法</span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    if (ctors != null ||</span><br><span class="line">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">        return autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">    &#125;</span><br><span class="line">    //默认构造函数创建</span><br><span class="line">    // No special handling: simply use no-arg constructor.</span><br><span class="line">    return instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、AbstractAutowireCapableBeanFactory的instantiateBean方法"><a href="#13、AbstractAutowireCapableBeanFactory的instantiateBean方法" class="headerlink" title="13、AbstractAutowireCapableBeanFactory的instantiateBean方法"></a>13、AbstractAutowireCapableBeanFactory的instantiateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Object beanInstance;</span><br><span class="line">        final BeanFactory parent = this;</span><br><span class="line">        if (System.getSecurityManager() != null) &#123;</span><br><span class="line">            beanInstance = AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public Object run() &#123;</span><br><span class="line">                    return getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //创建bean</span><br><span class="line">            beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">        &#125;</span><br><span class="line">        BeanWrapper bw = new BeanWrapperImpl(beanInstance);</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line">        return bw;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Instantiation of bean failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、SimpleInstantiationStrategy的instantiate方法"><a href="#14、SimpleInstantiationStrategy的instantiate方法" class="headerlink" title="14、SimpleInstantiationStrategy的instantiate方法"></a>14、SimpleInstantiationStrategy的instantiate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) &#123;</span><br><span class="line">    // Don&apos;t override the class with CGLIB if no overrides.</span><br><span class="line">    //</span><br><span class="line">    if (bd.getMethodOverrides().isEmpty()) &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">        synchronized (bd.constructorArgumentLock) &#123;</span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            if (constructorToUse == null) &#123;</span><br><span class="line">                final Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">                if (clazz.isInterface()) &#123;</span><br><span class="line">                    throw new BeanInstantiationException(clazz, &quot;Specified class is an interface&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">                        constructorToUse = AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public Constructor&lt;?&gt; run() throws Exception &#123;</span><br><span class="line">                                return clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        constructorToUse =  clazz.getDeclaredConstructor((Class[]) null);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception ex) &#123;</span><br><span class="line">                    throw new BeanInstantiationException(clazz, &quot;No default constructor found&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //直接通过反射创建</span><br><span class="line">        return BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Must generate CGLIB subclass.</span><br><span class="line">        //有需要覆盖或动态替换的方法，则使用CGLIB创建代理对象并将方法织入</span><br><span class="line">        return instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法"><a href="#15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法" class="headerlink" title="15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法"></a>15、CglibSubclassingInstantiationStrategy的instantiateWithMethodInjection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner) &#123;</span><br><span class="line">    return instantiateWithMethodInjection(bd, beanName, owner, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner,</span><br><span class="line">        Constructor&lt;?&gt; ctor, Object... args) &#123;</span><br><span class="line"></span><br><span class="line">    // Must generate CGLIB subclass...</span><br><span class="line">    return new CglibSubclassCreator(bd, owner).instantiate(ctor, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、CglibSubclassingInstantiationStrategy的instantiate方法"><a href="#16、CglibSubclassingInstantiationStrategy的instantiate方法" class="headerlink" title="16、CglibSubclassingInstantiationStrategy的instantiate方法"></a>16、CglibSubclassingInstantiationStrategy的instantiate方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public Object instantiate(Constructor&lt;?&gt; ctor, Object... args) &#123;</span><br><span class="line">    Class&lt;?&gt; subclass = createEnhancedSubclass(this.beanDefinition);</span><br><span class="line">    Object instance;</span><br><span class="line">    if (ctor == null) &#123;</span><br><span class="line">        instance = BeanUtils.instantiate(subclass);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Constructor&lt;?&gt; enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes());</span><br><span class="line">            instance = enhancedSubclassConstructor.newInstance(args);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),</span><br><span class="line">                    &quot;Failed to invoke constructor for CGLIB enhanced subclass [&quot; + subclass.getName() + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // SPR-10785: set callbacks directly on the instance instead of in the</span><br><span class="line">    // enhanced class (via the Enhancer) in order to avoid memory leaks.</span><br><span class="line">    Factory factory = (Factory) instance;</span><br><span class="line">    //拦截器，拦截对应的方法</span><br><span class="line">    factory.setCallbacks(new Callback[] &#123;NoOp.INSTANCE,</span><br><span class="line">            new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),</span><br><span class="line">            new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)&#125;);</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法"><a href="#17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法" class="headerlink" title="17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法"></a>17、CglibSubclassingInstantiationStrategy的createEnhancedSubclass方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private Class&lt;?&gt; createEnhancedSubclass(RootBeanDefinition beanDefinition) &#123;</span><br><span class="line">    Enhancer enhancer = new Enhancer();</span><br><span class="line">    enhancer.setSuperclass(beanDefinition.getBeanClass());</span><br><span class="line">    enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">    /过滤器，accept方法返回的数字，代表了Callback数组中的索引位置</span><br><span class="line">    enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition));</span><br><span class="line">    enhancer.setCallbackTypes(CALLBACK_TYPES);</span><br><span class="line">    return enhancer.createClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法"><a href="#18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法" class="headerlink" title="18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法"></a>18、接（一、11）AbstractAutowireCapableBeanFactory的populateBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123;</span><br><span class="line">    //获取属性</span><br><span class="line">    PropertyValues pvs = mbd.getPropertyValues();</span><br><span class="line"></span><br><span class="line">    if (bw == null) &#123;</span><br><span class="line">        if (!pvs.isEmpty()) &#123;</span><br><span class="line">            throw new BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, &quot;Cannot apply property values to null instance&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Skip property population phase for null instance.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span><br><span class="line">    // state of the bean before properties are set. This can be used, for example,</span><br><span class="line">    // to support styles of field injection.</span><br><span class="line">    boolean continueWithPropertyPopulation = true;</span><br><span class="line">    //应用InstantiationAwareBeanPostProcessor</span><br><span class="line">    if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        MutablePropertyValues newPvs = new MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">        // Add property values based on autowire by name if applicable.</span><br><span class="line">        //根据名称自动注入</span><br><span class="line">        if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Add property values based on autowire by type if applicable.</span><br><span class="line">        //根据类型自动注入</span><br><span class="line">        if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line">    //后处理器已经初始化</span><br><span class="line">    boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    //需要检查依赖</span><br><span class="line">    boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    if (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">        PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        if (hasInstAwareBpps) &#123;</span><br><span class="line">            for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">                if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                    InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                    //对需要检查依赖的属性,进行后处理</span><br><span class="line">                    pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    if (pvs == null) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (needsDepCheck) &#123;</span><br><span class="line">            //检查依赖</span><br><span class="line">            checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将属性应用到bean中</span><br><span class="line">    applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、AbstractAutowireCapableBeanFactory的autowireByName方法"><a href="#19、AbstractAutowireCapableBeanFactory的autowireByName方法" class="headerlink" title="19、AbstractAutowireCapableBeanFactory的autowireByName方法"></a>19、AbstractAutowireCapableBeanFactory的autowireByName方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected void autowireByName(</span><br><span class="line">        String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</span><br><span class="line">    //寻找依赖注入的属性</span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    for (String propertyName : propertyNames) &#123;</span><br><span class="line">        if (containsBean(propertyName)) &#123;</span><br><span class="line">            //递归初始化相关的bean</span><br><span class="line">            Object bean = getBean(propertyName);</span><br><span class="line">            pvs.add(propertyName, bean);</span><br><span class="line">            //注册依赖</span><br><span class="line">            registerDependentBean(propertyName, beanName);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Added autowiring by name from bean name &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; via property &apos;&quot; + propertyName + &quot;&apos; to bean named &apos;&quot; + propertyName + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Not autowiring property &apos;&quot; + propertyName + &quot;&apos; of bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; by name: no matching bean found&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法"><a href="#20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法" class="headerlink" title="20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法"></a>20、接（一、18）AbstractAutowireCapableBeanFactory的autowireByType方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">protected void autowireByType(</span><br><span class="line">        String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</span><br><span class="line"></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    if (converter == null) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; autowiredBeanNames = new LinkedHashSet&lt;String&gt;(4);</span><br><span class="line">    //获取需要依赖注入的属性</span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    for (String propertyName : propertyNames) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</span><br><span class="line">            // Don&apos;t try autowiring by type for type Object: never makes sense,</span><br><span class="line">            // even if it technically is a unsatisfied, non-simple property.</span><br><span class="line">            if (!Object.class.equals(pd.getPropertyType())) &#123;</span><br><span class="line">                MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</span><br><span class="line">                // Do not allow eager init for type matching in case of a prioritized post-processor.</span><br><span class="line">                boolean eager = !PriorityOrdered.class.isAssignableFrom(bw.getWrappedClass());</span><br><span class="line">                DependencyDescriptor desc = new AutowireByTypeDependencyDescriptor(methodParam, eager);</span><br><span class="line">                //解析该propertyName所对应的属性值</span><br><span class="line">                Object autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</span><br><span class="line">                if (autowiredArgument != null) &#123;</span><br><span class="line">                    pvs.add(propertyName, autowiredArgument);</span><br><span class="line">                &#125;</span><br><span class="line">                for (String autowiredBeanName : autowiredBeanNames) &#123;</span><br><span class="line">                    registerDependentBean(autowiredBeanName, beanName);</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(&quot;Autowiring by type from bean name &apos;&quot; + beanName + &quot;&apos; via property &apos;&quot; +</span><br><span class="line">                                propertyName + &quot;&apos; to bean named &apos;&quot; + autowiredBeanName + &quot;&apos;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                autowiredBeanNames.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeansException ex) &#123;</span><br><span class="line">            throw new UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、DefaultListableBeanFactory的resolveDependency方法"><a href="#21、DefaultListableBeanFactory的resolveDependency方法" class="headerlink" title="21、DefaultListableBeanFactory的resolveDependency方法"></a>21、DefaultListableBeanFactory的resolveDependency方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object resolveDependency(DependencyDescriptor descriptor, String beanName,</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter) throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    descriptor.initParameterNameDiscovery(getParameterNameDiscoverer());</span><br><span class="line">    //javaUtilOptionalClass类注入特殊处理</span><br><span class="line">    if (descriptor.getDependencyType().equals(javaUtilOptionalClass)) &#123;</span><br><span class="line">        return new OptionalDependencyFactory().createOptionalDependency(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //ObjectFactory类注入特殊处理</span><br><span class="line">    else if (descriptor.getDependencyType().equals(ObjectFactory.class)) &#123;</span><br><span class="line">        return new DependencyObjectFactory(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //javaxInjectProviderClass类注入特殊处理</span><br><span class="line">    else if (descriptor.getDependencyType().equals(javaxInjectProviderClass)) &#123;</span><br><span class="line">        return new DependencyProviderFactory().createDependencyProvider(descriptor, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //懒加载，获取代理对象</span><br><span class="line">        Object result = getAutowireCandidateResolver().getLazyResolutionProxyIfNecessary(descriptor, beanName);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            //通用处理逻辑</span><br><span class="line">            result = doResolveDependency(descriptor, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、DefaultListableBeanFactory的doResolveDependency方法"><a href="#22、DefaultListableBeanFactory的doResolveDependency方法" class="headerlink" title="22、DefaultListableBeanFactory的doResolveDependency方法"></a>22、DefaultListableBeanFactory的doResolveDependency方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">public Object doResolveDependency(DependencyDescriptor descriptor, String beanName,</span><br><span class="line">        Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter) throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; type = descriptor.getDependencyType();</span><br><span class="line">    //解析注解@value</span><br><span class="line">    Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor);</span><br><span class="line">    if (value != null) &#123;</span><br><span class="line">        if (value instanceof String) &#123;</span><br><span class="line">            //处理placeholder类型的value</span><br><span class="line">            String strVal = resolveEmbeddedValue((String) value);</span><br><span class="line">            BeanDefinition bd = (beanName != null &amp;&amp; containsBean(beanName) ? getMergedBeanDefinition(beanName) : null);</span><br><span class="line">            // 处理EL表达式  </span><br><span class="line">            value = evaluateBeanDefinitionString(strVal, bd);</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        //类型转换</span><br><span class="line">        return (descriptor.getField() != null ?</span><br><span class="line">                converter.convertIfNecessary(value, type, descriptor.getField()) :</span><br><span class="line">                converter.convertIfNecessary(value, type, descriptor.getMethodParameter()));</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为数组类型</span><br><span class="line">    if (type.isArray()) &#123;</span><br><span class="line">        Class&lt;?&gt; componentType = type.getComponentType();</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        //获取所有符合要求的类型的bean和类对象</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(componentType, &quot;array of &quot; + componentType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        Object result = converter.convertIfNecessary(matchingBeans.values(), type);</span><br><span class="line">        //将所有符合类型的类对象和bean，放入数组</span><br><span class="line">        if (getDependencyComparator() != null &amp;&amp; result instanceof Object[]) &#123;</span><br><span class="line">            Arrays.sort((Object[]) result, adaptDependencyComparator(matchingBeans));</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为Collection类型</span><br><span class="line">    else if (Collection.class.isAssignableFrom(type) &amp;&amp; type.isInterface()) &#123;</span><br><span class="line">        Class&lt;?&gt; elementType = descriptor.getCollectionType();</span><br><span class="line">        if (elementType == null) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;No element type declared for collection [&quot; + type.getName() + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, elementType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(elementType, &quot;collection of &quot; + elementType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());</span><br><span class="line">        Object result = converter.convertIfNecessary(matchingBeans.values(), type);</span><br><span class="line">        //将所有符合类型的类对象和bean，放入List</span><br><span class="line">        if (getDependencyComparator() != null &amp;&amp; result instanceof List) &#123;</span><br><span class="line">            Collections.sort((List&lt;?&gt;) result, adaptDependencyComparator(matchingBeans));</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //属性为Map类型</span><br><span class="line">    else if (Map.class.isAssignableFrom(type) &amp;&amp; type.isInterface()) &#123;</span><br><span class="line">        Class&lt;?&gt; keyType = descriptor.getMapKeyType();</span><br><span class="line">        if (keyType == null || !String.class.isAssignableFrom(keyType)) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;Key type [&quot; + keyType + &quot;] of map [&quot; + type.getName() +</span><br><span class="line">                        &quot;] must be assignable to [java.lang.String]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; valueType = descriptor.getMapValueType();</span><br><span class="line">        if (valueType == null) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;No value type declared for map [&quot; + type.getName() + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor);</span><br><span class="line">        targetDesc.increaseNestingLevel();</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, valueType, targetDesc);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(valueType, &quot;map with value type &quot; + valueType.getName(), descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.addAll(matchingBeans.keySet());</span><br><span class="line">        &#125;</span><br><span class="line">        //返回符合条件的bean和类对象</span><br><span class="line">        return matchingBeans;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</span><br><span class="line">        if (matchingBeans.isEmpty()) &#123;</span><br><span class="line">            if (descriptor.isRequired()) &#123;</span><br><span class="line">                raiseNoSuchBeanDefinitionException(type, &quot;&quot;, descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //多个bean符合类型要求</span><br><span class="line">        if (matchingBeans.size() &gt; 1) &#123;</span><br><span class="line">            //依次根据Primary属性、priority属性、bean的名字去确定唯一的bean</span><br><span class="line">            String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor);</span><br><span class="line">            if (primaryBeanName == null) &#123;</span><br><span class="line">                throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet());</span><br><span class="line">            &#125;</span><br><span class="line">            if (autowiredBeanNames != null) &#123;</span><br><span class="line">                autowiredBeanNames.add(primaryBeanName);</span><br><span class="line">            &#125;</span><br><span class="line">            //返回匹配的bean</span><br><span class="line">            return matchingBeans.get(primaryBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        // We have exactly one match.</span><br><span class="line">        Map.Entry&lt;String, Object&gt; entry = matchingBeans.entrySet().iterator().next();</span><br><span class="line">        if (autowiredBeanNames != null) &#123;</span><br><span class="line">            autowiredBeanNames.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        //返回唯一的bean</span><br><span class="line">        return entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法"><a href="#23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法" class="headerlink" title="23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法"></a>23、接（一、18）AbstractAutowireCapableBeanFactory的applyPropertyValues方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) &#123;</span><br><span class="line">    if (pvs == null || pvs.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MutablePropertyValues mpvs = null;</span><br><span class="line">    List&lt;PropertyValue&gt; original;</span><br><span class="line"></span><br><span class="line">    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">        if (bw instanceof BeanWrapperImpl) &#123;</span><br><span class="line">            ((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (pvs instanceof MutablePropertyValues) &#123;</span><br><span class="line">        mpvs = (MutablePropertyValues) pvs;</span><br><span class="line">        //mpvs中的值已被转换为对应的类型</span><br><span class="line">        if (mpvs.isConverted()) &#123;</span><br><span class="line">            // Shortcut: use the pre-converted values as-is.</span><br><span class="line">            try &#123;</span><br><span class="line">                //属性值设置到bean中</span><br><span class="line">                bw.setPropertyValues(mpvs);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (BeansException ex) &#123;</span><br><span class="line">                throw new BeanCreationException(</span><br><span class="line">                        mbd.getResourceDescription(), beanName, &quot;Error setting property values&quot;, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //原始属性</span><br><span class="line">        original = mpvs.getPropertyValueList();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //原始属性</span><br><span class="line">        original = Arrays.asList(pvs.getPropertyValues());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    if (converter == null) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取对应的解析器</span><br><span class="line">    BeanDefinitionValueResolver valueResolver = new BeanDefinitionValueResolver(this, beanName, mbd, converter);</span><br><span class="line"></span><br><span class="line">    // Create a deep copy, resolving any references for values.</span><br><span class="line">    List&lt;PropertyValue&gt; deepCopy = new ArrayList&lt;PropertyValue&gt;(original.size());</span><br><span class="line">    boolean resolveNecessary = false;</span><br><span class="line">    //将属性转换为对应的属性类型</span><br><span class="line">    for (PropertyValue pv : original) &#123;</span><br><span class="line">        if (pv.isConverted()) &#123;</span><br><span class="line">            deepCopy.add(pv);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            String propertyName = pv.getName();</span><br><span class="line">            Object originalValue = pv.getValue();</span><br><span class="line">            //解析属性值</span><br><span class="line">            Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class="line">            Object convertedValue = resolvedValue;</span><br><span class="line">            boolean convertible = bw.isWritableProperty(propertyName) &amp;&amp;</span><br><span class="line">                    !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</span><br><span class="line">            if (convertible) &#123;</span><br><span class="line">                convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</span><br><span class="line">            &#125;</span><br><span class="line">            // Possibly store converted value in merged bean definition,</span><br><span class="line">            // in order to avoid re-conversion for every created bean instance.</span><br><span class="line">            if (resolvedValue == originalValue) &#123;</span><br><span class="line">                if (convertible) &#123;</span><br><span class="line">                    pv.setConvertedValue(convertedValue);</span><br><span class="line">                &#125;</span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (convertible &amp;&amp; originalValue instanceof TypedStringValue &amp;&amp;</span><br><span class="line">                    !((TypedStringValue) originalValue).isDynamic() &amp;&amp;</span><br><span class="line">                    !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) &#123;</span><br><span class="line">                pv.setConvertedValue(convertedValue);</span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                resolveNecessary = true;</span><br><span class="line">                deepCopy.add(new PropertyValue(pv, convertedValue));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mpvs != null &amp;&amp; !resolveNecessary) &#123;</span><br><span class="line">        mpvs.setConverted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Set our (possibly massaged) deep copy.</span><br><span class="line">    try &#123;</span><br><span class="line">        //设置属性值</span><br><span class="line">        bw.setPropertyValues(new MutablePropertyValues(deepCopy));</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeansException ex) &#123;</span><br><span class="line">        throw new BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, &quot;Error setting property values&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法"><a href="#24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法" class="headerlink" title="24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法"></a>24、接（一、11）AbstractAutowireCapableBeanFactory的initializeBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">    if (System.getSecurityManager() != null) &#123;</span><br><span class="line">        AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object run() &#123;</span><br><span class="line">                invokeAwareMethods(beanName, bean);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //处理特殊的bean，BeanNameAware、BeanClassLoaderAware、BeanFactoryAware</span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">        //应用初始化前处理器</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //用户自定义初始化方法，如InitializingBean接口afterPropertiesSet方法、init-method方法</span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanCreationException(</span><br><span class="line">                (mbd != null ? mbd.getResourceDescription() : null),</span><br><span class="line">                beanName, &quot;Invocation of init method failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mbd == null || !mbd.isSynthetic()) &#123;</span><br><span class="line">        //应用初始化后处理器</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    return wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法"><a href="#25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法" class="headerlink" title="25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法"></a>25、接（一、11）AbstractAutowireCapableBeanFactory的registerDisposableBeanIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">    AccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);</span><br><span class="line">    if (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;</span><br><span class="line">        if (mbd.isSingleton()) &#123;</span><br><span class="line">            // Register a DisposableBean implementation that performs all destruction</span><br><span class="line">            // work for the given bean: DestructionAwareBeanPostProcessors,</span><br><span class="line">            // DisposableBean interface, custom destroy method.</span><br><span class="line">            //单例模式，注册bean销毁时的回调</span><br><span class="line">            //销毁时会调用DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</span><br><span class="line">            //DisposableBean的destroy方法、destory-method方法</span><br><span class="line">            registerDisposableBean(beanName,</span><br><span class="line">                    new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // A bean with a custom scope...</span><br><span class="line">            Scope scope = this.scopes.get(mbd.getScope());</span><br><span class="line">            if (scope == null) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;No Scope registered for scope &apos;&quot; + mbd.getScope() + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //在scope中，注册bean销毁时的回调</span><br><span class="line">            //销毁时会调用DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</span><br><span class="line">            //DisposableBean的destroy方法、destory-method方法</span><br><span class="line">            scope.registerDestructionCallback(beanName,</span><br><span class="line">                    new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、bean销毁"><a href="#二、bean销毁" class="headerlink" title="二、bean销毁"></a>二、bean销毁</h3><h4 id="1、DefaultListableBeanFactory的destroySingletons方法"><a href="#1、DefaultListableBeanFactory的destroySingletons方法" class="headerlink" title="1、DefaultListableBeanFactory的destroySingletons方法"></a>1、DefaultListableBeanFactory的destroySingletons方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void destroySingletons() &#123;</span><br><span class="line">    super.destroySingletons();</span><br><span class="line">    //清除注册bean</span><br><span class="line">    this.manualSingletonNames.clear();</span><br><span class="line">    //清除缓存</span><br><span class="line">    clearByTypeCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultSingletonBeanRegistry的destroySingletons方法"><a href="#2、DefaultSingletonBeanRegistry的destroySingletons方法" class="headerlink" title="2、DefaultSingletonBeanRegistry的destroySingletons方法"></a>2、DefaultSingletonBeanRegistry的destroySingletons方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void destroySingletons() &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Destroying singletons in &quot; + this);</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        this.singletonsCurrentlyInDestruction = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] disposableBeanNames;</span><br><span class="line">    synchronized (this.disposableBeans) &#123;</span><br><span class="line">        //待销毁的beanName</span><br><span class="line">        disposableBeanNames = StringUtils.toStringArray(this.disposableBeans.keySet());</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = disposableBeanNames.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        //销毁bean</span><br><span class="line">        destroySingleton(disposableBeanNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    //清除</span><br><span class="line">    this.containedBeanMap.clear();</span><br><span class="line">    this.dependentBeanMap.clear();</span><br><span class="line">    this.dependenciesForBeanMap.clear();</span><br><span class="line"></span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        this.singletonObjects.clear();</span><br><span class="line">        this.singletonFactories.clear();</span><br><span class="line">        this.earlySingletonObjects.clear();</span><br><span class="line">        this.registeredSingletons.clear();</span><br><span class="line">        this.singletonsCurrentlyInDestruction = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultSingletonBeanRegistry的destroySingleton方法"><a href="#3、DefaultSingletonBeanRegistry的destroySingleton方法" class="headerlink" title="3、DefaultSingletonBeanRegistry的destroySingleton方法"></a>3、DefaultSingletonBeanRegistry的destroySingleton方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void destroySingleton(String beanName) &#123;</span><br><span class="line">    // Remove a registered singleton of the given name, if any.</span><br><span class="line">    //删除该bean</span><br><span class="line">    removeSingleton(beanName);</span><br><span class="line"></span><br><span class="line">    // Destroy the corresponding DisposableBean instance.</span><br><span class="line">    DisposableBean disposableBean;</span><br><span class="line">    synchronized (this.disposableBeans) &#123;</span><br><span class="line">        //删除该bean的销毁回调函数</span><br><span class="line">        disposableBean = (DisposableBean) this.disposableBeans.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    //执行销毁方法</span><br><span class="line">    destroyBean(beanName, disposableBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultSingletonBeanRegistry的destroyBean方法"><a href="#4、DefaultSingletonBeanRegistry的destroyBean方法" class="headerlink" title="4、DefaultSingletonBeanRegistry的destroyBean方法"></a>4、DefaultSingletonBeanRegistry的destroyBean方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">protected void destroyBean(String beanName, DisposableBean bean) &#123;</span><br><span class="line">    // Trigger destruction of dependent beans first...</span><br><span class="line">    //销毁依赖该bean的bean</span><br><span class="line">    Set&lt;String&gt; dependencies = this.dependentBeanMap.remove(beanName);</span><br><span class="line">    if (dependencies != null) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Retrieved dependent beans for bean &apos;&quot; + beanName + &quot;&apos;: &quot; + dependencies);</span><br><span class="line">        &#125;</span><br><span class="line">        for (String dependentBeanName : dependencies) &#123;</span><br><span class="line">            destroySingleton(dependentBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Actually destroy the bean now...</span><br><span class="line">    if (bean != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //销毁bean</span><br><span class="line">            bean.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            logger.error(&quot;Destroy method on bean with name &apos;&quot; + beanName + &quot;&apos; threw an exception&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Trigger destruction of contained beans...</span><br><span class="line">    //销毁该bean拥有的bean</span><br><span class="line">    Set&lt;String&gt; containedBeans = this.containedBeanMap.remove(beanName);</span><br><span class="line">    if (containedBeans != null) &#123;</span><br><span class="line">        for (String containedBeanName : containedBeans) &#123;</span><br><span class="line">            destroySingleton(containedBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Remove destroyed bean from other beans&apos; dependencies.</span><br><span class="line">    //删除注册的依赖</span><br><span class="line">    synchronized (this.dependentBeanMap) &#123;</span><br><span class="line">        for (Iterator&lt;Map.Entry&lt;String, Set&lt;String&gt;&gt;&gt; it = this.dependentBeanMap.entrySet().iterator(); it.hasNext();) &#123;</span><br><span class="line">            Map.Entry&lt;String, Set&lt;String&gt;&gt; entry = it.next();</span><br><span class="line">            Set&lt;String&gt; dependenciesToClean = entry.getValue();</span><br><span class="line">            dependenciesToClean.remove(beanName);</span><br><span class="line">            if (dependenciesToClean.isEmpty()) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Remove destroyed bean&apos;s prepared dependency information.</span><br><span class="line">    this.dependenciesForBeanMap.remove(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DisposableBeanAdapter的destroy方法"><a href="#5、DisposableBeanAdapter的destroy方法" class="headerlink" title="5、DisposableBeanAdapter的destroy方法"></a>5、DisposableBeanAdapter的destroy方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line">    //应用DestructionAwareBeanPostProcessor</span><br><span class="line">    if (this.beanPostProcessors != null &amp;&amp; !this.beanPostProcessors.isEmpty()) &#123;</span><br><span class="line">        for (DestructionAwareBeanPostProcessor processor : this.beanPostProcessors) &#123;</span><br><span class="line">            processor.postProcessBeforeDestruction(this.bean, this.beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.invokeDisposableBean) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Invoking destroy() on bean with name &apos;&quot; + this.beanName + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (System.getSecurityManager() != null) &#123;</span><br><span class="line">                AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Object&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object run() throws Exception &#123;</span><br><span class="line">                        ((DisposableBean) bean).destroy();</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, acc);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                //执行destroy方法</span><br><span class="line">                ((DisposableBean) bean).destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            String msg = &quot;Invocation of destroy method failed on bean with name &apos;&quot; + this.beanName + &quot;&apos;&quot;;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.warn(msg, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                logger.warn(msg + &quot;: &quot; + ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //自定义的destory-method方法</span><br><span class="line">    if (this.destroyMethod != null) &#123;</span><br><span class="line">        invokeCustomDestroyMethod(this.destroyMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (this.destroyMethodName != null) &#123;</span><br><span class="line">        Method methodToCall = determineDestroyMethod();</span><br><span class="line">        if (methodToCall != null) &#123;</span><br><span class="line">            invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、bean加载&quot;&gt;&lt;a href=&quot;#一、bean加载&quot; class=&quot;headerlink&quot; title=&quot;一、bean加载&quot;&gt;&lt;/a&gt;一、bean加载&lt;/h3&gt;&lt;h4 id=&quot;1、AbstractBeanFactory的getBean方法&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码XmlBeanFactory(1)</title>
    <link href="http://yoursite.com/2018/06/27/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81XmlBeanFactory(1)/"/>
    <id>http://yoursite.com/2018/06/27/spring源码/spring源码XmlBeanFactory(1)/</id>
    <published>2018-06-27T13:10:29.031Z</published>
    <updated>2018-07-07T15:10:07.657Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">   </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //step1: 读取spring的xml   （spring核心的是BeanFactory）</span><br><span class="line">        // 把资源文件封装为Spring的Resource</span><br><span class="line">        // spring把资源文件封装成统一的Resource进行管理，和提供一些基本的方法。</span><br><span class="line">        Resource resource = new ClassPathResource(&quot;spring-demo.xml&quot;);</span><br><span class="line"></span><br><span class="line">        // 加载资源文件，把xml中的bean definition注册到：1.把Resource再次封装为EncodedResource</span><br><span class="line">        XmlBeanFactory factory = new XmlBeanFactory(resource);</span><br><span class="line">        Demo0102Bean bean = (Demo) factory.getBean(&quot;demo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、xml文件读取"><a href="#一、xml文件读取" class="headerlink" title="一、xml文件读取"></a>一、xml文件读取</h3><h4 id="1、实例化XmlBeanFactory"><a href="#1、实例化XmlBeanFactory" class="headerlink" title="1、实例化XmlBeanFactory"></a>1、实例化XmlBeanFactory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public XmlBeanFactory(Resource resource) throws BeansException &#123;</span><br><span class="line">    this(resource, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public XmlBeanFactory(Resource resource, BeanFactory parentBeanFactory) throws BeansException &#123;</span><br><span class="line">    super(parentBeanFactory);</span><br><span class="line">    this.reader.loadBeanDefinitions(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、XmlBeanDefinitionReader的loadBeanDefinitions方法"><a href="#2、XmlBeanDefinitionReader的loadBeanDefinitions方法" class="headerlink" title="2、XmlBeanDefinitionReader的loadBeanDefinitions方法"></a>2、XmlBeanDefinitionReader的loadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    return loadBeanDefinitions(new EncodedResource(resource));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    Assert.notNull(encodedResource, &quot;EncodedResource must not be null&quot;);</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Loading XML bean definitions from &quot; + encodedResource.getResource());</span><br><span class="line">    &#125;</span><br><span class="line">    //记录已加载的资源</span><br><span class="line">    Set&lt;EncodedResource&gt; currentResources = this.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">    if (currentResources == null) &#123;</span><br><span class="line">        currentResources = new HashSet&lt;EncodedResource&gt;(4);</span><br><span class="line">        this.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(</span><br><span class="line">                &quot;Detected cyclic loading of &quot; + encodedResource + &quot; - check your import definitions!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取输入流</span><br><span class="line">        InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">        try &#123;</span><br><span class="line">            InputSource inputSource = new InputSource(inputStream);</span><br><span class="line">            if (encodedResource.getEncoding() != null) &#123;</span><br><span class="line">                inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">            &#125;</span><br><span class="line">            //读取xml</span><br><span class="line">            return doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(</span><br><span class="line">                &quot;IOException parsing XML document from &quot; + encodedResource.getResource(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        currentResources.remove(encodedResource);</span><br><span class="line">        if (currentResources.isEmpty()) &#123;</span><br><span class="line">            this.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法"><a href="#3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法" class="headerlink" title="3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法"></a>3、XmlBeanDefinitionReader的doLoadBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //xml读取为Document</span><br><span class="line">        Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">        //解析配置文件</span><br><span class="line">        return registerBeanDefinitions(doc, resource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SAXParseException ex) &#123;</span><br><span class="line">        throw new XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Line &quot; + ex.getLineNumber() + &quot; in XML document from &quot; + resource + &quot; is invalid&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SAXException ex) &#123;</span><br><span class="line">        throw new XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;XML document from &quot; + resource + &quot; is invalid&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ParserConfigurationException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Parser configuration exception parsing XML from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;IOException parsing XML document from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">                &quot;Unexpected exception parsing XML document from &quot; + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、XmlBeanDefinitionReader的doLoadDocument方法"><a href="#4、XmlBeanDefinitionReader的doLoadDocument方法" class="headerlink" title="4、XmlBeanDefinitionReader的doLoadDocument方法"></a>4、XmlBeanDefinitionReader的doLoadDocument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected Document doLoadDocument(InputSource inputSource, Resource resource) throws Exception &#123;</span><br><span class="line">    return this.documentLoader.loadDocument(inputSource, getEntityResolver(), this.errorHandler,</span><br><span class="line">            getValidationModeForResource(resource), isNamespaceAware());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、XmlBeanDefinitionReader的getValidationModeForResource方法"><a href="#5、XmlBeanDefinitionReader的getValidationModeForResource方法" class="headerlink" title="5、XmlBeanDefinitionReader的getValidationModeForResource方法"></a>5、XmlBeanDefinitionReader的getValidationModeForResource方法</h4><p>获取xml验证模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected int getValidationModeForResource(Resource resource) &#123;</span><br><span class="line">    int validationModeToUse = getValidationMode();</span><br><span class="line">    //优先使用指定的验证模式</span><br><span class="line">    if (validationModeToUse != VALIDATION_AUTO) &#123;</span><br><span class="line">        return validationModeToUse;</span><br><span class="line">    &#125;</span><br><span class="line">    //自动检测，查看配置文件是否包含DOCTYPE，包含则为DTD，不包含则为XSD</span><br><span class="line">    int detectedMode = detectValidationMode(resource);</span><br><span class="line">    if (detectedMode != VALIDATION_AUTO) &#123;</span><br><span class="line">        return detectedMode;</span><br><span class="line">    &#125;</span><br><span class="line">    //默认XSD</span><br><span class="line">    return VALIDATION_XSD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法"><a href="#6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法" class="headerlink" title="6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法"></a>6、接（一、4）XmlBeanDefinitionReader的getEntityResolver方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected EntityResolver getEntityResolver() &#123;</span><br><span class="line">    if (this.entityResolver == null) &#123;</span><br><span class="line">        // Determine default EntityResolver to use.</span><br><span class="line">        ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">        if (resourceLoader != null) &#123;</span><br><span class="line">            this.entityResolver = new ResourceEntityResolver(resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //默认的EntityResolver</span><br><span class="line">            this.entityResolver = new DelegatingEntityResolver(getBeanClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.entityResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、XmlBeanDefinitionReader的resolveEntity方法"><a href="#7、XmlBeanDefinitionReader的resolveEntity方法" class="headerlink" title="7、XmlBeanDefinitionReader的resolveEntity方法"></a>7、XmlBeanDefinitionReader的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException &#123;</span><br><span class="line">    if (systemId != null) &#123;</span><br><span class="line">        if (systemId.endsWith(DTD_SUFFIX)) &#123;</span><br><span class="line">            //解析dtd</span><br><span class="line">            return this.dtdResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (systemId.endsWith(XSD_SUFFIX)) &#123;</span><br><span class="line">            //解析xsd</span><br><span class="line">            return this.schemaResolver.resolveEntity(publicId, systemId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、BeansDtdResolver的resolveEntity方法"><a href="#8、BeansDtdResolver的resolveEntity方法" class="headerlink" title="8、BeansDtdResolver的resolveEntity方法"></a>8、BeansDtdResolver的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//publicId -//SPRING//DTD BEAN//EN</span><br><span class="line">//systemId http://www.springframework.org/dtd/spring-beans.dtd</span><br><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws IOException &#123;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Trying to resolve XML entity with public ID [&quot; + publicId +</span><br><span class="line">                &quot;] and system ID [&quot; + systemId + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (systemId != null &amp;&amp; systemId.endsWith(DTD_EXTENSION)) &#123;</span><br><span class="line">        int lastPathSeparator = systemId.lastIndexOf(&quot;/&quot;);</span><br><span class="line">        int dtdNameStart = systemId.indexOf(DTD_NAME);</span><br><span class="line">        if (dtdNameStart &gt; lastPathSeparator) &#123;</span><br><span class="line">            //spring-beans-2.0.dtd</span><br><span class="line">            String dtdFile = DTD_FILENAME + DTD_EXTENSION;</span><br><span class="line">            if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(&quot;Trying to locate [&quot; + dtdFile + &quot;] in Spring jar on classpath&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                Resource resource = new ClassPathResource(dtdFile, getClass());</span><br><span class="line">                InputSource source = new InputSource(resource.getInputStream());</span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Found beans DTD [&quot; + systemId + &quot;] in classpath: &quot; + dtdFile);</span><br><span class="line">                &#125;</span><br><span class="line">                return source;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IOException ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Could not resolve beans DTD [&quot; + systemId + &quot;]: not found in classpath&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Use the default behavior -&gt; download from website or wherever.</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（一、6）PluggableSchemaResolver的resolveEntity方法"><a href="#9、接（一、6）PluggableSchemaResolver的resolveEntity方法" class="headerlink" title="9、接（一、6）PluggableSchemaResolver的resolveEntity方法"></a>9、接（一、6）PluggableSchemaResolver的resolveEntity方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//publicId null</span><br><span class="line">//systemId http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class="line">@Override</span><br><span class="line">public InputSource resolveEntity(String publicId, String systemId) throws IOException &#123;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Trying to resolve XML entity with public id [&quot; + publicId +</span><br><span class="line">                &quot;] and system id [&quot; + systemId + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (systemId != null) &#123;</span><br><span class="line">        //从META-INF/spring.schemas中获取验证文件位置,org/springframework/beans/factory/xml/spring-beans-4.0.xsd</span><br><span class="line">        String resourceLocation = getSchemaMappings().get(systemId);</span><br><span class="line">        if (resourceLocation != null) &#123;</span><br><span class="line">            Resource resource = new ClassPathResource(resourceLocation, this.classLoader);</span><br><span class="line">            try &#123;</span><br><span class="line">                InputSource source = new InputSource(resource.getInputStream());</span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Found XML schema [&quot; + systemId + &quot;] in classpath: &quot; + resourceLocation);</span><br><span class="line">                &#125;</span><br><span class="line">                return source;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (FileNotFoundException ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Couldn&apos;t find XML schema [&quot; + systemId + &quot;]: &quot; + resource, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、默认标签解析"><a href="#二、默认标签解析" class="headerlink" title="二、默认标签解析"></a>二、默认标签解析</h3><h4 id="1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法"><a href="#1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法" class="headerlink" title="1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法"></a>1、接（一、3）XmlBeanDefinitionReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="line">public int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    //获取解析器默认DefaultBeanDefinitionDocumentReader</span><br><span class="line">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    documentReader.setEnvironment(getEnvironment());</span><br><span class="line">    int countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    //解析xml</span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    return getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"><a href="#2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法" class="headerlink" title="2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"></a>2、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) &#123;</span><br><span class="line">    this.readerContext = readerContext;</span><br><span class="line">    logger.debug(&quot;Loading bean definitions&quot;);</span><br><span class="line">    Element root = doc.getDocumentElement();</span><br><span class="line">    //解析xml</span><br><span class="line">    doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"><a href="#3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法" class="headerlink" title="3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法"></a>3、DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void doRegisterBeanDefinitions(Element root) &#123;</span><br><span class="line">    //标签的处理器</span><br><span class="line">    BeanDefinitionParserDelegate parent = this.delegate;</span><br><span class="line">    //默认为BeanDefinitionParserDelegate</span><br><span class="line">    this.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line">    //处理profile属性，只能是默认标签</span><br><span class="line">    if (this.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">        //当前beans为profile文件</span><br><span class="line">        if (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">                    profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">            //profile不是激活文件，则不处理该beans</span><br><span class="line">            if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析前处理，留给子类实现</span><br><span class="line">    preProcessXml(root);</span><br><span class="line">    //处理当前beans</span><br><span class="line">    parseBeanDefinitions(root, this.delegate);</span><br><span class="line">    //解析后处理，留给子类实现</span><br><span class="line">    postProcessXml(root);</span><br><span class="line"></span><br><span class="line">    this.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法"><a href="#4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法" class="headerlink" title="4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法"></a>4、DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //根标签为默认标签</span><br><span class="line">    if (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        NodeList nl = root.getChildNodes();</span><br><span class="line">        for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            if (node instanceof Element) &#123;</span><br><span class="line">                Element ele = (Element) node;</span><br><span class="line">                if (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">                    //解析默认标签</span><br><span class="line">                    parseDefaultElement(ele, delegate);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    //解析自定义标签</span><br><span class="line">                    delegate.parseCustomElement(ele);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //解析自定义标签</span><br><span class="line">        delegate.parseCustomElement(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法"><a href="#5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法" class="headerlink" title="5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法"></a>5、DefaultBeanDefinitionDocumentReader的parseDefaultElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //处理import标签</span><br><span class="line">    if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">        importBeanDefinitionResource(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理alias标签</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">        processAliasRegistration(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理bean标签</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">        processBeanDefinition(ele, delegate);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理beans标签,递归调用(二、4)</span><br><span class="line">    else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">        // recurse</span><br><span class="line">        doRegisterBeanDefinitions(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法"><a href="#6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法" class="headerlink" title="6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法"></a>6、DefaultBeanDefinitionDocumentReader的processBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">    //解析元素</span><br><span class="line">    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">    if (bdHolder != null) &#123;</span><br><span class="line">        //解析子节点下的自定义属性和标签</span><br><span class="line">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册bdHolder</span><br><span class="line">            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to register bean definition with name &apos;&quot; +</span><br><span class="line">                    bdHolder.getBeanName() + &quot;&apos;&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        // Send registration event.</span><br><span class="line">        //向监听器发送，该bean注册完成事件</span><br><span class="line">        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"><a href="#7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法" class="headerlink" title="7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"></a>7、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) &#123;</span><br><span class="line">    return parseBeanDefinitionElement(ele, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) &#123;</span><br><span class="line">    //获取id属性</span><br><span class="line">    String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">    //获取name属性</span><br><span class="line">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    //处理别名</span><br><span class="line">    List&lt;String&gt; aliases = new ArrayList&lt;String&gt;();</span><br><span class="line">    if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">        aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">    &#125;</span><br><span class="line">    //beanName默认为id</span><br><span class="line">    String beanName = id;</span><br><span class="line">    if (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">        beanName = aliases.remove(0);</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;No XML &apos;id&apos; specified - using &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos; as bean name and &quot; + aliases + &quot; as aliases&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //不是嵌套bean，检查是否重名</span><br><span class="line">    if (containingBean == null) &#123;</span><br><span class="line">        checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析bean的子标签</span><br><span class="line">    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">    if (beanDefinition != null) &#123;</span><br><span class="line">        //没有beanName则生成一个，不是嵌套bean，默认获取全类名。与注解容器中不同。</span><br><span class="line">        if (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (containingBean != null) &#123;</span><br><span class="line">                    beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                            beanDefinition, this.readerContext.getRegistry(), true);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    beanName = this.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">                    // Register an alias for the plain bean class name, if still possible,</span><br><span class="line">                    // if the generator returned the class name plus a suffix.</span><br><span class="line">                    // This is expected for Spring 1.2/2.0 backwards compatibility.</span><br><span class="line">                    String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">                    if (beanClassName != null &amp;&amp;</span><br><span class="line">                            beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                            !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                        aliases.add(beanClassName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Neither XML &apos;id&apos; nor &apos;name&apos; specified - &quot; +</span><br><span class="line">                            &quot;using generated bean name [&quot; + beanName + &quot;]&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex) &#123;</span><br><span class="line">                error(ex.getMessage(), ele);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">        //beanDefinition放入BeanDefinitionHolder中，并返回</span><br><span class="line">        return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"><a href="#8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法" class="headerlink" title="8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法"></a>8、BeanDefinitionParserDelegate的parseBeanDefinitionElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public AbstractBeanDefinition parseBeanDefinitionElement(</span><br><span class="line">        Element ele, String beanName, BeanDefinition containingBean) &#123;</span><br><span class="line"></span><br><span class="line">    this.parseState.push(new BeanEntry(beanName));</span><br><span class="line">    //解析class属性</span><br><span class="line">    String className = null;</span><br><span class="line">    if (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //解析parent属性</span><br><span class="line">        String parent = null;</span><br><span class="line">        if (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">            parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建用于存放属性的AbstractBeanDefinition，默认为GenericBeanDefinition</span><br><span class="line">        AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">        //解析bean的各个属性</span><br><span class="line">        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">        //设置描述</span><br><span class="line">        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line">        //解析元数据</span><br><span class="line">        parseMetaElements(ele, bd);</span><br><span class="line">        //解析lookup-method属性</span><br><span class="line">        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        //解析replaced-method属性</span><br><span class="line">        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        //解析构造函数参数</span><br><span class="line">        parseConstructorArgElements(ele, bd);</span><br><span class="line">        //解析property子元素</span><br><span class="line">        parsePropertyElements(ele, bd);</span><br><span class="line">        //解析qualifier子元素</span><br><span class="line">        parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">        bd.setResource(this.readerContext.getResource());</span><br><span class="line">        bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">        return bd;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ClassNotFoundException ex) &#123;</span><br><span class="line">        error(&quot;Bean class [&quot; + className + &quot;] not found&quot;, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (NoClassDefFoundError err) &#123;</span><br><span class="line">        error(&quot;Class that bean class [&quot; + className + &quot;] depends on not found&quot;, ele, err);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        error(&quot;Unexpected failure during bean definition parsing&quot;, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法"><a href="#9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法" class="headerlink" title="9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法"></a>9、BeanDefinitionParserDelegate的parseBeanDefinitionAttributes方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,</span><br><span class="line">        BeanDefinition containingBean, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    //不支持singleton属性</span><br><span class="line">    if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</span><br><span class="line">        error(&quot;Old 1.x &apos;singleton&apos; attribute in use - upgrade to &apos;scope&apos; declaration&quot;, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析scope属性</span><br><span class="line">    else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    //嵌套bean，使用外部类的scope</span><br><span class="line">    else if (containingBean != null) &#123;</span><br><span class="line">        // Take default from containing bean in case of an inner bean definition.</span><br><span class="line">        bd.setScope(containingBean.getScope());</span><br><span class="line">    &#125;</span><br><span class="line">    //解析abstract属性</span><br><span class="line">    if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析lazy-init属性</span><br><span class="line">    String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE);</span><br><span class="line">    if (DEFAULT_VALUE.equals(lazyInit)) &#123;</span><br><span class="line">        lazyInit = this.defaults.getLazyInit();</span><br><span class="line">    &#125;</span><br><span class="line">    bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span><br><span class="line">    //解析autowire属性</span><br><span class="line">    String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE);</span><br><span class="line">    bd.setAutowireMode(getAutowireMode(autowire));</span><br><span class="line">    //解析dependency-check属性</span><br><span class="line">    String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE);</span><br><span class="line">    bd.setDependencyCheck(getDependencyCheck(dependencyCheck));</span><br><span class="line">    //解析depends-on属性</span><br><span class="line">    if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</span><br><span class="line">        String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE);</span><br><span class="line">        bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析autowire-candidate属性</span><br><span class="line">    String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE);</span><br><span class="line">    if (&quot;&quot;.equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) &#123;</span><br><span class="line">        String candidatePattern = this.defaults.getAutowireCandidates();</span><br><span class="line">        if (candidatePattern != null) &#123;</span><br><span class="line">            String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern);</span><br><span class="line">            bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析primary属性</span><br><span class="line">    if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析init-method属性</span><br><span class="line">    if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE);</span><br><span class="line">        if (!&quot;&quot;.equals(initMethodName)) &#123;</span><br><span class="line">            bd.setInitMethodName(initMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (this.defaults.getInitMethod() != null) &#123;</span><br><span class="line">            bd.setInitMethodName(this.defaults.getInitMethod());</span><br><span class="line">            bd.setEnforceInitMethod(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析destroy-method属性</span><br><span class="line">    if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE);</span><br><span class="line">        if (!&quot;&quot;.equals(destroyMethodName)) &#123;</span><br><span class="line">            bd.setDestroyMethodName(destroyMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (this.defaults.getDestroyMethod() != null) &#123;</span><br><span class="line">            bd.setDestroyMethodName(this.defaults.getDestroyMethod());</span><br><span class="line">            bd.setEnforceDestroyMethod(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析factory-method属性</span><br><span class="line">    if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    //解析factory-bean属性</span><br><span class="line">    if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return bd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法"><a href="#10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法" class="headerlink" title="10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法"></a>10、接（二、8）BeanDefinitionParserDelegate的parseMetaElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void parseMetaElements(Element ele, BeanMetadataAttributeAccessor attributeAccessor) &#123;</span><br><span class="line">    NodeList nl = ele.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //该元素为meta</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">            Element metaElement = (Element) node;</span><br><span class="line">            String key = metaElement.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">            String value = metaElement.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">            BeanMetadataAttribute attribute = new BeanMetadataAttribute(key, value);</span><br><span class="line">            attribute.setSource(extractSource(metaElement));</span><br><span class="line">            //放入父类AttributeAccessorSupport的attributes中</span><br><span class="line">            attributeAccessor.addMetadataAttribute(attribute);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元数据配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;demo&quot; class=&quot;com.demo.Demo&quot;&gt;</span><br><span class="line">    &lt;meta key=&quot;testStr&quot; value=&quot;123456&quot; /&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法"><a href="#11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法" class="headerlink" title="11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法"></a>11、接（二、8）BeanDefinitionParserDelegate的parseLookupOverrideSubElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //元素为lookup-method</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            String methodName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">            String beanRef = ele.getAttribute(BEAN_ELEMENT);</span><br><span class="line">            //创建一个LookupOverride加入AbstractBeanDefinition的methodOverrides中</span><br><span class="line">            LookupOverride override = new LookupOverride(methodName, beanRef);</span><br><span class="line">            override.setSource(extractSource(ele));</span><br><span class="line">            overrides.addOverride(override);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lookup-method配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个水果类</span><br><span class="line">public class Fruit &#123;</span><br><span class="line">    public Fruit() &#123;</span><br><span class="line">        System.out.println(&quot;I got Fruit&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 苹果</span><br><span class="line">public class Apple extends Fruit &#123;</span><br><span class="line">    public Apple() &#123;</span><br><span class="line">        System.out.println(&quot;I got a fresh apple&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 香蕉</span><br><span class="line">public class Bananer extends Fruit &#123;</span><br><span class="line">    public Bananer () &#123;</span><br><span class="line">        System.out.println(&quot;I got a  fresh bananer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 水果盘，可以拿到水果</span><br><span class="line">public abstract class FruitPlate&#123;</span><br><span class="line">    // 抽象方法获取新鲜水果</span><br><span class="line">    protected abstract Fruit getFruit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;apple&quot; class=&quot;cn.com.willchen.test.di.Apple&quot; scope=&quot;prototype&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;bananer&quot; class=&quot;cn.com.willchen.test.di.Bananer &quot; scope=&quot;prototype&quot;/&gt;</span><br><span class="line">&lt;!-- getFruit方法返回apple --&gt;</span><br><span class="line">&lt;bean id=&quot;fruitPlate1&quot; class=&quot;cn.com.willchen.test.di.FruitPlate&quot;&gt;</span><br><span class="line">    &lt;lookup-method name=&quot;getFruit&quot; bean=&quot;apple&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- getFruit方法返回bananer --&gt;</span><br><span class="line">&lt;bean id=&quot;fruitPlate2&quot; class=&quot;cn.com.willchen.test.di.FruitPlate&quot;&gt;</span><br><span class="line">    &lt;lookup-method name=&quot;getFruit&quot; bean=&quot;bananer&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法"><a href="#12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法" class="headerlink" title="12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法"></a>12、接（二、8）BeanDefinitionParserDelegate的parseReplacedMethodSubElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //元素为replaced-method</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) &#123;</span><br><span class="line">            Element replacedMethodEle = (Element) node;</span><br><span class="line">            //要替换的旧的方法</span><br><span class="line">            String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">            //替代该方法的类</span><br><span class="line">            String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE);</span><br><span class="line">            ReplaceOverride replaceOverride = new ReplaceOverride(name, callback);</span><br><span class="line">            // Look for arg-type match elements.</span><br><span class="line">            //记录参数</span><br><span class="line">            List&lt;Element&gt; argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT);</span><br><span class="line">            for (Element argTypeEle : argTypeEles) &#123;</span><br><span class="line">                String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE);</span><br><span class="line">                match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle));</span><br><span class="line">                if (StringUtils.hasText(match)) &#123;</span><br><span class="line">                    replaceOverride.addTypeIdentifier(match);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            replaceOverride.setSource(extractSource(replacedMethodEle));</span><br><span class="line">            //添加到AbstractBeanDefinition的methodOverrides中</span><br><span class="line">            overrides.addOverride(replaceOverride);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>replaced-method配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class TestChangMethod&#123;</span><br><span class="line">    public void changMe()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">public class TestMethodReplacer implements MethodReplacer&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object reimplements(Object obj,Method method,Object[] args) throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;我替换了原有的方法&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;testChangeMethod&quot; class=&quot;com.demo3.TestChangeMethod&quot;&gt;&lt;</span><br><span class="line">    &lt;replaced-method name=&quot;changeMe&quot; replacer=&quot;replacer&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;replacer&quot; class=&quot;com.demo3.TestMethodReplacer&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法"><a href="#13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法" class="headerlink" title="13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法"></a>13、接（二、8）BeanDefinitionParserDelegate的parseConstructorArgElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) &#123;</span><br><span class="line">            //解析constructor-arg</span><br><span class="line">            parseConstructorArgElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public void parseConstructorArgElement(Element ele, BeanDefinition bd) &#123;</span><br><span class="line">    //index属性</span><br><span class="line">    String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);</span><br><span class="line">    //type属性</span><br><span class="line">    String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    //name属性</span><br><span class="line">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    if (StringUtils.hasLength(indexAttr)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int index = Integer.parseInt(indexAttr);</span><br><span class="line">            if (index &lt; 0) &#123;</span><br><span class="line">                error(&quot;&apos;index&apos; cannot be lower than 0&quot;, ele);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    this.parseState.push(new ConstructorArgumentEntry(index));</span><br><span class="line">                    //解析属性元素</span><br><span class="line">                    Object value = parsePropertyValue(ele, bd, null);</span><br><span class="line">                    ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">                    if (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                        valueHolder.setType(typeAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                        valueHolder.setName(nameAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    valueHolder.setSource(extractSource(ele));</span><br><span class="line">                    //不允许重复指定参数</span><br><span class="line">                    if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) &#123;</span><br><span class="line">                        error(&quot;Ambiguous constructor-arg entries for index &quot; + index, ele);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        //添加构造器属性值</span><br><span class="line">                        bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    this.parseState.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (NumberFormatException ex) &#123;</span><br><span class="line">            error(&quot;Attribute &apos;index&apos; of tag &apos;constructor-arg&apos; must be an integer&quot;, ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.parseState.push(new ConstructorArgumentEntry());</span><br><span class="line">            //解析属性元素</span><br><span class="line">            Object value = parsePropertyValue(ele, bd, null);</span><br><span class="line">            ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">            if (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                valueHolder.setType(typeAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                valueHolder.setName(nameAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            valueHolder.setSource(extractSource(ele));</span><br><span class="line">            //添加构造器属性值</span><br><span class="line">            bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            this.parseState.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constructor-arg配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.rc.sp.Student&quot;&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;id&quot; value=&quot;1&quot;/&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;name&quot; value=&quot;student&quot;/&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;dream&quot;&gt;  </span><br><span class="line">        &lt;list&gt;  </span><br><span class="line">            &lt;value&gt;soldier&lt;/value&gt;  </span><br><span class="line">            &lt;value&gt;scientist&lt;/value&gt;  </span><br><span class="line">            &lt;value&gt;pilot&lt;/value&gt;  </span><br><span class="line">        &lt;/list&gt;  </span><br><span class="line">    &lt;/constructor-arg&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;score&quot;&gt;  </span><br><span class="line">        &lt;map&gt;  </span><br><span class="line">            &lt;entry key=&quot;math&quot; value=&quot;90&quot;/&gt;  </span><br><span class="line">            &lt;entry key=&quot;english&quot; value=&quot;85&quot;/&gt;  </span><br><span class="line">        &lt;/map&gt;  </span><br><span class="line">    &lt;/constructor-arg&gt;  </span><br><span class="line">    &lt;constructor-arg name=&quot;graduation&quot; value=&quot;false&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="14、BeanDefinitionParserDelegate的parsePropertyValue方法"><a href="#14、BeanDefinitionParserDelegate的parsePropertyValue方法" class="headerlink" title="14、BeanDefinitionParserDelegate的parsePropertyValue方法"></a>14、BeanDefinitionParserDelegate的parsePropertyValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) &#123;</span><br><span class="line">    String elementName = (propertyName != null) ?</span><br><span class="line">                    &quot;&lt;property&gt; element for property &apos;&quot; + propertyName + &quot;&apos;&quot; :</span><br><span class="line">                    &quot;&lt;constructor-arg&gt; element&quot;;</span><br><span class="line"></span><br><span class="line">    // Should only have one child element: ref, value, list, etc.</span><br><span class="line">    NodeList nl = ele.getChildNodes();</span><br><span class="line">    Element subElement = null;</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        //description和meta不处理</span><br><span class="line">        if (node instanceof Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class="line">                !nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">            // Child element is what we&apos;re looking for.</span><br><span class="line">            if (subElement != null) &#123;</span><br><span class="line">                error(elementName + &quot; must not contain more than one sub-element&quot;, ele);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                //子元素</span><br><span class="line">                subElement = (Element) node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析constructor-arg的ref属性</span><br><span class="line">    boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class="line">    //解析constructor-arg的value属性</span><br><span class="line">    boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">    //不能同时有ref和value</span><br><span class="line">    if ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</span><br><span class="line">            ((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != null)) &#123;</span><br><span class="line">        error(elementName +</span><br><span class="line">                &quot; is only allowed to contain either &apos;ref&apos; attribute OR &apos;value&apos; attribute OR sub-element&quot;, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    //ref属性</span><br><span class="line">    if (hasRefAttribute) &#123;</span><br><span class="line">        String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class="line">        if (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">            error(elementName + &quot; contains empty &apos;ref&apos; attribute&quot;, ele);</span><br><span class="line">        &#125;</span><br><span class="line">        RuntimeBeanReference ref = new RuntimeBeanReference(refName);</span><br><span class="line">        ref.setSource(extractSource(ele));</span><br><span class="line">        return ref;</span><br><span class="line">    &#125;</span><br><span class="line">    //value属性</span><br><span class="line">    else if (hasValueAttribute) &#123;</span><br><span class="line">        TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class="line">        valueHolder.setSource(extractSource(ele));</span><br><span class="line">        return valueHolder;</span><br><span class="line">    &#125;</span><br><span class="line">    //解析子元素</span><br><span class="line">    else if (subElement != null) &#123;</span><br><span class="line">        return parsePropertySubElement(subElement, bd);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Neither child element nor &quot;ref&quot; or &quot;value&quot; attribute found.</span><br><span class="line">        error(elementName + &quot; must specify a ref or value&quot;, ele);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"><a href="#15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法" class="headerlink" title="15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"></a>15、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void parsePropertyElements(Element beanEle, BeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class="line">            parsePropertyElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void parsePropertyElement(Element ele, BeanDefinition bd) &#123;</span><br><span class="line">    //获取name属性</span><br><span class="line">    String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">        error(&quot;Tag &apos;property&apos; must have a &apos;name&apos; attribute&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.parseState.push(new PropertyEntry(propertyName));</span><br><span class="line">    try &#123;</span><br><span class="line">        if (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">            error(&quot;Multiple &apos;property&apos; definitions for property &apos;&quot; + propertyName + &quot;&apos;&quot;, ele);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析属性元素，与(一、14)相同</span><br><span class="line">        Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line">        PropertyValue pv = new PropertyValue(propertyName, val);</span><br><span class="line">        parseMetaElements(ele, pv);</span><br><span class="line">        pv.setSource(extractSource(ele));</span><br><span class="line">        bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>property配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;cn.itcast.c_property.User&quot; scope=&quot;prototype&quot;&gt;  </span><br><span class="line">    &lt;property name=&quot;id&quot; value=&quot;101&quot;&gt;&lt;/property&gt;  </span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;Jack&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"><a href="#16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法" class="headerlink" title="16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法"></a>16、接（二、8）BeanDefinitionParserDelegate的parsePropertyElements方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ELEMENT)) &#123;</span><br><span class="line">            parseQualifierElement((Element) node, bd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) &#123;</span><br><span class="line">    //type属性</span><br><span class="line">    String typeName = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasLength(typeName)) &#123;</span><br><span class="line">        error(&quot;Tag &apos;qualifier&apos; must have a &apos;type&apos; attribute&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.parseState.push(new QualifierEntry(typeName));</span><br><span class="line">    try &#123;</span><br><span class="line">        AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName);</span><br><span class="line">        qualifier.setSource(extractSource(ele));</span><br><span class="line">        String value = ele.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">        if (StringUtils.hasLength(value)) &#123;</span><br><span class="line">            qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value);</span><br><span class="line">        &#125;</span><br><span class="line">        NodeList nl = ele.getChildNodes();</span><br><span class="line">        for (int i = 0; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            if (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) &#123;</span><br><span class="line">                Element attributeEle = (Element) node;</span><br><span class="line">                String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">                String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(attributeName) &amp;&amp; StringUtils.hasLength(attributeValue)) &#123;</span><br><span class="line">                    BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue);</span><br><span class="line">                    attribute.setSource(extractSource(attributeEle));</span><br><span class="line">                    qualifier.addMetadataAttribute(attribute);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    error(&quot;Qualifier &apos;attribute&apos; tag must have a &apos;name&apos; and &apos;value&apos;&quot;, attributeEle);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //添加限定标识符</span><br><span class="line">        bd.addQualifier(qualifier);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        this.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qualifier配置示例，限定标识符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class TestBean &#123;  </span><br><span class="line">      </span><br><span class="line">    private DataSource dataSource;  </span><br><span class="line">      </span><br><span class="line">    @Autowired  </span><br><span class="line">    public void initDataSource(@Qualifier(&quot;oracleDataSource&quot;) DataSource dataSource)&#123;  </span><br><span class="line">        this.dataSource = dataSource;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    public DataSource getDataSource() &#123;  </span><br><span class="line">        return dataSource;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;mysqlDataSourceBean&quot; class=&quot;com.bean.MysqlDriveManagerDataSource&quot;&gt;  </span><br><span class="line">    &lt;qualifier value=&quot;mysqlDataSource&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;bean id=&quot;oracleDataSourceBean&quot; class=&quot;com.bean.OracleDriveManagerDataSource&quot;&gt;  </span><br><span class="line">    &lt;qualifier value=&quot;oracleDataSource&quot;/&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法"><a href="#16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法" class="headerlink" title="16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法"></a>16、接（二、6）BeanDefinitionReaderUtils的registerBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void registerBeanDefinition(</span><br><span class="line">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    // Register bean definition under primary name.</span><br><span class="line">    String beanName = definitionHolder.getBeanName();</span><br><span class="line">    //使用beanName注册</span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">    //注册别名</span><br><span class="line">    // Register aliases for bean name, if any.</span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    if (aliases != null) &#123;</span><br><span class="line">        for (String alias : aliases) &#123;</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、DefaultListableBeanFactory的registerBeanDefinition方法"><a href="#17、DefaultListableBeanFactory的registerBeanDefinition方法" class="headerlink" title="17、DefaultListableBeanFactory的registerBeanDefinition方法"></a>17、DefaultListableBeanFactory的registerBeanDefinition方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);</span><br><span class="line">    Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);</span><br><span class="line">    //校验methodOverrides不能与工厂方法并存，或者methodOverrides对应的方法不存在</span><br><span class="line">    if (beanDefinition instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Validation of bean definition failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">    oldBeanDefinition = this.beanDefinitionMap.get(beanName);</span><br><span class="line">    if (oldBeanDefinition != null) &#123;</span><br><span class="line">        //已存在且不允许被覆盖，抛出异常</span><br><span class="line">        if (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Cannot register bean definition [&quot; + beanDefinition + &quot;] for bean &apos;&quot; + beanName +</span><br><span class="line">                    &quot;&apos;: There is already [&quot; + oldBeanDefinition + &quot;] bound.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            // e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span><br><span class="line">            if (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">                this.logger.warn(&quot;Overriding user-defined bean definition for bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos; with a framework-generated bean definition: replacing [&quot; +</span><br><span class="line">                        oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">                this.logger.info(&quot;Overriding bean definition for bean &apos;&quot; + beanName +</span><br><span class="line">                        &quot;&apos;: replacing [&quot; + oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //记录beanName</span><br><span class="line">        this.beanDefinitionNames.add(beanName);</span><br><span class="line">        this.manualSingletonNames.remove(beanName);</span><br><span class="line">        this.frozenBeanDefinitionNames = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //注册beanDefinition</span><br><span class="line">    this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line"></span><br><span class="line">    if (oldBeanDefinition != null || containsSingleton(beanName)) &#123;</span><br><span class="line">        //重置缓存</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18、接（二、16）SimpleAliasRegistry的registerAlias方法"><a href="#18、接（二、16）SimpleAliasRegistry的registerAlias方法" class="headerlink" title="18、接（二、16）SimpleAliasRegistry的registerAlias方法"></a>18、接（二、16）SimpleAliasRegistry的registerAlias方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void registerAlias(String name, String alias) &#123;</span><br><span class="line">    Assert.hasText(name, &quot;&apos;name&apos; must not be empty&quot;);</span><br><span class="line">    Assert.hasText(alias, &quot;&apos;alias&apos; must not be empty&quot;);</span><br><span class="line">    //别名与beanName相同，则删除该别名</span><br><span class="line">    if (alias.equals(name)) &#123;</span><br><span class="line">        this.aliasMap.remove(alias);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //检验别名是否重复</span><br><span class="line">        if (!allowAliasOverriding()) &#123;</span><br><span class="line">            String registeredName = this.aliasMap.get(alias);</span><br><span class="line">            if (registeredName != null &amp;&amp; !registeredName.equals(name)) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;Cannot register alias &apos;&quot; + alias + &quot;&apos; for name &apos;&quot; +</span><br><span class="line">                        name + &quot;&apos;: It is already registered for name &apos;&quot; + registeredName + &quot;&apos;.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //A-B存在的情况下，不能存在B-A以及B-C-A</span><br><span class="line">        checkForAliasCircle(name, alias);</span><br><span class="line">        //注册别名</span><br><span class="line">        this.aliasMap.put(alias, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法"><a href="#19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法" class="headerlink" title="19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法"></a>19、接（二、5）DefaultBeanDefinitionDocumentReader的processAliasRegistration方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">protected void processAliasRegistration(Element ele) &#123;</span><br><span class="line">    String name = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    String alias = ele.getAttribute(ALIAS_ATTRIBUTE);</span><br><span class="line">    boolean valid = true;</span><br><span class="line">    if (!StringUtils.hasText(name)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Name must not be empty&quot;, ele);</span><br><span class="line">        valid = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!StringUtils.hasText(alias)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Alias must not be empty&quot;, ele);</span><br><span class="line">        valid = false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (valid) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //注册别名</span><br><span class="line">            getReaderContext().getRegistry().registerAlias(name, alias);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to register alias &apos;&quot; + alias +</span><br><span class="line">                    &quot;&apos; for bean with name &apos;&quot; + name + &quot;&apos;&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //通知监听器，别名注册完成事件</span><br><span class="line">        getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias标签配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;some&quot; class=&quot;src.com.Some&quot;/&gt;</span><br><span class="line">&lt;alias name=&quot;some&quot; alias=&quot;someJava,oneBean,twoBean&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法"><a href="#20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法" class="headerlink" title="20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法"></a>20、接（二、5）DefaultBeanDefinitionDocumentReader的importBeanDefinitionResource方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">protected void importBeanDefinitionResource(Element ele) &#123;</span><br><span class="line">    //获取resource属性</span><br><span class="line">    String location = ele.getAttribute(RESOURCE_ATTRIBUTE);</span><br><span class="line">    if (!StringUtils.hasText(location)) &#123;</span><br><span class="line">        getReaderContext().error(&quot;Resource location must not be empty&quot;, ele);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Resolve system properties: e.g. &quot;$&#123;user.dir&#125;&quot;</span><br><span class="line">    //解析系统属性，如&quot;$&#123;user.dir&#125;&quot;</span><br><span class="line">    location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class="line"></span><br><span class="line">    Set&lt;Resource&gt; actualResources = new LinkedHashSet&lt;Resource&gt;(4);</span><br><span class="line"></span><br><span class="line">    // Discover whether the location is an absolute or relative URI</span><br><span class="line">    boolean absoluteLocation = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        //判断location，是绝对uri还是相对uri</span><br><span class="line">        absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (URISyntaxException ex) &#123;</span><br><span class="line">        // cannot convert to an URI, considering the location relative</span><br><span class="line">        // unless it is the well-known Spring prefix &quot;classpath*:&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Absolute or relative?</span><br><span class="line">    //绝对uri直接加载配置文件</span><br><span class="line">    if (absoluteLocation) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Imported &quot; + importCount + &quot; bean definitions from URL location [&quot; + location + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(</span><br><span class="line">                    &quot;Failed to import bean definitions from URL location [&quot; + location + &quot;]&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //相对地址加载</span><br><span class="line">    else &#123;</span><br><span class="line">        // No URL -&gt; considering resource location as relative to the current file.</span><br><span class="line">        try &#123;</span><br><span class="line">            int importCount;</span><br><span class="line">            Resource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class="line">            if (relativeResource.exists()) &#123;</span><br><span class="line">                importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class="line">                actualResources.add(relativeResource);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                String baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class="line">                importCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class="line">                        StringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Imported &quot; + importCount + &quot; bean definitions from relative location [&quot; + location + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to resolve current resource location&quot;, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(&quot;Failed to import bean definitions from relative location [&quot; + location + &quot;]&quot;,</span><br><span class="line">                    ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //监听器处理加载的文件</span><br><span class="line">    Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()]);</span><br><span class="line">    getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import标签配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;systemContext.xml&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="三、自定义标签解析"><a href="#三、自定义标签解析" class="headerlink" title="三、自定义标签解析"></a>三、自定义标签解析</h3><h4 id="1、自定义标签示例"><a href="#1、自定义标签示例" class="headerlink" title="1、自定义标签示例"></a>1、自定义标签示例</h4><p>一个普通的javaBean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;    </span><br><span class="line">    private String id;    </span><br><span class="line">    private String userName;    </span><br><span class="line">    private String email;    </span><br><span class="line">    public String getId() &#123;    </span><br><span class="line">        return id;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setId(String id) &#123;    </span><br><span class="line">        this.id = id;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public String getUserName() &#123;    </span><br><span class="line">        return userName;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setUserName(String userName) &#123;    </span><br><span class="line">        this.userName = userName;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public String getEmail() &#123;    </span><br><span class="line">        return email;    </span><br><span class="line">    &#125;    </span><br><span class="line">    public void setEmail(String email) &#123;    </span><br><span class="line">        this.email = email;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class UserBeanDefinitionParser extends AbstractSingleBeanDefinitionParser &#123;    </span><br><span class="line">    @Override    </span><br><span class="line">    protected Class&lt;?&gt; getBeanClass(Element element) &#123;    </span><br><span class="line">        return User.class;    </span><br><span class="line">    &#125;    </span><br><span class="line">    @Override    </span><br><span class="line">    protected void doParse(Element element, BeanDefinitionBuilder builder) &#123;    </span><br><span class="line">        String userName=element.getAttribute(&quot;userName&quot;);    </span><br><span class="line">        String email=element.getAttribute(&quot;email&quot;);    </span><br><span class="line">        if(StringUtils.hasText(userName))&#123;    </span><br><span class="line">            builder.addPropertyValue(&quot;userName&quot;, userName);    </span><br><span class="line">        &#125;    </span><br><span class="line">        if(StringUtils.hasText(email))&#123;    </span><br><span class="line">            builder.addPropertyValue(&quot;email&quot;, email);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册解析器的Handler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MyUserNamespaceHandler extends NamespaceHandlerSupport &#123;    </span><br><span class="line">    </span><br><span class="line">    @Override    </span><br><span class="line">    public void init() &#123;    </span><br><span class="line">        registerBeanDefinitionParser(&quot;user&quot;,new UserBeanDefinitionParser());    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>xml  schema definition  (xsd)文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    </span><br><span class="line">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;    </span><br><span class="line">    xmlns=&quot;http://www.wjs.com/schema/user&quot; targetNamespace=&quot;http://www.wjs.com/schema/user&quot;    </span><br><span class="line">    elementFormDefault=&quot;qualified&quot;&gt;    </span><br><span class="line">    &lt;xsd:element name=&quot;user&quot;&gt;    </span><br><span class="line">        &lt;xsd:complexType&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;id&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;userName&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">            &lt;xsd:attribute name=&quot;email&quot; type=&quot;xsd:string&quot; /&gt;    </span><br><span class="line">        &lt;/xsd:complexType&gt;    </span><br><span class="line">    &lt;/xsd:element&gt;    </span><br><span class="line">&lt;/xsd:schema&gt;</span><br></pre></td></tr></table></figure></p><p>spring.handlers中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.wjs.com/schema/user=com.wjs.cosumertag.MyUserNamespaceHandler</span><br></pre></td></tr></table></figure></p><p>spring.schemas中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.wjs.com/schema/user.xsd=META-INF/spring-user.xsd</span><br></pre></td></tr></table></figure></p><p>spring 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    </span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    </span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    </span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    </span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    </span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; </span><br><span class="line">    &lt;!-- 自定义标签的命名空间 --&gt;   </span><br><span class="line">    xmlns:myTag=&quot;http://www.wjs.com/schema/user&quot;   </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd    </span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd    </span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd    </span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd    </span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd </span><br><span class="line">        &lt;!--指定了命名空间对应的Schema文档--&gt;   </span><br><span class="line">        http://www.wjs.com/schema/user http://www.wjs.com/schema/user.xsd&quot;&gt;    </span><br><span class="line">     </span><br><span class="line">    &lt;myTag:user id=&quot;testBean&quot; userName=&quot;name&quot; email=&quot;wjs@163.com&quot;/&gt;    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法"><a href="#2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法" class="headerlink" title="2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法"></a>2、接（二、4）BeanDefinitionParserDelegate的parseCustomElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parseCustomElement(Element ele) &#123;</span><br><span class="line">    return parseCustomElement(ele, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) &#123;</span><br><span class="line">    //获取命名空间</span><br><span class="line">    String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">    //根据命名空间获取对应处理器</span><br><span class="line">    NamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        error(&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot; + namespaceUri + &quot;]&quot;, ele);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //用自定义的处理器解析</span><br><span class="line">    return handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DefaultNamespaceHandlerResolver的resolve方法"><a href="#3、DefaultNamespaceHandlerResolver的resolve方法" class="headerlink" title="3、DefaultNamespaceHandlerResolver的resolve方法"></a>3、DefaultNamespaceHandlerResolver的resolve方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public NamespaceHandler resolve(String namespaceUri) &#123;</span><br><span class="line">    //获取handler映射</span><br><span class="line">    Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class="line">    //根据命名空间找到对应的信息</span><br><span class="line">    Object handlerOrClassName = handlerMappings.get(namespaceUri);</span><br><span class="line">    if (handlerOrClassName == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (handlerOrClassName instanceof NamespaceHandler) &#123;</span><br><span class="line">        return (NamespaceHandler) handlerOrClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        String className = (String) handlerOrClassName;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; handlerClass = ClassUtils.forName(className, this.classLoader);</span><br><span class="line">            if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) &#123;</span><br><span class="line">                throw new FatalBeanException(&quot;Class [&quot; + className + &quot;] for namespace [&quot; + namespaceUri +</span><br><span class="line">                        &quot;] does not implement the [&quot; + NamespaceHandler.class.getName() + &quot;] interface&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //初始化类</span><br><span class="line">            NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br><span class="line">            //初始化方法，注册解析器</span><br><span class="line">            namespaceHandler.init();</span><br><span class="line">            //记录缓存</span><br><span class="line">            handlerMappings.put(namespaceUri, namespaceHandler);</span><br><span class="line">            return namespaceHandler;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new FatalBeanException(&quot;NamespaceHandler class [&quot; + className + &quot;] for namespace [&quot; +</span><br><span class="line">                    namespaceUri + &quot;] not found&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (LinkageError err) &#123;</span><br><span class="line">            throw new FatalBeanException(&quot;Invalid NamespaceHandler class [&quot; + className + &quot;] for namespace [&quot; +</span><br><span class="line">                    namespaceUri + &quot;]: problem with handler class file or dependent class&quot;, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DefaultNamespaceHandlerResolver的getHandlerMappings方法"><a href="#4、DefaultNamespaceHandlerResolver的getHandlerMappings方法" class="headerlink" title="4、DefaultNamespaceHandlerResolver的getHandlerMappings方法"></a>4、DefaultNamespaceHandlerResolver的getHandlerMappings方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String, Object&gt; getHandlerMappings() &#123;</span><br><span class="line">    if (this.handlerMappings == null) &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (this.handlerMappings == null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //从&quot;META-INF/spring.handlers&quot;中加载命名空间和Handler的映射</span><br><span class="line">                    Properties mappings =Handler的映射</span><br><span class="line">                            PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader);</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(&quot;Loaded NamespaceHandler mappings: &quot; + mappings);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Map&lt;String, Object&gt; handlerMappings = new ConcurrentHashMap&lt;String, Object&gt;(mappings.size());</span><br><span class="line">                    CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings);</span><br><span class="line">                    this.handlerMappings = handlerMappings;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (IOException ex) &#123;</span><br><span class="line">                    throw new IllegalStateException(</span><br><span class="line">                            &quot;Unable to load NamespaceHandler mappings from location [&quot; + this.handlerMappingsLocation + &quot;]&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.handlerMappings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、NamespaceHandlerSupport的parse方法"><a href="#5、NamespaceHandlerSupport的parse方法" class="headerlink" title="5、NamespaceHandlerSupport的parse方法"></a>5、NamespaceHandlerSupport的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //获取解析器，并解析</span><br><span class="line">    return findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、NamespaceHandlerSupport的findParserForElement方法"><a href="#6、NamespaceHandlerSupport的findParserForElement方法" class="headerlink" title="6、NamespaceHandlerSupport的findParserForElement方法"></a>6、NamespaceHandlerSupport的findParserForElement方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //元素名 myTag:user 中为 user</span><br><span class="line">    String localName = parserContext.getDelegate().getLocalName(element);</span><br><span class="line">    //获取user的解析器</span><br><span class="line">    BeanDefinitionParser parser = this.parsers.get(localName);</span><br><span class="line">    if (parser == null) &#123;</span><br><span class="line">        parserContext.getReaderContext().fatal(</span><br><span class="line">                &quot;Cannot locate BeanDefinitionParser for element [&quot; + localName + &quot;]&quot;, element);</span><br><span class="line">    &#125;</span><br><span class="line">    return parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、2）AbstractBeanDefinitionParser的parse方法"><a href="#7、接（三、2）AbstractBeanDefinitionParser的parse方法" class="headerlink" title="7、接（三、2）AbstractBeanDefinitionParser的parse方法"></a>7、接（三、2）AbstractBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">p@Override</span><br><span class="line">public final BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //解析bean</span><br><span class="line">    AbstractBeanDefinition definition = parseInternal(element, parserContext);</span><br><span class="line">    if (definition != null &amp;&amp; !parserContext.isNested()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String id = resolveId(element, definition, parserContext);</span><br><span class="line">            if (!StringUtils.hasText(id)) &#123;</span><br><span class="line">                parserContext.getReaderContext().error(</span><br><span class="line">                        &quot;Id is required for element &apos;&quot; + parserContext.getDelegate().getLocalName(element)</span><br><span class="line">                                + &quot;&apos; when used as a top-level tag&quot;, element);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] aliases = null;</span><br><span class="line">            if (shouldParseNameAsAliases()) &#123;</span><br><span class="line">                String name = element.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(name)) &#123;</span><br><span class="line">                    aliases = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, id, aliases);</span><br><span class="line">            registerBeanDefinition(holder, parserContext.getRegistry());</span><br><span class="line">            if (shouldFireEvents()) &#123;</span><br><span class="line">                BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);</span><br><span class="line">                postProcessComponentDefinition(componentDefinition);</span><br><span class="line">                parserContext.registerComponent(componentDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(ex.getMessage(), element);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（三、2）AbstractBeanDefinitionParser的parse方法"><a href="#8、接（三、2）AbstractBeanDefinitionParser的parse方法" class="headerlink" title="8、接（三、2）AbstractBeanDefinitionParser的parse方法"></a>8、接（三、2）AbstractBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">p@Override</span><br><span class="line">public final BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //解析bean</span><br><span class="line">    AbstractBeanDefinition definition = parseInternal(element, parserContext);</span><br><span class="line">    if (definition != null &amp;&amp; !parserContext.isNested()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取beanName</span><br><span class="line">            String id = resolveId(element, definition, parserContext);</span><br><span class="line">            if (!StringUtils.hasText(id)) &#123;</span><br><span class="line">                parserContext.getReaderContext().error(</span><br><span class="line">                        &quot;Id is required for element &apos;&quot; + parserContext.getDelegate().getLocalName(element)</span><br><span class="line">                                + &quot;&apos; when used as a top-level tag&quot;, element);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] aliases = null;</span><br><span class="line">            if (shouldParseNameAsAliases()) &#123;</span><br><span class="line">                String name = element.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">                if (StringUtils.hasLength(name)) &#123;</span><br><span class="line">                    aliases = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //注册BeanDefinition</span><br><span class="line">            BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, id, aliases);</span><br><span class="line">            registerBeanDefinition(holder, parserContext.getRegistry());</span><br><span class="line">            if (shouldFireEvents()) &#123;</span><br><span class="line">                BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);</span><br><span class="line">                //钩子函数，在解析完自定义bean之后执行</span><br><span class="line">                postProcessComponentDefinition(componentDefinition);</span><br><span class="line">                //通知监听器，自定义bean注册完成事件</span><br><span class="line">                parserContext.registerComponent(componentDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            parserContext.getReaderContext().error(ex.getMessage(), element);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractSingleBeanDefinitionParser的parseInternal方法"><a href="#9、AbstractSingleBeanDefinitionParser的parseInternal方法" class="headerlink" title="9、AbstractSingleBeanDefinitionParser的parseInternal方法"></a>9、AbstractSingleBeanDefinitionParser的parseInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">    String parentName = getParentName(element);</span><br><span class="line">    if (parentName != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setParentName(parentName);</span><br><span class="line">    &#125;</span><br><span class="line">    //该方法被自定义解析器重写</span><br><span class="line">    Class&lt;?&gt; beanClass = getBeanClass(element);</span><br><span class="line">    if (beanClass != null) &#123;</span><br><span class="line">        builder.getRawBeanDefinition().setBeanClass(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //若没有beanClass，检查自定义解析器是否重写getBeanClassName</span><br><span class="line">        String beanClassName = getBeanClassName(element);</span><br><span class="line">        if (beanClassName != null) &#123;</span><br><span class="line">            builder.getRawBeanDefinition().setBeanClassName(beanClassName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.getRawBeanDefinition().setSource(parserContext.extractSource(element));</span><br><span class="line">    if (parserContext.isNested()) &#123;</span><br><span class="line">        // Inner bean definition must receive same scope as containing bean.</span><br><span class="line">        //若存在外部类，使用外部类的scope</span><br><span class="line">        builder.setScope(parserContext.getContainingBeanDefinition().getScope());</span><br><span class="line">    &#125;</span><br><span class="line">    if (parserContext.isDefaultLazyInit()) &#123;</span><br><span class="line">        // Default-lazy-init applies to custom bean definitions as well.</span><br><span class="line">        //配置延迟加载</span><br><span class="line">        builder.setLazyInit(true);</span><br><span class="line">    &#125;</span><br><span class="line">    //子类重写了该方法</span><br><span class="line">    doParse(element, parserContext, builder);</span><br><span class="line">    return builder.getBeanDefinition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码Transaction</title>
    <link href="http://yoursite.com/2018/06/27/spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81Transaction/"/>
    <id>http://yoursite.com/2018/06/27/spring源码/Spring源码Transaction/</id>
    <published>2018-06-27T13:10:29.029Z</published>
    <updated>2018-07-07T15:10:02.538Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;  </span><br><span class="line">&lt;bean id=&quot;txManager&quot;  </span><br><span class="line">        class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;  </span><br><span class="line">        p:dataSource-ref=&quot;dataSource&quot;&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、解析配置文件"><a href="#一、解析配置文件" class="headerlink" title="一、解析配置文件"></a>一、解析配置文件</h3><h4 id="1、TxNamespaceHandler的init方法"><a href="#1、TxNamespaceHandler的init方法" class="headerlink" title="1、TxNamespaceHandler的init方法"></a>1、TxNamespaceHandler的init方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void init() &#123;</span><br><span class="line">    registerBeanDefinitionParser(&quot;advice&quot;, new TxAdviceBeanDefinitionParser());</span><br><span class="line">    //标签解析器</span><br><span class="line">    registerBeanDefinitionParser(&quot;annotation-driven&quot;, new AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;jta-transaction-manager&quot;, new JtaTransactionManagerBeanDefinitionParser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationDrivenBeanDefinitionParser的parse方法"><a href="#2、AnnotationDrivenBeanDefinitionParser的parse方法" class="headerlink" title="2、AnnotationDrivenBeanDefinitionParser的parse方法"></a>2、AnnotationDrivenBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    registerTransactionalEventListenerFactory(parserContext);</span><br><span class="line">    String mode = element.getAttribute(&quot;mode&quot;);</span><br><span class="line">    //使用aspectj方式进行事务切入</span><br><span class="line">    if (&quot;aspectj&quot;.equals(mode)) &#123;</span><br><span class="line">        // mode=&quot;aspectj&quot;</span><br><span class="line">        registerTransactionAspect(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用动态代理方式进行事务切入</span><br><span class="line">    else &#123;</span><br><span class="line">        // mode=&quot;proxy&quot;</span><br><span class="line">        AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AnnotationDrivenBeanDefinitionParser的parse方法-1"><a href="#2、AnnotationDrivenBeanDefinitionParser的parse方法-1" class="headerlink" title="2、AnnotationDrivenBeanDefinitionParser的parse方法"></a>2、AnnotationDrivenBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册事务监听器工厂TransactionalEventListenerFactory</span><br><span class="line">    registerTransactionalEventListenerFactory(parserContext);</span><br><span class="line">    String mode = element.getAttribute(&quot;mode&quot;);</span><br><span class="line">    //使用aspectj方式进行事务切入</span><br><span class="line">    if (&quot;aspectj&quot;.equals(mode)) &#123;</span><br><span class="line">        // mode=&quot;aspectj&quot;</span><br><span class="line">        registerTransactionAspect(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    //使用动态代理方式进行事务切入</span><br><span class="line">    else &#123;</span><br><span class="line">        // mode=&quot;proxy&quot;</span><br><span class="line">        AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AopAutoProxyConfigurer的configureAutoProxyCreator方法"><a href="#3、AopAutoProxyConfigurer的configureAutoProxyCreator方法" class="headerlink" title="3、AopAutoProxyConfigurer的configureAutoProxyCreator方法"></a>3、AopAutoProxyConfigurer的configureAutoProxyCreator方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public static void configureAutoProxyCreator(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //注册InfrastructureAdvisorAutoProxyCreator的bean</span><br><span class="line">    AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line"></span><br><span class="line">    String txAdvisorBeanName = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME;</span><br><span class="line">    if (!parserContext.getRegistry().containsBeanDefinition(txAdvisorBeanName)) &#123;</span><br><span class="line">        Object eleSource = parserContext.extractSource(element);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionAttributeSource definition.</span><br><span class="line">        //创建TransactionAttributeSource的bean</span><br><span class="line">        RootBeanDefinition sourceDef = new RootBeanDefinition(</span><br><span class="line">                &quot;org.springframework.transaction.annotation.AnnotationTransactionAttributeSource&quot;);</span><br><span class="line">        sourceDef.setSource(eleSource);</span><br><span class="line">        //基础设施</span><br><span class="line">        sourceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //注册sourceDef</span><br><span class="line">        String sourceName = parserContext.getReaderContext().registerWithGeneratedName(sourceDef);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionInterceptor definition.</span><br><span class="line">        //创建TransactionInterceptor的bean</span><br><span class="line">        RootBeanDefinition interceptorDef = new RootBeanDefinition(TransactionInterceptor.class);</span><br><span class="line">        interceptorDef.setSource(eleSource);</span><br><span class="line">        interceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //往interceptorDef中注入TransactionManager</span><br><span class="line">        registerTransactionManager(element, interceptorDef);</span><br><span class="line">        //注入sourceDef</span><br><span class="line">        interceptorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">        //注册interceptorDef</span><br><span class="line">        String interceptorName = parserContext.getReaderContext().registerWithGeneratedName(interceptorDef);</span><br><span class="line"></span><br><span class="line">        // Create the TransactionAttributeSourceAdvisor definition.</span><br><span class="line">        //创建BeanFactoryTransactionAttributeSourceAdvisor的bean，通知器</span><br><span class="line">        RootBeanDefinition advisorDef = new RootBeanDefinition(BeanFactoryTransactionAttributeSourceAdvisor.class);</span><br><span class="line">        advisorDef.setSource(eleSource);</span><br><span class="line">        advisorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        //注入TransactionAttributeSource的bean</span><br><span class="line">        advisorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">        //注入TransactionInterceptor的bean</span><br><span class="line">        advisorDef.getPropertyValues().add(&quot;adviceBeanName&quot;, interceptorName);</span><br><span class="line">        if (element.hasAttribute(&quot;order&quot;)) &#123;</span><br><span class="line">            advisorDef.getPropertyValues().add(&quot;order&quot;, element.getAttribute(&quot;order&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        //注册advisorDef</span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(txAdvisorBeanName, advisorDef);</span><br><span class="line">        //注册组件并广播</span><br><span class="line">        CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), eleSource);</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName));</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName));</span><br><span class="line">        compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, txAdvisorBeanName));</span><br><span class="line">        parserContext.registerComponent(compositeDef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"><a href="#4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法" class="headerlink" title="4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法"></a>4、AopNamespaceUtils的registerAspectJAutoProxyCreatorIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">        ParserContext parserContext, Element sourceElement) &#123;</span><br><span class="line">    //注册AspectJAwareAdvisorAutoProxyCreator的bean</span><br><span class="line">    BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">            parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">    //设置使用JDK动态代理或CGLIB动态代理，设置是否支持内部调用</span><br><span class="line">    useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">    //注册组件并广播</span><br><span class="line">    registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、创建代理对象"><a href="#二、创建代理对象" class="headerlink" title="二、创建代理对象"></a>二、创建代理对象</h3><h4 id="1、AbstractAutoProxyCreator的postProcessAfterInitialization方法"><a href="#1、AbstractAutoProxyCreator的postProcessAfterInitialization方法" class="headerlink" title="1、AbstractAutoProxyCreator的postProcessAfterInitialization方法"></a>1、AbstractAutoProxyCreator的postProcessAfterInitialization方法</h4><p>InfrastructureAdvisorAutoProxyCreator的父类AbstractAutoProxyCreator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    if (bean != null) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        //检测循环依赖</span><br><span class="line">        if (!this.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">            //创建代理对象</span><br><span class="line">            return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、AbstractAutoProxyCreator的wrapIfNecessary方法"><a href="#2、AbstractAutoProxyCreator的wrapIfNecessary方法" class="headerlink" title="2、AbstractAutoProxyCreator的wrapIfNecessary方法"></a>2、AbstractAutoProxyCreator的wrapIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">    //已经处理过</span><br><span class="line">    if (StringUtils.hasLength(beanName) &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    //基础设施类不创建代理</span><br><span class="line">    if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create proxy if we have advice.</span><br><span class="line">    //获取增强</span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span><br><span class="line">    if (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        this.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        //创建代理对象</span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">                bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">        this.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        return proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法"><a href="#3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法" class="headerlink" title="3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法"></a>3、InfrastructureAdvisorAutoProxyCreator的isEligibleAdvisorBean方法</h4><p>覆盖该方法，只取基础设施类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected boolean isEligibleAdvisorBean(String beanName) &#123;</span><br><span class="line">    return (this.beanFactory != null &amp;&amp; this.beanFactory.containsBeanDefinition(beanName) &amp;&amp;</span><br><span class="line">            this.beanFactory.getBeanDefinition(beanName).getRole() == BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、AopUtils的canApply方法"><a href="#4、AopUtils的canApply方法" class="headerlink" title="4、AopUtils的canApply方法"></a>4、AopUtils的canApply方法</h4><p>中间过程与AOP相同，此处的Pointcut为TransactionAttributeSourcePointcut<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public static boolean canApply(Pointcut pc, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">    Assert.notNull(pc, &quot;Pointcut must not be null&quot;);</span><br><span class="line">    if (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回自身</span><br><span class="line">    MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line">    if (methodMatcher == MethodMatcher.TRUE) &#123;</span><br><span class="line">        // No need to iterate the methods if we&apos;re matching any method anyway...</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null;</span><br><span class="line">    if (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">        introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; classes = new LinkedHashSet&lt;&gt;();</span><br><span class="line">    //获取用户定义的类</span><br><span class="line">    if (!Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">        classes.add(ClassUtils.getUserClass(targetClass));</span><br><span class="line">    &#125;</span><br><span class="line">    classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line"></span><br><span class="line">    for (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">        Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line">        //有一个方法匹配,即认为匹配</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if (introductionAwareMethodMatcher != null ?</span><br><span class="line">                    introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :</span><br><span class="line">                    methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、TransactionAttributeSourcePointcut的matches方法"><a href="#5、TransactionAttributeSourcePointcut的matches方法" class="headerlink" title="5、TransactionAttributeSourcePointcut的matches方法"></a>5、TransactionAttributeSourcePointcut的matches方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean matches(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    //已经是该代理类</span><br><span class="line">    if (targetClass != null &amp;&amp; TransactionalProxy.class.isAssignableFrom(targetClass)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取AnnotationTransactionAttributeSource的bean</span><br><span class="line">    TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">    return (tas == null || tas.getTransactionAttribute(method, targetClass) != null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、实例化AnnotationTransactionAttributeSource"><a href="#6、实例化AnnotationTransactionAttributeSource" class="headerlink" title="6、实例化AnnotationTransactionAttributeSource"></a>6、实例化AnnotationTransactionAttributeSource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationTransactionAttributeSource() &#123;</span><br><span class="line">    this(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) &#123;</span><br><span class="line">    this.publicMethodsOnly = publicMethodsOnly;</span><br><span class="line">    this.annotationParsers = new LinkedHashSet&lt;&gt;(2);</span><br><span class="line">    //@Transactional注解解析器</span><br><span class="line">    this.annotationParsers.add(new SpringTransactionAnnotationParser());</span><br><span class="line">    if (jta12Present) &#123;</span><br><span class="line">        //javax.transaction.Transactional注解</span><br><span class="line">        this.annotationParsers.add(new JtaTransactionAnnotationParser());</span><br><span class="line">    &#125;</span><br><span class="line">    if (ejb3Present) &#123;</span><br><span class="line">        //javax.ejb.TransactionAttribute注解</span><br><span class="line">        this.annotationParsers.add(new Ejb3TransactionAnnotationParser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法"><a href="#7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法" class="headerlink" title="7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法"></a>7、AbstractFallbackTransactionAttributeSource的getTransactionAttribute方法</h4><p>AnnotationTransactionAttributeSource的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    //Object的方法不用代理</span><br><span class="line">    if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // First, see if we have a cached value.</span><br><span class="line">    Object cacheKey = getCacheKey(method, targetClass);</span><br><span class="line">    Object cached = this.attributeCache.get(cacheKey);</span><br><span class="line">    if (cached != null) &#123;</span><br><span class="line">        // Value will either be canonical value indicating there is no transaction attribute,</span><br><span class="line">        // or an actual transaction attribute.</span><br><span class="line">        if (cached == NULL_TRANSACTION_ATTRIBUTE) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return (TransactionAttribute) cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // We need to work it out.</span><br><span class="line">        //提取事务属性</span><br><span class="line">        TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);</span><br><span class="line">        // Put it in the cache.</span><br><span class="line">        //添加缓存</span><br><span class="line">        if (txAttr == null) &#123;</span><br><span class="line">            this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //获取方法标识，默认类名加方法名</span><br><span class="line">            String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass);</span><br><span class="line">            if (txAttr instanceof DefaultTransactionAttribute) &#123;</span><br><span class="line">                ((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Adding transactional method &apos;&quot; + methodIdentification + &quot;&apos; with attribute: &quot; + txAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            this.attributeCache.put(cacheKey, txAttr);</span><br><span class="line">        &#125;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法"><a href="#8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法" class="headerlink" title="8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法"></a>8、AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    // Don&apos;t allow no-public methods as required.</span><br><span class="line">    //只有public方法可创建事务</span><br><span class="line">    if (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // The method may be on an interface, but we need attributes from the target class.</span><br><span class="line">    // If the target class is null, the method will be unchanged.</span><br><span class="line">    //获取实现类的该方法</span><br><span class="line">    Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);</span><br><span class="line"></span><br><span class="line">    // First try is the method in the target class.</span><br><span class="line">    //查找方法上的事务注解属性</span><br><span class="line">    TransactionAttribute txAttr = findTransactionAttribute(specificMethod);</span><br><span class="line">    if (txAttr != null) &#123;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Second try is the transaction attribute on the target class.</span><br><span class="line">    //查找方法所在类上的事务注解属性</span><br><span class="line">    txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());</span><br><span class="line">    if (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">        return txAttr;</span><br><span class="line">    &#125;</span><br><span class="line">    //存在接口</span><br><span class="line">    if (specificMethod != method) &#123;</span><br><span class="line">        // Fallback is to look at the original method.</span><br><span class="line">        //查找接口方法</span><br><span class="line">        txAttr = findTransactionAttribute(method);</span><br><span class="line">        if (txAttr != null) &#123;</span><br><span class="line">            return txAttr;</span><br><span class="line">        &#125;</span><br><span class="line">        // Last fallback is the class of the original method.</span><br><span class="line">        //查找接口</span><br><span class="line">        txAttr = findTransactionAttribute(method.getDeclaringClass());</span><br><span class="line">        if (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">            return txAttr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AnnotationTransactionAttributeSource的findTransactionAttribute方法"><a href="#9、AnnotationTransactionAttributeSource的findTransactionAttribute方法" class="headerlink" title="9、AnnotationTransactionAttributeSource的findTransactionAttribute方法"></a>9、AnnotationTransactionAttributeSource的findTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute findTransactionAttribute(Method method) &#123;</span><br><span class="line">    return determineTransactionAttribute(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法"><a href="#10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法" class="headerlink" title="10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法"></a>10、AnnotationTransactionAttributeSource的determineTransactionAttribute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) &#123;</span><br><span class="line">    for (TransactionAnnotationParser annotationParser : this.annotationParsers) &#123;</span><br><span class="line">        //解析注解</span><br><span class="line">        TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae);</span><br><span class="line">        if (attr != null) &#123;</span><br><span class="line">            return attr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法"><a href="#11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法" class="headerlink" title="11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法"></a>11、SpringTransactionAnnotationParser的parseTransactionAnnotation方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public TransactionAttribute parseTransactionAnnotation(AnnotatedElement ae) &#123;</span><br><span class="line">    //获取方法、方法类、父类的注解和元注解属性</span><br><span class="line">    AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(</span><br><span class="line">            ae, Transactional.class, false, false);</span><br><span class="line">    if (attributes != null) &#123;</span><br><span class="line">        //解析注解属性</span><br><span class="line">        return parseTransactionAnnotation(attributes);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">protected TransactionAttribute parseTransactionAnnotation(AnnotationAttributes attributes) &#123;</span><br><span class="line">    RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute();</span><br><span class="line">    //解析propagation</span><br><span class="line">    Propagation propagation = attributes.getEnum(&quot;propagation&quot;);</span><br><span class="line">    rbta.setPropagationBehavior(propagation.value());</span><br><span class="line">    //解析isolation</span><br><span class="line">    Isolation isolation = attributes.getEnum(&quot;isolation&quot;);</span><br><span class="line">    rbta.setIsolationLevel(isolation.value());</span><br><span class="line">    //解析timeout</span><br><span class="line">    rbta.setTimeout(attributes.getNumber(&quot;timeout&quot;).intValue());</span><br><span class="line">    //解析readOnly</span><br><span class="line">    rbta.setReadOnly(attributes.getBoolean(&quot;readOnly&quot;));</span><br><span class="line">    //解析value</span><br><span class="line">    rbta.setQualifier(attributes.getString(&quot;value&quot;));</span><br><span class="line">    ArrayList&lt;RollbackRuleAttribute&gt; rollBackRules = new ArrayList&lt;&gt;();</span><br><span class="line">    //解析rollbackFor</span><br><span class="line">    Class&lt;?&gt;[] rbf = attributes.getClassArray(&quot;rollbackFor&quot;);</span><br><span class="line">    for (Class&lt;?&gt; rbRule : rbf) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = new RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析rollbackForClassName</span><br><span class="line">    String[] rbfc = attributes.getStringArray(&quot;rollbackForClassName&quot;);</span><br><span class="line">    for (String rbRule : rbfc) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = new RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析noRollbackFor</span><br><span class="line">    Class&lt;?&gt;[] nrbf = attributes.getClassArray(&quot;noRollbackFor&quot;);</span><br><span class="line">    for (Class&lt;?&gt; rbRule : nrbf) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = new NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    //解析noRollbackForClassName</span><br><span class="line">    String[] nrbfc = attributes.getStringArray(&quot;noRollbackForClassName&quot;);</span><br><span class="line">    for (String rbRule : nrbfc) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = new NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.add(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    rbta.getRollbackRules().addAll(rollBackRules);</span><br><span class="line">    return rbta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、事务增强器"><a href="#三、事务增强器" class="headerlink" title="三、事务增强器"></a>三、事务增强器</h3><h4 id="1、TransactionInterceptor的invoke方法"><a href="#1、TransactionInterceptor的invoke方法" class="headerlink" title="1、TransactionInterceptor的invoke方法"></a>1、TransactionInterceptor的invoke方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Object invoke(final MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">    // Work out the target class: may be &#123;@code null&#125;.</span><br><span class="line">    // The TransactionAttributeSource should be passed the target class</span><br><span class="line">    // as well as the method, which may be from an interface.</span><br><span class="line">    //获取被代理的类</span><br><span class="line">    Class&lt;?&gt; targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line"></span><br><span class="line">    // Adapt to TransactionAspectSupport&apos;s invokeWithinTransaction...</span><br><span class="line">    //执行事务及方法</span><br><span class="line">    return invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、TransactionInterceptor的invokeWithinTransaction方法"><a href="#2、TransactionInterceptor的invokeWithinTransaction方法" class="headerlink" title="2、TransactionInterceptor的invokeWithinTransaction方法"></a>2、TransactionInterceptor的invokeWithinTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected Object invokeWithinTransaction(Method method, @Nullable Class&lt;?&gt; targetClass,</span><br><span class="line">        final InvocationCallback invocation) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">    // If the transaction attribute is null, the method is non-transactional.</span><br><span class="line">    TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">    //获取事务属性</span><br><span class="line">    final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null);</span><br><span class="line">    //获取注册的事务管理器,DataSourceTransactionManager</span><br><span class="line">    final PlatformTransactionManager tm = determineTransactionManager(txAttr);</span><br><span class="line">    //获取方法唯一标识，类名加方法名</span><br><span class="line">    final String joinpointIdentification = methodIdentification(method, targetClass, txAttr);</span><br><span class="line">    //声明式事务处理</span><br><span class="line">    if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line">        // Standard transaction demarcation with getTransaction and commit/rollback calls.</span><br><span class="line">        //创建TransactionInfo</span><br><span class="line">        TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class="line">        Object retVal = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // This is an around advice: Invoke the next interceptor in the chain.</span><br><span class="line">            // This will normally result in a target object being invoked.</span><br><span class="line">            //执行被增强方法</span><br><span class="line">            retVal = invocation.proceedWithInvocation();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            // target invocation exception</span><br><span class="line">            //异常回滚</span><br><span class="line">            completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            //清除本事务信息，并恢复上一个事务信息</span><br><span class="line">            cleanupTransactionInfo(txInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        commitTransactionAfterReturning(txInfo);</span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    //编程式事务处理</span><br><span class="line">    else &#123;</span><br><span class="line">        final ThrowableHolder throwableHolder = new ThrowableHolder();</span><br><span class="line"></span><br><span class="line">        // It&apos;s a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span><br><span class="line">        try &#123;</span><br><span class="line">            Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -&gt; &#123;</span><br><span class="line">                //事务信息注册到本地线程</span><br><span class="line">                TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">                try &#123;</span><br><span class="line">                    return invocation.proceedWithInvocation();</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Throwable ex) &#123;</span><br><span class="line">                    if (txAttr.rollbackOn(ex)) &#123;</span><br><span class="line">                        // A RuntimeException: will lead to a rollback.</span><br><span class="line">                        if (ex instanceof RuntimeException) &#123;</span><br><span class="line">                            throw (RuntimeException) ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            throw new ThrowableHolderException(ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        // A normal return value: will lead to a commit.</span><br><span class="line">                        throwableHolder.throwable = ex;</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                finally &#123;</span><br><span class="line">                    cleanupTransactionInfo(txInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // Check result state: It might indicate a Throwable to rethrow.</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                throw throwableHolder.throwable;</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ThrowableHolderException ex) &#123;</span><br><span class="line">            throw ex.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TransactionSystemException ex2) &#123;</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, throwableHolder.throwable);</span><br><span class="line">                ex2.initApplicationException(throwableHolder.throwable);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex2;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex2) &#123;</span><br><span class="line">            if (throwableHolder.throwable != null) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, throwableHolder.throwable);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、TransactionInterceptor的createTransactionIfNecessary方法"><a href="#3、TransactionInterceptor的createTransactionIfNecessary方法" class="headerlink" title="3、TransactionInterceptor的createTransactionIfNecessary方法"></a>3、TransactionInterceptor的createTransactionIfNecessary方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="line">protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,</span><br><span class="line">        @Nullable TransactionAttribute txAttr, final String joinpointIdentification) &#123;</span><br><span class="line"></span><br><span class="line">    // If no name specified, apply method identification as transaction name.</span><br><span class="line">    if (txAttr != null &amp;&amp; txAttr.getName() == null) &#123;</span><br><span class="line">        txAttr = new DelegatingTransactionAttribute(txAttr) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String getName() &#123;</span><br><span class="line">                return joinpointIdentification;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransactionStatus status = null;</span><br><span class="line">    if (txAttr != null) &#123;</span><br><span class="line">        if (tm != null) &#123;</span><br><span class="line">            //获取TransactionStatus</span><br><span class="line">            status = tm.getTransaction(txAttr);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Skipping transactional joinpoint [&quot; + joinpointIdentification +</span><br><span class="line">                        &quot;] because no transaction manager has been configured&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //为TransactionStatus创建一个TransactionInfo,并存入线程变量，并挂起老的TransactionStatus</span><br><span class="line">    return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractPlatformTransactionManager的getTransaction方法"><a href="#4、AbstractPlatformTransactionManager的getTransaction方法" class="headerlink" title="4、AbstractPlatformTransactionManager的getTransaction方法"></a>4、AbstractPlatformTransactionManager的getTransaction方法</h4><p>DataSourceTransactionManager的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException &#123;</span><br><span class="line">    //获取当前线程的事务</span><br><span class="line">    Object transaction = doGetTransaction();</span><br><span class="line"></span><br><span class="line">    // Cache debug flag to avoid repeated checks.</span><br><span class="line">    boolean debugEnabled = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">    if (definition == null) &#123;</span><br><span class="line">        // Use defaults if no transaction definition given.</span><br><span class="line">        definition = new DefaultTransactionDefinition();</span><br><span class="line">    &#125;</span><br><span class="line">    //是否存在事务，通过ConnectionHolder的transactionActive属性判断</span><br><span class="line">    if (isExistingTransaction(transaction)) &#123;</span><br><span class="line">        // Existing transaction found -&gt; check propagation behavior to find out how to behave.</span><br><span class="line">        //处理新事务</span><br><span class="line">        return handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check definition settings for new transaction.</span><br><span class="line">    //事务超时属性验证</span><br><span class="line">    if (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">        throw new InvalidTimeoutException(&quot;Invalid transaction timeout&quot;, definition.getTimeout());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span><br><span class="line">    //属性值mandatory，要求存在事务</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;No existing transaction found for transaction marked with propagation &apos;mandatory&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //需要新建事务</span><br><span class="line">    else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        //空挂起</span><br><span class="line">        SuspendedResourcesHolder suspendedResources = suspend(null);</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Creating new transaction with name [&quot; + definition.getName() + &quot;]: &quot; + definition);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            //是否能够创建新事务</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            //创建新TransactionStatus</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">            //设置事务属性</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            //绑定事务到当前线程</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            resume(null, suspendedResources);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建空事务</span><br><span class="line">    else &#123;</span><br><span class="line">        // Create &quot;empty&quot; transaction: no actual transaction, but potentially synchronization.</span><br><span class="line">        if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(&quot;Custom isolation level specified but no actual transaction initiated; &quot; +</span><br><span class="line">                    &quot;isolation level will effectively be ignored: &quot; + definition);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">        return prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、DataSourceTransactionManager的doGetTransaction方法"><a href="#5、DataSourceTransactionManager的doGetTransaction方法" class="headerlink" title="5、DataSourceTransactionManager的doGetTransaction方法"></a>5、DataSourceTransactionManager的doGetTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object doGetTransaction() &#123;</span><br><span class="line">    //创建事务</span><br><span class="line">    DataSourceTransactionObject txObject = new DataSourceTransactionObject();</span><br><span class="line">    //设置是否允许保存点</span><br><span class="line">    txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line">    //获取事务数据库连接容器，不存在返回null</span><br><span class="line">    ConnectionHolder conHolder =</span><br><span class="line">            (ConnectionHolder) TransactionSynchronizationManager.getResource(obtainDataSource());</span><br><span class="line">    //事务中设置连接容器，false表示旧，不存在返回null事务</span><br><span class="line">    txObject.setConnectionHolder(conHolder, false);</span><br><span class="line">    return txObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（三、4）DataSourceTransactionManager的doBegin方法"><a href="#6、接（三、4）DataSourceTransactionManager的doBegin方法" class="headerlink" title="6、接（三、4）DataSourceTransactionManager的doBegin方法"></a>6、接（三、4）DataSourceTransactionManager的doBegin方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doBegin(Object transaction, TransactionDefinition definition) &#123;</span><br><span class="line">    //事务</span><br><span class="line">    DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line">    Connection con = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //事务中未设置连接容器</span><br><span class="line">        if (!txObject.hasConnectionHolder() ||</span><br><span class="line">                txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">            //从数据源中获取连接</span><br><span class="line">            Connection newCon = obtainDataSource().getConnection();</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Acquired Connection [&quot; + newCon + &quot;] for JDBC transaction&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置连接容器</span><br><span class="line">            txObject.setConnectionHolder(new ConnectionHolder(newCon), true);</span><br><span class="line">        &#125;</span><br><span class="line">        //设置连接容器已被事务获取</span><br><span class="line">        txObject.getConnectionHolder().setSynchronizedWithTransaction(true);</span><br><span class="line">        con = txObject.getConnectionHolder().getConnection();</span><br><span class="line">        //设置只读、隔离级别属性</span><br><span class="line">        Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class="line">        //设置隔离级别</span><br><span class="line">        txObject.setPreviousIsolationLevel(previousIsolationLevel);</span><br><span class="line"></span><br><span class="line">        // Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span><br><span class="line">        // so we don&apos;t want to do it unnecessarily (for example if we&apos;ve explicitly</span><br><span class="line">        // configured the connection pool to set it already).</span><br><span class="line">        //改变自动提交</span><br><span class="line">        if (con.getAutoCommit()) &#123;</span><br><span class="line">            txObject.setMustRestoreAutoCommit(true);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Switching JDBC Connection [&quot; + con + &quot;] to manual commit&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            con.setAutoCommit(false);</span><br><span class="line">        &#125;</span><br><span class="line">        //待子类实现</span><br><span class="line">        prepareTransactionalConnection(con, definition);</span><br><span class="line">        //设置当前连接存在事务</span><br><span class="line">        txObject.getConnectionHolder().setTransactionActive(true);</span><br><span class="line">        //设置超时时间</span><br><span class="line">        int timeout = determineTimeout(definition);</span><br><span class="line">        if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">            txObject.getConnectionHolder().setTimeoutInSeconds(timeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Bind the connection holder to the thread.</span><br><span class="line">        //新事务，连接容器绑定到当前线程</span><br><span class="line">        if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">            TransactionSynchronizationManager.bindResource(obtainDataSource(), txObject.getConnectionHolder());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">            DataSourceUtils.releaseConnection(con, obtainDataSource());</span><br><span class="line">            txObject.setConnectionHolder(null, false);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new CannotCreateTransactionException(&quot;Could not open JDBC Connection for transaction&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法"><a href="#7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法" class="headerlink" title="7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法"></a>7、接（三、4）AbstractPlatformTransactionManager的prepareSynchronization方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) &#123;</span><br><span class="line">    //新的事务</span><br><span class="line">    if (status.isNewSynchronization()) &#123;</span><br><span class="line">        //事务绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());</span><br><span class="line">        //隔离级别绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(</span><br><span class="line">                definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT ?</span><br><span class="line">                        definition.getIsolationLevel() : null);</span><br><span class="line">        //只读属性绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionReadOnly(definition.isReadOnly());</span><br><span class="line">        //事务名称绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.setCurrentTransactionName(definition.getName());</span><br><span class="line">        //回调函数集合绑定到当前线程</span><br><span class="line">        TransactionSynchronizationManager.initSynchronization();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法"><a href="#8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法" class="headerlink" title="8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法"></a>8、接（三、4）AbstractPlatformTransactionManager的handleExistingTransaction方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">private TransactionStatus handleExistingTransaction(</span><br><span class="line">        TransactionDefinition definition, Object transaction, boolean debugEnabled)</span><br><span class="line">        throws TransactionException &#123;</span><br><span class="line">    //以非事务方式执行，如果当前存在事务，则抛出异常</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Existing transaction found for transaction marked with propagation &apos;never&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Suspending current transaction&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //挂起当前事务</span><br><span class="line">        Object suspendedResources = suspend(transaction);</span><br><span class="line">        boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">        //创建空事务</span><br><span class="line">        return prepareTransactionStatus(</span><br><span class="line">                definition, null, false, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">    &#125;</span><br><span class="line">    //新建事务，如果当前存在事务，把当前事务挂起</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Suspending current transaction, creating new transaction with name [&quot; +</span><br><span class="line">                    definition.getName() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //挂起当前事务</span><br><span class="line">        SuspendedResourcesHolder suspendedResources = suspend(transaction);</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建新事务</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error beginEx) &#123;</span><br><span class="line">            resumeAfterBeginException(transaction, suspendedResources, beginEx);</span><br><span class="line">            throw beginEx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //嵌套事务</span><br><span class="line">    if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">        //是否允许嵌套事务</span><br><span class="line">        if (!isNestedTransactionAllowed()) &#123;</span><br><span class="line">            throw new NestedTransactionNotSupportedException(</span><br><span class="line">                    &quot;Transaction manager does not allow nested transactions by default - &quot; +</span><br><span class="line">                    &quot;specify &apos;nestedTransactionAllowed&apos; property with value &apos;true&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (debugEnabled) &#123;</span><br><span class="line">            logger.debug(&quot;Creating nested transaction with name [&quot; + definition.getName() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //嵌套事务使用保存点</span><br><span class="line">        if (useSavepointForNestedTransaction()) &#123;</span><br><span class="line">            // Create savepoint within existing Spring-managed transaction,</span><br><span class="line">            // through the SavepointManager API implemented by TransactionStatus.</span><br><span class="line">            // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span><br><span class="line">            //用原来的transaction创建新的TransactionStatus</span><br><span class="line">            DefaultTransactionStatus status =</span><br><span class="line">                    prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null);</span><br><span class="line">            //创建保存点</span><br><span class="line">            status.createAndHoldSavepoint();</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //不能使用的保存点，如JTA，创建新事务</span><br><span class="line">            // Nested transaction through nested begin and commit/rollback calls.</span><br><span class="line">            // Usually only for JTA: Spring synchronization might get activated here</span><br><span class="line">            // in case of a pre-existing JTA transaction.</span><br><span class="line">            boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">                    definition, transaction, true, newSynchronization, debugEnabled, null);</span><br><span class="line">            doBegin(transaction, definition);</span><br><span class="line">            prepareSynchronization(status, definition);</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span><br><span class="line">    if (debugEnabled) &#123;</span><br><span class="line">        logger.debug(&quot;Participating in existing transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (isValidateExistingTransaction()) &#123;</span><br><span class="line">        if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123;</span><br><span class="line">            Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">            if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) &#123;</span><br><span class="line">                Constants isoConstants = DefaultTransactionDefinition.constants;</span><br><span class="line">                throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">                        definition + &quot;] specifies isolation level which is incompatible with existing transaction: &quot; +</span><br><span class="line">                        (currentIsolationLevel != null ?</span><br><span class="line">                                isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :</span><br><span class="line">                                &quot;(unknown)&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!definition.isReadOnly()) &#123;</span><br><span class="line">            if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span><br><span class="line">                throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">                        definition + &quot;] is not marked as read-only but existing transaction is&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建空事务</span><br><span class="line">    boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">    return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、AbstractPlatformTransactionManager的suspend方法"><a href="#9、AbstractPlatformTransactionManager的suspend方法" class="headerlink" title="9、AbstractPlatformTransactionManager的suspend方法"></a>9、AbstractPlatformTransactionManager的suspend方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected final SuspendedResourcesHolder suspend(@Nullable Object transaction) throws TransactionException &#123;</span><br><span class="line">    //事务信息已经绑定到当前线程</span><br><span class="line">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">        //事务回调函数</span><br><span class="line">        List&lt;TransactionSynchronization&gt; suspendedSynchronizations = doSuspendSynchronization();</span><br><span class="line">        try &#123;</span><br><span class="line">            Object suspendedResources = null;</span><br><span class="line">            if (transaction != null) &#123;</span><br><span class="line">                //挂起事务，ConnectionHolder取消绑定当前线程，并返回</span><br><span class="line">                suspendedResources = doSuspend(transaction);</span><br><span class="line">            &#125;</span><br><span class="line">            //清除当前线程绑定的事务信息</span><br><span class="line">            String name = TransactionSynchronizationManager.getCurrentTransactionName();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionName(null);</span><br><span class="line">            boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionReadOnly(false);</span><br><span class="line">            Integer isolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">            TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(null);</span><br><span class="line">            boolean wasActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line">            TransactionSynchronizationManager.setActualTransactionActive(false);</span><br><span class="line">            //创建挂起事务信息</span><br><span class="line">            return new SuspendedResourcesHolder(</span><br><span class="line">                    suspendedResources, suspendedSynchronizations, name, readOnly, isolationLevel, wasActive);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            // doSuspend failed - original transaction is still active...</span><br><span class="line">            //挂起失败，恢复当前事务</span><br><span class="line">            doResumeSynchronization(suspendedSynchronizations);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (transaction != null) &#123;</span><br><span class="line">        // Transaction active but no synchronization active.</span><br><span class="line">        //挂起事务</span><br><span class="line">        Object suspendedResources = doSuspend(transaction);</span><br><span class="line">        //创建挂起事务信息</span><br><span class="line">        return new SuspendedResourcesHolder(suspendedResources);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Neither transaction nor synchronization active.</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法"><a href="#10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法" class="headerlink" title="10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法"></a>10、接（三、2）TransactionInterceptor的completeTransactionAfterThrowing方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) &#123;</span><br><span class="line">    //存在事务</span><br><span class="line">    if (txInfo != null &amp;&amp; txInfo.getTransactionStatus() != null) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() +</span><br><span class="line">                    &quot;] after exception: &quot; + ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //捕获到须回滚的异常</span><br><span class="line">        if (txInfo.transactionAttribute != null &amp;&amp; txInfo.transactionAttribute.rollbackOn(ex)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //回滚</span><br><span class="line">                txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (TransactionSystemException ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">                ex2.initApplicationException(ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //捕获到不须回滚的异常</span><br><span class="line">        else &#123;</span><br><span class="line">            // We don&apos;t roll back on this exception.</span><br><span class="line">            // Will still roll back if TransactionStatus.isRollbackOnly() is true.</span><br><span class="line">            try &#123;</span><br><span class="line">                //提交事务，任然有可能回滚TransactionStatus.isRollbackOnly()</span><br><span class="line">                txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (TransactionSystemException ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">                ex2.initApplicationException(ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">                logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">                throw ex2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、AbstractPlatformTransactionManager的rollback方法"><a href="#11、AbstractPlatformTransactionManager的rollback方法" class="headerlink" title="11、AbstractPlatformTransactionManager的rollback方法"></a>11、AbstractPlatformTransactionManager的rollback方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void rollback(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    //已被提交或回滚</span><br><span class="line">    if (status.isCompleted()) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">    //回滚</span><br><span class="line">    processRollback(defStatus, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractPlatformTransactionManager的processRollback方法"><a href="#12、AbstractPlatformTransactionManager的processRollback方法" class="headerlink" title="12、AbstractPlatformTransactionManager的processRollback方法"></a>12、AbstractPlatformTransactionManager的processRollback方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">private void processRollback(DefaultTransactionStatus status, boolean unexpected) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean unexpectedRollback = unexpected;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //调用回调函数的beforeCompletion方法</span><br><span class="line">            triggerBeforeCompletion(status);</span><br><span class="line"></span><br><span class="line">            if (status.hasSavepoint()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Rolling back transaction to savepoint&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //回滚到保存点</span><br><span class="line">                status.rollbackToHeldSavepoint();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (status.isNewTransaction()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Initiating transaction rollback&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                //回滚</span><br><span class="line">                doRollback(status);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // Participating in larger transaction</span><br><span class="line">                //全局事务的部份</span><br><span class="line">                if (status.hasTransaction()) &#123;</span><br><span class="line">                    //TransactionStatus中回滚属性设置为true,设置全局事务回滚</span><br><span class="line">                    if (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line">                        if (status.isDebug()) &#123;</span><br><span class="line">                            logger.debug(&quot;Participating transaction failed - marking existing transaction as rollback-only&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        //设置transaction中回滚属性为true</span><br><span class="line">                        doSetRollbackOnly(status);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (status.isDebug()) &#123;</span><br><span class="line">                            logger.debug(&quot;Participating transaction failed - letting transaction originator decide on rollback&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    //打印错误日志</span><br><span class="line">                    logger.debug(&quot;Should roll back transaction but cannot - no transaction available&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                // Unexpected rollback only matters here if we&apos;re asked to fail early</span><br><span class="line">                if (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                    unexpectedRollback = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        //回调函数的afterCompletion方法</span><br><span class="line">        triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"></span><br><span class="line">        // Raise UnexpectedRollbackException if we had a global rollback-only marker</span><br><span class="line">        if (unexpectedRollback) &#123;</span><br><span class="line">            throw new UnexpectedRollbackException(</span><br><span class="line">                    &quot;Transaction rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //清空当前事务，并恢复挂起的事务</span><br><span class="line">        cleanupAfterCompletion(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法"><a href="#13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法" class="headerlink" title="13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法"></a>13、接（三、2）TransactionInterceptor的commitTransactionAfterReturning方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) &#123;</span><br><span class="line">    if (txInfo != null &amp;&amp; txInfo.getTransactionStatus() != null) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、AbstractPlatformTransactionManager的commit方法"><a href="#14、AbstractPlatformTransactionManager的commit方法" class="headerlink" title="14、AbstractPlatformTransactionManager的commit方法"></a>14、AbstractPlatformTransactionManager的commit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void commit(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    //已提交或回滚</span><br><span class="line">    if (status.isCompleted()) &#123;</span><br><span class="line">        throw new IllegalTransactionStateException(</span><br><span class="line">                &quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">    //TransactionStatus中回滚属性设置为true</span><br><span class="line">    if (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line">        if (defStatus.isDebug()) &#123;</span><br><span class="line">            logger.debug(&quot;Transactional code has requested rollback&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //回滚事务</span><br><span class="line">        processRollback(defStatus, false);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //Transaction中回滚属性设置为true</span><br><span class="line">    if (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line">        if (defStatus.isDebug()) &#123;</span><br><span class="line">            logger.debug(&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        processRollback(defStatus, true);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //提交事务</span><br><span class="line">    processCommit(defStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、AbstractPlatformTransactionManager的processCommit方法"><a href="#15、AbstractPlatformTransactionManager的processCommit方法" class="headerlink" title="15、AbstractPlatformTransactionManager的processCommit方法"></a>15、AbstractPlatformTransactionManager的processCommit方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">private void processCommit(DefaultTransactionStatus status) throws TransactionException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean beforeCompletionInvoked = false;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            boolean unexpectedRollback = false;</span><br><span class="line">            //待子类覆盖</span><br><span class="line">            prepareForCommit(status);</span><br><span class="line">            //调用回调函数的beforeCommit方法</span><br><span class="line">            triggerBeforeCommit(status);</span><br><span class="line">            //调用回调函数的beforeCompletion方法</span><br><span class="line">            triggerBeforeCompletion(status);</span><br><span class="line">            beforeCompletionInvoked = true;</span><br><span class="line"></span><br><span class="line">            if (status.hasSavepoint()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Releasing transaction savepoint&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                //释放保存点</span><br><span class="line">                status.releaseHeldSavepoint();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (status.isNewTransaction()) &#123;</span><br><span class="line">                if (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(&quot;Initiating transaction commit&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                //提交事务</span><br><span class="line">                doCommit(status);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Throw UnexpectedRollbackException if we have a global rollback-only</span><br><span class="line">            // marker but still didn&apos;t get a corresponding exception from commit.</span><br><span class="line">            if (unexpectedRollback) &#123;</span><br><span class="line">                throw new UnexpectedRollbackException(</span><br><span class="line">                        &quot;Transaction silently rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (UnexpectedRollbackException ex) &#123;</span><br><span class="line">            // can only be caused by doCommit</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TransactionException ex) &#123;</span><br><span class="line">            // can only be caused by doCommit</span><br><span class="line">            if (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">                doRollbackOnCommitException(status, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">            &#125;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (RuntimeException | Error ex) &#123;</span><br><span class="line">            if (!beforeCompletionInvoked) &#123;</span><br><span class="line">                triggerBeforeCompletion(status);</span><br><span class="line">            &#125;</span><br><span class="line">            doRollbackOnCommitException(status, ex);</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Trigger afterCommit callbacks, with an exception thrown there</span><br><span class="line">        // propagated to callers but the transaction still considered as committed.</span><br><span class="line">        try &#123;</span><br><span class="line">            //调用回调函数的afterCommit方法</span><br><span class="line">            triggerAfterCommit(status);</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            //调用回调函数的afterCompletion方法</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //清空当前事务，并恢复挂起的事务</span><br><span class="line">        cleanupAfterCompletion(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC源码</title>
    <link href="http://yoursite.com/2018/06/27/spring%E6%BA%90%E7%A0%81/SpringMVC%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2018/06/27/spring源码/SpringMVC源码/</id>
    <published>2018-06-27T13:10:29.026Z</published>
    <updated>2018-07-11T12:26:44.285Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>web.xml配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;  </span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </span><br><span class="line">    &lt;param-value&gt;  </span><br><span class="line">        classpath:applicationContext.xml  </span><br><span class="line">    &lt;/param-value&gt;  </span><br><span class="line">&lt;/context-param&gt;  </span><br><span class="line">&lt;listener&gt;  </span><br><span class="line">    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  </span><br><span class="line">&lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;appServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;appServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>applicationContext.xml配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans:beans xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd &quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line">    &lt;!--对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.zjn&quot; /</span><br><span class="line"></span><br><span class="line">    &lt;!-- 这个类用于Spring MVC视图解析 --&gt;</span><br><span class="line">    &lt;beans:bean id=&quot;viewResolver&quot;</span><br><span class="line">        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;beans:property name=&quot;prefix&quot; value=&quot;/WEB-INF/pages/&quot; /&gt;</span><br><span class="line">        &lt;beans:property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">    &lt;/beans:bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义文件上传解析器 --&gt;</span><br><span class="line">    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 设定默认编码 --&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 设定文件上传的最大值为5MB，5*1024*1024 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;5242880&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxInMemorySize&quot; value=&quot;40960&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 上传文件的临时路径 --&gt;</span><br><span class="line">        &lt;property name=&quot;uploadTempDir&quot; value=&quot;fileUpload/temp&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 延迟文件解析 --&gt;</span><br><span class="line">        &lt;property name=&quot;resolveLazily&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans:beans&gt;</span><br></pre></td></tr></table></figure></p><h3 id="一、启动容器"><a href="#一、启动容器" class="headerlink" title="一、启动容器"></a>一、启动容器</h3><h4 id="1、ContextLoaderListener的contextInitialized方法"><a href="#1、ContextLoaderListener的contextInitialized方法" class="headerlink" title="1、ContextLoaderListener的contextInitialized方法"></a>1、ContextLoaderListener的contextInitialized方法</h4><p>tomcat启动时会初始化一个Servlet容器，这样ContextLoaderListener会监听到Servlet的初始化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">public void contextInitialized(ServletContextEvent event) &#123;  </span><br><span class="line">    //初始化ioc容器 </span><br><span class="line">    initWebApplicationContext(event.getServletContext());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、ContextLoader的initWebApplicationContext方法"><a href="#2、ContextLoader的initWebApplicationContext方法" class="headerlink" title="2、ContextLoader的initWebApplicationContext方法"></a>2、ContextLoader的initWebApplicationContext方法</h4><p>ContextLoaderListener的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public WebApplicationContext initWebApplicationContext(ServletContext servletContext) &#123;</span><br><span class="line">    //servlet容器中已存在一个ioc容器</span><br><span class="line">    if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) &#123;</span><br><span class="line">        throw new IllegalStateException(</span><br><span class="line">                &quot;Cannot initialize context because there is already a root application context present - &quot; +</span><br><span class="line">                &quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Log logger = LogFactory.getLog(ContextLoader.class);</span><br><span class="line">    servletContext.log(&quot;Initializing Spring root WebApplicationContext&quot;);</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Root WebApplicationContext: initialization started&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    long startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        // Store context in local instance variable, to guarantee that</span><br><span class="line">        // it is available on ServletContext shutdown.</span><br><span class="line">        if (this.context == null) &#123;</span><br><span class="line">            //创建WebApplicationContext，默认为ContextLoader.properties中配置的XmlWebApplicationContext容器</span><br><span class="line">            this.context = createWebApplicationContext(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">        if (this.context instanceof ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;</span><br><span class="line">            //容器未激活或已关闭</span><br><span class="line">            if (!cwac.isActive()) &#123;</span><br><span class="line">                // The context has not yet been refreshed -&gt; provide services such as</span><br><span class="line">                // setting the parent context, setting the application context id, etc</span><br><span class="line">                if (cwac.getParent() == null) &#123;</span><br><span class="line">                    // The context instance was injected without an explicit parent -&gt;</span><br><span class="line">                    // determine parent for root web application context, if any.</span><br><span class="line">                    //从servlet容器中获取父容器，没有则返回null</span><br><span class="line">                    ApplicationContext parent = loadParentContext(servletContext);</span><br><span class="line">                    cwac.setParent(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                //设置并刷新WebApplicationContext容器</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //将初始化的WebApplicationContext设置到servletContext中</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</span><br><span class="line"></span><br><span class="line">        ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        if (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class="line">            currentContext = this.context;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ccl != null) &#123;</span><br><span class="line">            currentContextPerThread.put(ccl, this.context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Published root WebApplicationContext as ServletContext attribute with name [&quot; +</span><br><span class="line">                    WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            long elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">            logger.info(&quot;Root WebApplicationContext: initialization completed in &quot; + elapsedTime + &quot; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.context;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (RuntimeException ex) &#123;</span><br><span class="line">        logger.error(&quot;Context initialization failed&quot;, ex);</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Error err) &#123;</span><br><span class="line">        logger.error(&quot;Context initialization failed&quot;, err);</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class="line">        throw err;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、ContextLoader的configureAndRefreshWebApplicationContext方法"><a href="#3、ContextLoader的configureAndRefreshWebApplicationContext方法" class="headerlink" title="3、ContextLoader的configureAndRefreshWebApplicationContext方法"></a>3、ContextLoader的configureAndRefreshWebApplicationContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) &#123;</span><br><span class="line">    if (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class="line">        // The application context id is still set to its original default value</span><br><span class="line">        // -&gt; assign a more useful id based on available information</span><br><span class="line">        //设置容器id</span><br><span class="line">        String idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class="line">        if (idParam != null) &#123;</span><br><span class="line">            wac.setId(idParam);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Generate default id...</span><br><span class="line">            wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class="line">                    ObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置ServletContext到容器中</span><br><span class="line">    wac.setServletContext(sc);</span><br><span class="line">    //获得web.xml中配置的contextConfigLocation的值，一般是classpath:applicationContext.xml</span><br><span class="line">    String configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class="line">    if (configLocationParam != null) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocationParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // The wac environment&apos;s #initPropertySources will be called in any case when the context</span><br><span class="line">    // is refreshed; do it eagerly here to ensure servlet property sources are in place for</span><br><span class="line">    // use in any post-processing or initialization that occurs below prior to #refresh</span><br><span class="line">    ConfigurableEnvironment env = wac.getEnvironment();</span><br><span class="line">    if (env instanceof ConfigurableWebEnvironment) &#123;</span><br><span class="line">        ((ConfigurableWebEnvironment) env).initPropertySources(sc, null);</span><br><span class="line">    &#125;</span><br><span class="line">    //执行容器初始化器</span><br><span class="line">    customizeContext(sc, wac);</span><br><span class="line">    //刷新容器上下文</span><br><span class="line">    wac.refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、MvcNamespaceHandler的init方法"><a href="#4、MvcNamespaceHandler的init方法" class="headerlink" title="4、MvcNamespaceHandler的init方法"></a>4、MvcNamespaceHandler的init方法</h4><p>自定义标签解析器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void init() &#123;</span><br><span class="line">    registerBeanDefinitionParser(&quot;annotation-driven&quot;, new AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;default-servlet-handler&quot;, new DefaultServletHandlerBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;interceptors&quot;, new InterceptorsBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;resources&quot;, new ResourcesBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;view-controller&quot;, new ViewControllerBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;redirect-view-controller&quot;, new ViewControllerBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;status-controller&quot;, new ViewControllerBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;view-resolvers&quot;, new ViewResolversBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;tiles-configurer&quot;, new TilesConfigurerBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;freemarker-configurer&quot;, new FreeMarkerConfigurerBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;velocity-configurer&quot;, new VelocityConfigurerBeanDefinitionParser());</span><br><span class="line">    registerBeanDefinitionParser(&quot;groovy-configurer&quot;, new GroovyMarkupConfigurerBeanDefinitionParser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、AnnotationDrivenBeanDefinitionParser的parse方法"><a href="#5、AnnotationDrivenBeanDefinitionParser的parse方法" class="headerlink" title="5、AnnotationDrivenBeanDefinitionParser的parse方法"></a>5、AnnotationDrivenBeanDefinitionParser的parse方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">    Object source = parserContext.extractSource(element);</span><br><span class="line">    </span><br><span class="line">    CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);</span><br><span class="line">    parserContext.pushContainingComponent(compDefinition);</span><br><span class="line"></span><br><span class="line">    //处理&quot;content-negotiation-manager&quot;属性,默认注册ContentNegotiationManagerFactoryBean</span><br><span class="line">    //ContentNegotiationStrategy为request和mediatypes解析的策略类</span><br><span class="line">    RuntimeBeanReference contentNegotiationManager = getContentNegotiationManager(element, source, parserContext);</span><br><span class="line"></span><br><span class="line">    RootBeanDefinition handlerMappingDef = new RootBeanDefinition(RequestMappingHandlerMapping.class);</span><br><span class="line">    handlerMappingDef.setSource(source);</span><br><span class="line">    handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    //优先级设置为最高</span><br><span class="line">    handlerMappingDef.getPropertyValues().add(&quot;order&quot;, 0);</span><br><span class="line">    //添加contentNegotiationManager属性，处理MediaType </span><br><span class="line">    handlerMappingDef.getPropertyValues().add(&quot;contentNegotiationManager&quot;, contentNegotiationManager);</span><br><span class="line">    //注册RequestMappingHandlerMapping的bean</span><br><span class="line">    String methodMappingName = parserContext.getReaderContext().registerWithGeneratedName(handlerMappingDef);</span><br><span class="line">    //表示是否开启多变量映射</span><br><span class="line">    if (element.hasAttribute(&quot;enable-matrix-variables&quot;)) &#123;</span><br><span class="line">        Boolean enableMatrixVariables = Boolean.valueOf(element.getAttribute(&quot;enable-matrix-variables&quot;));</span><br><span class="line">        handlerMappingDef.getPropertyValues().add(&quot;removeSemicolonContent&quot;, !enableMatrixVariables);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (element.hasAttribute(&quot;enableMatrixVariables&quot;)) &#123;</span><br><span class="line">        Boolean enableMatrixVariables = Boolean.valueOf(element.getAttribute(&quot;enableMatrixVariables&quot;));</span><br><span class="line">        handlerMappingDef.getPropertyValues().add(&quot;removeSemicolonContent&quot;, !enableMatrixVariables);</span><br><span class="line">    &#125;</span><br><span class="line">    //配置路径匹配解析器等属性</span><br><span class="line">    configurePathMatchingProperties(handlerMappingDef, element, parserContext);</span><br><span class="line"></span><br><span class="line">    //处理&quot;conversion-service&quot;属性，默认注册FormattingConversionServiceFactoryBean</span><br><span class="line">    //处理一些基本类的格式与转换，比如时间、数字等</span><br><span class="line">    RuntimeBeanReference conversionService = getConversionService(element, source, parserContext);</span><br><span class="line">    //处理&quot;validator&quot;属性,默认注册OptionalValidatorFactoryBean</span><br><span class="line">    //用于javabean的参数校验等</span><br><span class="line">    RuntimeBeanReference validator = getValidator(element, source, parserContext);</span><br><span class="line">    //处理&quot;message-codes-resolver&quot;属性，默认为null</span><br><span class="line">    RuntimeBeanReference messageCodesResolver = getMessageCodesResolver(element);</span><br><span class="line">    //注册ConfigurableWebBindingInitializer的bean，用于数据绑定</span><br><span class="line">    RootBeanDefinition bindingDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class);</span><br><span class="line">    bindingDef.setSource(source);</span><br><span class="line">    bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    bindingDef.getPropertyValues().add(&quot;conversionService&quot;, conversionService);</span><br><span class="line">    bindingDef.getPropertyValues().add(&quot;validator&quot;, validator);</span><br><span class="line">    bindingDef.getPropertyValues().add(&quot;messageCodesResolver&quot;, messageCodesResolver);</span><br><span class="line"></span><br><span class="line">    //处理&quot;message-converters&quot;子节点，消息转换器，可用于向前端发送数据再次自定义组装</span><br><span class="line">    //比如MappingJackson2HttpMessageConverter json转字符串</span><br><span class="line">    ManagedList&lt;?&gt; messageConverters = getMessageConverters(element, source, parserContext);</span><br><span class="line">    //处理&quot;argument-resolvers&quot;子节点,用于参数解析</span><br><span class="line">    ManagedList&lt;?&gt; argumentResolvers = getArgumentResolvers(element, parserContext);</span><br><span class="line">    //处理&quot;return-value-handlers&quot;子节点</span><br><span class="line">    ManagedList&lt;?&gt; returnValueHandlers = getReturnValueHandlers(element, parserContext);</span><br><span class="line">    //处理&quot;async-support&quot;子节点，获取其中的&quot;default-timeout&quot;属性，作为异步处理超时时间，默认null</span><br><span class="line">    String asyncTimeout = getAsyncTimeout(element);</span><br><span class="line">    //处理&quot;async-support&quot;子节点，获取其中的&quot;task-executor&quot;属性。异步任务线程池</span><br><span class="line">    RuntimeBeanReference asyncExecutor = getAsyncExecutor(element);</span><br><span class="line">    //处理&quot;async-support&quot;子节点，获取其中的&quot;callable-interceptors&quot;节点。异步处理callable类型拦截器，默认为空</span><br><span class="line">    ManagedList&lt;?&gt; callableInterceptors = getCallableInterceptors(element, source, parserContext);</span><br><span class="line">    //处理&quot;async-support&quot;子节点，获取其中的&quot;deferred-result-interceptors&quot;节点。拦截器，默认为空</span><br><span class="line">    ManagedList&lt;?&gt; deferredResultInterceptors = getDeferredResultInterceptors(element, source, parserContext);</span><br><span class="line">    //将上述的属性添加到RequestMappingHandlerAdapter中</span><br><span class="line">    RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class);</span><br><span class="line">    handlerAdapterDef.setSource(source);</span><br><span class="line">    handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    handlerAdapterDef.getPropertyValues().add(&quot;contentNegotiationManager&quot;, contentNegotiationManager);</span><br><span class="line">    handlerAdapterDef.getPropertyValues().add(&quot;webBindingInitializer&quot;, bindingDef);</span><br><span class="line">    handlerAdapterDef.getPropertyValues().add(&quot;messageConverters&quot;, messageConverters);</span><br><span class="line">    addResponseBodyAdvice(handlerAdapterDef);</span><br><span class="line">    //解析&quot;ignoreDefaultModelOnRedirect&quot;属性</span><br><span class="line">    if (element.hasAttribute(&quot;ignore-default-model-on-redirect&quot;)) &#123;</span><br><span class="line">        Boolean ignoreDefaultModel = Boolean.valueOf(element.getAttribute(&quot;ignore-default-model-on-redirect&quot;));</span><br><span class="line">        handlerAdapterDef.getPropertyValues().add(&quot;ignoreDefaultModelOnRedirect&quot;, ignoreDefaultModel);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (element.hasAttribute(&quot;ignoreDefaultModelOnRedirect&quot;)) &#123;</span><br><span class="line">        // &quot;ignoreDefaultModelOnRedirect&quot; spelling is deprecated</span><br><span class="line">        Boolean ignoreDefaultModel = Boolean.valueOf(element.getAttribute(&quot;ignoreDefaultModelOnRedirect&quot;));</span><br><span class="line">        handlerAdapterDef.getPropertyValues().add(&quot;ignoreDefaultModelOnRedirect&quot;, ignoreDefaultModel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (argumentResolvers != null) &#123;</span><br><span class="line">        handlerAdapterDef.getPropertyValues().add(&quot;customArgumentResolvers&quot;, argumentResolvers);</span><br><span class="line">    &#125;</span><br><span class="line">    if (returnValueHandlers != null) &#123;</span><br><span class="line">        handlerAdapterDef.getPropertyValues().add(&quot;customReturnValueHandlers&quot;, returnValueHandlers);</span><br><span class="line">    &#125;</span><br><span class="line">    if (asyncTimeout != null) &#123;</span><br><span class="line">        handlerAdapterDef.getPropertyValues().add(&quot;asyncRequestTimeout&quot;, asyncTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">    if (asyncExecutor != null) &#123;</span><br><span class="line">        handlerAdapterDef.getPropertyValues().add(&quot;taskExecutor&quot;, asyncExecutor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handlerAdapterDef.getPropertyValues().add(&quot;callableInterceptors&quot;, callableInterceptors);</span><br><span class="line">    handlerAdapterDef.getPropertyValues().add(&quot;deferredResultInterceptors&quot;, deferredResultInterceptors);</span><br><span class="line">    //注册RequestMappingHandlerAdapter的bean</span><br><span class="line">    String handlerAdapterName = parserContext.getReaderContext().registerWithGeneratedName(handlerAdapterDef);</span><br><span class="line"></span><br><span class="line">    String uriCompContribName = MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME;</span><br><span class="line">    RootBeanDefinition uriCompContribDef = new RootBeanDefinition(CompositeUriComponentsContributorFactoryBean.class);</span><br><span class="line">    uriCompContribDef.setSource(source);</span><br><span class="line">    uriCompContribDef.getPropertyValues().addPropertyValue(&quot;handlerAdapter&quot;, handlerAdapterDef);</span><br><span class="line">    uriCompContribDef.getPropertyValues().addPropertyValue(&quot;conversionService&quot;, conversionService);</span><br><span class="line">    parserContext.getReaderContext().getRegistry().registerBeanDefinition(uriCompContribName, uriCompContribDef);</span><br><span class="line"></span><br><span class="line">    //注册ConversionServiceExposingInterceptor的bean</span><br><span class="line">    RootBeanDefinition csInterceptorDef = new RootBeanDefinition(ConversionServiceExposingInterceptor.class);</span><br><span class="line">    csInterceptorDef.setSource(source);</span><br><span class="line">    csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, conversionService);</span><br><span class="line"></span><br><span class="line">    //注册MappedInterceptor的bean</span><br><span class="line">    RootBeanDefinition mappedCsInterceptorDef = new RootBeanDefinition(MappedInterceptor.class);</span><br><span class="line">    mappedCsInterceptorDef.setSource(source);</span><br><span class="line">    mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, (Object) null);</span><br><span class="line">    mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, csInterceptorDef);</span><br><span class="line">    String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedCsInterceptorDef);</span><br><span class="line"></span><br><span class="line">    //注册ExceptionHandlerExceptionResolver的bean，处理@ExceptionHandler注解</span><br><span class="line">    RootBeanDefinition exceptionHandlerExceptionResolver = new RootBeanDefinition(ExceptionHandlerExceptionResolver.class);</span><br><span class="line">    exceptionHandlerExceptionResolver.setSource(source);</span><br><span class="line">    exceptionHandlerExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    exceptionHandlerExceptionResolver.getPropertyValues().add(&quot;contentNegotiationManager&quot;, contentNegotiationManager);</span><br><span class="line">    exceptionHandlerExceptionResolver.getPropertyValues().add(&quot;messageConverters&quot;, messageConverters);</span><br><span class="line">    exceptionHandlerExceptionResolver.getPropertyValues().add(&quot;order&quot;, 0);</span><br><span class="line">    addResponseBodyAdvice(exceptionHandlerExceptionResolver);</span><br><span class="line">    String methodExceptionResolverName =</span><br><span class="line">            parserContext.getReaderContext().registerWithGeneratedName(exceptionHandlerExceptionResolver);</span><br><span class="line"></span><br><span class="line">    //注册ResponseStatusExceptionResolver的bean，处理异常类上的@ResponseStatus注解</span><br><span class="line">    RootBeanDefinition responseStatusExceptionResolver = new RootBeanDefinition(ResponseStatusExceptionResolver.class);</span><br><span class="line">    responseStatusExceptionResolver.setSource(source);</span><br><span class="line">    responseStatusExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    responseStatusExceptionResolver.getPropertyValues().add(&quot;order&quot;, 1);</span><br><span class="line">    String responseStatusExceptionResolverName =</span><br><span class="line">            parserContext.getReaderContext().registerWithGeneratedName(responseStatusExceptionResolver);</span><br><span class="line"></span><br><span class="line">    //注册DefaultHandlerExceptionResolver的bean，异常处理器</span><br><span class="line">    RootBeanDefinition defaultExceptionResolver = new RootBeanDefinition(DefaultHandlerExceptionResolver.class);</span><br><span class="line">    defaultExceptionResolver.setSource(source);</span><br><span class="line">    defaultExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    defaultExceptionResolver.getPropertyValues().add(&quot;order&quot;, 2);</span><br><span class="line">    String defaultExceptionResolverName =</span><br><span class="line">            parserContext.getReaderContext().registerWithGeneratedName(defaultExceptionResolver);</span><br><span class="line">    //注册组件并广播</span><br><span class="line">    parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, methodMappingName));</span><br><span class="line">    parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, handlerAdapterName));</span><br><span class="line">    parserContext.registerComponent(new BeanComponentDefinition(uriCompContribDef, uriCompContribName));</span><br><span class="line">    parserContext.registerComponent(new BeanComponentDefinition(exceptionHandlerExceptionResolver, methodExceptionResolverName));</span><br><span class="line">    parserContext.registerComponent(new BeanComponentDefinition(responseStatusExceptionResolver, responseStatusExceptionResolverName));</span><br><span class="line">    parserContext.registerComponent(new BeanComponentDefinition(defaultExceptionResolver, defaultExceptionResolverName));</span><br><span class="line">    parserContext.registerComponent(new BeanComponentDefinition(mappedCsInterceptorDef, mappedInterceptorName));</span><br><span class="line"></span><br><span class="line">    // Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not &quot;turned off&quot;</span><br><span class="line">    //注册BeanNameUrlHandlerMapping的bean</span><br><span class="line">    MvcNamespaceUtils.registerDefaultComponents(parserContext, source);</span><br><span class="line"></span><br><span class="line">    parserContext.popAndRegisterContainingComponent();</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法"><a href="#6、AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法" class="headerlink" title="6、AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法"></a>6、AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private void configurePathMatchingProperties(RootBeanDefinition handlerMappingDef,</span><br><span class="line">                                             Element element, ParserContext parserContext) &#123;</span><br><span class="line">    //获取&quot;mvc:annotation-driven&quot;下子节点&quot;mvc:path-matching&quot;                                           </span><br><span class="line">    Element pathMatchingElement = DomUtils.getChildElementByTagName(element, &quot;path-matching&quot;);</span><br><span class="line">    if (pathMatchingElement != null) &#123;</span><br><span class="line">        //是否采用suffix-pattern，即.*,比如/user也匹配/user.*。默认为true</span><br><span class="line">        Object source = parserContext.extractSource(element);</span><br><span class="line">        if (pathMatchingElement.hasAttribute(&quot;suffix-pattern&quot;)) &#123;</span><br><span class="line">            Boolean useSuffixPatternMatch = Boolean.valueOf(pathMatchingElement.getAttribute(&quot;suffix-pattern&quot;));</span><br><span class="line">            handlerMappingDef.getPropertyValues().add(&quot;useSuffixPatternMatch&quot;, useSuffixPatternMatch);</span><br><span class="line">        &#125;</span><br><span class="line">        //是否采用分隔符，特指/，比如/user也匹配/user/。默认为true</span><br><span class="line">        if (pathMatchingElement.hasAttribute(&quot;trailing-slash&quot;)) &#123;</span><br><span class="line">            Boolean useTrailingSlashMatch = Boolean.valueOf(pathMatchingElement.getAttribute(&quot;trailing-slash&quot;));</span><br><span class="line">            handlerMappingDef.getPropertyValues().add(&quot;useTrailingSlashMatch&quot;, useTrailingSlashMatch);</span><br><span class="line">        &#125;</span><br><span class="line">        //是否采用contentNegotiationManager中的格式，比如*.json/*.xml。默认为false</span><br><span class="line">        if (pathMatchingElement.hasAttribute(&quot;registered-suffixes-only&quot;)) &#123;</span><br><span class="line">            Boolean useRegisteredSuffixPatternMatch = Boolean.valueOf(pathMatchingElement.getAttribute(&quot;registered-suffixes-only&quot;));</span><br><span class="line">            handlerMappingDef.getPropertyValues().add(&quot;useRegisteredSuffixPatternMatch&quot;, useRegisteredSuffixPatternMatch);</span><br><span class="line">        &#125;</span><br><span class="line">        RuntimeBeanReference pathHelperRef = null;</span><br><span class="line">        //路径解析帮助类，可指定，默认为UrlPathHelper</span><br><span class="line">        if (pathMatchingElement.hasAttribute(&quot;path-helper&quot;)) &#123;</span><br><span class="line">            pathHelperRef = new RuntimeBeanReference(pathMatchingElement.getAttribute(&quot;path-helper&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        pathHelperRef = MvcNamespaceUtils.registerUrlPathHelper(pathHelperRef, parserContext, source);</span><br><span class="line">        handlerMappingDef.getPropertyValues().add(&quot;urlPathHelper&quot;, pathHelperRef);</span><br><span class="line"></span><br><span class="line">        RuntimeBeanReference pathMatcherRef = null;</span><br><span class="line">        //路径解析器，默认为AntPathMatcher解析器</span><br><span class="line">        if (pathMatchingElement.hasAttribute(&quot;path-matcher&quot;)) &#123;</span><br><span class="line">            pathMatcherRef = new RuntimeBeanReference(pathMatchingElement.getAttribute(&quot;path-matcher&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        pathMatcherRef = MvcNamespaceUtils.registerPathMatcher(pathMatcherRef, parserContext, source);</span><br><span class="line">        handlerMappingDef.getPropertyValues().add(&quot;pathMatcher&quot;, pathMatcherRef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（二、5）AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法"><a href="#7、接（二、5）AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法" class="headerlink" title="7、接（二、5）AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法"></a>7、接（二、5）AnnotationDrivenBeanDefinitionParser的configurePathMatchingProperties方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">private ManagedList&lt;?&gt; getMessageConverters(Element element, Object source, ParserContext parserContext) &#123;</span><br><span class="line">    Element convertersElement = DomUtils.getChildElementByTagName(element, &quot;message-converters&quot;);</span><br><span class="line">    ManagedList&lt;? super Object&gt; messageConverters = new ManagedList&lt;Object&gt;();</span><br><span class="line">    if (convertersElement != null) &#123;</span><br><span class="line">        messageConverters.setSource(source);</span><br><span class="line">        for (Element beanElement : DomUtils.getChildElementsByTagName(convertersElement, &quot;bean&quot;, &quot;ref&quot;)) &#123;</span><br><span class="line">            Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);</span><br><span class="line">            messageConverters.add(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (convertersElement == null || Boolean.valueOf(convertersElement.getAttribute(&quot;register-defaults&quot;))) &#123;</span><br><span class="line">        messageConverters.setSource(source);</span><br><span class="line">        //读写二进制数据</span><br><span class="line">        messageConverters.add(createConverterDefinition(ByteArrayHttpMessageConverter.class, source));</span><br><span class="line"></span><br><span class="line">        //转换器,将请求信息转换为字符串</span><br><span class="line">        RootBeanDefinition stringConverterDef = createConverterDefinition(StringHttpMessageConverter.class, source);</span><br><span class="line">        stringConverterDef.getPropertyValues().add(&quot;writeAcceptCharset&quot;, false);</span><br><span class="line">        messageConverters.add(stringConverterDef);</span><br><span class="line">        //</span><br><span class="line">        messageConverters.add(createConverterDefinition(ResourceHttpMessageConverter.class, source));</span><br><span class="line">        messageConverters.add(createConverterDefinition(SourceHttpMessageConverter.class, source));</span><br><span class="line">        messageConverters.add(createConverterDefinition(AllEncompassingFormHttpMessageConverter.class, source));</span><br><span class="line"></span><br><span class="line">        if (romePresent) &#123;</span><br><span class="line">            messageConverters.add(createConverterDefinition(AtomFeedHttpMessageConverter.class, source));</span><br><span class="line">            messageConverters.add(createConverterDefinition(RssChannelHttpMessageConverter.class, source));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (jackson2XmlPresent) &#123;</span><br><span class="line">            RootBeanDefinition jacksonConverterDef = createConverterDefinition(MappingJackson2XmlHttpMessageConverter.class, source);</span><br><span class="line">            GenericBeanDefinition jacksonFactoryDef = createObjectMapperFactoryDefinition(source);</span><br><span class="line">            jacksonFactoryDef.getPropertyValues().add(&quot;createXmlMapper&quot;, true);</span><br><span class="line">            jacksonConverterDef.getConstructorArgumentValues().addIndexedArgumentValue(0, jacksonFactoryDef);</span><br><span class="line">            messageConverters.add(jacksonConverterDef);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (jaxb2Present) &#123;</span><br><span class="line">            messageConverters.add(createConverterDefinition(Jaxb2RootElementHttpMessageConverter.class, source));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (jackson2Present) &#123;</span><br><span class="line">            RootBeanDefinition jacksonConverterDef = createConverterDefinition(MappingJackson2HttpMessageConverter.class, source);</span><br><span class="line">            GenericBeanDefinition jacksonFactoryDef = createObjectMapperFactoryDefinition(source);</span><br><span class="line">            jacksonConverterDef.getConstructorArgumentValues().addIndexedArgumentValue(0, jacksonFactoryDef);</span><br><span class="line">            messageConverters.add(jacksonConverterDef);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (gsonPresent) &#123;</span><br><span class="line">            messageConverters.add(createConverterDefinition(GsonHttpMessageConverter.class, source));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return messageConverters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、初始化DispatcherServlet"><a href="#二、初始化DispatcherServlet" class="headerlink" title="二、初始化DispatcherServlet"></a>二、初始化DispatcherServlet</h3><h4 id="1、HttpServletBean的init方法"><a href="#1、HttpServletBean的init方法" class="headerlink" title="1、HttpServletBean的init方法"></a>1、HttpServletBean的init方法</h4><p>Servlet被装载后，Servlet容器创建一个Servlet实例并且调用Servlet的init()方法进行初始化。DispatcherServlet父类HttpServletBean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void init() throws ServletException &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Initializing servlet &apos;&quot; + getServletName() + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Set bean properties from init parameters.</span><br><span class="line">    try &#123;</span><br><span class="line">        //获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件</span><br><span class="line">        PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);</span><br><span class="line">        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);</span><br><span class="line">        //获取服务器的各种信息</span><br><span class="line">        ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());</span><br><span class="line">        bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));</span><br><span class="line">        //待子类覆盖</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line">        //将配置的初始化值设置到DispatcherServlet中</span><br><span class="line">        bw.setPropertyValues(pvs, true);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (BeansException ex) &#123;</span><br><span class="line">        logger.error(&quot;Failed to set bean properties on servlet &apos;&quot; + getServletName() + &quot;&apos;&quot;, ex);</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Let subclasses do whatever initialization they like.</span><br><span class="line">    //初始化ioc容器</span><br><span class="line">    initServletBean();</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Servlet &apos;&quot; + getServletName() + &quot;&apos; configured successfully&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、FrameworkServlet的initServletBean方法"><a href="#2、FrameworkServlet的initServletBean方法" class="headerlink" title="2、FrameworkServlet的initServletBean方法"></a>2、FrameworkServlet的initServletBean方法</h4><p>DispatcherServlet的父类FrameworkServlet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void initServletBean() throws ServletException &#123;</span><br><span class="line">    getServletContext().log(&quot;Initializing Spring FrameworkServlet &apos;&quot; + getServletName() + &quot;&apos;&quot;);</span><br><span class="line">    if (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">        this.logger.info(&quot;FrameworkServlet &apos;&quot; + getServletName() + &quot;&apos;: initialization started&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    long startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //初始化IOC容器</span><br><span class="line">        this.webApplicationContext = initWebApplicationContext();</span><br><span class="line">        //带子类实现</span><br><span class="line">        initFrameworkServlet();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ServletException ex) &#123;</span><br><span class="line">        this.logger.error(&quot;Context initialization failed&quot;, ex);</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (RuntimeException ex) &#123;</span><br><span class="line">        this.logger.error(&quot;Context initialization failed&quot;, ex);</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">        long elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">        this.logger.info(&quot;FrameworkServlet &apos;&quot; + getServletName() + &quot;&apos;: initialization completed in &quot; +</span><br><span class="line">                elapsedTime + &quot; ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、FrameworkServlet的initWebApplicationContext方法"><a href="#3、FrameworkServlet的initWebApplicationContext方法" class="headerlink" title="3、FrameworkServlet的initWebApplicationContext方法"></a>3、FrameworkServlet的initWebApplicationContext方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">protected WebApplicationContext initWebApplicationContext() &#123;</span><br><span class="line">    //获取由ContextLoaderListener初始化并注册在ServletContext中的根IOC容器</span><br><span class="line">    WebApplicationContext rootContext =</span><br><span class="line">            WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    WebApplicationContext wac = null;</span><br><span class="line"></span><br><span class="line">    if (this.webApplicationContext != null) &#123;</span><br><span class="line">        // A context instance was injected at construction time -&gt; use it</span><br><span class="line">        wac = this.webApplicationContext;</span><br><span class="line">        if (wac instanceof ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            if (!cwac.isActive()) &#123;</span><br><span class="line">                // The context has not yet been refreshed -&gt; provide services such as</span><br><span class="line">                // setting the parent context, setting the application context id, etc</span><br><span class="line">                if (cwac.getParent() == null) &#123;</span><br><span class="line">                    // The context instance was injected without an explicit parent -&gt; set</span><br><span class="line">                    // the root application context (if any; may be null) as the parent</span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (wac == null) &#123;</span><br><span class="line">        // No context instance was injected at construction time -&gt; see if one</span><br><span class="line">        // has been registered in the servlet context. If one exists, it is assumed</span><br><span class="line">        // that the parent context (if any) has already been set and that the</span><br><span class="line">        // user has performed any initialization such as setting the context id</span><br><span class="line">        //如果为空，说明该Servlet不是由编程式注册到容器中的，在ServletContext中查找上下文，查找得到  </span><br><span class="line">        //说明上下文已经以别的方式初始化并注册在contextAttribute下，直接使用 </span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    if (wac == null) &#123;</span><br><span class="line">        // No context instance is defined for this servlet -&gt; create a local one</span><br><span class="line">        //创建ioc容器</span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!this.refreshEventReceived) &#123;</span><br><span class="line">        // Either the context is not a ConfigurableApplicationContext with refresh</span><br><span class="line">        // support or the context injected at construction time had already been</span><br><span class="line">        // refreshed -&gt; trigger initial onRefresh manually here.</span><br><span class="line">        //初始化相关属性</span><br><span class="line">        onRefresh(wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.publishContext) &#123;</span><br><span class="line">        // Publish the context as a servlet context attribute.</span><br><span class="line">        //IOC容器设置为ServletContext的一个属性</span><br><span class="line">        String attrName = getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">        if (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">            this.logger.debug(&quot;Published WebApplicationContext of servlet &apos;&quot; + getServletName() +</span><br><span class="line">                    &quot;&apos; as ServletContext attribute with name [&quot; + attrName + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DispatcherServlet的onRefresh方法"><a href="#4、DispatcherServlet的onRefresh方法" class="headerlink" title="4、DispatcherServlet的onRefresh方法"></a>4、DispatcherServlet的onRefresh方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onRefresh(ApplicationContext context) &#123;</span><br><span class="line">    initStrategies(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DispatcherServlet的initStrategies方法"><a href="#5、DispatcherServlet的initStrategies方法" class="headerlink" title="5、DispatcherServlet的initStrategies方法"></a>5、DispatcherServlet的initStrategies方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected void initStrategies(ApplicationContext context) &#123;</span><br><span class="line">    //文件上传解析器,配置文件中CommonsMultipartResolver</span><br><span class="line">    initMultipartResolver(context);</span><br><span class="line">    //本地化解析器,默认AcceptHeaderLocaleResolver</span><br><span class="line">    initLocaleResolver(context);</span><br><span class="line">    //主题解析器,默认FixedThemeResolver</span><br><span class="line">    initThemeResolver(context);</span><br><span class="line">    //HandlerMapping，将请求映射到处理器 </span><br><span class="line">    initHandlerMappings(context);</span><br><span class="line">    //HandlerAdapter支持多种类型的处理器 </span><br><span class="line">    initHandlerAdapters(context);</span><br><span class="line">    //HandlerExceptionResolver来解析执行过程中的遇到异常</span><br><span class="line">    initHandlerExceptionResolvers(context);</span><br><span class="line">    //解析请求到视图名,默认DefaultRequestToViewNameTranslator  </span><br><span class="line">    initRequestToViewNameTranslator(context);</span><br><span class="line">    //viewResolver解析逻辑视图到具体视图,默认InternalResourceViewResolver</span><br><span class="line">    initViewResolvers(context);</span><br><span class="line">    //flash映射管理器,默认SessionFlashMapManager</span><br><span class="line">    initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从配置文件DispatcherServlet.properties中获取默认的处理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span><br><span class="line">    org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</span><br><span class="line">    org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</span><br><span class="line">    org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\</span><br><span class="line">    org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</span><br><span class="line">    org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</span><br></pre></td></tr></table></figure></p><h4 id="6、ContentNegotiationManagerFactoryBean的afterPropertiesSet方法"><a href="#6、ContentNegotiationManagerFactoryBean的afterPropertiesSet方法" class="headerlink" title="6、ContentNegotiationManagerFactoryBean的afterPropertiesSet方法"></a>6、ContentNegotiationManagerFactoryBean的afterPropertiesSet方法</h4><p>ContentNegotiationManagerFactoryBean实现了InitializingBean接口，加载bean会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() &#123;</span><br><span class="line">    List&lt;ContentNegotiationStrategy&gt; strategies = new ArrayList&lt;ContentNegotiationStrategy&gt;();</span><br><span class="line"></span><br><span class="line">    if (this.favorPathExtension) &#123;</span><br><span class="line">        PathExtensionContentNegotiationStrategy strategy;</span><br><span class="line">        if (this.servletContext != null) &#123;</span><br><span class="line">            //使用ServletContext.getMIMEType来匹配MediaType</span><br><span class="line">            strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //根据请求路径的后缀名来判断用哪种MediaType</span><br><span class="line">            //常见的xx.html，xx.json,里的.html,.json都是已知的路径扩展名</span><br><span class="line">            strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        //默认忽略未知的路径扩展名</span><br><span class="line">        strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions);</span><br><span class="line">        if (this.useJaf != null) &#123;</span><br><span class="line">            strategy.setUseJaf(this.useJaf);</span><br><span class="line">        &#125;</span><br><span class="line">        strategies.add(strategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.favorParameter) &#123;</span><br><span class="line">        //根据request中的参数来判断mediaType的类型</span><br><span class="line">        //示例http://xxx.xxx.com/xx?format=json</span><br><span class="line">        ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes);</span><br><span class="line">        //默认的参数名为format</span><br><span class="line">        strategy.setParameterName(this.parameterName);</span><br><span class="line">        strategies.add(strategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!this.ignoreAcceptHeader) &#123;</span><br><span class="line">        //从request中取出Accept对应的字段，将其解析包装成MeidaType</span><br><span class="line">        strategies.add(new HeaderContentNegotiationStrategy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(this.defaultNegotiationStrategy != null) &#123;</span><br><span class="line">        strategies.add(defaultNegotiationStrategy);</span><br><span class="line">    &#125;</span><br><span class="line">    this.contentNegotiationManager = new ContentNegotiationManager(strategies);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7、接（二、5）ApplicationObjectSupport的setApplicationContext方法"><a href="#7、接（二、5）ApplicationObjectSupport的setApplicationContext方法" class="headerlink" title="7、接（二、5）ApplicationObjectSupport的setApplicationContext方法"></a>7、接（二、5）ApplicationObjectSupport的setApplicationContext方法</h4><p>RequestMappingHandlerMapping的父类，实现了ApplicationContextAware,加载bean时会执行setApplicationContext方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final void setApplicationContext(ApplicationContext context) throws BeansException &#123;</span><br><span class="line">    if (context == null &amp;&amp; !isContextRequired()) &#123;</span><br><span class="line">        // Reset internal context state.</span><br><span class="line">        this.applicationContext = null;</span><br><span class="line">        this.messageSourceAccessor = null;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (this.applicationContext == null) &#123;</span><br><span class="line">        // Initialize with passed-in context.</span><br><span class="line">        if (!requiredContextClass().isInstance(context)) &#123;</span><br><span class="line">            throw new ApplicationContextException(</span><br><span class="line">                    &quot;Invalid application context: needs to be of type [&quot; + requiredContextClass().getName() + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.applicationContext = context;</span><br><span class="line">        this.messageSourceAccessor = new MessageSourceAccessor(context);</span><br><span class="line">        //初始化</span><br><span class="line">        initApplicationContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Ignore reinitialization if same context passed in.</span><br><span class="line">        if (this.applicationContext != context) &#123;</span><br><span class="line">            throw new ApplicationContextException(</span><br><span class="line">                    &quot;Cannot reinitialize with different application context: current one is [&quot; +</span><br><span class="line">                    this.applicationContext + &quot;], passed-in one is [&quot; + context + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8、AbstractHandlerMapping的initApplicationContext方法"><a href="#8、AbstractHandlerMapping的initApplicationContext方法" class="headerlink" title="8、AbstractHandlerMapping的initApplicationContext方法"></a>8、AbstractHandlerMapping的initApplicationContext方法</h4><p>RequestMappingHandlerMapping的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void initApplicationContext() throws BeansException &#123;</span><br><span class="line">    //待子类实现</span><br><span class="line">    extendInterceptors(this.interceptors);</span><br><span class="line">    //获取ioc容器中注册的MappedInterceptor拦截器，加入mappedInterceptors集合</span><br><span class="line">    detectMappedInterceptors(this.mappedInterceptors);</span><br><span class="line">    //分类interceptors并加入集合</span><br><span class="line">    initInterceptors();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="9、RequestMappingHandlerMapping的afterPropertiesSet方法"><a href="#9、RequestMappingHandlerMapping的afterPropertiesSet方法" class="headerlink" title="9、RequestMappingHandlerMapping的afterPropertiesSet方法"></a>9、RequestMappingHandlerMapping的afterPropertiesSet方法</h4><p>RequestMappingHandlerMapping实现了InitializingBean接口，加载bean会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() &#123;</span><br><span class="line">    if (this.useRegisteredSuffixPatternMatch) &#123;</span><br><span class="line">        //默认为PathExtensionContentNegotiationStrategy</span><br><span class="line">        this.fileExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions());</span><br><span class="line">    &#125;</span><br><span class="line">    super.afterPropertiesSet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、AbstractHandlerMethodMapping的afterPropertiesSet方法"><a href="#10、AbstractHandlerMethodMapping的afterPropertiesSet方法" class="headerlink" title="10、AbstractHandlerMethodMapping的afterPropertiesSet方法"></a>10、AbstractHandlerMethodMapping的afterPropertiesSet方法</h4><p>RequestMappingHandlerMapping的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() &#123;</span><br><span class="line">    initHandlerMethods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="11、AbstractHandlerMethodMapping的initHandlerMethods方法"><a href="#11、AbstractHandlerMethodMapping的initHandlerMethods方法" class="headerlink" title="11、AbstractHandlerMethodMapping的initHandlerMethods方法"></a>11、AbstractHandlerMethodMapping的initHandlerMethods方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protected void initHandlerMethods() &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Looking for request mappings in application context: &quot; + getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line">    //获取容器中注册的所有的beanName</span><br><span class="line">    String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?</span><br><span class="line">            BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :</span><br><span class="line">            getApplicationContext().getBeanNamesForType(Object.class));</span><br><span class="line"></span><br><span class="line">    for (String beanName : beanNames) &#123;</span><br><span class="line">        //该类不是scoped代理且有@Controller或@RequestMapping注解</span><br><span class="line">        if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX) &amp;&amp;</span><br><span class="line">                isHandler(getApplicationContext().getType(beanName)))&#123;</span><br><span class="line">            //查找并注册类中注解了@RequestMapping的方法</span><br><span class="line">            detectHandlerMethods(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //待子类实现</span><br><span class="line">    handlerMethodsInitialized(getHandlerMethods());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractHandlerMethodMapping的initHandlerMethods方法"><a href="#12、AbstractHandlerMethodMapping的initHandlerMethods方法" class="headerlink" title="12、AbstractHandlerMethodMapping的initHandlerMethods方法"></a>12、AbstractHandlerMethodMapping的initHandlerMethods方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">protected void detectHandlerMethods(final Object handler) &#123;</span><br><span class="line">    //获取类</span><br><span class="line">    Class&lt;?&gt; handlerType =</span><br><span class="line">            (handler instanceof String ? getApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class="line"></span><br><span class="line">    // Avoid repeated calls to getMappingForMethod which would rebuild RequestMappingInfo instances</span><br><span class="line">    //该集合key可以相等，但不能为同一对象</span><br><span class="line">    final Map&lt;Method, T&gt; mappings = new IdentityHashMap&lt;Method, T&gt;();</span><br><span class="line"></span><br><span class="line">    //如果是CGLIB代理类，获取父类</span><br><span class="line">    final Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class="line">    //查找类中注解了@RequestMapping的方法</span><br><span class="line">    Set&lt;Method&gt; methods = HandlerMethodSelector.selectMethods(userType, new MethodFilter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean matches(Method method) &#123;</span><br><span class="line">            //获取方法的@RequestMapping相关信息</span><br><span class="line">            T mapping = getMappingForMethod(method, userType);</span><br><span class="line">            if (mapping != null) &#123;</span><br><span class="line">                //加入集合</span><br><span class="line">                mappings.put(method, mapping);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    for (Method method : methods) &#123;</span><br><span class="line">        //</span><br><span class="line">        registerHandlerMethod(handler, method, mappings.get(method));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、AbstractHandlerMethodMapping的initHandlerMethods方法"><a href="#13、AbstractHandlerMethodMapping的initHandlerMethods方法" class="headerlink" title="13、AbstractHandlerMethodMapping的initHandlerMethods方法"></a>13、AbstractHandlerMethodMapping的initHandlerMethods方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">protected void detectHandlerMethods(final Object handler) &#123;</span><br><span class="line">    //获取类</span><br><span class="line">    Class&lt;?&gt; handlerType =</span><br><span class="line">            (handler instanceof String ? getApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class="line"></span><br><span class="line">    // Avoid repeated calls to getMappingForMethod which would rebuild RequestMappingInfo instances</span><br><span class="line">    //该集合key可以相等，但不能为同一对象</span><br><span class="line">    final Map&lt;Method, T&gt; mappings = new IdentityHashMap&lt;Method, T&gt;();</span><br><span class="line"></span><br><span class="line">    //如果是CGLIB代理类，获取父类</span><br><span class="line">    final Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class="line">    //查找类及其接口中注解了@RequestMapping的方法</span><br><span class="line">    Set&lt;Method&gt; methods = HandlerMethodSelector.selectMethods(userType, new MethodFilter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean matches(Method method) &#123;</span><br><span class="line">            //获取方法的@RequestMapping相关信息</span><br><span class="line">            T mapping = getMappingForMethod(method, userType);</span><br><span class="line">            if (mapping != null) &#123;</span><br><span class="line">                //加入集合</span><br><span class="line">                mappings.put(method, mapping);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    for (Method method : methods) &#123;</span><br><span class="line">        //注册方法及路径</span><br><span class="line">        registerHandlerMethod(handler, method, mappings.get(method));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、AbstractHandlerMethodMapping的registerHandlerMethod方法"><a href="#14、AbstractHandlerMethodMapping的registerHandlerMethod方法" class="headerlink" title="14、AbstractHandlerMethodMapping的registerHandlerMethod方法"></a>14、AbstractHandlerMethodMapping的registerHandlerMethod方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">protected void registerHandlerMethod(Object handler, Method method, T mapping) &#123;</span><br><span class="line">    //该对象存放处理该路径的bean及方法</span><br><span class="line">    HandlerMethod newHandlerMethod = createHandlerMethod(handler, method);</span><br><span class="line">    HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping);</span><br><span class="line">    //已注册</span><br><span class="line">    if (oldHandlerMethod != null &amp;&amp; !oldHandlerMethod.equals(newHandlerMethod)) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Ambiguous mapping found. Cannot map &apos;&quot; + newHandlerMethod.getBean() +</span><br><span class="line">                &quot;&apos; bean method \n&quot; + newHandlerMethod + &quot;\nto &quot; + mapping + &quot;: There is already &apos;&quot; +</span><br><span class="line">                oldHandlerMethod.getBean() + &quot;&apos; bean method\n&quot; + oldHandlerMethod + &quot; mapped.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //注册注解信息与方法映射</span><br><span class="line">    this.handlerMethods.put(mapping, newHandlerMethod);</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Mapped \&quot;&quot; + mapping + &quot;\&quot; onto &quot; + newHandlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取注解的路径</span><br><span class="line">    Set&lt;String&gt; patterns = getMappingPathPatterns(mapping);</span><br><span class="line">    for (String pattern : patterns) &#123;</span><br><span class="line">        //路径不是表达式</span><br><span class="line">        if (!getPathMatcher().isPattern(pattern)) &#123;</span><br><span class="line">            //添加路径与注解映射</span><br><span class="line">            this.urlMap.add(pattern, mapping);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建方法明与方法映射</span><br><span class="line">    if (this.namingStrategy != null) &#123;</span><br><span class="line">        String name = this.namingStrategy.getName(newHandlerMethod, mapping);</span><br><span class="line">        updateNameMap(name, newHandlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、接（二、5）RequestMappingHandlerAdapter的afterPropertiesSet方法"><a href="#15、接（二、5）RequestMappingHandlerAdapter的afterPropertiesSet方法" class="headerlink" title="15、接（二、5）RequestMappingHandlerAdapter的afterPropertiesSet方法"></a>15、接（二、5）RequestMappingHandlerAdapter的afterPropertiesSet方法</h4><p>RequestMappingHandlerAdapter实现了InitializingBean接口,加载bean时会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() &#123;</span><br><span class="line">    // Do this first, it may add ResponseBody advice beans</span><br><span class="line">    //处理@ControllerAdvice注解的类</span><br><span class="line">    initControllerAdviceCache();</span><br><span class="line">    //添加默认的参数解析器</span><br><span class="line">    if (this.argumentResolvers == null) &#123;</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultArgumentResolvers();</span><br><span class="line">        this.argumentResolvers = new HandlerMethodArgumentResolverComposite().addResolvers(resolvers);</span><br><span class="line">    &#125;</span><br><span class="line">    //添加默认的initbinder方法参数解析器</span><br><span class="line">    if (this.initBinderArgumentResolvers == null) &#123;</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultInitBinderArgumentResolvers();</span><br><span class="line">        this.initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite().addResolvers(resolvers);</span><br><span class="line">    &#125;</span><br><span class="line">    //添加默认返回值解析器</span><br><span class="line">    if (this.returnValueHandlers == null) &#123;</span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();</span><br><span class="line">        this.returnValueHandlers = new HandlerMethodReturnValueHandlerComposite().addHandlers(handlers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="16、RequestMappingHandlerAdapter的initControllerAdviceCache方法"><a href="#16、RequestMappingHandlerAdapter的initControllerAdviceCache方法" class="headerlink" title="16、RequestMappingHandlerAdapter的initControllerAdviceCache方法"></a>16、RequestMappingHandlerAdapter的initControllerAdviceCache方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">private void initControllerAdviceCache() &#123;</span><br><span class="line">    if (getApplicationContext() == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(&quot;Looking for @ControllerAdvice: &quot; + getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line">    //查找容器中@ControllerAdvice注解的bean</span><br><span class="line">    List&lt;ControllerAdviceBean&gt; beans = ControllerAdviceBean.findAnnotatedBeans(getApplicationContext());</span><br><span class="line">    OrderComparator.sort(beans);</span><br><span class="line"></span><br><span class="line">    List&lt;Object&gt; responseBodyAdviceBeans = new ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">    for (ControllerAdviceBean bean : beans) &#123;</span><br><span class="line">        //查找类中注解了@ModelAttribut的方法，不能同时注解@RequestMapping</span><br><span class="line">        Set&lt;Method&gt; attrMethods = HandlerMethodSelector.selectMethods(bean.getBeanType(), MODEL_ATTRIBUTE_METHODS);</span><br><span class="line">        if (!attrMethods.isEmpty()) &#123;</span><br><span class="line">            //加入缓存</span><br><span class="line">            this.modelAttributeAdviceCache.put(bean, attrMethods);</span><br><span class="line">            logger.info(&quot;Detected @ModelAttribute methods in &quot; + bean);</span><br><span class="line">        &#125;</span><br><span class="line">        //查找类中注解了@InitBinder的方法</span><br><span class="line">        Set&lt;Method&gt; binderMethods = HandlerMethodSelector.selectMethods(bean.getBeanType(), INIT_BINDER_METHODS);</span><br><span class="line">        if (!binderMethods.isEmpty()) &#123;</span><br><span class="line">            //加入缓存</span><br><span class="line">            this.initBinderAdviceCache.put(bean, binderMethods);</span><br><span class="line">            logger.info(&quot;Detected @InitBinder methods in &quot; + bean);</span><br><span class="line">        &#125;</span><br><span class="line">        //查找类中实现了ResponseBodyAdvice接口的</span><br><span class="line">        if (ResponseBodyAdvice.class.isAssignableFrom(bean.getBeanType())) &#123;</span><br><span class="line">            //加入缓存</span><br><span class="line">            responseBodyAdviceBeans.add(bean);</span><br><span class="line">            logger.info(&quot;Detected ResponseBodyAdvice bean in &quot; + bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!responseBodyAdviceBeans.isEmpty()) &#123;</span><br><span class="line">        this.responseBodyAdvice.addAll(0, responseBodyAdviceBeans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、接（二、5）ExceptionHandlerExceptionResolver的afterPropertiesSet方法"><a href="#17、接（二、5）ExceptionHandlerExceptionResolver的afterPropertiesSet方法" class="headerlink" title="17、接（二、5）ExceptionHandlerExceptionResolver的afterPropertiesSet方法"></a>17、接（二、5）ExceptionHandlerExceptionResolver的afterPropertiesSet方法</h4><p>ExceptionHandlerExceptionResolver实现了InitializingBean接口,加载bean时会执行afterPropertiesSet方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() &#123;</span><br><span class="line">    // Do this first, it may add ResponseBodyAdvice beans</span><br><span class="line">    //处理@ControllerAdvice注解的类</span><br><span class="line">    initExceptionHandlerAdviceCache();</span><br><span class="line"></span><br><span class="line">    if (this.argumentResolvers == null) &#123;</span><br><span class="line">        //获取默认的参数解析器</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultArgumentResolvers();</span><br><span class="line">        this.argumentResolvers = new HandlerMethodArgumentResolverComposite().addResolvers(resolvers);</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.returnValueHandlers == null) &#123;</span><br><span class="line">        //获取默认的返回值解析器</span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();</span><br><span class="line">        this.returnValueHandlers = new HandlerMethodReturnValueHandlerComposite().addHandlers(handlers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="18、ExceptionHandlerExceptionResolver的initExceptionHandlerAdviceCache方法"><a href="#18、ExceptionHandlerExceptionResolver的initExceptionHandlerAdviceCache方法" class="headerlink" title="18、ExceptionHandlerExceptionResolver的initExceptionHandlerAdviceCache方法"></a>18、ExceptionHandlerExceptionResolver的initExceptionHandlerAdviceCache方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private void initExceptionHandlerAdviceCache() &#123;</span><br><span class="line">    if (getApplicationContext() == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Looking for exception mappings: &quot; + getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line">    //查找容器中@ControllerAdvice注解的bean</span><br><span class="line">    List&lt;ControllerAdviceBean&gt; adviceBeans = ControllerAdviceBean.findAnnotatedBeans(getApplicationContext());</span><br><span class="line">    OrderComparator.sort(adviceBeans);</span><br><span class="line"></span><br><span class="line">    for (ControllerAdviceBean adviceBean : adviceBeans) &#123;</span><br><span class="line">        //获取bean中注解了@ExceptionHandler的方法，并建立该方法处理的异常类和该方法的映射</span><br><span class="line">        ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(adviceBean.getBeanType());</span><br><span class="line">        if (resolver.hasExceptionMappings()) &#123;</span><br><span class="line">            this.exceptionHandlerAdviceCache.put(adviceBean, resolver);</span><br><span class="line">            logger.info(&quot;Detected @ExceptionHandler methods in &quot; + adviceBean);</span><br><span class="line">        &#125;</span><br><span class="line">        //查找类中实现了ResponseBodyAdvice接口的</span><br><span class="line">        if (ResponseBodyAdvice.class.isAssignableFrom(adviceBean.getBeanType())) &#123;</span><br><span class="line">            this.responseBodyAdvice.add(adviceBean);</span><br><span class="line">            logger.info(&quot;Detected ResponseBodyAdvice implementation in &quot; + adviceBean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、DispatcherServlet处理逻辑"><a href="#三、DispatcherServlet处理逻辑" class="headerlink" title="三、DispatcherServlet处理逻辑"></a>三、DispatcherServlet处理逻辑</h3><h4 id="1、FrameworkServlet的doGet、doPost方法"><a href="#1、FrameworkServlet的doGet、doPost方法" class="headerlink" title="1、FrameworkServlet的doGet、doPost方法"></a>1、FrameworkServlet的doGet、doPost方法</h4><p>常用的post和get请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">    //处理请求</span><br><span class="line">    processRequest(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">    //处理请求</span><br><span class="line">    processRequest(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、FrameworkServlet的processRequest方法"><a href="#2、FrameworkServlet的processRequest方法" class="headerlink" title="2、FrameworkServlet的processRequest方法"></a>2、FrameworkServlet的processRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">protected final void processRequest(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">    //处理web请求开始时间</span><br><span class="line">    long startTime = System.currentTimeMillis();</span><br><span class="line">    Throwable failureCause = null;</span><br><span class="line">    //获取当前线程中的LocaleContext </span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    //创建本次request的LocaleContext</span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line">    //获取当前线程中的RequestAttributes</span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    //创建本次request的ServletRequestAttributes</span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line">    //获取request的异步任务管理器WebAsyncManager,不存在则创建一个存入该request</span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    //往asyncManager中添加一个RequestBindingInterceptor</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());</span><br><span class="line">    //localeContext和requestAttributes,绑定到当前线程</span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //进一步处理</span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (ServletException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        throw new NestedServletException(&quot;Request processing failed&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finally &#123;</span><br><span class="line">        //把原先的previousLocaleContext、previousAttributes重新绑定当前线程</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        if (requestAttributes != null) &#123;</span><br><span class="line">            //标记请求处理结束</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            if (failureCause != null) &#123;</span><br><span class="line">                this.logger.debug(&quot;Could not complete request&quot;, failureCause);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                    logger.debug(&quot;Leaving response open for concurrent processing&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    this.logger.debug(&quot;Successfully completed request&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //广播请求完成事件</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、DispatcherServlet的doService方法"><a href="#3、DispatcherServlet的doService方法" class="headerlink" title="3、DispatcherServlet的doService方法"></a>3、DispatcherServlet的doService方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? &quot; resumed&quot; : &quot;&quot;;</span><br><span class="line">        logger.debug(&quot;DispatcherServlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot; + resumed +</span><br><span class="line">                &quot; processing &quot; + request.getMethod() + &quot; request for [&quot; + getRequestUri(request) + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Keep a snapshot of the request attributes in case of an include,</span><br><span class="line">    // to be able to restore the original attributes after the include.</span><br><span class="line">    //对于IncludeRequest，创建request属性快照</span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = null;</span><br><span class="line">    if (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        while (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            String attrName = (String) attrNames.nextElement();</span><br><span class="line">            if (this.cleanupAfterInclude || attrName.startsWith(&quot;org.springframework.web.servlet&quot;)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Make framework objects available to handlers and view objects.</span><br><span class="line">    //设置web容器</span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    //设置本地化解析器</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);</span><br><span class="line">    //设置样式解析器</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);</span><br><span class="line">    //设置样式资源 </span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line">    //默认SessionFlashMapManager从Session中取出当前request对应的FlashMap，即重定向的参数</span><br><span class="line">    FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">    //添加到request</span><br><span class="line">    if (inputFlashMap != null) &#123;</span><br><span class="line">        request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">    &#125;</span><br><span class="line">    //Flash attributes 在对请求的重定向生效之前被临时存储（通常是在session)中，并且在重定向之后被立即移除</span><br><span class="line">    request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());</span><br><span class="line">    //FlashMap 被用来管理 flash attributes 而 FlashMapManager 则被用来存储，获取和管理 FlashMap 实体</span><br><span class="line">    request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //进一步处理请求</span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //没有正在处理的异步任务</span><br><span class="line">        if (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            // Restore the original attribute snapshot, in case of an include.</span><br><span class="line">            if (attributesSnapshot != null) &#123;</span><br><span class="line">                //更新request的属性值</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DispatcherServlet的doDispatch方法"><a href="#4、DispatcherServlet的doDispatch方法" class="headerlink" title="4、DispatcherServlet的doDispatch方法"></a>4、DispatcherServlet的doDispatch方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = null;</span><br><span class="line">    boolean multipartRequestParsed = false;</span><br><span class="line">    //获取request的asyncManager</span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        ModelAndView mv = null;</span><br><span class="line">        Exception dispatchException = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //判断是否有文件上传,有文件上传request转换为MultipartHttpServletRequest</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            // Determine handler for the current request.</span><br><span class="line">            //根据request获取对应的处理器链</span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            if (mappedHandler == null || mappedHandler.getHandler() == null) &#123;</span><br><span class="line">                //没有对应的Handler，通过response返回错误信息</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Determine handler adapter for the current request.</span><br><span class="line">            //根据request获取对应的HandlerAdapter</span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            // Process last-modified header, if supported by the handler.</span><br><span class="line">            //获得HTTP请求方法</span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            boolean isGet = &quot;GET&quot;.equals(method);</span><br><span class="line">            if (isGet || &quot;HEAD&quot;.equals(method)) &#123;</span><br><span class="line">                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Last-Modified value for [&quot; + getRequestUri(request) + &quot;] is: &quot; + lastModified);</span><br><span class="line">                &#125;</span><br><span class="line">                if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果有拦截器的话，会执行拦截器的preHandler方法 </span><br><span class="line">            //如ConversionServiceExposingInterceptor拦截器，会将conversionService对象添加到request中</span><br><span class="line">            if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // Actually invoke the handler.</span><br><span class="line">            //返回ModelAndView  </span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //当view为空时，根据request的path设置默认view  </span><br><span class="line">            applyDefaultViewName(request, mv);</span><br><span class="line">            //执行拦截器的postHandle</span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        //处理异常、渲染视图</span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex) &#123;</span><br><span class="line">        //调用拦截器的afterCompletion方法</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Error err) &#123;</span><br><span class="line">        //调用拦截器的afterCompletion方法</span><br><span class="line">        triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        //判断是否正在处理异步请求  </span><br><span class="line">        if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            // Instead of postHandle and afterCompletion</span><br><span class="line">            //调用拦截器的afterConcurrentHandlingStarted方法</span><br><span class="line">            if (mappedHandler != null) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Clean up any resources used by a multipart request.</span><br><span class="line">            //删除上传资源</span><br><span class="line">            if (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DispatcherServlet的checkMultipart方法"><a href="#5、DispatcherServlet的checkMultipart方法" class="headerlink" title="5、DispatcherServlet的checkMultipart方法"></a>5、DispatcherServlet的checkMultipart方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected HttpServletRequest checkMultipart(HttpServletRequest request) throws MultipartException &#123;</span><br><span class="line">    //有multipartResolver解析器,且request为POST请求、contentType以&quot;multipart/&quot;开头</span><br><span class="line">    if (this.multipartResolver != null &amp;&amp; this.multipartResolver.isMultipart(request)) &#123;</span><br><span class="line">        //request已经转换为MultipartHttpServletRequest</span><br><span class="line">        if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) &#123;</span><br><span class="line">            logger.debug(&quot;Request is already a MultipartHttpServletRequest - if not in a forward, &quot; +</span><br><span class="line">                    &quot;this typically results from an additional MultipartFilter in web.xml&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //request转换MultipartHttpServletRequest出错</span><br><span class="line">        else if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) instanceof MultipartException) &#123;</span><br><span class="line">            logger.debug(&quot;Multipart resolution failed for current request before - &quot; +</span><br><span class="line">                    &quot;skipping re-resolution for undisturbed error rendering&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //处理request,转换为MultipartHttpServletRequest</span><br><span class="line">            return this.multipartResolver.resolveMultipart(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // If not returned before: return original request.</span><br><span class="line">    return request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、CommonsMultipartResolver的resolveMultipart方法"><a href="#6、CommonsMultipartResolver的resolveMultipart方法" class="headerlink" title="6、CommonsMultipartResolver的resolveMultipart方法"></a>6、CommonsMultipartResolver的resolveMultipart方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public MultipartHttpServletRequest resolveMultipart(final HttpServletRequest request) throws MultipartException &#123;</span><br><span class="line">    Assert.notNull(request, &quot;Request must not be null&quot;);</span><br><span class="line">    //待用到再解析</span><br><span class="line">    if (this.resolveLazily) &#123;</span><br><span class="line">        return new DefaultMultipartHttpServletRequest(request) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void initializeMultipart() &#123;</span><br><span class="line">                MultipartParsingResult parsingResult = parseRequest(request);</span><br><span class="line">                setMultipartFiles(parsingResult.getMultipartFiles());</span><br><span class="line">                setMultipartParameters(parsingResult.getMultipartParameters());</span><br><span class="line">                setMultipartParameterContentTypes(parsingResult.getMultipartParameterContentTypes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //解析request</span><br><span class="line">        MultipartParsingResult parsingResult = parseRequest(request);</span><br><span class="line">        return new DefaultMultipartHttpServletRequest(request, parsingResult.getMultipartFiles(),</span><br><span class="line">                parsingResult.getMultipartParameters(), parsingResult.getMultipartParameterContentTypes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、CommonsMultipartResolver的parseRequest方法"><a href="#7、CommonsMultipartResolver的parseRequest方法" class="headerlink" title="7、CommonsMultipartResolver的parseRequest方法"></a>7、CommonsMultipartResolver的parseRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected MultipartParsingResult parseRequest(HttpServletRequest request) throws MultipartException &#123;</span><br><span class="line">    //获取编码方式,配置中UTF-8</span><br><span class="line">    String encoding = determineEncoding(request);</span><br><span class="line">    //获取文件上载器，默认ServletFileUpload</span><br><span class="line">    FileUpload fileUpload = prepareFileUpload(encoding);</span><br><span class="line">    try &#123;</span><br><span class="line">        //将multipart/form-data的文件按boundary分割,分别创建FileItem对象</span><br><span class="line">        List&lt;FileItem&gt; fileItems = ((ServletFileUpload) fileUpload).parseRequest(request);</span><br><span class="line">        return parseFileItems(fileItems, encoding);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (FileUploadBase.SizeLimitExceededException ex) &#123;</span><br><span class="line">        throw new MaxUploadSizeExceededException(fileUpload.getSizeMax(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (FileUploadException ex) &#123;</span><br><span class="line">        throw new MultipartException(&quot;Could not parse multipart servlet request&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、CommonsFileUploadSupport的parseFileItems方法"><a href="#8、CommonsFileUploadSupport的parseFileItems方法" class="headerlink" title="8、CommonsFileUploadSupport的parseFileItems方法"></a>8、CommonsFileUploadSupport的parseFileItems方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">protected MultipartParsingResult parseFileItems(List&lt;FileItem&gt; fileItems, String encoding) &#123;</span><br><span class="line">    MultiValueMap&lt;String, MultipartFile&gt; multipartFiles = new LinkedMultiValueMap&lt;String, MultipartFile&gt;();</span><br><span class="line">    Map&lt;String, String[]&gt; multipartParameters = new HashMap&lt;String, String[]&gt;();</span><br><span class="line">    Map&lt;String, String&gt; multipartParameterContentTypes = new HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    // Extract multipart files and multipart parameters.</span><br><span class="line">    for (FileItem fileItem : fileItems) &#123;</span><br><span class="line">        //form字段</span><br><span class="line">        if (fileItem.isFormField()) &#123;</span><br><span class="line">            String value;</span><br><span class="line">            String partEncoding = determineEncoding(fileItem.getContentType(), encoding);</span><br><span class="line">            if (partEncoding != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //获取字段值</span><br><span class="line">                    value = fileItem.getString(partEncoding);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (UnsupportedEncodingException ex) &#123;</span><br><span class="line">                    if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                        logger.warn(&quot;Could not decode multipart item &apos;&quot; + fileItem.getFieldName() +</span><br><span class="line">                                &quot;&apos; with encoding &apos;&quot; + partEncoding + &quot;&apos;: using platform default&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    value = fileItem.getString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                value = fileItem.getString();</span><br><span class="line">            &#125;</span><br><span class="line">            //字段集合</span><br><span class="line">            String[] curParam = multipartParameters.get(fileItem.getFieldName());</span><br><span class="line">            if (curParam == null) &#123;</span><br><span class="line">                // simple form field</span><br><span class="line">                multipartParameters.put(fileItem.getFieldName(), new String[] &#123;value&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // array of simple form fields</span><br><span class="line">                String[] newParam = StringUtils.addStringToArray(curParam, value);</span><br><span class="line">                multipartParameters.put(fileItem.getFieldName(), newParam);</span><br><span class="line">            &#125;</span><br><span class="line">            //字段类型集合</span><br><span class="line">            multipartParameterContentTypes.put(fileItem.getFieldName(), fileItem.getContentType());</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // multipart file field</span><br><span class="line">            //上传文件</span><br><span class="line">            CommonsMultipartFile file = new CommonsMultipartFile(fileItem);</span><br><span class="line">            //上传文件集合</span><br><span class="line">            multipartFiles.add(file.getName(), file);</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Found multipart file [&quot; + file.getName() + &quot;] of size &quot; + file.getSize() +</span><br><span class="line">                        &quot; bytes with original filename [&quot; + file.getOriginalFilename() + &quot;], stored &quot; +</span><br><span class="line">                        file.getStorageDescription());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return new MultipartParsingResult(multipartFiles, multipartParameters, multipartParameterContentTypes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（三、4）DispatcherServlet的getHandler方法"><a href="#9、接（三、4）DispatcherServlet的getHandler方法" class="headerlink" title="9、接（三、4）DispatcherServlet的getHandler方法"></a>9、接（三、4）DispatcherServlet的getHandler方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    //配置为RequestMappingHandlerMapping</span><br><span class="line">    for (HandlerMapping hm : this.handlerMappings) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(</span><br><span class="line">                    &quot;Testing handler map [&quot; + hm + &quot;] in DispatcherServlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取处理器链</span><br><span class="line">        HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class="line">        if (handler != null) &#123;</span><br><span class="line">            return handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、AbstractHandlerMapping的getHandler方法"><a href="#10、AbstractHandlerMapping的getHandler方法" class="headerlink" title="10、AbstractHandlerMapping的getHandler方法"></a>10、AbstractHandlerMapping的getHandler方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    //获取处理器</span><br><span class="line">    Object handler = getHandlerInternal(request);</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        handler = getDefaultHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    if (handler == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    // Bean name or resolved handler?</span><br><span class="line">    if (handler instanceof String) &#123;</span><br><span class="line">        String handlerName = (String) handler;</span><br><span class="line">        handler = getApplicationContext().getBean(handlerName);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建处理器链</span><br><span class="line">    return getHandlerExecutionChain(handler, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、AbstractHandlerMethodMapping的getHandlerInternal方法"><a href="#11、AbstractHandlerMethodMapping的getHandlerInternal方法" class="headerlink" title="11、AbstractHandlerMethodMapping的getHandlerInternal方法"></a>11、AbstractHandlerMethodMapping的getHandlerInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    //获取request的path</span><br><span class="line">    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Looking up handler method for path &quot; + lookupPath);</span><br><span class="line">    &#125;</span><br><span class="line">    //由path查找handlerMethod</span><br><span class="line">    HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        if (handlerMethod != null) &#123;</span><br><span class="line">            logger.debug(&quot;Returning handler method [&quot; + handlerMethod + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            logger.debug(&quot;Did not find handler method for [&quot; + lookupPath + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建含有bean的handlerMethod</span><br><span class="line">    return (handlerMethod != null ? handlerMethod.createWithResolvedBean() : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、AbstractHandlerMethodMapping的lookupHandler方法"><a href="#12、AbstractHandlerMethodMapping的lookupHandler方法" class="headerlink" title="12、AbstractHandlerMethodMapping的lookupHandler方法"></a>12、AbstractHandlerMethodMapping的lookupHandler方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    List&lt;Match&gt; matches = new ArrayList&lt;Match&gt;();</span><br><span class="line">    //由path查找注解信息</span><br><span class="line">    List&lt;T&gt; directPathMatches = this.urlMap.get(lookupPath);</span><br><span class="line">    //通过path直接匹配</span><br><span class="line">    if (directPathMatches != null) &#123;</span><br><span class="line">        addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">    &#125;</span><br><span class="line">    if (matches.isEmpty()) &#123;</span><br><span class="line">        // No choice but to go through all mappings...</span><br><span class="line">        //通过表达式模糊匹配</span><br><span class="line">        addMatchingMappings(this.handlerMethods.keySet(), matches, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!matches.isEmpty()) &#123;</span><br><span class="line">        //比较器</span><br><span class="line">        Comparator&lt;Match&gt; comparator = new MatchComparator(getMappingComparator(request));</span><br><span class="line">        //匹配多个时，排序</span><br><span class="line">        Collections.sort(matches, comparator);</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Found &quot; + matches.size() + &quot; matching mapping(s) for [&quot; + lookupPath + &quot;] : &quot; + matches);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取最匹配的</span><br><span class="line">        Match bestMatch = matches.get(0);</span><br><span class="line">        //匹配程度相等</span><br><span class="line">        if (matches.size() &gt; 1) &#123;</span><br><span class="line">            Match secondBestMatch = matches.get(1);</span><br><span class="line">            if (comparator.compare(bestMatch, secondBestMatch) == 0) &#123;</span><br><span class="line">                Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class="line">                Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class="line">                throw new IllegalStateException(</span><br><span class="line">                        &quot;Ambiguous handler methods mapped for HTTP path &apos;&quot; + request.getRequestURL() + &quot;&apos;: &#123;&quot; +</span><br><span class="line">                        m1 + &quot;, &quot; + m2 + &quot;&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //匹配相关信息设置到request中，包括解析后的@pathvariable参数集合</span><br><span class="line">        handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line">        //返回最匹配的处理方法</span><br><span class="line">        return bestMatch.handlerMethod;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return handleNoMatch(handlerMethods.keySet(), lookupPath, request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、AbstractHandlerMethodMapping的addMatchingMappings方法"><a href="#13、AbstractHandlerMethodMapping的addMatchingMappings方法" class="headerlink" title="13、AbstractHandlerMethodMapping的addMatchingMappings方法"></a>13、AbstractHandlerMethodMapping的addMatchingMappings方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void addMatchingMappings(Collection&lt;T&gt; mappings, List&lt;Match&gt; matches, HttpServletRequest request) &#123;</span><br><span class="line">    for (T mapping : mappings) &#123;</span><br><span class="line">        //验证注解的条件与请求是否匹配，比如method、patterns等</span><br><span class="line">        T match = getMatchingMapping(mapping, request);</span><br><span class="line">        if (match != null) &#123;</span><br><span class="line">            //创建注解信息与方法的配对</span><br><span class="line">            matches.add(new Match(match, this.handlerMethods.get(mapping)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14、接（三、10）AbstractHandlerMapping的getHandlerExecutionChain方法"><a href="#14、接（三、10）AbstractHandlerMapping的getHandlerExecutionChain方法" class="headerlink" title="14、接（三、10）AbstractHandlerMapping的getHandlerExecutionChain方法"></a>14、接（三、10）AbstractHandlerMapping的getHandlerExecutionChain方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) &#123;</span><br><span class="line">    HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?</span><br><span class="line">            (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));</span><br><span class="line">    //添加拦截器</span><br><span class="line">    chain.addInterceptors(getAdaptedInterceptors());</span><br><span class="line"></span><br><span class="line">    String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);</span><br><span class="line">    //由路径添加拦截器</span><br><span class="line">    for (MappedInterceptor mappedInterceptor : this.mappedInterceptors) &#123;</span><br><span class="line">        if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) &#123;</span><br><span class="line">            //默认注册ConversionServiceExposingInterceptor拦截器</span><br><span class="line">            chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15、MappedInterceptor的matches方法"><a href="#15、MappedInterceptor的matches方法" class="headerlink" title="15、MappedInterceptor的matches方法"></a>15、MappedInterceptor的matches方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public boolean matches(String lookupPath, PathMatcher pathMatcher) &#123;</span><br><span class="line">    PathMatcher pathMatcherToUse = (this.pathMatcher != null) ? this.pathMatcher : pathMatcher;</span><br><span class="line">    //排除的path表达式</span><br><span class="line">    if (this.excludePatterns != null) &#123;</span><br><span class="line">        for (String pattern : this.excludePatterns) &#123;</span><br><span class="line">            if (pathMatcherToUse.match(pattern, lookupPath)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //包含的path表达式</span><br><span class="line">    if (this.includePatterns == null) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        for (String pattern : this.includePatterns) &#123;</span><br><span class="line">            if (pathMatcherToUse.match(pattern, lookupPath)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、接（三、4）DispatcherServlet的getHandlerAdapter方法"><a href="#16、接（三、4）DispatcherServlet的getHandlerAdapter方法" class="headerlink" title="16、接（三、4）DispatcherServlet的getHandlerAdapter方法"></a>16、接（三、4）DispatcherServlet的getHandlerAdapter方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException &#123;</span><br><span class="line">    //默认配置了RequestMappingHandlerAdapter</span><br><span class="line">    for (HandlerAdapter ha : this.handlerAdapters) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Testing handler adapter [&quot; + ha + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //RequestMappingHandlerAdapter处理HandlerMethod类型的handler</span><br><span class="line">        if (ha.supports(handler)) &#123;</span><br><span class="line">            return ha;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new ServletException(&quot;No adapter for handler [&quot; + handler +</span><br><span class="line">            &quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17、AbstractHandlerMethodAdapter的supports方法"><a href="#17、AbstractHandlerMethodAdapter的supports方法" class="headerlink" title="17、AbstractHandlerMethodAdapter的supports方法"></a>17、AbstractHandlerMethodAdapter的supports方法</h4><p>RequestMappingHandlerAdapter的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final boolean supports(Object handler) &#123;</span><br><span class="line">    return (handler instanceof HandlerMethod &amp;&amp; supportsInternal((HandlerMethod) handler));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="18、接（三、4）AbstractHandlerMethodAdapter的handle方法"><a href="#18、接（三、4）AbstractHandlerMethodAdapter的handle方法" class="headerlink" title="18、接（三、4）AbstractHandlerMethodAdapter的handle方法"></a>18、接（三、4）AbstractHandlerMethodAdapter的handle方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">    return handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19、RequestMappingHandlerAdapter的handleInternal方法"><a href="#19、RequestMappingHandlerAdapter的handleInternal方法" class="headerlink" title="19、RequestMappingHandlerAdapter的handleInternal方法"></a>19、RequestMappingHandlerAdapter的handleInternal方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected ModelAndView handleInternal(HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response, HandlerMethod handlerMethod) throws Exception &#123;</span><br><span class="line">    //获取该类的@SessionAttributes注解处理器,并且判断有无该注解信息</span><br><span class="line">    if (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">        // Always prevent caching in case of session attribute management.</span><br><span class="line">        //通过设置http头，指定过期时间</span><br><span class="line">        checkAndPrepare(request, response, this.cacheSecondsForSessionAttributeHandlers, true);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Uses configured default cacheSeconds setting.</span><br><span class="line">        checkAndPrepare(request, response, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Execute invokeHandlerMethod in synchronized block if required.</span><br><span class="line">    //执行invokeHandlerMethod时，是否获取session锁</span><br><span class="line">    if (this.synchronizeOnSession) &#123;</span><br><span class="line">        HttpSession session = request.getSession(false);</span><br><span class="line">        if (session != null) &#123;</span><br><span class="line">            Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">            synchronized (mutex) &#123;</span><br><span class="line">                return invokeHandleMethod(request, response, handlerMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //进一步处理request</span><br><span class="line">    return invokeHandleMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20、RequestMappingHandlerAdapter的invokeHandleMethod方法"><a href="#20、RequestMappingHandlerAdapter的invokeHandleMethod方法" class="headerlink" title="20、RequestMappingHandlerAdapter的invokeHandleMethod方法"></a>20、RequestMappingHandlerAdapter的invokeHandleMethod方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">private ModelAndView invokeHandleMethod(HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response, HandlerMethod handlerMethod) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = new ServletWebRequest(request, response);</span><br><span class="line">    //获取适用于当前handler的类的@InitBinder注解的方法，创建ServletRequestDataBinderFactory</span><br><span class="line">    WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">    //获取适用于当前handler的类的@ModelAttribute注解的方法，获取缓存的sessionAttributes，创建ModelFactory</span><br><span class="line">    ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line">    //创建ServletInvocableHandlerMethod</span><br><span class="line">    ServletInvocableHandlerMethod requestMappingMethod = createRequestMappingMethod(handlerMethod, binderFactory);</span><br><span class="line">    //ModelAndView容器</span><br><span class="line">    ModelAndViewContainer mavContainer = new ModelAndViewContainer();</span><br><span class="line">    //获取request中的FlashMap，加入mavContainer</span><br><span class="line">    mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">    //初始化Model</span><br><span class="line">    modelFactory.initModel(webRequest, mavContainer, requestMappingMethod);</span><br><span class="line">    //请求重定向时忽略model参数</span><br><span class="line">    mavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);</span><br><span class="line">    //Servlet容器是否支持异步处理请求，返回StandardServletAsyncWebRequest或NoSupportAsyncWebRequest</span><br><span class="line">    AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">    asyncWebRequest.setTimeout(this.asyncRequestTimeout);</span><br><span class="line">    //获取request的asyncManager</span><br><span class="line">    final WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    //设置异步处理线程池</span><br><span class="line">    asyncManager.setTaskExecutor(this.taskExecutor);</span><br><span class="line">    //设置请求</span><br><span class="line">    asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">    //设置拦截器</span><br><span class="line">    asyncManager.registerCallableInterceptors(this.callableInterceptors);</span><br><span class="line">    asyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);</span><br><span class="line">    //有异步请求处理完成</span><br><span class="line">    if (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">        //获取处理结果</span><br><span class="line">        Object result = asyncManager.getConcurrentResult();</span><br><span class="line">        //获取处理返回的mavContainer</span><br><span class="line">        mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];</span><br><span class="line">        //清除ConcurrentResult与ConcurrentResultContext</span><br><span class="line">        asyncManager.clearConcurrentResult();</span><br><span class="line"></span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Found concurrent result value [&quot; + result + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建ConcurrentResultHandlerMethod</span><br><span class="line">        requestMappingMethod = requestMappingMethod.wrapConcurrentResult(result);</span><br><span class="line">    &#125;</span><br><span class="line">    //处理请求</span><br><span class="line">    requestMappingMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">    //正在异步处理请求</span><br><span class="line">    if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //处理并返回ModelAndView</span><br><span class="line">    return getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21、ModelFactory的initModel方法"><a href="#21、ModelFactory的initModel方法" class="headerlink" title="21、ModelFactory的initModel方法"></a>21、ModelFactory的initModel方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">    //从request中获取该类的@SessionAttributes注解的且作用域为session属性</span><br><span class="line">    Map&lt;String, ?&gt; sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request);</span><br><span class="line">    mavContainer.mergeAttributes(sessionAttributes);</span><br><span class="line">    //执行@ModelAttribute注解的方法,将返回值加入model中</span><br><span class="line">    invokeModelAttributeMethods(request, mavContainer);</span><br><span class="line">    //从request中获取方法注解@ModelAttribute的参数,将返回值加入model中</span><br><span class="line">    for (String name : findSessionAttributeArguments(handlerMethod)) &#123;</span><br><span class="line">        if (!mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">            Object value = this.sessionAttributesHandler.retrieveAttribute(request, name);</span><br><span class="line">            if (value == null) &#123;</span><br><span class="line">                throw new HttpSessionRequiredException(&quot;Expected session attribute &apos;&quot; + name + &quot;&apos;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            mavContainer.addAttribute(name, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22、接（三、20）ServletInvocableHandlerMethod的invokeAndHandle方法"><a href="#22、接（三、20）ServletInvocableHandlerMethod的invokeAndHandle方法" class="headerlink" title="22、接（三、20）ServletInvocableHandlerMethod的invokeAndHandle方法"></a>22、接（三、20）ServletInvocableHandlerMethod的invokeAndHandle方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public void invokeAndHandle(ServletWebRequest webRequest,</span><br><span class="line">        ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception &#123;</span><br><span class="line">    //处理请求</span><br><span class="line">    Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    //如方法上有@ResponseStatus注解，将注解值放入request或response</span><br><span class="line">    setResponseStatus(webRequest);</span><br><span class="line">    //没有返回值</span><br><span class="line">    if (returnValue == null) &#123;</span><br><span class="line">        if (isRequestNotModified(webRequest) || hasResponseStatus() || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">            //设置请求已被处理完</span><br><span class="line">            mavContainer.setRequestHandled(true);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (StringUtils.hasText(this.responseReason)) &#123;</span><br><span class="line">        mavContainer.setRequestHandled(true);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavContainer.setRequestHandled(false);</span><br><span class="line">    try &#123;</span><br><span class="line">        //处理器处理返回值</span><br><span class="line">        this.returnValueHandlers.handleReturnValue(</span><br><span class="line">                returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex) &#123;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(getReturnValueHandlingErrorMessage(&quot;Error handling return value&quot;, returnValue), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23、InvocableHandlerMethod的invokeForRequest方法"><a href="#23、InvocableHandlerMethod的invokeForRequest方法" class="headerlink" title="23、InvocableHandlerMethod的invokeForRequest方法"></a>23、InvocableHandlerMethod的invokeForRequest方法</h4><p>ServletInvocableHandlerMethod的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer,</span><br><span class="line">        Object... providedArgs) throws Exception &#123;</span><br><span class="line">    //获取并处理方法参数，即Controller方法中的参数  </span><br><span class="line">    Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder(&quot;Invoking [&quot;);</span><br><span class="line">        sb.append(getBeanType().getSimpleName()).append(&quot;.&quot;);</span><br><span class="line">        sb.append(getMethod().getName()).append(&quot;] method with arguments &quot;);</span><br><span class="line">        sb.append(Arrays.asList(args));</span><br><span class="line">        logger.trace(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    //执行Controller中的方法</span><br><span class="line">    Object returnValue = doInvoke(args);</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Method [&quot; + getMethod().getName() + &quot;] returned [&quot; + returnValue + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="24、接（三、20）RequestMappingHandlerAdapter的getModelAndView方法"><a href="#24、接（三、20）RequestMappingHandlerAdapter的getModelAndView方法" class="headerlink" title="24、接（三、20）RequestMappingHandlerAdapter的getModelAndView方法"></a>24、接（三、20）RequestMappingHandlerAdapter的getModelAndView方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private ModelAndView getModelAndView(ModelAndViewContainer mavContainer,</span><br><span class="line">        ModelFactory modelFactory, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class="line">    //将model中的属性,设置到request中，作用域session，如不存在则往model中添加绑定后的属性值</span><br><span class="line">    modelFactory.updateModel(webRequest, mavContainer);</span><br><span class="line">    if (mavContainer.isRequestHandled()) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    ModelMap model = mavContainer.getModel();</span><br><span class="line">    ModelAndView mav = new ModelAndView(mavContainer.getViewName(), model);</span><br><span class="line">    //设置view</span><br><span class="line">    if (!mavContainer.isViewReference()) &#123;</span><br><span class="line">        mav.setView((View) mavContainer.getView());</span><br><span class="line">    &#125;</span><br><span class="line">    //重定向参数</span><br><span class="line">    if (model instanceof RedirectAttributes) &#123;</span><br><span class="line">        Map&lt;String, ?&gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</span><br><span class="line">        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">        //flashAttributes存入request</span><br><span class="line">        RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</span><br><span class="line">    &#125;</span><br><span class="line">    return mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25、接（三、4）DispatcherServlet的processDispatchResult方法"><a href="#25、接（三、4）DispatcherServlet的processDispatchResult方法" class="headerlink" title="25、接（三、4）DispatcherServlet的processDispatchResult方法"></a>25、接（三、4）DispatcherServlet的processDispatchResult方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">private void processDispatchResult(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">        HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    boolean errorView = false;</span><br><span class="line">    //存在异常</span><br><span class="line">    if (exception != null) &#123;</span><br><span class="line">        //处理ModelAndViewDefiningException</span><br><span class="line">        if (exception instanceof ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(&quot;ModelAndViewDefiningException encountered&quot;, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);</span><br><span class="line">            //处理其他异常</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Did the handler return a view to render?</span><br><span class="line">    if (mv != null &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        //渲染视图</span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        if (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Null ModelAndView returned to DispatcherServlet with name &apos;&quot; + getServletName() +</span><br><span class="line">                    &quot;&apos;: assuming HandlerAdapter completed request handling&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        // Concurrent handling started during a forward</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mappedHandler != null) &#123;</span><br><span class="line">        //</span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、参数解析器"><a href="#四、参数解析器" class="headerlink" title="四、参数解析器"></a>四、参数解析器</h3><h4 id="1、接（二、15）RequestMappingHandlerAdapter的getDefaultArgumentResolvers方法"><a href="#1、接（二、15）RequestMappingHandlerAdapter的getDefaultArgumentResolvers方法" class="headerlink" title="1、接（二、15）RequestMappingHandlerAdapter的getDefaultArgumentResolvers方法"></a>1、接（二、15）RequestMappingHandlerAdapter的getDefaultArgumentResolvers方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;HandlerMethodArgumentResolver&gt; getDefaultArgumentResolvers() &#123;</span><br><span class="line">    List&lt;HandlerMethodArgumentResolver&gt; resolvers = new ArrayList&lt;HandlerMethodArgumentResolver&gt;();</span><br><span class="line"></span><br><span class="line">    // Annotation-based argument resolution</span><br><span class="line">    //处理注解了@RequestParam的参数或者没有注解的MultipartFile类型的参数</span><br><span class="line">    resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), false));</span><br><span class="line">    //处理注解了@RequestParam的参数</span><br><span class="line">    resolvers.add(new RequestParamMapMethodArgumentResolver());</span><br><span class="line">    //处理注解了@PathVariable的参数</span><br><span class="line">    resolvers.add(new PathVariableMethodArgumentResolver());</span><br><span class="line">    //处理注解了@PathVariable的Map类型的参数</span><br><span class="line">    resolvers.add(new PathVariableMapMethodArgumentResolver());</span><br><span class="line">    //处理注解了@MatrixVariable的参数</span><br><span class="line">    resolvers.add(new MatrixVariableMethodArgumentResolver());</span><br><span class="line">    //处理注解了@MatrixVariable的Map类型参数</span><br><span class="line">    resolvers.add(new MatrixVariableMapMethodArgumentResolver());</span><br><span class="line">    //处理注解了@ModelAttribute的参数</span><br><span class="line">    resolvers.add(new ServletModelAttributeMethodProcessor(false));</span><br><span class="line">    //处理注解了@RequestBody的参数</span><br><span class="line">    resolvers.add(new RequestResponseBodyMethodProcessor(getMessageConverters()));</span><br><span class="line">    //处理注解了@RequestPart的参数或者没有注解的MultipartFile类型的参数或者没有注解的&quot;javax.servlet.http.Part&quot;类型的参数</span><br><span class="line">    resolvers.add(new RequestPartMethodArgumentResolver(getMessageConverters()));</span><br><span class="line">    //处理注解了@RequestHeader的非Map类型的参数</span><br><span class="line">    resolvers.add(new RequestHeaderMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">    //处理注解了@RequestHeader的Map类型的参数</span><br><span class="line">    resolvers.add(new RequestHeaderMapMethodArgumentResolver());</span><br><span class="line">    //处理注解了@CookieValue的参数</span><br><span class="line">    resolvers.add(new ServletCookieValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">    //处理注解了@Value的参数</span><br><span class="line">    resolvers.add(new ExpressionValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line"></span><br><span class="line">    // Type-based argument resolution</span><br><span class="line">    //处理以下类型的参数，如WebRequest、ServletRequest、MultipartRequest、HttpSession、Principal</span><br><span class="line">    //Locale、TimeZone、&quot;java.time.ZoneId&quot;、InputStream、Reader、HttpMethod</span><br><span class="line">    resolvers.add(new ServletRequestMethodArgumentResolver());</span><br><span class="line">    //处理以下类型的参数,如ServletResponse、OutputStream、Writer</span><br><span class="line">    resolvers.add(new ServletResponseMethodArgumentResolver());</span><br><span class="line">    //处理HttpEntity、RequestEntity类型的参数</span><br><span class="line">    resolvers.add(new HttpEntityMethodProcessor(getMessageConverters()));</span><br><span class="line">    //处理RedirectAttributes类型的参数</span><br><span class="line">    resolvers.add(new RedirectAttributesMethodArgumentResolver());</span><br><span class="line">    //处理Model类型的参数</span><br><span class="line">    resolvers.add(new ModelMethodProcessor());</span><br><span class="line">    //处理Map类型的参数</span><br><span class="line">    resolvers.add(new MapMethodProcessor());</span><br><span class="line">    //处理Errors类型的参数</span><br><span class="line">    resolvers.add(new ErrorsMethodArgumentResolver());</span><br><span class="line">    //处理SessionStatus类型的参数</span><br><span class="line">    resolvers.add(new SessionStatusMethodArgumentResolver());</span><br><span class="line">    //处理UriComponentsBuilder类型的参数</span><br><span class="line">    resolvers.add(new UriComponentsBuilderMethodArgumentResolver());</span><br><span class="line"></span><br><span class="line">    // Custom arguments</span><br><span class="line">    //自定义的参数处理器</span><br><span class="line">    if (getCustomArgumentResolvers() != null) &#123;</span><br><span class="line">        resolvers.addAll(getCustomArgumentResolvers());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Catch-all</span><br><span class="line">    //处理以下类型的参数，如基本数据类型及包装类、枚举类、CharSequence、Number、Date、</span><br><span class="line">    //URI、URL、Locale、Class</span><br><span class="line">    resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), true));</span><br><span class="line">    //处理不是以下类型的参数，如基本数据类型及包装类、枚举类、CharSequence、Number、Date、</span><br><span class="line">    //URI、URL、Locale、Class</span><br><span class="line">    resolvers.add(new ServletModelAttributeMethodProcessor(true));</span><br><span class="line"></span><br><span class="line">    return resolvers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、接（三、23）InvocableHandlerMethod的getMethodArgumentValues方法"><a href="#2、接（三、23）InvocableHandlerMethod的getMethodArgumentValues方法" class="headerlink" title="2、接（三、23）InvocableHandlerMethod的getMethodArgumentValues方法"></a>2、接（三、23）InvocableHandlerMethod的getMethodArgumentValues方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private Object[] getMethodArgumentValues(NativeWebRequest request, ModelAndViewContainer mavContainer,</span><br><span class="line">        Object... providedArgs) throws Exception &#123;</span><br><span class="line">    //获取方法参数</span><br><span class="line">    MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">    Object[] args = new Object[parameters.length];</span><br><span class="line">    for (int i = 0; i &lt; parameters.length; i++) &#123;</span><br><span class="line">        MethodParameter parameter = parameters[i];</span><br><span class="line">        parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);</span><br><span class="line">        //获取参数类型</span><br><span class="line">        GenericTypeResolver.resolveParameterType(parameter, getBean().getClass());</span><br><span class="line">        args[i] = resolveProvidedArgument(parameter, providedArgs);</span><br><span class="line">        if (args[i] != null) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //获取参数解析器</span><br><span class="line">        if (this.argumentResolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //解析参数</span><br><span class="line">                args[i] = this.argumentResolvers.resolveArgument(</span><br><span class="line">                        parameter, mavContainer, request, this.dataBinderFactory);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(getArgumentResolutionErrorMessage(&quot;Error resolving argument&quot;, i), ex);</span><br><span class="line">                &#125;</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (args[i] == null) &#123;</span><br><span class="line">            String msg = getArgumentResolutionErrorMessage(&quot;No suitable resolver for argument&quot;, i);</span><br><span class="line">            throw new IllegalStateException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractNamedValueMethodArgumentResolver的resolveArgument方法"><a href="#3、AbstractNamedValueMethodArgumentResolver的resolveArgument方法" class="headerlink" title="3、AbstractNamedValueMethodArgumentResolver的resolveArgument方法"></a>3、AbstractNamedValueMethodArgumentResolver的resolveArgument方法</h4><p>RequestParamMethodArgumentResolver、PathVariableMethodArgumentResolver的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,</span><br><span class="line">        NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception &#123;</span><br><span class="line">    //获取参数类型</span><br><span class="line">    Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line">    //获取参数名</span><br><span class="line">    NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);</span><br><span class="line">    //获取参数值</span><br><span class="line">    Object arg = resolveName(namedValueInfo.name, parameter, webRequest);</span><br><span class="line">    if (arg == null) &#123;</span><br><span class="line">        //未获取到值，获取注解中的默认值</span><br><span class="line">        if (namedValueInfo.defaultValue != null) &#123;</span><br><span class="line">            arg = resolveDefaultValue(namedValueInfo.defaultValue);</span><br><span class="line">        &#125;</span><br><span class="line">        //Optional允许为null</span><br><span class="line">        else if (namedValueInfo.required &amp;&amp; !parameter.getParameterType().getName().equals(&quot;java.util.Optional&quot;)) &#123;</span><br><span class="line">            handleMissingValue(namedValueInfo.name, parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        //参数值为null</span><br><span class="line">        arg = handleNullValue(namedValueInfo.name, arg, paramType);</span><br><span class="line">    &#125;</span><br><span class="line">    //空字符串,使用默认值</span><br><span class="line">    else if (&quot;&quot;.equals(arg) &amp;&amp; namedValueInfo.defaultValue != null) &#123;</span><br><span class="line">        arg = resolveDefaultValue(namedValueInfo.defaultValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (binderFactory != null) &#123;</span><br><span class="line">        WebDataBinder binder = binderFactory.createBinder(webRequest, null, namedValueInfo.name);</span><br><span class="line">        arg = binder.convertIfNecessary(arg, paramType, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">    //空方法，只有PathVariableMethodArgumentResolver覆盖了该方法</span><br><span class="line">    handleResolvedValue(arg, namedValueInfo.name, parameter, mavContainer, webRequest);</span><br><span class="line"></span><br><span class="line">    return arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、AbstractNamedValueMethodArgumentResolver的getNamedValueInfo方法"><a href="#4、AbstractNamedValueMethodArgumentResolver的getNamedValueInfo方法" class="headerlink" title="4、AbstractNamedValueMethodArgumentResolver的getNamedValueInfo方法"></a>4、AbstractNamedValueMethodArgumentResolver的getNamedValueInfo方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    private NamedValueInfo getNamedValueInfo(MethodParameter parameter) &#123;</span><br><span class="line">    NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter);</span><br><span class="line">    if (namedValueInfo == null) &#123;</span><br><span class="line">        //从注解中获取参数名</span><br><span class="line">        namedValueInfo = createNamedValueInfo(parameter);</span><br><span class="line">        //注解中参数名不存在，从参数中获取参数名</span><br><span class="line">        namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo);</span><br><span class="line">        this.namedValueInfoCache.put(parameter, namedValueInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    return namedValueInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、接（四、3）RequestParamMethodArgumentResolver的resolveArgument方法"><a href="#5、接（四、3）RequestParamMethodArgumentResolver的resolveArgument方法" class="headerlink" title="5、接（四、3）RequestParamMethodArgumentResolver的resolveArgument方法"></a>5、接（四、3）RequestParamMethodArgumentResolver的resolveArgument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object resolveName(String name, MethodParameter parameter, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class="line">    HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">    MultipartHttpServletRequest multipartRequest =</span><br><span class="line">            WebUtils.getNativeRequest(servletRequest, MultipartHttpServletRequest.class);</span><br><span class="line">    Object arg;</span><br><span class="line">    //MultipartFile类型的参数</span><br><span class="line">    if (MultipartFile.class.equals(parameter.getParameterType())) &#123;</span><br><span class="line">        assertIsMultipartRequest(servletRequest);</span><br><span class="line">        Assert.notNull(multipartRequest, &quot;Expected MultipartHttpServletRequest: is a MultipartResolver configured?&quot;);</span><br><span class="line">        //从request中获取参数值</span><br><span class="line">        arg = multipartRequest.getFile(name);</span><br><span class="line">    &#125;</span><br><span class="line">    //MultipartFile集合类型的参数</span><br><span class="line">    else if (isMultipartFileCollection(parameter)) &#123;</span><br><span class="line">        assertIsMultipartRequest(servletRequest);</span><br><span class="line">        Assert.notNull(multipartRequest, &quot;Expected MultipartHttpServletRequest: is a MultipartResolver configured?&quot;);</span><br><span class="line">        //从request中获取参数值</span><br><span class="line">        arg = multipartRequest.getFiles(name);</span><br><span class="line">    &#125;</span><br><span class="line">    //MultipartFile数组类型的参数</span><br><span class="line">    else if (isMultipartFileArray(parameter)) &#123;</span><br><span class="line">        assertIsMultipartRequest(servletRequest);</span><br><span class="line">        Assert.notNull(multipartRequest, &quot;Expected MultipartHttpServletRequest: is a MultipartResolver configured?&quot;);</span><br><span class="line">        //从request中获取参数值</span><br><span class="line">        List&lt;MultipartFile&gt; multipartFiles = multipartRequest.getFiles(name);</span><br><span class="line">        arg = multipartFiles.toArray(new MultipartFile[multipartFiles.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">    //Part类型的参数</span><br><span class="line">    else if (&quot;javax.servlet.http.Part&quot;.equals(parameter.getParameterType().getName())) &#123;</span><br><span class="line">        assertIsMultipartRequest(servletRequest);</span><br><span class="line">        arg = servletRequest.getPart(name);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (isPartCollection(parameter)) &#123;</span><br><span class="line">        assertIsMultipartRequest(servletRequest);</span><br><span class="line">        arg = new ArrayList&lt;Object&gt;(servletRequest.getParts());</span><br><span class="line">    &#125;</span><br><span class="line">    else if (isPartArray(parameter)) &#123;</span><br><span class="line">        assertIsMultipartRequest(servletRequest);</span><br><span class="line">        arg = RequestPartResolver.resolvePart(servletRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        arg = null;</span><br><span class="line">        //上传文件</span><br><span class="line">        if (multipartRequest != null) &#123;</span><br><span class="line">            List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);</span><br><span class="line">            if (!files.isEmpty()) &#123;</span><br><span class="line">                arg = (files.size() == 1 ? files.get(0) : files);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (arg == null) &#123;</span><br><span class="line">            //获取参数值</span><br><span class="line">            String[] paramValues = webRequest.getParameterValues(name);</span><br><span class="line">            if (paramValues != null) &#123;</span><br><span class="line">                arg = (paramValues.length == 1 ? paramValues[0] : paramValues);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（四、3）PathVariableMethodArgumentResolver的resolveArgument方法"><a href="#6、接（四、3）PathVariableMethodArgumentResolver的resolveArgument方法" class="headerlink" title="6、接（四、3）PathVariableMethodArgumentResolver的resolveArgument方法"></a>6、接（四、3）PathVariableMethodArgumentResolver的resolveArgument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception &#123;</span><br><span class="line">    //获取path中的参数</span><br><span class="line">    Map&lt;String, String&gt; uriTemplateVars =</span><br><span class="line">        (Map&lt;String, String&gt;) request.getAttribute(</span><br><span class="line">                HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">    return (uriTemplateVars != null) ? uriTemplateVars.get(name) : null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（四、2）RequestResponseBodyMethodProcessor的resolveArgument方法"><a href="#7、接（四、2）RequestResponseBodyMethodProcessor的resolveArgument方法" class="headerlink" title="7、接（四、2）RequestResponseBodyMethodProcessor的resolveArgument方法"></a>7、接（四、2）RequestResponseBodyMethodProcessor的resolveArgument方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,</span><br><span class="line">        NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception &#123;</span><br><span class="line">    //使用消息转换器读取数据</span><br><span class="line">    Object arg = readWithMessageConverters(webRequest, parameter, parameter.getGenericParameterType());</span><br><span class="line">    //获取参数类名，参数为集合则获取集合内类名</span><br><span class="line">    String name = Conventions.getVariableNameForParameter(parameter);</span><br><span class="line">    //创建数据绑定器</span><br><span class="line">    WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);</span><br><span class="line">    if (arg != null) &#123;</span><br><span class="line">        //处理@Validated注解</span><br><span class="line">        validateIfApplicable(binder, parameter);</span><br><span class="line">        if (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">            throw new MethodArgumentNotValidException(parameter, binder.getBindingResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加绑定结果</span><br><span class="line">    mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class="line">    return arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（四、2）ModelAttributeMethodProcessor的resolveArgument方法"><a href="#8、接（四、2）ModelAttributeMethodProcessor的resolveArgument方法" class="headerlink" title="8、接（四、2）ModelAttributeMethodProcessor的resolveArgument方法"></a>8、接（四、2）ModelAttributeMethodProcessor的resolveArgument方法</h4><p>ServletModelAttributeMethodProcessor的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,</span><br><span class="line">        NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception &#123;</span><br><span class="line">    //获取参数名</span><br><span class="line">    String name = ModelFactory.getNameForParameter(parameter);</span><br><span class="line">    //获取参数值</span><br><span class="line">    Object attribute = (mavContainer.containsAttribute(name) ?</span><br><span class="line">            mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, webRequest));</span><br><span class="line">    //创建数据绑定器</span><br><span class="line">    WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">    if (binder.getTarget() != null) &#123;</span><br><span class="line">        //将request的请求中的参数值，存入attribute对象中</span><br><span class="line">        bindRequestParameters(binder, webRequest);</span><br><span class="line">        //处理@Validated注解</span><br><span class="line">        validateIfApplicable(binder, parameter);</span><br><span class="line">        if (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">            throw new BindException(binder.getBindingResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Add resolved attribute and BindingResult at the end of the model</span><br><span class="line">    //获取绑定后的参数值对象</span><br><span class="line">    Map&lt;String, Object&gt; bindingResultModel = binder.getBindingResult().getModel();</span><br><span class="line">    //清空model</span><br><span class="line">    mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">    //对象加入model中</span><br><span class="line">    mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line">    //对象类型转换为参数所需类型</span><br><span class="line">    return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="五、返回值解析器"><a href="#五、返回值解析器" class="headerlink" title="五、返回值解析器"></a>五、返回值解析器</h3><h4 id="1、接（二、15）RequestMappingHandlerAdapter的getDefaultReturnValueHandlers方法"><a href="#1、接（二、15）RequestMappingHandlerAdapter的getDefaultReturnValueHandlers方法" class="headerlink" title="1、接（二、15）RequestMappingHandlerAdapter的getDefaultReturnValueHandlers方法"></a>1、接（二、15）RequestMappingHandlerAdapter的getDefaultReturnValueHandlers方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;HandlerMethodReturnValueHandler&gt; getDefaultReturnValueHandlers() &#123;</span><br><span class="line">    List&lt;HandlerMethodReturnValueHandler&gt; handlers = new ArrayList&lt;HandlerMethodReturnValueHandler&gt;();</span><br><span class="line"></span><br><span class="line">    // Single-purpose return value types</span><br><span class="line">    //处理ModelAndView类型的返回值</span><br><span class="line">    handlers.add(new ModelAndViewMethodReturnValueHandler());</span><br><span class="line">    //处理Model类型的返回值</span><br><span class="line">    handlers.add(new ModelMethodProcessor());</span><br><span class="line">    //处理View类型的返回值</span><br><span class="line">    handlers.add(new ViewMethodReturnValueHandler());</span><br><span class="line">    //处理HttpEntity类型且不是RequestEntity类型的返回值</span><br><span class="line">    handlers.add(new HttpEntityMethodProcessor(</span><br><span class="line">            getMessageConverters(), this.contentNegotiationManager, this.responseBodyAdvice));</span><br><span class="line">    //处理HttpEntity类型的返回值</span><br><span class="line">    handlers.add(new HttpHeadersReturnValueHandler());</span><br><span class="line">    //处理Callable类型的返回值</span><br><span class="line">    handlers.add(new CallableMethodReturnValueHandler());</span><br><span class="line">    //处理DeferredResult类型的返回值</span><br><span class="line">    handlers.add(new DeferredResultMethodReturnValueHandler());</span><br><span class="line">    //处理WebAsyncTask类型的返回值</span><br><span class="line">    handlers.add(new AsyncTaskMethodReturnValueHandler(this.beanFactory));</span><br><span class="line">    //处理ListenableFuture类型的返回值</span><br><span class="line">    handlers.add(new ListenableFutureReturnValueHandler());</span><br><span class="line"></span><br><span class="line">    // Annotation-based return value types</span><br><span class="line">    //处理注解了@ModelAttribute方法的返回值</span><br><span class="line">    handlers.add(new ModelAttributeMethodProcessor(false));</span><br><span class="line">    //处理注解了@ResponseBody方法或注解了@ResponseBody类的方法的返回值</span><br><span class="line">    handlers.add(new RequestResponseBodyMethodProcessor(</span><br><span class="line">            getMessageConverters(), this.contentNegotiationManager, this.responseBodyAdvice));</span><br><span class="line"></span><br><span class="line">    // Multi-purpose return value types</span><br><span class="line">    //处理void及string类型的返回值</span><br><span class="line">    handlers.add(new ViewNameMethodReturnValueHandler());</span><br><span class="line">    //处理Map类型的返回值</span><br><span class="line">    handlers.add(new MapMethodProcessor());</span><br><span class="line"></span><br><span class="line">    // Custom return value types</span><br><span class="line">    //添加自定义处理器</span><br><span class="line">    if (getCustomReturnValueHandlers() != null) &#123;</span><br><span class="line">        handlers.addAll(getCustomReturnValueHandlers());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Catch-all</span><br><span class="line">    if (!CollectionUtils.isEmpty(getModelAndViewResolvers())) &#123;</span><br><span class="line">        handlers.add(new ModelAndViewResolverMethodReturnValueHandler(getModelAndViewResolvers()));</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        //处理不是以下类型的返回值，如基本数据类型及包装类、枚举类、CharSequence、Number、Date、</span><br><span class="line">        //URI、URL、Locale、Class</span><br><span class="line">        handlers.add(new ModelAttributeMethodProcessor(true));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return handlers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、接（三、22）HandlerMethodReturnValueHandlerComposite的handleReturnValue方法"><a href="#2、接（三、22）HandlerMethodReturnValueHandlerComposite的handleReturnValue方法" class="headerlink" title="2、接（三、22）HandlerMethodReturnValueHandlerComposite的handleReturnValue方法"></a>2、接（三、22）HandlerMethodReturnValueHandlerComposite的handleReturnValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handleReturnValue(Object returnValue, MethodParameter returnType,</span><br><span class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class="line">    //获取处理器</span><br><span class="line">    HandlerMethodReturnValueHandler handler = getReturnValueHandler(returnType);</span><br><span class="line">    Assert.notNull(handler, &quot;Unknown return value type [&quot; + returnType.getParameterType().getName() + &quot;]&quot;);</span><br><span class="line">    //处理返回值</span><br><span class="line">    handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、ModelAttributeMethodProcessor的handleReturnValue方法"><a href="#3、ModelAttributeMethodProcessor的handleReturnValue方法" class="headerlink" title="3、ModelAttributeMethodProcessor的handleReturnValue方法"></a>3、ModelAttributeMethodProcessor的handleReturnValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handleReturnValue(Object returnValue, MethodParameter returnType,</span><br><span class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    if (returnValue != null) &#123;</span><br><span class="line">        //从@ModelAttribute注解中获取参数名，注解中没有则从类中获取</span><br><span class="line">        String name = ModelFactory.getNameForReturnValue(returnValue, returnType);</span><br><span class="line">        //返回值添加到model中</span><br><span class="line">        mavContainer.addAttribute(name, returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、ModelAndViewMethodReturnValueHandler的handleReturnValue方法"><a href="#4、ModelAndViewMethodReturnValueHandler的handleReturnValue方法" class="headerlink" title="4、ModelAndViewMethodReturnValueHandler的handleReturnValue方法"></a>4、ModelAndViewMethodReturnValueHandler的handleReturnValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handleReturnValue(Object returnValue, MethodParameter returnType,</span><br><span class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class="line">    //无返回值，设置处理完成</span><br><span class="line">    if (returnValue == null) &#123;</span><br><span class="line">        mavContainer.setRequestHandled(true);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ModelAndView mav = (ModelAndView) returnValue;</span><br><span class="line">    //view为String,view为视图名</span><br><span class="line">    if (mav.isReference()) &#123;</span><br><span class="line">        String viewName = mav.getViewName();</span><br><span class="line">        //添加返回的视图</span><br><span class="line">        mavContainer.setViewName(viewName);</span><br><span class="line">        //是否是重定向</span><br><span class="line">        if (viewName != null &amp;&amp; isRedirectViewName(viewName)) &#123;</span><br><span class="line">            mavContainer.setRedirectModelScenario(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        View view = mav.getView();</span><br><span class="line">        //添加返回的视图</span><br><span class="line">        mavContainer.setView(view);</span><br><span class="line">        //是否是重定向</span><br><span class="line">        if (view instanceof SmartView) &#123;</span><br><span class="line">            if (((SmartView) view).isRedirectView()) &#123;</span><br><span class="line">                mavContainer.setRedirectModelScenario(true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加返回的model</span><br><span class="line">    mavContainer.addAllAttributes(mav.getModel());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、RequestResponseBodyMethodProcessor的handleReturnValue方法"><a href="#5、RequestResponseBodyMethodProcessor的handleReturnValue方法" class="headerlink" title="5、RequestResponseBodyMethodProcessor的handleReturnValue方法"></a>5、RequestResponseBodyMethodProcessor的handleReturnValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handleReturnValue(Object returnValue, MethodParameter returnType,</span><br><span class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span><br><span class="line">        throws IOException, HttpMediaTypeNotAcceptableException &#123;</span><br><span class="line">    //设置处理完成</span><br><span class="line">    mavContainer.setRequestHandled(true);</span><br><span class="line"></span><br><span class="line">    // Try even with null return value. ResponseBodyAdvice could get involved.</span><br><span class="line">    //调用消息转换器，将返回值写入webRequest</span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、处理异常"><a href="#六、处理异常" class="headerlink" title="六、处理异常"></a>六、处理异常</h3><h4 id="1、接（三、25）DispatcherServlet的processHandlerException方法"><a href="#1、接（三、25）DispatcherServlet的processHandlerException方法" class="headerlink" title="1、接（三、25）DispatcherServlet的processHandlerException方法"></a>1、接（三、25）DispatcherServlet的processHandlerException方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">protected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">        Object handler, Exception ex) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    // Check registered HandlerExceptionResolvers...</span><br><span class="line">    ModelAndView exMv = null;</span><br><span class="line">    //异常处理器为ExceptionHandlerExceptionResolver、ResponseStatusExceptionResolver、DefaultHandlerExceptionResolver</span><br><span class="line">    for (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) &#123;</span><br><span class="line">        //处理异常</span><br><span class="line">        exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);</span><br><span class="line">        if (exMv != null) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (exMv != null) &#123;</span><br><span class="line">        //异常处理返回结果为空</span><br><span class="line">        if (exMv.isEmpty()) &#123;</span><br><span class="line">            //直接将异常信息添加到request中</span><br><span class="line">            request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        // We might still need view name translation for a plain error model...</span><br><span class="line">        //设置默认的view</span><br><span class="line">        if (!exMv.hasView()) &#123;</span><br><span class="line">            exMv.setViewName(getDefaultViewName(request));</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Handler execution resulted in exception - forwarding to resolved error view: &quot; + exMv, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //将异常相关信息添加到request</span><br><span class="line">        WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class="line">        return exMv;</span><br><span class="line">    &#125;</span><br><span class="line">    throw ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、AbstractHandlerExceptionResolver的resolveException方法"><a href="#2、AbstractHandlerExceptionResolver的resolveException方法" class="headerlink" title="2、AbstractHandlerExceptionResolver的resolveException方法"></a>2、AbstractHandlerExceptionResolver的resolveException方法</h4><p>ExceptionHandlerExceptionResolver的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">        Object handler, Exception ex) &#123;</span><br><span class="line">    //处理器是否使用于该handler</span><br><span class="line">    if (shouldApplyTo(request, handler)) &#123;</span><br><span class="line">        // Log exception, both at debug log level and at warn level, if desired.</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Resolving exception from handler [&quot; + handler + &quot;]: &quot; + ex);</span><br><span class="line">        &#125;</span><br><span class="line">        //打印异常信息</span><br><span class="line">        logException(ex, request);</span><br><span class="line">        //处理response缓存</span><br><span class="line">        prepareResponse(ex, response);</span><br><span class="line">        //处理异常</span><br><span class="line">        return doResolveException(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、AbstractHandlerMethodExceptionResolver的doResolveException方法"><a href="#3、AbstractHandlerMethodExceptionResolver的doResolveException方法" class="headerlink" title="3、AbstractHandlerMethodExceptionResolver的doResolveException方法"></a>3、AbstractHandlerMethodExceptionResolver的doResolveException方法</h4><p>ExceptionHandlerExceptionResolver的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected final ModelAndView doResolveException(</span><br><span class="line">        HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">        Object handler, Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">    return doResolveHandlerMethodException(request, response, (HandlerMethod) handler, ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、ExceptionHandlerExceptionResolver的doResolveHandlerMethodException方法"><a href="#4、ExceptionHandlerExceptionResolver的doResolveHandlerMethodException方法" class="headerlink" title="4、ExceptionHandlerExceptionResolver的doResolveHandlerMethodException方法"></a>4、ExceptionHandlerExceptionResolver的doResolveHandlerMethodException方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected ModelAndView doResolveHandlerMethodException(HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response, HandlerMethod handlerMethod, Exception exception) &#123;</span><br><span class="line">    //获取处理异常的方法</span><br><span class="line">    ServletInvocableHandlerMethod exceptionHandlerMethod = getExceptionHandlerMethod(handlerMethod, exception);</span><br><span class="line">    if (exceptionHandlerMethod == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //设置参数解析器</span><br><span class="line">    exceptionHandlerMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);</span><br><span class="line">    //设置返回值解析器</span><br><span class="line">    exceptionHandlerMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);</span><br><span class="line">    //创建请求</span><br><span class="line">    ServletWebRequest webRequest = new ServletWebRequest(request, response);</span><br><span class="line">    //ModelAndView容器</span><br><span class="line">    ModelAndViewContainer mavContainer = new ModelAndViewContainer();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Invoking @ExceptionHandler method: &quot; + exceptionHandlerMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行异常处理方法</span><br><span class="line">        exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception invocationEx) &#123;</span><br><span class="line">        if (logger.isErrorEnabled()) &#123;</span><br><span class="line">            logger.error(&quot;Failed to invoke @ExceptionHandler method: &quot; + exceptionHandlerMethod, invocationEx);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    //已处理完成，返回空ModelAndView</span><br><span class="line">    if (mavContainer.isRequestHandled()) &#123;</span><br><span class="line">        return new ModelAndView();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        ModelAndView mav = new ModelAndView().addAllObjects(mavContainer.getModel());</span><br><span class="line">        mav.setViewName(mavContainer.getViewName());</span><br><span class="line">        if (!mavContainer.isViewReference()) &#123;</span><br><span class="line">            mav.setView((View) mavContainer.getView());</span><br><span class="line">        &#125;</span><br><span class="line">        //返回处理后的ModelAndView</span><br><span class="line">        return mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、ResponseStatusExceptionResolver的doResolveException方法"><a href="#5、ResponseStatusExceptionResolver的doResolveException方法" class="headerlink" title="5、ResponseStatusExceptionResolver的doResolveException方法"></a>5、ResponseStatusExceptionResolver的doResolveException方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">        Object handler, Exception ex) &#123;</span><br><span class="line">    //获取异常类上的@ResponseStatus注解</span><br><span class="line">    ResponseStatus responseStatus = AnnotationUtils.findAnnotation(ex.getClass(), ResponseStatus.class);</span><br><span class="line">    if (responseStatus != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return resolveResponseStatus(responseStatus, request, response, handler, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception resolveEx) &#123;</span><br><span class="line">            logger.warn(&quot;Handling of @ResponseStatus resulted in Exception&quot;, resolveEx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、ResponseStatusExceptionResolver的resolveResponseStatus方法"><a href="#6、ResponseStatusExceptionResolver的resolveResponseStatus方法" class="headerlink" title="6、ResponseStatusExceptionResolver的resolveResponseStatus方法"></a>6、ResponseStatusExceptionResolver的resolveResponseStatus方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">    //获取http状态码</span><br><span class="line">    int statusCode = responseStatus.value().value();</span><br><span class="line">    //获取reason</span><br><span class="line">    String reason = responseStatus.reason();</span><br><span class="line">    if (this.messageSource != null) &#123;</span><br><span class="line">        reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    //信息添加到response中</span><br><span class="line">    if (!StringUtils.hasLength(reason)) &#123;</span><br><span class="line">        response.sendError(statusCode);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        response.sendError(statusCode, reason);</span><br><span class="line">    &#125;</span><br><span class="line">    //返回空ModelAndView</span><br><span class="line">    return new ModelAndView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、DefaultHandlerExceptionResolver的resolveResponseStatus方法"><a href="#7、DefaultHandlerExceptionResolver的resolveResponseStatus方法" class="headerlink" title="7、DefaultHandlerExceptionResolver的resolveResponseStatus方法"></a>7、DefaultHandlerExceptionResolver的resolveResponseStatus方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">        Object handler, Exception ex) &#123;</span><br><span class="line">    //异常信息存入request、response中</span><br><span class="line">    try &#123;</span><br><span class="line">        if (ex instanceof NoSuchRequestHandlingMethodException) &#123;</span><br><span class="line">            return handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, request, response,</span><br><span class="line">                    handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof HttpRequestMethodNotSupportedException) &#123;</span><br><span class="line">            return handleHttpRequestMethodNotSupported((HttpRequestMethodNotSupportedException) ex, request,</span><br><span class="line">                    response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof HttpMediaTypeNotSupportedException) &#123;</span><br><span class="line">            return handleHttpMediaTypeNotSupported((HttpMediaTypeNotSupportedException) ex, request, response,</span><br><span class="line">                    handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof HttpMediaTypeNotAcceptableException) &#123;</span><br><span class="line">            return handleHttpMediaTypeNotAcceptable((HttpMediaTypeNotAcceptableException) ex, request, response,</span><br><span class="line">                    handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof MissingServletRequestParameterException) &#123;</span><br><span class="line">            return handleMissingServletRequestParameter((MissingServletRequestParameterException) ex, request,</span><br><span class="line">                    response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof ServletRequestBindingException) &#123;</span><br><span class="line">            return handleServletRequestBindingException((ServletRequestBindingException) ex, request, response,</span><br><span class="line">                    handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof ConversionNotSupportedException) &#123;</span><br><span class="line">            return handleConversionNotSupported((ConversionNotSupportedException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof TypeMismatchException) &#123;</span><br><span class="line">            return handleTypeMismatch((TypeMismatchException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof HttpMessageNotReadableException) &#123;</span><br><span class="line">            return handleHttpMessageNotReadable((HttpMessageNotReadableException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof HttpMessageNotWritableException) &#123;</span><br><span class="line">            return handleHttpMessageNotWritable((HttpMessageNotWritableException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof MethodArgumentNotValidException) &#123;</span><br><span class="line">            return handleMethodArgumentNotValidException((MethodArgumentNotValidException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof MissingServletRequestPartException) &#123;</span><br><span class="line">            return handleMissingServletRequestPartException((MissingServletRequestPartException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof BindException) &#123;</span><br><span class="line">            return handleBindException((BindException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ex instanceof NoHandlerFoundException) &#123;</span><br><span class="line">            return handleNoHandlerFoundException((NoHandlerFoundException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception handlerException) &#123;</span><br><span class="line">        logger.warn(&quot;Handling of [&quot; + ex.getClass().getName() + &quot;] resulted in Exception&quot;, handlerException);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、视图渲染"><a href="#七、视图渲染" class="headerlink" title="七、视图渲染"></a>七、视图渲染</h3><h4 id="1、接（三、25）DispatcherServlet的render方法"><a href="#1、接（三、25）DispatcherServlet的render方法" class="headerlink" title="1、接（三、25）DispatcherServlet的render方法"></a>1、接（三、25）DispatcherServlet的render方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    // Determine locale for request and apply it to the response.</span><br><span class="line">    //获取locale</span><br><span class="line">    Locale locale = this.localeResolver.resolveLocale(request);</span><br><span class="line">    response.setLocale(locale);</span><br><span class="line"></span><br><span class="line">    View view;</span><br><span class="line">    if (mv.isReference()) &#123;</span><br><span class="line">        // We need to resolve the view name.</span><br><span class="line">        //根据视图名创建视图</span><br><span class="line">        view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br><span class="line">        if (view == null) &#123;</span><br><span class="line">            throw new ServletException(&quot;Could not resolve view with name &apos;&quot; + mv.getViewName() +</span><br><span class="line">                    &quot;&apos; in servlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // No need to lookup: the ModelAndView object contains the actual View object.</span><br><span class="line">        view = mv.getView();</span><br><span class="line">        if (view == null) &#123;</span><br><span class="line">            throw new ServletException(&quot;ModelAndView [&quot; + mv + &quot;] neither contains a view name nor a &quot; +</span><br><span class="line">                    &quot;View object in servlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Delegate to the View object for rendering.</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Rendering view [&quot; + view + &quot;] in DispatcherServlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //渲染视图</span><br><span class="line">        view.render(mv.getModelInternal(), request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex) &#123;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Error rendering view [&quot; + view + &quot;] in DispatcherServlet with name &apos;&quot; +</span><br><span class="line">                    getServletName() + &quot;&apos;&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、DispatcherServlet的render方法"><a href="#2、DispatcherServlet的render方法" class="headerlink" title="2、DispatcherServlet的render方法"></a>2、DispatcherServlet的render方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">protected View resolveViewName(String viewName, Map&lt;String, Object&gt; model, Locale locale,</span><br><span class="line">        HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    //配置的视图解析器InternalResourceViewResolver</span><br><span class="line">    for (ViewResolver viewResolver : this.viewResolvers) &#123;</span><br><span class="line">        //解析视图</span><br><span class="line">        View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">        if (view != null) &#123;</span><br><span class="line">            return view;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、AbstractCachingViewResolver的resolveViewName方法"><a href="#3、AbstractCachingViewResolver的resolveViewName方法" class="headerlink" title="3、AbstractCachingViewResolver的resolveViewName方法"></a>3、AbstractCachingViewResolver的resolveViewName方法</h4><p>InternalResourceViewResolver的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public View resolveViewName(String viewName, Locale locale) throws Exception &#123;</span><br><span class="line">    //没有缓存</span><br><span class="line">    if (!isCache()) &#123;</span><br><span class="line">        //创建视图</span><br><span class="line">        return createView(viewName, locale);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(viewName, locale);</span><br><span class="line">        View view = this.viewAccessCache.get(cacheKey);</span><br><span class="line">        if (view == null) &#123;</span><br><span class="line">            synchronized (this.viewCreationCache) &#123;</span><br><span class="line">                view = this.viewCreationCache.get(cacheKey);</span><br><span class="line">                if (view == null) &#123;</span><br><span class="line">                    // Ask the subclass to create the View object.</span><br><span class="line">                    view = createView(viewName, locale);</span><br><span class="line">                    if (view == null &amp;&amp; this.cacheUnresolved) &#123;</span><br><span class="line">                        view = UNRESOLVED_VIEW;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (view != null) &#123;</span><br><span class="line">                        this.viewAccessCache.put(cacheKey, view);</span><br><span class="line">                        this.viewCreationCache.put(cacheKey, view);</span><br><span class="line">                        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">                            logger.trace(&quot;Cached view [&quot; + cacheKey + &quot;]&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (view != UNRESOLVED_VIEW ? view : null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、UrlBasedViewResolver的createView方法"><a href="#4、UrlBasedViewResolver的createView方法" class="headerlink" title="4、UrlBasedViewResolver的createView方法"></a>4、UrlBasedViewResolver的createView方法</h4><p>InternalResourceViewResolver的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected View createView(String viewName, Locale locale) throws Exception &#123;</span><br><span class="line">    // If this resolver is not supposed to handle the given view,</span><br><span class="line">    // return null to pass on to the next resolver in the chain.</span><br><span class="line">    //是否查找到该视图</span><br><span class="line">    if (!canHandle(viewName, locale)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    // Check for special &quot;redirect:&quot; prefix.</span><br><span class="line">    //请求重定向</span><br><span class="line">    if (viewName.startsWith(REDIRECT_URL_PREFIX)) &#123;</span><br><span class="line">        //获取重定向地址</span><br><span class="line">        String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length());</span><br><span class="line">        //创建重定向视图</span><br><span class="line">        RedirectView view = new RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());</span><br><span class="line">        //使用容器初始化该视图，并返回</span><br><span class="line">        return applyLifecycleMethods(viewName, view);</span><br><span class="line">    &#125;</span><br><span class="line">    // Check for special &quot;forward:&quot; prefix.</span><br><span class="line">    //请求转发</span><br><span class="line">    if (viewName.startsWith(FORWARD_URL_PREFIX)) &#123;</span><br><span class="line">        String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length());</span><br><span class="line">        //创建转发视图</span><br><span class="line">        return new InternalResourceView(forwardUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    // Else fall back to superclass implementation: calling loadView.</span><br><span class="line">    return super.createView(viewName, locale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、AbstractCachingViewResolver的createView方法"><a href="#5、AbstractCachingViewResolver的createView方法" class="headerlink" title="5、AbstractCachingViewResolver的createView方法"></a>5、AbstractCachingViewResolver的createView方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected View createView(String viewName, Locale locale) throws Exception &#123;</span><br><span class="line">    return loadView(viewName, locale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、UrlBasedViewResolver的loadView方法"><a href="#6、UrlBasedViewResolver的loadView方法" class="headerlink" title="6、UrlBasedViewResolver的loadView方法"></a>6、UrlBasedViewResolver的loadView方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected View loadView(String viewName, Locale locale) throws Exception &#123;</span><br><span class="line">    //创建视图</span><br><span class="line">    AbstractUrlBasedView view = buildView(viewName);</span><br><span class="line">    //使用容器初始化视图</span><br><span class="line">    View result = applyLifecycleMethods(viewName, view);</span><br><span class="line">    return (view.checkResource(locale) ? result : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、InternalResourceViewResolver的buildView方法"><a href="#7、InternalResourceViewResolver的buildView方法" class="headerlink" title="7、InternalResourceViewResolver的buildView方法"></a>7、InternalResourceViewResolver的buildView方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected AbstractUrlBasedView buildView(String viewName) throws Exception &#123;</span><br><span class="line">    InternalResourceView view = (InternalResourceView) super.buildView(viewName);</span><br><span class="line">    //该属性为true，则一致以include方式获取资源</span><br><span class="line">    if (this.alwaysInclude != null) &#123;</span><br><span class="line">        view.setAlwaysInclude(this.alwaysInclude);</span><br><span class="line">    &#125;</span><br><span class="line">    //不允许循环转发</span><br><span class="line">    view.setPreventDispatchLoop(true);</span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、UrlBasedViewResolver的buildView方法"><a href="#8、UrlBasedViewResolver的buildView方法" class="headerlink" title="8、UrlBasedViewResolver的buildView方法"></a>8、UrlBasedViewResolver的buildView方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected AbstractUrlBasedView buildView(String viewName) throws Exception &#123;</span><br><span class="line">    //创建InternalResourceView对象</span><br><span class="line">    AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(getViewClass());</span><br><span class="line">    //设置视图的路径</span><br><span class="line">    view.setUrl(getPrefix() + viewName + getSuffix());</span><br><span class="line"></span><br><span class="line">    String contentType = getContentType();</span><br><span class="line">    if (contentType != null) &#123;</span><br><span class="line">        view.setContentType(contentType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    view.setRequestContextAttribute(getRequestContextAttribute());</span><br><span class="line">    view.setAttributesMap(getAttributesMap());</span><br><span class="line"></span><br><span class="line">    Boolean exposePathVariables = getExposePathVariables();</span><br><span class="line">    if (exposePathVariables != null) &#123;</span><br><span class="line">        view.setExposePathVariables(exposePathVariables);</span><br><span class="line">    &#125;</span><br><span class="line">    Boolean exposeContextBeansAsAttributes = getExposeContextBeansAsAttributes();</span><br><span class="line">    if (exposeContextBeansAsAttributes != null) &#123;</span><br><span class="line">        view.setExposeContextBeansAsAttributes(exposeContextBeansAsAttributes);</span><br><span class="line">    &#125;</span><br><span class="line">    String[] exposedContextBeanNames = getExposedContextBeanNames();</span><br><span class="line">    if (exposedContextBeanNames != null) &#123;</span><br><span class="line">        view.setExposedContextBeanNames(exposedContextBeanNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、接（七、1）AbstractView的render方法"><a href="#9、接（七、1）AbstractView的render方法" class="headerlink" title="9、接（七、1）AbstractView的render方法"></a>9、接（七、1）AbstractView的render方法</h4><p>InternalResourceView、RedirectView的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void render(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    if (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(&quot;Rendering view with name &apos;&quot; + this.beanName + &quot;&apos; with model &quot; + model +</span><br><span class="line">            &quot; and static attributes &quot; + this.staticAttributes);</span><br><span class="line">    &#125;</span><br><span class="line">    //合并exposePathVariables、staticAttributes以及model</span><br><span class="line">    Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class="line">    //设置response头,解决IE bug</span><br><span class="line">    prepareResponse(request, response);</span><br><span class="line">    //</span><br><span class="line">    renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、InternalResourceView的renderMergedOutputModel方法"><a href="#10、InternalResourceView的renderMergedOutputModel方法" class="headerlink" title="10、InternalResourceView的renderMergedOutputModel方法"></a>10、InternalResourceView的renderMergedOutputModel方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void renderMergedOutputModel(</span><br><span class="line">        Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    // Expose the model object as request attributes.</span><br><span class="line">    //将model的值添加到request中</span><br><span class="line">    exposeModelAsRequestAttributes(model, request);</span><br><span class="line"></span><br><span class="line">    // Expose helpers as request attributes, if any.</span><br><span class="line">    //空方法待子类实现</span><br><span class="line">    exposeHelpers(request);</span><br><span class="line"></span><br><span class="line">    // Determine the path for the request dispatcher.</span><br><span class="line">    //获取视图的url</span><br><span class="line">    String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line">    // Obtain a RequestDispatcher for the target resource (typically a JSP).</span><br><span class="line">    //获取请求调度器</span><br><span class="line">    RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line">    if (rd == null) &#123;</span><br><span class="line">        throw new ServletException(&quot;Could not get RequestDispatcher for [&quot; + getUrl() +</span><br><span class="line">                &quot;]: Check that the corresponding file exists within your web application archive!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If already included or response already committed, perform include, else forward.</span><br><span class="line">    if (useInclude(request, response)) &#123;</span><br><span class="line">        //设置视图的ContentType默认&quot;text/html;charset=ISO-8859-1&quot;</span><br><span class="line">        response.setContentType(getContentType());</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Including resource [&quot; + getUrl() + &quot;] in InternalResourceView &apos;&quot; + getBeanName() + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取包含资源</span><br><span class="line">        rd.include(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">        // Note: The forwarded resource is supposed to determine the content type itself.</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Forwarding to resource [&quot; + getUrl() + &quot;] in InternalResourceView &apos;&quot; + getBeanName() + &quot;&apos;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //转发请求</span><br><span class="line">        rd.forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11、RedirectView的renderMergedOutputModel方法"><a href="#11、RedirectView的renderMergedOutputModel方法" class="headerlink" title="11、RedirectView的renderMergedOutputModel方法"></a>11、RedirectView的renderMergedOutputModel方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void renderMergedOutputModel(Map&lt;String, Object&gt; model, HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response) throws IOException &#123;</span><br><span class="line">    //获取转发url及参数</span><br><span class="line">    String targetUrl = createTargetUrl(model, request);</span><br><span class="line">    //处理路径中的参数</span><br><span class="line">    targetUrl = updateTargetUrl(targetUrl, model, request, response);</span><br><span class="line">    //获取request中的重定向的参数，即flashAttributes</span><br><span class="line">    FlashMap flashMap = RequestContextUtils.getOutputFlashMap(request);</span><br><span class="line">    if (!CollectionUtils.isEmpty(flashMap)) &#123;</span><br><span class="line">        UriComponents uriComponents = UriComponentsBuilder.fromUriString(targetUrl).build();</span><br><span class="line">        //设置重定向url</span><br><span class="line">        flashMap.setTargetRequestPath(uriComponents.getPath());</span><br><span class="line">        //设置url中的参数</span><br><span class="line">        flashMap.addTargetRequestParams(uriComponents.getQueryParams());</span><br><span class="line">        FlashMapManager flashMapManager = RequestContextUtils.getFlashMapManager(request);</span><br><span class="line">        if (flashMapManager == null) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;FlashMapManager not found despite output FlashMap having been set&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //默认flashMap存入session中</span><br><span class="line">        flashMapManager.saveOutputFlashMap(flashMap, request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    //发送重定向请求</span><br><span class="line">    sendRedirect(request, response, targetUrl, this.http10Compatible);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、异步任务"><a href="#八、异步任务" class="headerlink" title="八、异步任务"></a>八、异步任务</h3><h4 id="1、接（三、20）WebAsyncManager的setAsyncWebRequest方法"><a href="#1、接（三、20）WebAsyncManager的setAsyncWebRequest方法" class="headerlink" title="1、接（三、20）WebAsyncManager的setAsyncWebRequest方法"></a>1、接（三、20）WebAsyncManager的setAsyncWebRequest方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) &#123;</span><br><span class="line">    Assert.notNull(asyncWebRequest, &quot;AsyncWebRequest must not be null&quot;);</span><br><span class="line">    Assert.state(!isConcurrentHandlingStarted(), &quot;Can&apos;t set AsyncWebRequest with concurrent handling in progress&quot;);</span><br><span class="line">    this.asyncWebRequest = asyncWebRequest;</span><br><span class="line">    //请求处理完成回调函数，移除request中WebAsyncManager</span><br><span class="line">    this.asyncWebRequest.addCompletionHandler(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、接（三-、22）CallableMethodReturnValueHandler的handleReturnValue方法"><a href="#2、接（三-、22）CallableMethodReturnValueHandler的handleReturnValue方法" class="headerlink" title="2、接（三 、22）CallableMethodReturnValueHandler的handleReturnValue方法"></a>2、接（三 、22）CallableMethodReturnValueHandler的handleReturnValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handleReturnValue(Object returnValue, MethodParameter returnType,</span><br><span class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    if (returnValue == null) &#123;</span><br><span class="line">        mavContainer.setRequestHandled(true);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Callable&lt;?&gt; callable = (Callable&lt;?&gt;) returnValue;</span><br><span class="line">    //处理异步任务</span><br><span class="line">    WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、WebAsyncManager的startCallableProcessing方法"><a href="#3、WebAsyncManager的startCallableProcessing方法" class="headerlink" title="3、WebAsyncManager的startCallableProcessing方法"></a>3、WebAsyncManager的startCallableProcessing方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span><br><span class="line">public void startCallableProcessing(Callable&lt;?&gt; callable, Object... processingContext) throws Exception &#123;</span><br><span class="line">    Assert.notNull(callable, &quot;Callable must not be null&quot;);</span><br><span class="line">    //处理异步任务</span><br><span class="line">    startCallableProcessing(new WebAsyncTask(callable), processingContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public void startCallableProcessing(final WebAsyncTask&lt;?&gt; webAsyncTask, Object... processingContext) throws Exception &#123;</span><br><span class="line">    Assert.notNull(webAsyncTask, &quot;WebAsyncTask must not be null&quot;);</span><br><span class="line">    Assert.state(this.asyncWebRequest != null, &quot;AsyncWebRequest must not be null&quot;);</span><br><span class="line">    //设置超时时间</span><br><span class="line">    Long timeout = webAsyncTask.getTimeout();</span><br><span class="line">    if (timeout != null) &#123;</span><br><span class="line">        this.asyncWebRequest.setTimeout(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    //获取异步处理线程池</span><br><span class="line">    AsyncTaskExecutor executor = webAsyncTask.getExecutor();</span><br><span class="line">    if (executor != null) &#123;</span><br><span class="line">        this.taskExecutor = executor;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加拦截器</span><br><span class="line">    List&lt;CallableProcessingInterceptor&gt; interceptors = new ArrayList&lt;CallableProcessingInterceptor&gt;();</span><br><span class="line">    interceptors.add(webAsyncTask.getInterceptor());</span><br><span class="line">    interceptors.addAll(this.callableInterceptors.values());</span><br><span class="line">    interceptors.add(timeoutCallableInterceptor);</span><br><span class="line"></span><br><span class="line">    final Callable&lt;?&gt; callable = webAsyncTask.getCallable();</span><br><span class="line">    //创建拦截器链</span><br><span class="line">    final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors);</span><br><span class="line">    //添加超时回调函数</span><br><span class="line">    this.asyncWebRequest.addTimeoutHandler(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            logger.debug(&quot;Processing timeout&quot;);</span><br><span class="line">            Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable);</span><br><span class="line">            if (result != CallableProcessingInterceptor.RESULT_NONE) &#123;</span><br><span class="line">                setConcurrentResultAndDispatch(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //添加请求处理完成回调函数</span><br><span class="line">    this.asyncWebRequest.addCompletionHandler(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            interceptorChain.triggerAfterCompletion(asyncWebRequest, callable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //执行拦截器的beforeConcurrentHandling方法</span><br><span class="line">    interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable);</span><br><span class="line">    //创建AsyncContextImpl，设置开始处理异步任务状态（STARTING）</span><br><span class="line">    startAsyncProcessing(processingContext);</span><br><span class="line"></span><br><span class="line">    this.taskExecutor.submit(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            Object result = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                //执行拦截器preProcess方法</span><br><span class="line">                //如RequestBindingInterceptor，将request的Locale及requestAttributes绑定到当前线程</span><br><span class="line">                interceptorChain.applyPreProcess(asyncWebRequest, callable);</span><br><span class="line">                //执行异步任务</span><br><span class="line">                result = callable.call();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Throwable ex) &#123;</span><br><span class="line">                result = ex;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                //执行拦截器postProcess方法</span><br><span class="line">                //如RequestBindingInterceptor，从当前线程将移除request的Locale及requestAttributes</span><br><span class="line">                result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置处理结果，且转发该请求到本servlet</span><br><span class="line">            setConcurrentResultAndDispatch(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、WebAsyncManager的startCallableProcessing方法"><a href="#4、WebAsyncManager的startCallableProcessing方法" class="headerlink" title="4、WebAsyncManager的startCallableProcessing方法"></a>4、WebAsyncManager的startCallableProcessing方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void startAsyncProcessing(Object[] processingContext) &#123;</span><br><span class="line">    //清除处理结果</span><br><span class="line">    clearConcurrentResult();</span><br><span class="line">    this.concurrentResultContext = processingContext;</span><br><span class="line">    //创建AsyncContextImpl，设置开始处理异步任务状态（STARTING）</span><br><span class="line">    this.asyncWebRequest.startAsync();</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        HttpServletRequest request = this.asyncWebRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">        String requestUri = urlPathHelper.getRequestUri(request);</span><br><span class="line">        logger.debug(&quot;Concurrent handling starting for &quot; + request.getMethod() + &quot; [&quot; + requestUri + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、StandardServletAsyncWebRequest的startAsync方法"><a href="#5、StandardServletAsyncWebRequest的startAsync方法" class="headerlink" title="5、StandardServletAsyncWebRequest的startAsync方法"></a>5、StandardServletAsyncWebRequest的startAsync方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void startAsync() &#123;</span><br><span class="line">    Assert.state(getRequest().isAsyncSupported(),</span><br><span class="line">            &quot;Async support must be enabled on a servlet and for all filters involved &quot; +</span><br><span class="line">            &quot;in async request processing. This is done in Java code using the Servlet API &quot; +</span><br><span class="line">            &quot;or by adding \&quot;&lt;async-supported&gt;true&lt;/async-supported&gt;\&quot; to servlet and &quot; +</span><br><span class="line">            &quot;filter declarations in web.xml.&quot;);</span><br><span class="line">    Assert.state(!isAsyncComplete(), &quot;Async processing has already completed&quot;);</span><br><span class="line"></span><br><span class="line">    if (isAsyncStarted()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建AsyncContextImpl，设置开始处理异步任务状态（STARTING）</span><br><span class="line">    this.asyncContext = getRequest().startAsync(getRequest(), getResponse());</span><br><span class="line">    //将StandardServletAsyncWebRequest自身注册为监听器</span><br><span class="line">    this.asyncContext.addListener(this);</span><br><span class="line">    if (this.timeout != null) &#123;</span><br><span class="line">        this.asyncContext.setTimeout(this.timeout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（八、3）WebAsyncManager的setConcurrentResultAndDispatch方法"><a href="#6、接（八、3）WebAsyncManager的setConcurrentResultAndDispatch方法" class="headerlink" title="6、接（八、3）WebAsyncManager的setConcurrentResultAndDispatch方法"></a>6、接（八、3）WebAsyncManager的setConcurrentResultAndDispatch方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void setConcurrentResultAndDispatch(Object result) &#123;</span><br><span class="line">    synchronized (WebAsyncManager.this) &#123;</span><br><span class="line">        //已处理完成</span><br><span class="line">        if (hasConcurrentResult()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //设置处理结果</span><br><span class="line">        this.concurrentResult = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.asyncWebRequest.isAsyncComplete()) &#123;</span><br><span class="line">        logger.error(&quot;Could not complete async processing due to timeout or network error&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Concurrent result value [&quot; + this.concurrentResult +</span><br><span class="line">                &quot;] - dispatching request to resume processing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //转发该请求到本servlet</span><br><span class="line">    this.asyncWebRequest.dispatch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、接（三、20）ServletInvocableHandlerMethod的wrapConcurrentResult方法"><a href="#7、接（三、20）ServletInvocableHandlerMethod的wrapConcurrentResult方法" class="headerlink" title="7、接（三、20）ServletInvocableHandlerMethod的wrapConcurrentResult方法"></a>7、接（三、20）ServletInvocableHandlerMethod的wrapConcurrentResult方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletInvocableHandlerMethod wrapConcurrentResult(Object result) &#123;</span><br><span class="line">    return new ConcurrentResultHandlerMethod(result, new ConcurrentResultMethodParameter(result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、实例化ConcurrentResultHandlerMethod"><a href="#8、实例化ConcurrentResultHandlerMethod" class="headerlink" title="8、实例化ConcurrentResultHandlerMethod"></a>8、实例化ConcurrentResultHandlerMethod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public ConcurrentResultHandlerMethod(final Object result, ConcurrentResultMethodParameter returnType) &#123;</span><br><span class="line">    //父类构造器</span><br><span class="line">    super(new Callable&lt;Object&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Object call() throws Exception &#123;</span><br><span class="line">            if (result instanceof Exception) &#123;</span><br><span class="line">                throw (Exception) result;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (result instanceof Throwable) &#123;</span><br><span class="line">                throw new NestedServletException(&quot;Async processing failed&quot;, (Throwable) result);</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, CALLABLE_METHOD);</span><br><span class="line">    //设置返回值处理器</span><br><span class="line">    setHandlerMethodReturnValueHandlers(ServletInvocableHandlerMethod.this.returnValueHandlers);</span><br><span class="line">    this.returnType = returnType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public ServletInvocableHandlerMethod(Object handler, Method method) &#123;</span><br><span class="line">    //父类构造器</span><br><span class="line">    super(handler, method);</span><br><span class="line">    //获取method的@ResponseStatus注解</span><br><span class="line">    initResponseStatus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后的invokeAndHandle方法调用的是call()方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;web.xml配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码JdbcTemplate</title>
    <link href="http://yoursite.com/2018/06/27/spring%E6%BA%90%E7%A0%81/spring%E6%BA%90%E7%A0%81JdbcTemplate/"/>
    <id>http://yoursite.com/2018/06/27/spring源码/spring源码JdbcTemplate/</id>
    <published>2018-06-27T13:10:29.023Z</published>
    <updated>2018-07-07T15:09:57.089Z</updated>
    
    <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>spring配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;beans  </span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 1.配置数据源：DriverManagerDataSource --&gt;  </span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;oracle.jdbc.OracleDriver&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;scott&quot;/&gt;  </span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;tiger&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;!--2.配置JdbcTemplate --&gt;  </span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;!-- 3.为dao接口注入jdbcTemplate属性 --&gt;  </span><br><span class="line">    &lt;bean id=&quot;userDao&quot; class=&quot;com.wzj.dao.impl.UserDaoImpl&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;/&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 业务层 、Struts2、事务等同往常一样配置--&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao&#123;  </span><br><span class="line">    //定义JdbcTemplate属性  </span><br><span class="line">    private JdbcTemplate jdbcTemplate;  </span><br><span class="line">    //省略get、set方法  </span><br><span class="line">    @Override  </span><br><span class="line">    public User selectUserByName(String name) &#123;  </span><br><span class="line">        //定义RowMapper的对象，可以将数据中的每一行数据封装成用户定义的类.  </span><br><span class="line">        //RowMapper是接口，这里创建了一个匿名类并实现了其中的方法  </span><br><span class="line">        RowMapper&lt;User&gt; row=new RowMapper&lt;User&gt;() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public User mapRow(ResultSet rs, int arg1) throws SQLException &#123;  </span><br><span class="line">                User user=new User();  </span><br><span class="line">                user.setUserId(Integer.parseInt(rs.getString(&quot;USERID&quot;)));  </span><br><span class="line">                user.setName(rs.getString(&quot;USERNAME&quot;));  </span><br><span class="line">                user.setPassword(rs.getString(&quot;USERPWD&quot;));  </span><br><span class="line">                return user;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;   </span><br><span class="line">        String sql=&quot;select * from myuser1 where username=?&quot;;  </span><br><span class="line">        //执行查询  </span><br><span class="line">        User user=jdbcTemplate.queryForObject(sql, new Object[]&#123;name&#125;, row);  </span><br><span class="line">        return user;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int insert(User user) &#123;  </span><br><span class="line">        String sql=&quot;insert into myuser1 values(user_sequence.nextVal,?,?)&quot;;  </span><br><span class="line">        //执行插入  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;user.getName(),user.getPassword()&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int delete(int userId) &#123;  </span><br><span class="line">        String sql=&quot;delete from myuser1 where userid=?&quot;;  </span><br><span class="line">        //执行修改  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;userId&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int update(User user) &#123;  </span><br><span class="line">        String sql=&quot;update myuser1 set username=?,userpwd=? where userid=?&quot;;  </span><br><span class="line">        //执行删除  </span><br><span class="line">        int result=jdbcTemplate.update(sql, new Object[]&#123;user.getName(),user.getPassword(),user.getUserId()&#125;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一、select执行过程"><a href="#一、select执行过程" class="headerlink" title="一、select执行过程"></a>一、select执行过程</h3><h4 id="1、JdbcTemplate的queryForObject方法"><a href="#1、JdbcTemplate的queryForObject方法" class="headerlink" title="1、JdbcTemplate的queryForObject方法"></a>1、JdbcTemplate的queryForObject方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T queryForObject(String sql, Object[] args, RowMapper&lt;T&gt; rowMapper) throws DataAccessException &#123;</span><br><span class="line">    List&lt;T&gt; results = query(sql, args, new RowMapperResultSetExtractor&lt;T&gt;(rowMapper, 1));</span><br><span class="line">    //返回第一对象</span><br><span class="line">    return DataAccessUtils.requiredSingleResult(results);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T query(String sql, Object[] args, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line">    return query(sql, newArgPreparedStatementSetter(args), rse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、JdbcTemplate的query方法"><a href="#2、JdbcTemplate的query方法" class="headerlink" title="2、JdbcTemplate的query方法"></a>2、JdbcTemplate的query方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T query(String sql, PreparedStatementSetter pss, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line">    return query(new SimplePreparedStatementCreator(sql), pss, rse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T query(</span><br><span class="line">        PreparedStatementCreator psc, final PreparedStatementSetter pss, final ResultSetExtractor&lt;T&gt; rse)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(rse, &quot;ResultSetExtractor must not be null&quot;);</span><br><span class="line">    logger.debug(&quot;Executing prepared SQL query&quot;);</span><br><span class="line"></span><br><span class="line">    return execute(psc, new PreparedStatementCallback&lt;T&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public T doInPreparedStatement(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">            ResultSet rs = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (pss != null) &#123;</span><br><span class="line">                    //设置参数</span><br><span class="line">                    pss.setValues(ps);</span><br><span class="line">                &#125;</span><br><span class="line">                //执行sql</span><br><span class="line">                rs = ps.executeQuery();</span><br><span class="line">                ResultSet rsToUse = rs;</span><br><span class="line">                //转换器，对数据库clob、 blob数据型进行操作</span><br><span class="line">                if (nativeJdbcExtractor != null) &#123;</span><br><span class="line">                    rsToUse = nativeJdbcExtractor.getNativeResultSet(rs);</span><br><span class="line">                &#125;</span><br><span class="line">                //解析结果集</span><br><span class="line">                return rse.extractData(rsToUse);</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                JdbcUtils.closeResultSet(rs);</span><br><span class="line">                if (pss instanceof ParameterDisposer) &#123;</span><br><span class="line">                    ((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、JdbcTemplate的execute方法"><a href="#3、JdbcTemplate的execute方法" class="headerlink" title="3、JdbcTemplate的execute方法"></a>3、JdbcTemplate的execute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T execute(PreparedStatementCreator psc, PreparedStatementCallback&lt;T&gt; action)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(psc, &quot;PreparedStatementCreator must not be null&quot;);</span><br><span class="line">    Assert.notNull(action, &quot;Callback object must not be null&quot;);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        logger.debug(&quot;Executing prepared SQL statement&quot; + (sql != null ? &quot; [&quot; + sql + &quot;]&quot; : &quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = DataSourceUtils.getConnection(getDataSource());</span><br><span class="line">    PreparedStatement ps = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Connection conToUse = con;</span><br><span class="line">        if (this.nativeJdbcExtractor != null &amp;&amp;</span><br><span class="line">                this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativePreparedStatements()) &#123;</span><br><span class="line">            //获取原始的JDBC连接</span><br><span class="line">            conToUse = this.nativeJdbcExtractor.getNativeConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建一个PreparedStatement</span><br><span class="line">        ps = psc.createPreparedStatement(conToUse);</span><br><span class="line">        //设置默认查询边界及超时时间</span><br><span class="line">        applyStatementSettings(ps);</span><br><span class="line">        PreparedStatement psToUse = ps;</span><br><span class="line">        if (this.nativeJdbcExtractor != null) &#123;</span><br><span class="line">            //获取原始的JDBC的PreparedStatement</span><br><span class="line">            psToUse = this.nativeJdbcExtractor.getNativePreparedStatement(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行sql</span><br><span class="line">        T result = action.doInPreparedStatement(psToUse);</span><br><span class="line">        //处理警告,如数据截断异常</span><br><span class="line">        handleWarnings(ps);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        // Release Connection early, to avoid potential connection pool deadlock</span><br><span class="line">        // in the case when the exception translator hasn&apos;t been initialized yet.</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        psc = null;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        ps = null;</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">        con = null;</span><br><span class="line">        throw getExceptionTranslator().translate(&quot;PreparedStatementCallback&quot;, sql, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DataSourceUtils的getConnection方法"><a href="#4、DataSourceUtils的getConnection方法" class="headerlink" title="4、DataSourceUtils的getConnection方法"></a>4、DataSourceUtils的getConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //获取连接</span><br><span class="line">        return doGetConnection(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        throw new CannotGetJdbcConnectionException(&quot;Could not get JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、DataSourceUtils的doGetConnection方法"><a href="#5、DataSourceUtils的doGetConnection方法" class="headerlink" title="5、DataSourceUtils的doGetConnection方法"></a>5、DataSourceUtils的doGetConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public static Connection doGetConnection(DataSource dataSource) throws SQLException &#123;</span><br><span class="line">    Assert.notNull(dataSource, &quot;No DataSource specified&quot;);</span><br><span class="line">    //获取本线程Connection容器</span><br><span class="line">    ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">    //本线程是否激活事务</span><br><span class="line">    if (conHolder != null &amp;&amp; (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) &#123;</span><br><span class="line">        //当前获取次数加一</span><br><span class="line">        conHolder.requested();</span><br><span class="line">        //没有连接获取新连接</span><br><span class="line">        if (!conHolder.hasConnection()) &#123;</span><br><span class="line">            logger.debug(&quot;Fetching resumed JDBC Connection from DataSource&quot;);</span><br><span class="line">            conHolder.setConnection(dataSource.getConnection());</span><br><span class="line">        &#125;</span><br><span class="line">        //获取容器中的连接，同一事务中使用同一个连接</span><br><span class="line">        return conHolder.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    // Else we either got no holder or an empty thread-bound holder here.</span><br><span class="line"></span><br><span class="line">    logger.debug(&quot;Fetching JDBC Connection from DataSource&quot;);</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = dataSource.getConnection();</span><br><span class="line">    //事务已开启</span><br><span class="line">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">        logger.debug(&quot;Registering transaction synchronization for JDBC Connection&quot;);</span><br><span class="line">        // Use same Connection for further JDBC actions within the transaction.</span><br><span class="line">        // Thread-bound object will get removed by synchronization at transaction completion.</span><br><span class="line">        ConnectionHolder holderToUse = conHolder;</span><br><span class="line">        if (holderToUse == null) &#123;</span><br><span class="line">            holderToUse = new ConnectionHolder(con);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            holderToUse.setConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        holderToUse.requested();</span><br><span class="line">        //添加回调函数释放资源</span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(</span><br><span class="line">                new ConnectionSynchronization(holderToUse, dataSource));</span><br><span class="line">        //设置该连接已被事务获取</span><br><span class="line">        holderToUse.setSynchronizedWithTransaction(true);</span><br><span class="line">        //新增的连接容器</span><br><span class="line">        if (holderToUse != conHolder) &#123;</span><br><span class="line">            //连接容器加入本线程变量</span><br><span class="line">            TransactionSynchronizationManager.bindResource(dataSource, holderToUse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return con;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、3）DataSourceUtils的releaseConnection方法"><a href="#6、接（一、3）DataSourceUtils的releaseConnection方法" class="headerlink" title="6、接（一、3）DataSourceUtils的releaseConnection方法"></a>6、接（一、3）DataSourceUtils的releaseConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void releaseConnection(Connection con, DataSource dataSource) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //关闭连接</span><br><span class="line">        doReleaseConnection(con, dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        logger.debug(&quot;Could not close JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        logger.debug(&quot;Unexpected exception on closing JDBC Connection&quot;, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、DataSourceUtils的doReleaseConnection方法"><a href="#7、DataSourceUtils的doReleaseConnection方法" class="headerlink" title="7、DataSourceUtils的doReleaseConnection方法"></a>7、DataSourceUtils的doReleaseConnection方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException &#123;</span><br><span class="line">    if (con == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (dataSource != null) &#123;</span><br><span class="line">        //当前线程存在事务，该线程目前要用同一个连接，释放则获取次数减一</span><br><span class="line">        ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">        if (conHolder != null &amp;&amp; connectionEquals(conHolder, con)) &#123;</span><br><span class="line">            // It&apos;s the transactional Connection: Don&apos;t close it.</span><br><span class="line">            conHolder.released();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(&quot;Returning JDBC Connection to DataSource&quot;);</span><br><span class="line">    //关闭连接</span><br><span class="line">    doCloseConnection(con, dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、接（一、2）ArgumentPreparedStatementSetter的setValues方法"><a href="#6、接（一、2）ArgumentPreparedStatementSetter的setValues方法" class="headerlink" title="6、接（一、2）ArgumentPreparedStatementSetter的setValues方法"></a>6、接（一、2）ArgumentPreparedStatementSetter的setValues方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void setValues(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">    if (this.args != null) &#123;</span><br><span class="line">        for (int i = 0; i &lt; this.args.length; i++) &#123;</span><br><span class="line">            Object arg = this.args[i];</span><br><span class="line">            //设置参数</span><br><span class="line">            doSetValue(ps, i + 1, arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、ArgumentPreparedStatementSetter的doSetValue方法"><a href="#7、ArgumentPreparedStatementSetter的doSetValue方法" class="headerlink" title="7、ArgumentPreparedStatementSetter的doSetValue方法"></a>7、ArgumentPreparedStatementSetter的doSetValue方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException &#123;</span><br><span class="line">    //设置参数</span><br><span class="line">    if (argValue instanceof SqlParameterValue) &#123;</span><br><span class="line">        SqlParameterValue paramValue = (SqlParameterValue) argValue;</span><br><span class="line">        StatementCreatorUtils.setParameterValue(ps, parameterPosition, paramValue, paramValue.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        StatementCreatorUtils.setParameterValue(ps, parameterPosition, SqlTypeValue.TYPE_UNKNOWN, argValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、接（一、2）RowMapperResultSetExtractor的extractData方法"><a href="#8、接（一、2）RowMapperResultSetExtractor的extractData方法" class="headerlink" title="8、接（一、2）RowMapperResultSetExtractor的extractData方法"></a>8、接（一、2）RowMapperResultSetExtractor的extractData方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;T&gt; extractData(ResultSet rs) throws SQLException &#123;</span><br><span class="line">    List&lt;T&gt; results = (this.rowsExpected &gt; 0 ? new ArrayList&lt;T&gt;(this.rowsExpected) : new ArrayList&lt;T&gt;());</span><br><span class="line">    int rowNum = 0;</span><br><span class="line">    while (rs.next()) &#123;</span><br><span class="line">        //解析结果</span><br><span class="line">        results.add(this.rowMapper.mapRow(rs, rowNum++));</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、RowMapper的mapRow方法"><a href="#9、RowMapper的mapRow方法" class="headerlink" title="9、RowMapper的mapRow方法"></a>9、RowMapper的mapRow方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">public User mapRow(ResultSet rs, int arg1) throws SQLException &#123;  </span><br><span class="line">    User user=new User();  </span><br><span class="line">    user.setUserId(Integer.parseInt(rs.getString(&quot;USERID&quot;)));  </span><br><span class="line">    user.setName(rs.getString(&quot;USERNAME&quot;));  </span><br><span class="line">    user.setPassword(rs.getString(&quot;USERPWD&quot;));  </span><br><span class="line">    return user;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、update执行过程"><a href="#二、update执行过程" class="headerlink" title="二、update执行过程"></a>二、update执行过程</h3><h4 id="1、JdbcTemplate的update方法"><a href="#1、JdbcTemplate的update方法" class="headerlink" title="1、JdbcTemplate的update方法"></a>1、JdbcTemplate的update方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int update(String sql, Object... args) throws DataAccessException &#123;</span><br><span class="line">    return update(sql, newArgPreparedStatementSetter(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int update(String sql, PreparedStatementSetter pss) throws DataAccessException &#123;</span><br><span class="line">    return update(new SimplePreparedStatementCreator(sql), pss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected int update(final PreparedStatementCreator psc, final PreparedStatementSetter pss)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    logger.debug(&quot;Executing prepared SQL update&quot;);</span><br><span class="line">    return execute(psc, new PreparedStatementCallback&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (pss != null) &#123;</span><br><span class="line">                    //设置参数</span><br><span class="line">                    pss.setValues(ps);</span><br><span class="line">                &#125;</span><br><span class="line">                //执行sql</span><br><span class="line">                int rows = ps.executeUpdate();</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;SQL update affected &quot; + rows + &quot; rows&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return rows;</span><br><span class="line">            &#125;</span><br><span class="line">            finally &#123;</span><br><span class="line">                if (pss instanceof ParameterDisposer) &#123;</span><br><span class="line">                    ((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、JdbcTemplate的execute方法"><a href="#2、JdbcTemplate的execute方法" class="headerlink" title="2、JdbcTemplate的execute方法"></a>2、JdbcTemplate的execute方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T execute(PreparedStatementCreator psc, PreparedStatementCallback&lt;T&gt; action)</span><br><span class="line">        throws DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(psc, &quot;PreparedStatementCreator must not be null&quot;);</span><br><span class="line">    Assert.notNull(action, &quot;Callback object must not be null&quot;);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        logger.debug(&quot;Executing prepared SQL statement&quot; + (sql != null ? &quot; [&quot; + sql + &quot;]&quot; : &quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //获取连接</span><br><span class="line">    Connection con = DataSourceUtils.getConnection(getDataSource());</span><br><span class="line">    PreparedStatement ps = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Connection conToUse = con;</span><br><span class="line">        if (this.nativeJdbcExtractor != null &amp;&amp;</span><br><span class="line">                this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativePreparedStatements()) &#123;</span><br><span class="line">            conToUse = this.nativeJdbcExtractor.getNativeConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">        //创建PreparedStatement</span><br><span class="line">        ps = psc.createPreparedStatement(conToUse);</span><br><span class="line">        applyStatementSettings(ps);</span><br><span class="line">        PreparedStatement psToUse = ps;</span><br><span class="line">        if (this.nativeJdbcExtractor != null) &#123;</span><br><span class="line">            psToUse = this.nativeJdbcExtractor.getNativePreparedStatement(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        //执行sql</span><br><span class="line">        T result = action.doInPreparedStatement(psToUse);</span><br><span class="line">        handleWarnings(ps);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (SQLException ex) &#123;</span><br><span class="line">        // Release Connection early, to avoid potential connection pool deadlock</span><br><span class="line">        // in the case when the exception translator hasn&apos;t been initialized yet.</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = getSql(psc);</span><br><span class="line">        psc = null;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        ps = null;</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">        con = null;</span><br><span class="line">        throw getExceptionTranslator().translate(&quot;PreparedStatementCallback&quot;, sql, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        if (psc instanceof ParameterDisposer) &#123;</span><br><span class="line">            ((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.closeStatement(ps);</span><br><span class="line">        DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h4&gt;&lt;p&gt;spring配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
  </entry>
  
</feed>
